#! /usr/bin/env bash
# Patch: -common_pxa_mmc_fix
# Date: Fri Dec  7 11:50:29 2007
# Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
# MR: 22805
# Type: Defect Fix
# Disposition: needs submitting to community
# Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
# Description:
#     The part of MMC code is behind #ifdef CONFIG_FB and
#     MCC cannot be compiled without frame buffer. It 
#     is a common error for all PXA boards.
# 

PATCHNUM=1417
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
MR: 22805
Type: Defect Fix
Disposition: needs submitting to community
Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
Description:
    The part of MMC code is behind #ifdef CONFIG_FB and
    MCC cannot be compiled without frame buffer. It 
    is a common error for all PXA boards.

Index: linux-2.6.10/arch/arm/mach-pxa/zylonite.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/zylonite.c
+++ linux-2.6.10/arch/arm/mach-pxa/zylonite.c
@@ -192,67 +192,6 @@ static struct pxafb_mach_info sharp_ls03
 };
 #endif
 
-#define MMC1_CD0		(GPIO_EXT_TO_IRQ(128))
-#define MMC1_CD1		(GPIO_EXT_TO_IRQ(129))
-
-static int zylonite_mci_init(struct device *dev, irqreturn_t (*zylonite_detect_int)(int, void *, struct pt_regs *), void *data)
-{
-	int err;
-	struct platform_device *pdev = to_platform_device(dev);
-
-	/*
-	 * setup GPIO for Zylonite MMC controller
-	 */
-	if (pdev->id == 0) {
-		printk("init\n");
-		enable_mmc1_pins();
-		mhn_mfp_set_afds(MFP_MMC_CMD_0, MFP_AF4, MFP_DS03X);
-		/* set direction of CD/WP to IN */
-		mhn_gpio_set_direction(MFP_MMC_CD_0_GPIO, GPIO_DIR_IN);
-		mhn_gpio_set_direction(MFP_MMC_WP_0_N_GPIO, GPIO_DIR_IN);
-
-		/* CD is configured to Falling/Rising Edge detect */
-		mhn_gpio_set_falling_edge_detect(MFP_MMC_CD_0_GPIO, 1);
-		mhn_gpio_set_rising_edge_detect (MFP_MMC_CD_0_GPIO, 1);
-
-		err = request_irq(MMC1_CD0, zylonite_detect_int, 0,
-			     "MMC card detect", data);
-		if (err) {
-			printk(KERN_ERR "zylonite_mci_init: MMC/SD: can't request MMC card detect IRQ\n");
-			return -1;
-		}
-		set_irq_type(MMC1_CD0, IRQT_BOTHEDGE);
-	}
-	else if (pdev->id == 1) {
-		enable_mmc2_pins();
-		mhn_gpio_set_direction(MFP_MMC2_CMD, GPIO_DIR_OUT);
-		mhn_gpio_set_level(MFP_MMC2_CMD, GPIO_LEVEL_HIGH);
-	}
-
-	return 0;
-}
-
-static void zylonite_mci_setpower(struct device *dev, unsigned int vdd)
-{
-}
-
-static void zylonite_mci_exit(struct device *dev, void *data)
-{
-	struct platform_device *pdev = to_platform_device(dev);
-
-	if (pdev->id == 0)
-		free_irq(MMC1_CD0, data);
-}
-
-static struct pxamci_platform_data zylonite_mci_platform_data = {
-	.detect_delay	= 20,
-	.ocr_mask	= MMC_VDD_32_33|MMC_VDD_33_34,
-	.init 		= zylonite_mci_init,
-	.setpower 	= zylonite_mci_setpower,
-	.exit		= zylonite_mci_exit,
-};
-
-
 /*
  * lcd_id - readed from the LCD panel, the newly designed LCD panels
  * will have a specific ID. The old panel ID is zero. This variable
@@ -838,6 +777,67 @@ void zylonite_enable_mmc2_pins(void)
 			ARRAY_SIZE(zylonite_mmc2_pins));
 }
 
+#ifdef CONFIG_MMC
+
+#define MMC1_CD0		(GPIO_EXT_TO_IRQ(128))
+#define MMC1_CD1		(GPIO_EXT_TO_IRQ(129))
+
+static int zylonite_mci_init(struct device *dev, irqreturn_t (*zylonite_detect_int)(int, void *, struct pt_regs *), void *data)
+{
+	int err;
+	struct platform_device *pdev = to_platform_device(dev);
+
+	/*
+	 * setup GPIO for Zylonite MMC controller
+	 */
+	if (pdev->id == 0) {
+		zylonite_enable_mmc1_pins();
+		mhn_mfp_set_afds(MFP_MMC_CMD_0, MFP_AF4, MFP_DS03X);
+		/* set direction of CD/WP to IN */
+		mhn_gpio_set_direction(MFP_MMC_CD_0_GPIO, GPIO_DIR_IN);
+		mhn_gpio_set_direction(MFP_MMC_WP_0_N_GPIO, GPIO_DIR_IN);
+
+		/* CD is configured to Falling/Rising Edge detect */
+		mhn_gpio_set_falling_edge_detect(MFP_MMC_CD_0_GPIO, 1);
+		mhn_gpio_set_rising_edge_detect (MFP_MMC_CD_0_GPIO, 1);
+
+		err = request_irq(MMC1_CD0, zylonite_detect_int, 0,
+			     "MMC card detect", data);
+		if (err) {
+			printk(KERN_ERR "zylonite_mci_init: MMC/SD: can't request MMC card detect IRQ\n");
+			return -1;
+		}
+		set_irq_type(MMC1_CD0, IRQT_BOTHEDGE);
+	}
+	else if (pdev->id == 1) {
+		zylonite_enable_mmc2_pins();
+		mhn_gpio_set_direction(MFP_MMC2_CMD, GPIO_DIR_OUT);
+		mhn_gpio_set_level(MFP_MMC2_CMD, GPIO_LEVEL_HIGH);
+	}
+
+	return 0;
+}
+
+static void zylonite_mci_setpower(struct device *dev, unsigned int vdd)
+{
+}
+
+static void zylonite_mci_exit(struct device *dev, void *data)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	if (pdev->id == 0)
+		free_irq(MMC1_CD0, data);
+}
+
+static struct pxamci_platform_data zylonite_mci_platform_data = {
+	.detect_delay	= 20,
+	.ocr_mask	= MMC_VDD_32_33|MMC_VDD_33_34,
+	.init 		= zylonite_mci_init,
+	.setpower 	= zylonite_mci_setpower,
+	.exit		= zylonite_mci_exit,
+};
+#endif
 
 static struct mhn_pin_config zylonite_ssp2_pins[] = {
 	MHN_MFP_CFG("SSP2 SCLK", MFP_SSP_2_CLK, MFP_SSP_2_CLK_AF,
Index: linux-2.6.10/mvl_patches/pro-1417.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1417.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1417);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

