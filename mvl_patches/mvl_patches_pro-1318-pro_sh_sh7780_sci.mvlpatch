#! /usr/bin/env bash
# Patch: -pro_sh_sh7780_sci
# Date: Fri May  4 10:07:07 2007
# Source: MontaVista Software, Inc.
# MR: 20424
# Type: Integration
# Disposition: merged from customer's code
# Signed-off-by: dmitry pervushin <dpervushin@ru.mvista.com>
# Description:
# 	Add support of SH7780 processor type to serial driver
# 

PATCHNUM=1318
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 20424
Type: Integration
Disposition: merged from customer's code
Signed-off-by: dmitry pervushin <dpervushin@ru.mvista.com>
Description:
	Add support of SH7780 processor type to serial driver

Index: linux-2.6.10/drivers/serial/sh-sci.c
===================================================================
--- linux-2.6.10.orig/drivers/serial/sh-sci.c
+++ linux-2.6.10/drivers/serial/sh-sci.c
@@ -12,6 +12,7 @@
  *   Modified to support multiple serial ports. Stuart Menefy (May 2000).
  *   Modified to support SecureEdge. David McCullough (2002)
  *   Modified to support SH7300 SCIF. Takashi Kusuda (Jun 2003).
+ *   Modified to support SH7705/SH7706/SH7710/SH7720/SH7727 SCIF. Takashi Kusuda (Sep 2004).
  *
  * This file is subject to the terms and conditions of the GNU General Public
  * License.  See the file "COPYING" in the main directory of this archive
@@ -395,7 +396,7 @@ static void sci_init_pins_sci(struct uar
 
 #if defined(SCIF_ONLY) || defined(SCI_AND_SCIF)
 #if defined(CONFIG_CPU_SH3)
-/* For SH7705, SH7707, SH7709, SH7709A, SH7729, SH7300*/
+/* For SH7300, SH7705, SH7706, SH7707, SH7709, SH7709A(S), SH7710, SH7720, SH7727, SH7729 */
 static void sci_init_pins_scif(struct uart_port *port, unsigned int cflag)
 {
 	unsigned int fcr_val = 0;
@@ -403,25 +404,125 @@ static void sci_init_pins_scif(struct ua
 	{
 		unsigned short data;
 
-		/* We need to set SCPCR to enable RTS/CTS */
+		if (cflag & CRTSCTS) {
+	                /* We need to set SCPCR to enable RTS/CTS */
+#if defined(CONFIG_CPU_SUBTYPE_SH7705) || defined(CONFIG_CPU_SUBTYPE_SH7706)
+			/* Clear out SCP7MD1,0, SCP6MD1,0, SCP4MD1,0*/
+			data = ctrl_inw(SCPCR);
+			ctrl_outw((data&0xf0cf), SCPCR);
+#elif defined(CONFIG_CPU_SUBTYPE_SH7710)
+			if(port->mapbase == 0xa4400000) { /* SCIF0 */
+				/* Clear out PTA1MD[1:0], PTA0MD[1:0] */
+					data = ctrl_inw(PORT_PACR);
+					ctrl_outw((data&0xfff0), PORT_PACR);
+
+					/* Clear out PTB7MD[1:0], PTB6MD[1:0] */
+					data = ctrl_inw(PORT_PBCR);
+					ctrl_outw((data&0x0fff), PORT_PBCR);
+			} else if(port->mapbase == 0xa4410000){ /* SCIF1 */
+				/* Clear out PTB4MD[1:0], PTB3MD[1:0], PTB2MD[1:0], PTB1MD[1:0] */
+				data = ctrl_inw(PORT_PBCR);
+				ctrl_outw((data&0xfc03), PORT_PBCR);
+			}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7720)
+			if(port->mapbase == 0xa4430000) { /* SCIF0 */
+				/* Clear out PTT4MD[1:0], PTT3MD[1:0], PTT2MD[1:0], PTT1MD[1:0] */
+				data = ctrl_inw(PORT_PTCR);
+				ctrl_outw((data&0xfc03), PORT_PTCR);
+			} else if(port->mapbase == 0xa4438000){ /* SCIF1 */
+				/* SCIF1 is multiplexed other function. Select SCIF1 */
+				data = ctrl_inw(PORT_PSELB);
+				ctrl_outw((data&0xc3ff), PORT_PSELB); /* RTS1/CTS1 */
+				data = ctrl_inw(PORT_PSELC);
+				ctrl_outw((data&0xf0ff), PORT_PSELC); /* RxD1/TxD1 */
+				/* Clear out PTV4MD[1:0], PTV3MD[1:0], PTV2MD[1:0], PTV1MD[1:0] */
+				data = ctrl_inw(PORT_PVCR);
+				ctrl_outw((data&0xfc03), PORT_PVCR);
+			}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7727)
+			/* Clear out SCP7MD[1:0], SCP4MD[1:0] */
+			data = ctrl_inw(SCPCR);
+			ctrl_outw(data&0x3cff, SCPCR);
+#else
+			/* Clear out SCP7MD[1:0], SCP6MD[1:0], SCP4MD[1:0] */
+			data = ctrl_inw(SCPCR);
+			ctrl_outw(data&0x0cff, SCPCR);
+#endif
+			fcr_val |= SCFCR_MCE;
+		} else {
+#if defined(CONFIG_CPU_SUBTYPE_SH7705) || defined(CONFIG_CPU_SUBTYPE_SH7706)
+		/* Clear out SCP2MD[1:0], Set SCP4MD[1:0]={01}(output) */
 		data = ctrl_inw(SCPCR);
-		/* Clear out SCP7MD1,0, SCP6MD1,0, SCP4MD1,0*/
-		ctrl_outw(data&0x0fcf, SCPCR);
-	}
-	if (cflag & CRTSCTS)
-		fcr_val |= SCFCR_MCE;
-	else {
-		unsigned short data;
-
-		/* We need to set SCPCR to enable RTS/CTS */
+		ctrl_outw(((data&0xfccf)|0x0100), SCPCR);
+#elif defined(CONFIG_CPU_SUBTYPE_SH7710)
+		if(port->mapbase == 0xa4400000) { /* SCIF0 */
+			/* Clear out PTA1MD[1:0], PTA0MD[1:0] */
+			data = ctrl_inw(PORT_PACR);
+			ctrl_outw((data&0xfff0), PORT_PACR);
+
+			/* Set PTB7MD[1:0]={01}(output) */
+			data = ctrl_inw(PORT_PBCR);
+			ctrl_outw(((data&0x3fff)|0x4000), PORT_PBCR);
+		} else if(port->mapbase == 0xa4410000){ /* SCIF1 */
+			/* Clear out PTB4MD[1:0], PTB3MD[1:0],
+			Set PTB2MD[1:0]={01}(output) */
+			data = ctrl_inw(PORT_PBCR);
+			ctrl_outw(((data&0xfc0f)|0x0010), PORT_PBCR);
+		}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7720)
+		if(port->mapbase == 0xa4430000) { /* SCIF0 */
+		/* Clear out PTT2MD[1:0], PTT1MD[1:0], Set PTT3MD[1:0]={01}(output) */
+			data = ctrl_inw(PORT_PTCR);
+			ctrl_outw(((data&0xff03)|0x0040), PORT_PTCR);
+		} else if(port->mapbase == 0xa4438000){ /* SCIF1 */
+			/* SCIF1 is multiplexed other function. Select SCIF1 */
+			data = ctrl_inw(PORT_PSELB);
+			ctrl_outw((data&0xcfff), PORT_PSELB); /* RTS1 */
+			data = ctrl_inw(PORT_PSELC);
+			ctrl_outw((data&0xf0ff), PORT_PSELC); /* RxD1/TxD1 */
+
+			/* Clear out PTV2MD[1:0], PTV1MD[1:0], Set PTV3MD[1:0]={01}(output) */
+			data = ctrl_inw(PORT_PVCR);
+			ctrl_outw(((data&0xff03)|0x0040), PORT_PVCR);
+		}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7727)
+		/* Clear out SCP4MD[1:0] */
 		data = ctrl_inw(SCPCR);
-		/* Clear out SCP7MD1,0, SCP4MD1,0,
-		   Set SCP6MD1,0 = {01} (output)  */
-		ctrl_outw((data&0x0fcf)|0x1000, SCPCR);
-
+		ctrl_outw(data&0xfcff, SCPCR);
+#else
+		/* Clear out SCP4MD[1:0], Set SCP6MD[1:0]={01}(output)  */
+		data = ctrl_inw(SCPCR);
+		ctrl_outw((data&0xccff)|0x1000, SCPCR);
+#endif
+#if defined(CONFIG_CPU_SUBTYPE_SH7705) || defined(CONFIG_CPU_SUBTYPE_SH7706)
+		data = ctrl_inb(SCPDR);
+		/* Set /RTS2 (bit4) = 0 */
+		ctrl_outb((unsigned char)(data&0x00ef), SCPDR);
+#elif defined(CONFIG_CPU_SUBTYPE_SH7710)
+		data = ctrl_inb(PORT_PBDR);
+		if(port->mapbase == 0xa4400000) { /* SCIF0 */
+			/* Set /RTS (PBDR:bit7) = 0 */
+			ctrl_outb((unsigned char)(data&0x007f), PORT_PBDR);
+		} else if(port->mapbase == 0xa4410000){ /* SCIF1 */
+			/* Set /RTS (PBDR:bit2) = 0 */
+			ctrl_outb((unsigned char)(data&0x00fb), PORT_PBDR);
+		}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7720)
+		/* Set /RTS (bit3) = 0 */
+		if(port->mapbase == 0xa4430000) { /* SCIF0 */
+			data = ctrl_inb(PORT_PTDR);
+			ctrl_outb((unsigned char)(data&0x00f7), PORT_PTDR);
+		} else if(port->mapbase == 0xa4438000){ /* SCIF1 */
+			data = ctrl_inb(PORT_PVDR);
+			ctrl_outb((unsigned char)(data&0x00f7), PORT_PVDR);
+		}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7727)
+		/* Nothing to do */
+#else
 		data = ctrl_inb(SCPDR);
 		/* Set /RTS2 (bit6) = 0 */
-		ctrl_outb(data&0xbf, SCPDR);
+		ctrl_outb((unsigned char)(data&0x00bf), SCPDR);
+#endif
 	}
 #endif
 	sci_out(port, SCFCR, fcr_val);
@@ -439,15 +540,51 @@ static void sci_init_pins_irda(struct ua
 
 #else
 
-/* For SH7750 */
+/* For SH7750,SH7750S,SH7750R,SH7751,SH7751R,SH7760,SH7780 */
 static void sci_init_pins_scif(struct uart_port *port, unsigned int cflag)
 {
 	unsigned int fcr_val = 0;
 
 	if (cflag & CRTSCTS) {
 		fcr_val |= SCFCR_MCE;
+#if defined(CONFIG_CPU_SUBTYPE_SH7760)
+		if (port->mapbase == 0xfe600000) { /* SCIF0 */
+			ctrl_outw(ctrl_inl(PORT_PGCR)&0xc3ff, PORT_PGCR); /* PortG Control reg */
+		} else if (port->mapbase == 0xfe610000) { /* SCIF1 */
+			ctrl_outw(ctrl_inl(PORT_PGCR)&0xff00, PORT_PGCR); /* PortG Control reg */
+		} else if (port->mapbase == 0xfe620000) { /* SCIF2 */
+			ctrl_outw(ctrl_inl(PORT_PHCR)&0xc03f, PORT_PHCR); /* PortH Control reg */
+		}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7780)
+		if (port->mapbase == 0xffe00000) { /* SCIF0 */
+			ctrl_outw(ctrl_inl(GPIO_PHCR)&0xff80, GPIO_PHCR); /* portH Control reg */
+		} else if (port->mapbase == 0xffe10000) { /* SCIF1 */
+			ctrl_outw(ctrl_inl(GPIO_PHCR)&0xe3ff, GPIO_PHCR); /* PortH Control reg */
+	}
+#endif
 	} else {
+#if defined(CONFIG_CPU_SUBTYPE_SH7760)
+		if (port->mapbase == 0xfe600000) {
+			ctrl_outw(ctrl_inl(PORT_PGCR)&0xc3ff, PORT_PGCR); /* PortG Control reg */
+			ctrl_outw(0x0080, SCSPTR0);
+		} else if (port->mapbase == 0xfe610000) {
+			ctrl_outw(ctrl_inl(PORT_PGCR)&0xfff0, PORT_PGCR); /* PortG Control reg */
+			ctrl_outw(0x0080, SCSPTR1);
+		} else if (port->mapbase == 0xfe620000) {
+			ctrl_outw(ctrl_inl(PORT_PHCR)&0xfc3f, PORT_PHCR); /* PortH Control reg */
+			ctrl_outw(0x0080, SCSPTR2);
+		}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7780)
+		if (port->mapbase == 0xffe00000) {
+			ctrl_outw(ctrl_inl(GPIO_PHCR)&0xff8f, GPIO_PHCR); /* PortH Control reg */
+			ctrl_outw(0x0080, SCSPTR0);
+		} else if (port->mapbase == 0xffe10000) {
+			ctrl_outw(ctrl_inl(GPIO_PHCR)&0xe3ff, GPIO_PHCR); /* PortH Control reg */
+			ctrl_outw(0x0080, SCSPTR1);
+		}
+#else
 		ctrl_outw(0x0080, SCSPTR2); /* Set RTS = 1 */
+#endif
 	}
 	sci_out(port, SCFCR, fcr_val);
 }
@@ -484,7 +621,11 @@ static void sci_transmit_chars(struct ua
 
 #if !defined(SCI_ONLY)
 	if (port->type == PORT_SCIF) {
+#if defined(CONFIG_CPU_SUBTYPE_SH7760) || defined(CONFIG_CPU_SUBTYPE_SH7780)
+		txroom = 64 - sci_in(port, SCTFDR);
+#else
 		txroom = SCIF_TXROOM_MAX - (sci_in(port, SCFDR)>>8);
+#endif
 	} else {
 		txroom = (sci_in(port, SCxSR) & SCI_TDRE)?1:0;
 	}
@@ -552,7 +693,11 @@ static inline void sci_receive_chars(str
 	while (1) {
 #if !defined(SCI_ONLY)
 		if (port->type == PORT_SCIF) {
+#if defined(CONFIG_CPU_SUBTYPE_SH7760) || defined(CONFIG_CPU_SUBTYPE_SH7780)
+			count = sci_in(port, SCRFDR);
+#else
 			count = sci_in(port, SCFDR)&SCIF_RFDC_MASK ;
+#endif
 		} else {
 			count = (sci_in(port, SCxSR)&SCxSR_RDxF(port))?1:0;
 		}
@@ -1078,7 +1223,11 @@ static void sci_set_termios(struct uart_
 
 #if !defined(SCI_ONLY)
 	if (port->type == PORT_SCIF) {
+#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705)
+	sci_out(port, SCFCR, SCFCR_RFRST | SCFCR_TFRST | SCFCR_TCRST);
+#else
 		sci_out(port, SCFCR, SCFCR_RFRST | SCFCR_TFRST);
+#endif
 	}
 #endif
 
@@ -1197,51 +1346,51 @@ static struct uart_ops sci_uart_ops = {
 };
 
 static struct sci_port sci_ports[SCI_NPORTS] = {
-#if defined(CONFIG_CPU_SUBTYPE_SH7708)
+#if defined(CONFIG_CPU_SUBTYPE_SH7705)
 	{
-		.port	= {
-			.membase	= (void *)0xfffffe80,
-			.mapbase	= 0xfffffe80,
-			.iotype		= SERIAL_IO_MEM,
-			.irq		= 25,
-			.ops		= &sci_uart_ops,
-			.flags		= ASYNC_BOOT_AUTOCONF,
-			.line		= 0,
-		},
-		.type		= PORT_SCI,
-		.irqs		= SCI_IRQS,
-		.init_pins	= sci_init_pins_sci,
-	},
-#elif defined(CONFIG_CPU_SUBTYPE_SH7705)
-	{
-		.port	= {
-			.membase	= (void *)SCIF0,
-			.mapbase	= SCIF0,
-			.iotype		= SERIAL_IO_MEM,
-			.irq		= 55,
-			.ops		= &sci_uart_ops,
-			.flags		= ASYNC_BOOT_AUTOCONF,
-			.line		= 0,
-		},
-		.type		= PORT_SCIF,
-		.irqs		= SH3_IRDA_IRQS,
-		.init_pins	= sci_init_pins_scif,
+		.port   = {
+			.membase        = (void *)0xa4400000,
+			.mapbase        = 0xa4400000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 55,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 0,
+		},
+		.type           = PORT_SCIF,
+		.irqs           = SH7705_IRDA_IRQS,
+		.init_pins      = sci_init_pins_irda,
+	},
+		.port   = {
+			.membase        = (void *)0xa4410000,
+			.mapbase        = 0xa4410000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 59,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 1,
+		},
+                .type           = PORT_SCIF,
+		.irqs           = SH7705_SCIF_IRQS,
+		.init_pins      = sci_init_pins_irda,
+	},
+#elif defined(CONFIG_CPU_SUBTYPE_SH7708)
+	{
+		.port   = {
+			.membase        = (void *)0xfffffe80,
+			.mapbase        = 0xfffffe80,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 25,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 0,
+		},
+		.type           = PORT_SCI,
+		.irqs           = SCI_IRQS,
+		.init_pins      = sci_init_pins_sci,
 	},
-	{
-		.port	= {
-			.membase	= (void *)SCIF2,
-			.mapbase	= SCIF2,
-			.iotype		= SERIAL_IO_MEM,
-			.irq		= 59,
-			.ops		= &sci_uart_ops,
-			.flags		= ASYNC_BOOT_AUTOCONF,
-			.line		= 1,
-		},
-		.type		= PORT_SCIF,
-		.irqs		= SH3_SCIF_IRQS,
-		.init_pins	= sci_init_pins_scif,
-	}
-#elif defined(CONFIG_CPU_SUBTYPE_SH7707) || defined(CONFIG_CPU_SUBTYPE_SH7709)
+#elif defined(CONFIG_CPU_SUBTYPE_SH7706) || defined(CONFIG_CPU_SUBTYPE_SH7707) || \
+      defined(CONFIG_CPU_SUBTYPE_SH7709) || defined(CONFIG_CPU_SUBTYPE_SH7727)
 	{
 		.port	= {
 			.membase	= (void *)0xfffffe80,
@@ -1270,6 +1419,9 @@ static struct sci_port sci_ports[SCI_NPO
 		.irqs		= SH3_SCIF_IRQS,
 		.init_pins	= sci_init_pins_scif,
 	},
+#if !defined(CONFIG_CPU_SUBTYPE_SH7706) && !defined(CONFIG_CPU_SUBTYPE_SH7727)
+	/* SH7706/SH7727 have only 1 SCIF */
+
 	{
 		.port	= {
 			.membase	= (void *)0xa4000140,
@@ -1284,13 +1436,73 @@ static struct sci_port sci_ports[SCI_NPO
 		.irqs		= SH3_IRDA_IRQS,
 		.init_pins	= sci_init_pins_irda,
 	}
+#endif /* !CONFIG_CPU_SUBTYPE_SH7706 && !CONFIG_CPU_SUBTYPE_SH7727 */
+#elif defined(CONFIG_CPU_SUBTYPE_SH7710)
+	{
+		.port   = {
+			.membase        = (void *)0xa4400000,
+			.mapbase        = 0xa4400000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 55,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 0,
+		},
+		.type           = PORT_SCIF,
+		.irqs           = SH7710_SCIF0_IRQS,
+		.init_pins      = sci_init_pins_irda,
+	},
+	{
+		.port   = {
+			.membase        = (void *)0xa4410000,
+			.mapbase        = 0xa4410000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 59,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 1,
+		},
+		.type           = PORT_SCIF,
+		.irqs           = SH7710_SCIF1_IRQS,
+		.init_pins      = sci_init_pins_irda,
+	},
+#elif defined(CONFIG_CPU_SUBTYPE_SH7720)
+	{
+		.port   = {
+			.membase        = (void *)0xa4430000,
+			.mapbase        = 0xa4430000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 80,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 0,
+		},
+		.type           = PORT_SCIF,
+		.irqs           = SH7720_SCIF0_IRQS,
+		.init_pins      = sci_init_pins_irda,
+	},
+	{
+		.port   = {
+			.membase        = (void *)0xa4438000,
+			.mapbase        = 0xa4438000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 81,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 1,
+		},
+		.type           = PORT_SCIF,
+		.irqs           = SH7720_SCIF1_IRQS,
+		.init_pins      = sci_init_pins_irda,
+	},
+
 #elif defined(CONFIG_CPU_SUBTYPE_SH7300)
 	{
 		.port	= {
 			.membase	= (void *)0xA4430000,
 			.mapbase	= 0xA4430000,
 			.iotype		= SERIAL_IO_MEM,
-			.irq		= 25,
+			.irq		= 80,
 			.ops		= &sci_uart_ops,
 			.flags		= ASYNC_BOOT_AUTOCONF,
 			.line		= 0,
@@ -1401,6 +1613,35 @@ static struct sci_port sci_ports[SCI_NPO
 		.irqs		= SH7760_SCIF2_IRQS,
 		.init_pins	= sci_init_pins_scif,
 	},
+#elif defined(CONFIG_CPU_SUBTYPE_SH7780)
+	{
+		.port   = {
+			.membase        = (void *)0xffe00000,
+			.mapbase        = 0xffe00000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 43,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 0,
+		},
+		.type           = PORT_SCIF,
+		.irqs           = SH7780_SCIF0_IRQS,
+		.init_pins      = sci_init_pins_scif,
+	},
+	{
+		.port   = {
+			.membase        = (void *)0xffe10000,
+			.mapbase        = 0xffe10000,
+			.iotype         = SERIAL_IO_MEM,
+			.irq            = 78,
+			.ops            = &sci_uart_ops,
+			.flags          = ASYNC_BOOT_AUTOCONF,
+			.line           = 1,
+		},
+		.type           = PORT_SCIF,
+		.irqs           = SH7780_SCIF1_IRQS,
+		.init_pins      = sci_init_pins_scif,
+	},
 #elif defined(CONFIG_CPU_SUBTYPE_SH4_202)
 	{
 		.port	= {
Index: linux-2.6.10/drivers/serial/sh-sci.h
===================================================================
--- linux-2.6.10.orig/drivers/serial/sh-sci.h
+++ linux-2.6.10/drivers/serial/sh-sci.h
@@ -9,6 +9,8 @@
  *  Modified to support multiple serial ports. Stuart Menefy (May 2000).
  *  Modified to support SH7300(SH-Mobile) SCIF. Takashi Kusuda (Jun 2003).
  *  Modified to support H8/300 Series Yoshinori Sato (Feb 2004).
+ *  Modified to support SH7705/SH7706/SH7710/SH7720/SH7727 SCIF. Takashi Kusuda (Sep 2004).
+ *  Modified to support SH7780 SCIF. Takashi Kusuda and Nobuhiro Iwamatsu (jan 2006).
  */
 #include <linux/config.h>
 #include <linux/serial_core.h>
@@ -33,10 +35,18 @@
 #define SH3_SCIF_IRQS { 56,  57,  59,  58 }
 #define SH3_IRDA_IRQS { 52,  53,  55,  54 }
 #define SH4_SCIF_IRQS { 40,  41,  43,  42 }
+#define SH7705_SCIF_IRQS { 56,  57,  59,  0 }
+#define SH7705_IRDA_IRQS { 52,  53,  55,  0 }
+#define SH7710_SCIF0_IRQS { 52,  53,  55,  54 }
+#define SH7710_SCIF1_IRQS { 56,  57,  59,  58 }
+#define SH7720_SCIF0_IRQS { 80,  80,  80,  80 }
+#define SH7720_SCIF1_IRQS { 81,  81,  81,  81 }
 #define STB1_SCIF1_IRQS {23, 24,  26,  25 }
 #define SH7760_SCIF0_IRQS { 52, 53, 55, 54 }
 #define SH7760_SCIF1_IRQS { 72, 73, 75, 74 }
 #define SH7760_SCIF2_IRQS { 76, 77, 79, 78 }
+#define SH7780_SCIF0_IRQS SH4_SCIF_IRQS
+#define SH7780_SCIF1_IRQS { 76, 77, 78, 79 }
 #define SH7300_SCIF0_IRQS {80,  80,  80,  80 }
 #define SH73180_SCIF_IRQS {80,  81,  83,  82 }
 #define H8300H_SCI_IRQS0 {52, 53, 54,   0 }
@@ -47,32 +57,36 @@
 #define H8S_SCI_IRQS2 {96, 97, 98,   0 }
 #define SH5_SCIF_IRQS {39, 40, 42,   0 }
 
-#if defined(CONFIG_CPU_SUBTYPE_SH7708)
+#if defined(CONFIG_CPU_SUBTYPE_SH7705)
+# define SCI_NPORTS 2
+# define SCSCR_INIT(port)      0x30    /* TIE=0,RIE=0,TE=1,RE=1 */
+# define SCIF_ONLY
+#elif defined(CONFIG_CPU_SUBTYPE_SH7706)
+# define SCI_NPORTS 2
+# define SCSCR_INIT(port)      0x30    /* TIE=0,RIE=0,TE=1,RE=1 */
+# define SCI_AND_SCIF
+#elif defined(CONFIG_CPU_SUBTYPE_SH7708)
 # define SCI_NPORTS 1
-# define SCSPTR 0xffffff7c /* 8 bit */
-# define SCSCR_INIT(port)          0x30 /* TIE=0,RIE=0,TE=1,RE=1 */
+# define SCSPTR 0xffffff7c             /* 8 bit */
+# define SCSCR_INIT(port)      0x30    /* TIE=0,RIE=0,TE=1,RE=1 */
 # define SCI_ONLY
 #elif defined(CONFIG_CPU_SUBTYPE_SH7707) || defined(CONFIG_CPU_SUBTYPE_SH7709)
 # define SCI_NPORTS 3
-# define SCPCR  0xA4000116 /* 16 bit SCI and SCIF */
-# define SCPDR  0xA4000136 /* 8  bit SCI and SCIF */
-# define SCSCR_INIT(port)          0x30 /* TIE=0,RIE=0,TE=1,RE=1 */
+# define SCSCR_INIT(port)      0x30    /* TIE=0,RIE=0,TE=1,RE=1 */
 # define SCI_AND_SCIF
-#elif defined(CONFIG_CPU_SUBTYPE_SH7705)
-# define SCIF0		0xA4400000
-# define SCIF2		0xA4410000
-# define SCSMR_Ir 	0xA44A0000
-# define IRDA_SCIF 	SCIF0
+#elif defined(CONFIG_CPU_SUBTYPE_SH7710)
 # define SCI_NPORTS 2
-# define SCPCR 0xA4000116
-# define SCPDR 0xA4000136
-
-/* Set the clock source,
- * SCIF2 (0xA4410000) -> External clock, SCK pin used as clock input
- * SCIF0 (0xA4400000) -> Internal clock, SCK pin as serial clock output
- */
-# define SCSCR_INIT(port) (port->mapbase == SCIF2) ? 0xF3 : 0xF0
+# define SCSCR_INIT(port)      0x30    /* TIE=0,RIE=0,TE=1,RE=1 */
+# define SCIF_ONLY
+# define SCIF_ORER             0x0001  /* overrun error bit */
+#elif defined(CONFIG_CPU_SUBTYPE_SH7720)
+# define SCI_NPORTS 2
+# define SCSCR_INIT(port)      0x30    /* TIE=0,RIE=0,TE=1,RE=1 */
 # define SCIF_ONLY
+#elif defined(CONFIG_CPU_SUBTYPE_SH7727)
+# define SCI_NPORTS 2
+# define SCSCR_INIT(port)      0x30    /* TIE=0,RIE=0,TE=1,RE=1 */
+# define SCI_AND_SCIF
 #elif defined(CONFIG_SH_RTS7751R2D)
 # define SCI_NPORTS 1
 # define SCSPTR1 0xffe0001c /* 8  bit SCI */
@@ -91,12 +105,19 @@
 # define SCI_AND_SCIF
 #elif defined(CONFIG_CPU_SUBTYPE_SH7760)
 # define SCI_NPORTS 3
-# define SCSPTR0 0xfe600000 /* 16 bit SCIF */
-# define SCSPTR1 0xfe610000 /* 16 bit SCIF */
-# define SCSPTR2 0xfe620000 /* 16 bit SCIF */
+# define SCSPTR0 0xfe600024 /* 16 bit SCIF */
+# define SCSPTR1 0xfe610024 /* 16 bit SCIF */
+# define SCSPTR2 0xfe620024 /* 16 bit SCIF */
 # define SCIF_ORER 0x0001  /* overrun error bit */
 # define SCSCR_INIT(port)          0x38 /* TIE=0,RIE=0,TE=1,RE=1,REIE=1 */
 # define SCIF_ONLY
+#elif defined(CONFIG_CPU_SUBTYPE_SH7780)
+# define SCI_NPORTS            2
+# define SCSPTR0               0xFFE00024      /* 16 bit SCIF */
+# define SCSPTR1               0xFFE10024      /* 16 bit SCIF */
+# define SCIF_ORER             0x0001  /* overrun error bit */
+# define SCSCR_INIT(port)      0x38    /* TIE=0,RIE=0,TE=1,RE=1,REIE=1,cke=2 */
+# define SCIF_ONLY
 #elif defined(CONFIG_CPU_SUBTYPE_SH7300)
 # define SCI_NPORTS 1
 # define SCPCR  0xA4050116        /* 16 bit SCIF */
@@ -190,9 +211,10 @@
 #define SCIF_RDF   0x0002 /* 7705 SCIF, 7707 SCIF, 7709 SCIF, 7750 SCIF */
 #define SCIF_DR    0x0001 /* 7705 SCIF, 7707 SCIF, 7709 SCIF, 7750 SCIF */
 
-#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705)
-#define SCIF_ORER    0x0200
-#define SCIF_ERRORS ( SCIF_PER | SCIF_FER | SCIF_ER | SCIF_BRK | SCIF_ORER)
+#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705) || \
+	defined(CONFIG_CPU_SUBTYPE_SH7720)
+#define SCIF_ORER_SCSSR                0x0200
+#define SCIF_ERRORS ( SCIF_PER | SCIF_FER | SCIF_ER | SCIF_BRK | SCIF_ORER_SCSSR)
 #define SCIF_RFDC_MASK 0x007f
 #define SCIF_TXROOM_MAX 64
 #else
@@ -219,15 +241,17 @@
 # define SCxSR_ERRORS(port)		SCIF_ERRORS
 # define SCxSR_RDxF(port)               SCIF_RDF
 # define SCxSR_TDxE(port)               SCIF_TDFE
-#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705)
-# define SCxSR_ORER(port)		SCIF_ORER
+#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705) || \
+	defined(CONFIG_CPU_SUBTYPE_SH7720)
+# define SCxSR_ORER(port)              SCIF_ORER_SCSSR
 #else
 # define SCxSR_ORER(port)		0x0000
 #endif
 # define SCxSR_FER(port)		SCIF_FER
 # define SCxSR_PER(port)		SCIF_PER
 # define SCxSR_BRK(port)		SCIF_BRK
-#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705)
+#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705) || \
+	defined(CONFIG_CPU_SUBTYPE_SH7710) || defined(CONFIG_CPU_SUBTYPE_SH7720)
 # define SCxSR_RDxF_CLEAR(port)         (sci_in(port,SCxSR)&0xfffc)
 # define SCxSR_ERROR_CLEAR(port)        (sci_in(port,SCxSR)&0xfd73)
 # define SCxSR_TDxE_CLEAR(port)         (sci_in(port,SCxSR)&0xffdf)
@@ -337,7 +361,8 @@ struct sci_port {
   }
 
 #ifdef CONFIG_CPU_SH3
-#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705)
+#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705) || \
+	defined(CONFIG_CPU_SUBTYPE_SH7710) || defined(CONFIG_CPU_SUBTYPE_SH7720)
 #define SCIF_FNS(name, scif_offset, scif_size) \
   CPU_SCIF_FNS(name, scif_offset, scif_size)
 #else
@@ -348,12 +373,19 @@ struct sci_port {
 #define SCIF_FNS(name, sh3_scif_offset, sh3_scif_size, sh4_scif_offset, sh4_scif_size) \
   CPU_SCIF_FNS(name, sh3_scif_offset, sh3_scif_size)
 #endif
+
 #elif defined(__H8300H__) || defined(__H8300S__)
 #define SCIx_FNS(name, sh3_sci_offset, sh3_sci_size, sh4_sci_offset, sh4_sci_size, \
 		 sh3_scif_offset, sh3_scif_size, sh4_scif_offset, sh4_scif_size, \
                  h8_sci_offset, h8_sci_size) \
   CPU_SCI_FNS(name, h8_sci_offset, h8_sci_size)
 #define SCIF_FNS(name, sh3_scif_offset, sh3_scif_size, sh4_scif_offset, sh4_scif_size)
+
+#elif defined(CONFIG_CPU_SH4)
+#if defined(CONFIG_CPU_SUBTYPE_SH7760) || defined(CONFIG_CPU_SUBTYPE_SH7780)
+#define SCIF_FNS(name, scif_offset, scif_size) \
+	CPU_SCIF_FNS(name, scif_offset, scif_size)
+
 #else
 #define SCIx_FNS(name, sh3_sci_offset, sh3_sci_size, sh4_sci_offset, sh4_sci_size, \
 		 sh3_scif_offset, sh3_scif_size, sh4_scif_offset, sh4_scif_size, \
@@ -362,8 +394,13 @@ struct sci_port {
 #define SCIF_FNS(name, sh3_scif_offset, sh3_scif_size, sh4_scif_offset, sh4_scif_size) \
   CPU_SCIF_FNS(name, sh4_scif_offset, sh4_scif_size)
 #endif
+#endif
+
+#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705) || \
+	defined(CONFIG_CPU_SUBTYPE_SH7720)
+/*       reg    SCIF/SH7300,SH7705,SH7720 */
+/*       name     off  sz   */
 
-#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705)
 SCIF_FNS(SCSMR,  0x00, 16)
 SCIF_FNS(SCBRR,  0x04,  8)
 SCIF_FNS(SCSCR,  0x08, 16)
@@ -374,7 +411,34 @@ SCIF_FNS(SCFCR,  0x18, 16)
 SCIF_FNS(SCFDR,  0x1c, 16)
 SCIF_FNS(SCxTDR, 0x20,  8)
 SCIF_FNS(SCxRDR, 0x24,  8)
+#elif defined(CONFIG_CPU_SUBTYPE_SH7710)
+/*       reg    SCIF/SH7710 */
+/*       name     off  sz   */
+SCIF_FNS(SCSMR,  0x00, 16)
+SCIF_FNS(SCBRR,  0x04,  8)
+SCIF_FNS(SCSCR,  0x08, 16)
+SCIF_FNS(SCxTDR, 0x0c,  8)
+SCIF_FNS(SCxSR,  0x10, 16)
+SCIF_FNS(SCxRDR, 0x14,  8)
+SCIF_FNS(SCFCR,  0x18, 16)
+SCIF_FNS(SCFDR,  0x1c, 16)
 SCIF_FNS(SCLSR,  0x24, 16)
+#elif defined(CONFIG_CPU_SUBTYPE_SH7760) || defined(CONFIG_CPU_SUBTYPE_SH7780)
+/*       reg    SCIF/SH7760,SH7780 */
+/*       name     off  sz   */
+SCIF_FNS(SCSMR,  0x00, 16)
+SCIF_FNS(SCBRR,  0x04,  8)
+SCIF_FNS(SCSCR,  0x08, 16)
+SCIF_FNS(SCxTDR, 0x0c,  8)
+SCIF_FNS(SCxSR,  0x10, 16)
+SCIF_FNS(SCxRDR, 0x14,  8)
+SCIF_FNS(SCFCR,  0x18, 16)
+SCIF_FNS(SCTFDR, 0x1c, 16)
+SCIF_FNS(SCRFDR, 0x20, 16)
+SCIF_FNS(SCSPTR, 0x24, 16)
+SCIF_FNS(SCLSR,  0x28, 16)
+SCIF_FNS(SCRER,  0x2c, 16)
+
 #else
 /*      reg      SCI/SH3   SCI/SH4  SCIF/SH3   SCIF/SH4  SCI/H8*/
 /*      name     off  sz   off  sz   off  sz   off  sz   off  sz*/
@@ -434,31 +498,53 @@ static const struct __attribute__((packe
 };
 #endif
 
-#if defined(CONFIG_CPU_SUBTYPE_SH7708)
+#if defined(CONFIG_CPU_SUBTYPE_SH7705)
+static inline int sci_rxd_in(struct uart_port *port)
+{
+	if (port->mapbase == 0xa4410000)
+		return ctrl_inb(SCPDR)&0x04 ? 1 : 0; /* SCIF */
+	if (port->mapbase == 0xa4400000)
+		return ctrl_inb(SCPDR)&0x01 ? 1 : 0; /* IRDA */
+	return 1;
+}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7708)
+
 static inline int sci_rxd_in(struct uart_port *port)
 {
 	if (port->mapbase == 0xfffffe80)
 		return ctrl_inb(SCSPTR)&0x01 ? 1 : 0; /* SCI */
 	return 1;
 }
-#elif defined(CONFIG_CPU_SUBTYPE_SH7707) || defined(CONFIG_CPU_SUBTYPE_SH7709)
+#elif defined(CONFIG_CPU_SUBTYPE_SH7706) || defined(CONFIG_CPU_SUBTYPE_SH7707) || \
+	defined(CONFIG_CPU_SUBTYPE_SH7709) || defined(CONFIG_CPU_SUBTYPE_SH7727)
 static inline int sci_rxd_in(struct uart_port *port)
 {
 	if (port->mapbase == 0xfffffe80)
 		return ctrl_inb(SCPDR)&0x01 ? 1 : 0; /* SCI */
 	if (port->mapbase == 0xa4000150)
 		return ctrl_inb(SCPDR)&0x10 ? 1 : 0; /* SCIF */
+#if !defined(CONFIG_CPU_SUBTYPE_SH7706) && !defined(CONFIG_CPU_SUBTYPE_SH7727)
 	if (port->mapbase == 0xa4000140)
 		return ctrl_inb(SCPDR)&0x04 ? 1 : 0; /* IRDA */
+#endif
 	return 1;
 }
-#elif defined(CONFIG_CPU_SUBTYPE_SH7705)
+#elif defined(CONFIG_CPU_SUBTYPE_SH7710)
 static inline int sci_rxd_in(struct uart_port *port)
 {
-	if (port->mapbase == SCIF0)
-		return ctrl_inb(SCPDR)&0x04 ? 1 : 0; /* IRDA */
-	if (port->mapbase == SCIF2)
-		return ctrl_inb(SCPDR)&0x10 ? 1 : 0; /* SCIF */
+	if (port->mapbase == 0xa4400000)
+		return ctrl_inb(PORT_PADR)&0x01 ? 1 : 0; /* SCIF0 */
+	if (port->mapbase == 0xa4410000)
+		return ctrl_inb(PORT_PBDR)&0x08 ? 1 : 0; /* SCIF1 */
+	return 1;
+}
+#elif defined(CONFIG_CPU_SUBTYPE_SH7720)
+static inline int sci_rxd_in(struct uart_port *port)
+{
+	if (port->mapbase == 0xa4430000)
+		return ctrl_inb(PORT_PTDR)&0x02 ? 1 : 0; /* SCIF0 */
+	if (port->mapbase == 0xa4438000)
+		return ctrl_inb(PORT_PVDR)&0x02 ? 1 : 0; /* SCIF1 */
 	return 1;
 }
 #elif defined(CONFIG_CPU_SUBTYPE_SH7750) || \
@@ -486,6 +572,15 @@ static inline int sci_rxd_in(struct uart
 	if (port->mapbase == 0xfe620000)
 		return ctrl_inw(SCSPTR2) & 0x0001 ? 1 : 0; /* SCIF */
 }
+#elif defined(CONFIG_CPU_SUBTYPE_SH7780)
+static inline int sci_rxd_in(struct uart_port *port)
+{
+	if (port->mapbase == 0xffe00000)
+		return ctrl_inw(SCSPTR0) & 0x0001 ? 1 : 0; /* SCIF */
+	if (port->mapbase == 0xffe10000)
+		return ctrl_inw(SCSPTR1) & 0x0001 ? 1 : 0; /* SCIF */
+}
+
 #elif defined(CONFIG_CPU_SUBTYPE_SH7300)
 static inline int sci_rxd_in(struct uart_port *port)
 {
@@ -553,11 +648,10 @@ static inline int sci_rxd_in(struct uart
  */
 
 #define PCLK           (current_cpu_data.module_clock)
+#if defined(CONFIG_CPU_SUBTYPE_SH7300) || defined(CONFIG_CPU_SUBTYPE_SH7705) || \
+	defined(CONFIG_CPU_SUBTYPE_SH7720)
+#define SCBRR_VALUE(bps) ((PCLK+8*bps)/(16*bps)-1)
 
-#if defined(CONFIG_CPU_SUBTYPE_SH7300)
-#define SCBRR_VALUE(bps) ((PCLK+16*bps)/(16*bps)-1)
-#elif defined(CONFIG_CPU_SUBTYPE_SH7705)
-#define SCBRR_VALUE(bps) (((PCLK*2)+16*bps)/(32*bps)-1)
 #elif !defined(__H8300H__) && !defined(__H8300S__)
 #define SCBRR_VALUE(bps) ((PCLK+16*bps)/(32*bps)-1)
 #else
Index: linux-2.6.10/mvl_patches/pro-1318.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1318.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1318);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

