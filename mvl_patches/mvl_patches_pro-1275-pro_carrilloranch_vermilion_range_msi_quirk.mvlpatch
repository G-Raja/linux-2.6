#! /usr/bin/env bash
# Patch: -pro_carrilloranch_vermilion_range_msi_quirk
# Date: Mon Mar 26 17:51:20 2007
# Source: MontaVista Software, Inc.
# MR: 21823
# Type: Enhancement
# Disposition: needs submitting to lkml.
# Signed-off-by: Andy Lowe <alowe@mvista.com>
# Description:
#   The Intel Vermilion Range (VR) chipset is the chipset used on the Intel
#   Carrillo Ranch board.  An unusual feature of this chipset is that support for
#   legacy interrupts and Message Signaled Interrupts (MSIs) is mutually
#   exclusive.  When configured for legacy interrupt delivery, many different
#   devices share a small number of interrupt vectors, which has a detrimental
#   impact on performance.
# 
#   The BIOS for the Carrillo Ranch board, and presumably for any board using the
#   VR chipset, configures the VR root interrupt controller for legacy interrupt
#   delivery.  If MSI support is enabled in the linux kernel, then the kernel
#   must modify the VR root interrupt controller configuration in order for
#   interrupt delivery to work.  The VR root interrupt controller also requires
#   an unusual value to be programmed in the MSI data register for each PCI
#   device using MSIs.
# 

PATCHNUM=1275
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 21823
Type: Enhancement
Disposition: needs submitting to lkml.
Signed-off-by: Andy Lowe <alowe@mvista.com>
Description:
  The Intel Vermilion Range (VR) chipset is the chipset used on the Intel
  Carrillo Ranch board.  An unusual feature of this chipset is that support for
  legacy interrupts and Message Signaled Interrupts (MSIs) is mutually
  exclusive.  When configured for legacy interrupt delivery, many different
  devices share a small number of interrupt vectors, which has a detrimental
  impact on performance.

  The BIOS for the Carrillo Ranch board, and presumably for any board using the
  VR chipset, configures the VR root interrupt controller for legacy interrupt
  delivery.  If MSI support is enabled in the linux kernel, then the kernel
  must modify the VR root interrupt controller configuration in order for
  interrupt delivery to work.  The VR root interrupt controller also requires
  an unusual value to be programmed in the MSI data register for each PCI
  device using MSIs.

Index: linux-cr/arch/i386/kernel/quirks.c
===================================================================
--- linux-cr.orig/arch/i386/kernel/quirks.c
+++ linux-cr/arch/i386/kernel/quirks.c
@@ -48,3 +48,61 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_IN
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_E7525_MCH,	quirk_intel_irqbalance);
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_E7520_MCH,	quirk_intel_irqbalance);
 #endif
+
+#if defined(CONFIG_PCI_MSI)
+
+extern int msi_trigger_mode;
+
+/*
+ * In the Intel Vermilion Range chipset, support for legacy interrupts and
+ * Message-Signaled Interrupts is mutually exclusive.  The BIOS should always
+ * enable legacy interrupts.  If MSI support is enabled in the kernel, then
+ * the MSI interrupt controller must be enabled and legacy interrupts disabled.
+ */
+void __devinit quirk_intel_vr_msi(struct pci_dev *dev)
+{
+	u32 mchbar;
+	void __iomem *base;
+	u32 avroot_csr, avroot_csr_new;
+
+	pci_read_config_dword(dev, 0x44, &mchbar);
+
+	/* use bits 31:14, 16 kB aligned */
+	base = ioremap_nocache(mchbar & 0xFFFFC000, 0x4000);
+	if (!base)
+		return;
+
+	avroot_csr = avroot_csr_new = readl(base + 0xA00);
+
+	if (avroot_csr_new & (1 << 11)) {
+		printk(KERN_INFO "Disabling Vermilion Range legacy interrupt "
+			"to ICH.\n");
+		avroot_csr_new &= ~(1 << 11);
+	}
+
+	if ((avroot_csr_new & 0x3) != 0x3) {
+		printk(KERN_INFO "Enabling Vermilion Range MSI state machine "
+			"with round-robin priorities.\n");
+		avroot_csr_new |= 0x3;
+	}
+
+	if (avroot_csr_new != avroot_csr)
+		writel(avroot_csr_new, base + 0xA00);
+
+	if (readl(base + 0xA0C) != 0xFFFFFFFF) {
+		printk(KERN_INFO "Unmasking all Vermilion Range MSI root "
+			"interrupt requests.\n");
+		writel(0xFFFFFFFF, base + 0xA0C);
+	}
+
+	iounmap(base);
+
+	/*
+	 * The Vermilion Range root interrupt controller requires MSI trigger
+	 * mode to be set (level-triggered).
+	 */
+	msi_trigger_mode = 1;
+}
+
+DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, 0x5001, quirk_intel_vr_msi);
+#endif
Index: linux-cr/drivers/pci/msi.c
===================================================================
--- linux-cr.orig/drivers/pci/msi.c
+++ linux-cr/drivers/pci/msi.c
@@ -32,6 +32,7 @@ static int last_alloc_vector;
 static int nr_released_vectors;
 static int nr_reserved_vectors = NR_HP_RESERVED_VECTORS;
 static int nr_msix_devices;
+int msi_trigger_mode = MSI_TRIGGER_MODE;
 
 #ifndef CONFIG_X86_IO_APIC
 int vector_irq[NR_VECTORS] = { [0 ... NR_VECTORS - 1] = -1};
@@ -260,7 +261,7 @@ static void msi_data_init(struct msg_dat
 	msi_data->vector = (u8)vector;
 	msi_data->delivery_mode = MSI_DELIVERY_MODE;
 	msi_data->level = MSI_LEVEL_MODE;
-	msi_data->trigger = MSI_TRIGGER_MODE;
+	msi_data->trigger = msi_trigger_mode;
 }
 
 static void msi_address_init(struct msg_address *msi_address)
Index: linux-cr/mvl_patches/pro-1275.c
===================================================================
--- /dev/null
+++ linux-cr/mvl_patches/pro-1275.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1275);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

