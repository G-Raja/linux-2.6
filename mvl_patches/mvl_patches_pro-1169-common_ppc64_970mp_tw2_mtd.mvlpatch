#! /usr/bin/env bash
# Patch: -common_ppc64_970mp_tw2_mtd
# Date: Tue Mar  6 15:48:43 2007
# MR:20617
# Source: MontaVista Software, Inc.
# Type:  Enhancement
# Disposition: local
# Signed-off-by: Ruslan V. Sushko <rsushko@ru.mvista.com>
# Description:
# 	The patch adds MTD support for IBM TigerWood2 Evaluation board. 
# 	The PPC970MP Boot flash and FRAM mappings are supported in the driver.
# 
# 

PATCHNUM=1169
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR:20617
Source: MontaVista Software, Inc.
Type:  Enhancement
Disposition: local
Signed-off-by: Ruslan V. Sushko <rsushko@ru.mvista.com>
Description:
	The patch adds MTD support for IBM TigerWood2 Evaluation board. 
	The PPC970MP Boot flash and FRAM mappings are supported in the driver.


Index: linux-2.6.10/drivers/mtd/maps/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/mtd/maps/Makefile
+++ linux-2.6.10/drivers/mtd/maps/Makefile
@@ -75,5 +75,6 @@ obj-$(CONFIG_MTD_DMV182)	+= dmv182.o
 obj-$(CONFIG_MTD_SHARP_SL)	+= sharpsl-flash.o
 obj-$(CONFIG_MTD_PLATRAM)	+= plat-ram.o
 obj-$(CONFIG_MTD_OMAP_NOR)	+= omap_nor.o
+obj-$(CONFIG_MTD_TIGERWOOD2_FLASH)  += tw2_flash.o
 obj-$(CONFIG_MTD_TX493x)	+= tx493x-flash.o
 obj-$(CONFIG_MTD_AVALANCHE)	+= avalanche-flash.o
Index: linux-2.6.10/drivers/mtd/maps/tw2_flash.c
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/mtd/maps/tw2_flash.c
@@ -0,0 +1,147 @@
+/*
+ * Mapping for PPC970MP TigerWood2 Eval Board BootROM flash and FRAM
+ *
+ * This was derived from the luan.c
+ *
+ * Ruslan Sushko <rsushko@ru.mvista.com>
+ *
+ * Copyright (C) 2002-2006 MontaVista Software Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/config.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+#include <linux/version.h>
+#include <asm/io.h>
+
+#define NB_OF(x)  (sizeof(x)/sizeof(x[0]))
+
+static struct mtd_info *tw2_bootrom_mtd = NULL;
+static struct mtd_info *tw2_fram_mtd = NULL;
+
+static struct map_info tw2_bootrom_map = {
+        .name =         "TigerWood BootROM",
+        .size =         1024 * 1024,
+        .bankwidth =	1,
+	.phys =		0xFFF00000
+};
+
+static struct map_info tw2_fram_map = {
+        .name =         "TigerWood FRAM",
+        .size =         1024 * 1024,
+        .bankwidth =	1,
+	.phys =		0xFFC00000
+};
+
+static struct mtd_partition tw2_bootflash_partitions[] = {
+        {
+                .name =   "PIBS",
+                .offset = 0x0,
+                .size =   0x100000,
+        }
+};
+
+static struct mtd_partition tw2_fram_partitions[] = {
+        {
+                .name =   "FRAM",
+                .offset = 0x0,
+                .size =   0x8000,
+        }
+};
+
+static int __init
+init_tw2_mtd_bootrom(void)
+{
+	tw2_bootrom_map.virt =
+		ioremap(tw2_bootrom_map.phys, tw2_bootrom_map.size);
+	if (!tw2_bootrom_map.virt) {
+		printk("Failed to ioremap BootROM flash\n");
+                return -EIO;
+
+	}
+	simple_map_init(&tw2_bootrom_map);
+
+        tw2_bootrom_mtd = do_map_probe("jedec_probe", &tw2_bootrom_map);
+        if (tw2_bootrom_mtd) {
+                tw2_bootrom_mtd->owner = THIS_MODULE;
+                add_mtd_partitions(tw2_bootrom_mtd, tw2_bootflash_partitions,
+				NB_OF(tw2_bootflash_partitions));
+        } else {
+		iounmap(tw2_bootrom_map.virt);
+                printk("map probe failed for BootROM Flash\n");
+                return -ENXIO;
+        }
+	return 0;
+}
+
+
+static int __init
+init_tw2_mtd_fram(void)
+{
+	tw2_fram_map.virt= ioremap(tw2_fram_map.phys, tw2_bootrom_map.size);
+	if (!tw2_fram_map.virt) {
+		printk("Failed to ioremap FRAM flash\n");
+                return -EIO;
+
+	}
+	simple_map_init(&tw2_bootrom_map);
+
+        tw2_fram_mtd = do_map_probe("map_ram", &tw2_fram_map);
+        if (tw2_fram_mtd) {
+                tw2_fram_mtd->owner = THIS_MODULE;
+                add_mtd_partitions(tw2_fram_mtd, tw2_fram_partitions,
+				NB_OF(tw2_fram_partitions));
+        } else {
+                printk("map probe failed for FRAM\n");
+		iounmap(tw2_fram_map.virt);
+                return -ENXIO;
+        }
+	return 0;
+}
+
+
+static int __init
+init_tw2_flash(void)
+{
+	int fram_res, brom_res;
+	brom_res = init_tw2_mtd_bootrom();
+	fram_res = init_tw2_mtd_fram();
+	if ( fram_res && brom_res ) {
+		/* Both MTD drivers failed */
+		return -EIO;
+	}
+	return 0;
+}
+
+static void __exit
+cleanup_tw2_flash(void)
+{
+        if (tw2_bootrom_mtd) {
+		del_mtd_partitions(tw2_bootrom_mtd);
+		map_destroy(tw2_bootrom_mtd);
+		iounmap(tw2_bootrom_map.virt);
+	}
+	if (tw2_fram_mtd) {
+		del_mtd_partitions(tw2_fram_mtd);
+		map_destroy(tw2_fram_mtd);
+		iounmap(tw2_fram_map.virt);
+	}
+}
+
+module_init(init_tw2_flash);
+module_exit(cleanup_tw2_flash);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Ruslan V. Sushko <rsushko@ru.mvista.com>");
+MODULE_DESCRIPTION("MTD map and partitions for IBM Tigerwood 2 board");
+
Index: linux-2.6.10/drivers/mtd/maps/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/mtd/maps/Kconfig
+++ linux-2.6.10/drivers/mtd/maps/Kconfig
@@ -699,6 +699,18 @@ config MTD_OMAP_NOR
 	  These boards include the Innovator, H2, H3, OSK, Perseus2, and
 	  more.  If you have such a board, say 'Y'.
 
+config MTD_TIGERWOOD2_FLASH
+        tristate "Flash devices mapped on or IBM Tigerwood 2 board"
+	depends on PPC_TIGERWOOD2
+	select MTD_JEDECPROBE
+	select MTD_CFI_AMDSTD
+	select MTD_RAM
+  	select MTD_PARTITIONS
+        help
+          This enables access routines for the flash chips on the IBM PPC970
+          TigerWoood2 board. If you have such board or similar and would like to
+          use the flash chips on it, say 'Y'.
+
 # This needs CFI or JEDEC, depending on the cards found.
 config MTD_PCI
 	tristate "PCI MTD driver"
Index: linux-2.6.10/mvl_patches/pro-1169.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1169.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1169);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

