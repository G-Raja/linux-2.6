#! /usr/bin/env bash
# Patch: -generic_file_buffered_write
# Date: Fri May 26 10:17:08 2006
# MR: 17520
# 
# commit 5eb78e8e9744b7b5257f599331a3f93bd34598cb 
# tree 4e709155df5627d05fac8963822f028c26b32db4 
# parent cd798f7a9a7c1f5b27a5c5a7c91430bf3d75af54 
# author Daniel McNeil <daniel@osdl.org> Thu, 20 Jan 2005 15:50:25 -0800 
# committer Linus Torvalds <torvalds@ppc970.osdl.org> Thu, 20 Jan 2005 15:50:25 -0800 
# 
#     * mm/filemap.c:
# 
#     [PATCH] generic_file_buffered_write: handle partial DIO writes with multiple iovecs
# 
#   This is a patch to generic_file_buffered_write() to correctly
#   handle partial O_DIRECT writes (because of unallocated blocks)
#   when there is more than 1 iovec.  Without this patch, the code is
#   writing the wrong iovec (it writes the first iovec a 2nd time).
#   
#   Included is a test program dio_bug.c that shows the problem by:
#   	writing 4k to offset 4k
#   	writing 4k to offset 12k
#   	writing 8k to offset 4k
#   The result is that 8k write writes the 1st 4k of the buffer twice.
#   
#   $ rm f; ./dio_bug f
#   wrong value offset 8k expected 0x33 got 0x11
#   wrong value offset 10k expected 0x44 got 0x22
#   
#   with patch
#   $ rm f; ./dio_bug f
#   
#   #define _GNU_SOURCE
#   #include <sys/types.h>
#   #include <unistd.h>
#   #include <stdlib.h>
#   #include <fcntl.h>
#   #include <sys/uio.h>
#   
#   main(int argc, char **argv)
#   {
#   	int fd;
#   	char *buf;
#   	int i;
#   	struct iovec v[2];
#   
#   	fd = open(argv[1], O_DIRECT|O_RDWR|O_CREAT, 0666);
#   
#   	if (fd < 0) {
#   		perror("open");
#   		exit(1);
#   	}
#   
#   	buf = valloc(8192);
#   
#   	lseek(fd, 0x1000, SEEK_SET);
#   	memset(buf, 0x11, 2048);
#   	memset(buf+2048, 0x22, 2048);
#   	i = write(fd, buf, 4096);	/* 4k write of 0x11 and 0x22 at 4k */
#   
#   	lseek(fd, 0x3000, SEEK_SET);
#   	memset(buf, 0x55, 2048);
#   	memset(buf+2048, 0x66, 2048);
#   	i = write(fd, buf, 4096);	/* 4k write of 0x55 and 0x66 at 12k */
#   
#   	lseek(fd, 0x1000, SEEK_SET);
#   	i = read(fd, buf, 4096);
#   	memset(buf+4096, 0x33 , 2048);
#   	memset(buf+4096+2048, 0x44 , 2048);
#   
#   	v[0].iov_base = buf;
#   	v[0].iov_len = 4096;
#   	v[1].iov_base = buf + 4096;
#   	v[1].iov_len = 4096;
#   	lseek(fd, 0x1000, SEEK_SET);
#   	i = writev(fd, v, 2);	/* 8k write of 0x11, 0x22, 0x33, 0x44 at 4k */
#   
#   	lseek(fd, 0x2000, SEEK_SET);
#   	i = read(fd, buf, 4096);
#   	if (buf[0] != 0x33)
#   		printf("wrong value offset 8k expected 0x33 got 0x%x\n",
#   			buf[0]);
#   	if (buf[2048] != 0x44)
#   		printf("wrong value offset 10k expected 0x44 got 0x%x\n",
#   			buf[2048]);
#   
#   }
#   
#   Signed-off-by: Andrew Morton <akpm@osdl.org>
#   Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 
#  mm/filemap.c |   11 ++++++++++-
#  1 files changed, 10 insertions(+), 1 deletion(-)
# 

PATCHNUM=554
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 17520

commit 5eb78e8e9744b7b5257f599331a3f93bd34598cb 
tree 4e709155df5627d05fac8963822f028c26b32db4 
parent cd798f7a9a7c1f5b27a5c5a7c91430bf3d75af54 
author Daniel McNeil <daniel@osdl.org> Thu, 20 Jan 2005 15:50:25 -0800 
committer Linus Torvalds <torvalds@ppc970.osdl.org> Thu, 20 Jan 2005 15:50:25 -0800 

    * mm/filemap.c:

    [PATCH] generic_file_buffered_write: handle partial DIO writes with multiple iovecs

  This is a patch to generic_file_buffered_write() to correctly
  handle partial O_DIRECT writes (because of unallocated blocks)
  when there is more than 1 iovec.  Without this patch, the code is
  writing the wrong iovec (it writes the first iovec a 2nd time).
  
  Included is a test program dio_bug.c that shows the problem by:
  	writing 4k to offset 4k
  	writing 4k to offset 12k
  	writing 8k to offset 4k
  The result is that 8k write writes the 1st 4k of the buffer twice.
  
  $ rm f; ./dio_bug f
  wrong value offset 8k expected 0x33 got 0x11
  wrong value offset 10k expected 0x44 got 0x22
  
  with patch
  $ rm f; ./dio_bug f
  
  #define _GNU_SOURCE
  #include <sys/types.h>
  #include <unistd.h>
  #include <stdlib.h>
  #include <fcntl.h>
  #include <sys/uio.h>
  
  main(int argc, char **argv)
  {
  	int fd;
  	char *buf;
  	int i;
  	struct iovec v[2];
  
  	fd = open(argv[1], O_DIRECT|O_RDWR|O_CREAT, 0666);
  
  	if (fd < 0) {
  		perror("open");
  		exit(1);
  	}
  
  	buf = valloc(8192);
  
  	lseek(fd, 0x1000, SEEK_SET);
  	memset(buf, 0x11, 2048);
  	memset(buf+2048, 0x22, 2048);
  	i = write(fd, buf, 4096);	/* 4k write of 0x11 and 0x22 at 4k */
  
  	lseek(fd, 0x3000, SEEK_SET);
  	memset(buf, 0x55, 2048);
  	memset(buf+2048, 0x66, 2048);
  	i = write(fd, buf, 4096);	/* 4k write of 0x55 and 0x66 at 12k */
  
  	lseek(fd, 0x1000, SEEK_SET);
  	i = read(fd, buf, 4096);
  	memset(buf+4096, 0x33 , 2048);
  	memset(buf+4096+2048, 0x44 , 2048);
  
  	v[0].iov_base = buf;
  	v[0].iov_len = 4096;
  	v[1].iov_base = buf + 4096;
  	v[1].iov_len = 4096;
  	lseek(fd, 0x1000, SEEK_SET);
  	i = writev(fd, v, 2);	/* 8k write of 0x11, 0x22, 0x33, 0x44 at 4k */
  
  	lseek(fd, 0x2000, SEEK_SET);
  	i = read(fd, buf, 4096);
  	if (buf[0] != 0x33)
  		printf("wrong value offset 8k expected 0x33 got 0x%x\n",
  			buf[0]);
  	if (buf[2048] != 0x44)
  		printf("wrong value offset 10k expected 0x44 got 0x%x\n",
  			buf[2048]);
  
  }
  
  Signed-off-by: Andrew Morton <akpm@osdl.org>
  Signed-off-by: Linus Torvalds <torvalds@osdl.org>

 mm/filemap.c           |   11 ++++++++++-
 mvl_patches/pro-0554.c |   16 ++++++++++++++++
 2 files changed, 26 insertions(+), 1 deletion(-)

Index: linux-2.6.10/mm/filemap.c
===================================================================
--- linux-2.6.10.orig/mm/filemap.c
+++ linux-2.6.10/mm/filemap.c
@@ -1911,7 +1911,16 @@ generic_file_buffered_write(struct kiocb
 
 	pagevec_init(&lru_pvec, 0);
 
-	buf = iov->iov_base + written;	/* handle partial DIO write */
+	/*
+	 * handle partial DIO write.  Adjust cur_iov if needed.
+	 */
+	if (likely(nr_segs == 1))
+		buf = iov->iov_base + written;
+	else {
+		filemap_set_next_iovec(&cur_iov, &iov_base, written);
+		buf = iov->iov_base + iov_base;
+	}
+
 	do {
 		unsigned long index;
 		unsigned long offset;
Index: linux-2.6.10/mvl_patches/pro-0554.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0554.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(554);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

