#! /usr/bin/env bash
# Patch: -common_pxa_monahans_pmic
# Date: Fri Dec  7 11:52:10 2007
# Source: MontaVista Software, Inc.
# MR: 23292
# Type: Integration
# Disposition: merged from Marvell
# Signed-off-by: yadviga grigorieva <yadviga@ru.mvista.com>
# Description:
# 	pmic interface for PXA3xx arava
# 

PATCHNUM=1437
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 23292
Type: Integration
Disposition: merged from Marvell
Signed-off-by: yadviga grigorieva <yadviga@ru.mvista.com>
Description:
	pmic interface for PXA3xx arava

Index: linux-2.6.10/arch/arm/mach-pxa/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/Kconfig
+++ linux-2.6.10/arch/arm/mach-pxa/Kconfig
@@ -72,4 +72,9 @@ config IWMMXT
 	help
 	  Enable support for iWMMXt
 
+config PXA3xx_PMIC
+ 	bool
+ 	help
+ 	  PMIC support
+
 endif
Index: linux-2.6.10/arch/arm/mach-pxa/Makefile
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/Makefile
+++ linux-2.6.10/arch/arm/mach-pxa/Makefile
@@ -26,6 +26,7 @@ obj-$(CONFIG_LEDS) += $(led-y)
 # Misc features
 ifeq ($(CONFIG_PXA3xx), y)
 obj-$(CONFIG_PXA3xx) += mhn_gpio.o
+obj-$(CONFIG_PXA3xx_PMIC) += mhn_pmic.o
 obj-$(CONFIG_PM) += pxa3xx_pm.o pxa3xx_suspend.o sleepwkr.o
 
 else
Index: linux-2.6.10/arch/arm/mach-pxa/generic.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/generic.c
+++ linux-2.6.10/arch/arm/mach-pxa/generic.c
@@ -494,8 +494,8 @@ static struct platform_device gpio_exp_d
 };
 #endif
 
-static struct platform_device arava_device = {
-        .name 		= "arava",
+static struct platform_device mhn_pmic_device = {
+        .name 		= "mhn_pmic",
         .id 		= -1,
 };
 
@@ -674,7 +674,7 @@ static struct platform_device *devices[]
 	&stuart_device,
 	&i2c_device,
 #if defined(CONFIG_PXA3xx)
-	&arava_device,
+	&mhn_pmic_device,
 #ifdef CONFIG_PXA3xx_GPIOEX
 	&gpio_exp_device,
 #endif
Index: linux-2.6.10/arch/arm/mach-pxa/mhn_pmic.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-pxa/mhn_pmic.c
@@ -0,0 +1,211 @@
+/*
+ * Monahans PMIC abstrction layer
+ *
+ * This software program is licensed subject to the GNU General Public License
+ * (GPL).Version 2,June 1991, available at http://www.fsf.org/copyleft/gpl.html
+
+ * (C) Copyright 2007 Marvell International Ltd.
+ * All Rights Reserved
+ */
+
+#include <asm/arch/mhn_pmic.h>
+
+struct pmic_ops *mhn_pmic_ops;
+
+void pmic_set_ops(struct pmic_ops *ops)
+{
+	if (mhn_pmic_ops != NULL) {
+		printk(KERN_ERR "set pmic_ops when pmic_ops is not NULL\n");
+		return;
+	}
+	mhn_pmic_ops = ops;
+}
+
+/*****************************************************************************
+ *			Operation of PMIC				     *
+ *****************************************************************************/
+int check_pmic_ops(void)
+{
+	if (!mhn_pmic_ops) {
+		printk(KERN_WARNING "No pmic_ops registered!\n");
+		return -EINVAL;
+	} else
+		return 0;
+}
+
+int mhn_pmic_get_voltage(int cmd, int *pval)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)
+		return ret;
+
+	if (mhn_pmic_ops->get_voltage)
+		return mhn_pmic_ops->get_voltage(cmd, pval);
+	else
+		return -EINVAL;
+}
+
+EXPORT_SYMBOL(mhn_pmic_get_voltage);
+
+int mhn_pmic_set_voltage(int cmd, int val)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)
+		return ret;
+
+	if (mhn_pmic_ops->set_voltage)
+		return mhn_pmic_ops->set_voltage(cmd, val);
+	else
+		return -EINVAL;
+}
+
+EXPORT_SYMBOL(mhn_pmic_set_voltage);
+
+int mhn_pmic_is_vbus_assert(void)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)		/* If illegal pmic_ops, always no vbus activity */
+		return 0;
+
+	if (mhn_pmic_ops->is_vbus_assert)
+		return mhn_pmic_ops->is_vbus_assert();
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_is_vbus_assert);
+
+int mhn_pmic_is_avbusvld(void)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)		/* If illegal pmic_ops, always no A vbus valid */
+		return 0;
+
+	if (mhn_pmic_ops->is_avbusvld)
+		return mhn_pmic_ops->is_avbusvld();
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_is_avbusvld);
+
+int mhn_pmic_is_asessvld(void)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)		/* If illegal pmic_ops, always no A assert valid */
+		return 0;
+
+	if (mhn_pmic_ops->is_asessvld)
+		return mhn_pmic_ops->is_asessvld();
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_is_asessvld);
+
+int mhn_pmic_is_bsessvld(void)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)		/* If illegal pmic_ops, always no B assert valid */
+		return 0;
+
+	if (mhn_pmic_ops->is_bsessvld)
+		return mhn_pmic_ops->is_bsessvld();
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_is_bsessvld);
+
+int mhn_pmic_is_srp_ready(void)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)		/* If illegal pmic_ops, always no SRP detect */
+		return 0;
+
+	if (mhn_pmic_ops->is_srp_ready)
+		return mhn_pmic_ops->is_srp_ready();
+
+	return 0;
+
+}
+
+EXPORT_SYMBOL(mhn_pmic_is_srp_ready);
+
+int mhn_pmic_set_pump(int enable)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)
+		return ret;
+
+	if (mhn_pmic_ops->set_pump)
+		return mhn_pmic_ops->set_pump(enable);
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_set_pump);
+
+int mhn_pmic_set_vbus_supply(int enable, int srp)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)
+		return ret;
+
+	if (mhn_pmic_ops->set_vbus_supply)
+		return mhn_pmic_ops->set_vbus_supply(enable, srp);
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_set_vbus_supply);
+
+int mhn_pmic_set_usbotg_a_mask(void)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)
+		return ret;
+
+	if (mhn_pmic_ops->set_usbotg_a_mask)
+		return mhn_pmic_ops->set_usbotg_a_mask();
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_set_usbotg_a_mask);
+
+int mhn_pmic_set_usbotg_b_mask(void)
+{
+	int ret;
+
+	ret = check_pmic_ops();
+	if (ret < 0)
+		return ret;
+
+	if (mhn_pmic_ops->set_usbotg_b_mask)
+		return mhn_pmic_ops->set_usbotg_b_mask();
+
+	return 0;
+}
+
+EXPORT_SYMBOL(mhn_pmic_set_usbotg_b_mask);
Index: linux-2.6.10/include/asm-arm/arch-pxa/mhn_pmic.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-pxa/mhn_pmic.h
@@ -0,0 +1,126 @@
+/*
+ *  linux/include/asm-arm/arch-pxa/mhn_pmic.h
+ *
+ * Copyright(C) 2006 Marvell Internaltional Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __PMIC_H__
+#define __PMIC_H__
+
+#include <linux/i2c.h>
+#include <linux/interrupt.h>
+
+enum {
+	/* Common command for Zylonite/Littleton */
+
+	/* Set command > 0xFFFF0000 to avoid wrong
+	 * parameter is used for pmic_set_voltage.
+	 */
+	VCC_CORE = 0xFFFF0000,
+	VCC_SRAM,
+	VCC_MVT,
+	VCC_3V_APPS,
+	VCC_SDIO,
+	VCC_CAMERA_ANA,
+	VCC_USB,
+	VCC_LCD,
+	VCC_TSI,
+	VCC_CAMERA_IO,
+
+	/* Command for Littleton */
+	VCC_1P8V,
+	VCC_MEM,
+	HDMI_TX,
+	TECH_3V,
+	TECH_1P8V,
+};
+
+#define	PMIC_EVENT_EXTON	(1 << 0)
+#define	PMIC_EVENT_VBUS		(1 << 1)
+#define	PMIC_EVENT_USB		(PMIC_EVENT_EXTON | PMIC_EVENT_VBUS)
+
+#define	PMIC_EVENT_TOUCH	(1 << 2)
+
+#define PMIC_EVENT_OTGCP_IOVER	(1 << 3)
+
+struct pmic_ops {
+	int (*get_voltage) (int cmd, int *pmv);
+	int (*set_voltage) (int cmd, int mv);
+
+	int (*is_vbus_assert) (void);
+	int (*is_avbusvld) (void);
+	int (*is_asessvld) (void);
+	int (*is_bsessvld) (void);
+	int (*is_srp_ready) (void);
+
+	int (*set_pump) (int enable);
+	int (*set_vbus_supply) (int enable, int srp);
+	int (*set_usbotg_a_mask) (void);
+	int (*set_usbotg_b_mask) (void);
+	int (*is_usbpump_chg) (void);
+
+#ifdef CONFIG_PM
+	int (*suspend) (struct device * _dev, u32 state, u32 level);
+	int (*resume) (struct device * _dev, u32 level);
+#endif
+	int (*init) (struct device * dev);
+	int (*deinit) (struct device * dev);
+};
+
+struct mhn_pmic_regs {
+	unsigned int data:8;
+	unsigned int hit:1;
+	unsigned int mask:1;
+};
+
+extern void start_calc_time(void);
+extern void end_calc_time(void);
+
+extern int mhn_pmic_write(u8 reg, u8 val);
+extern int mhn_pmic_read(u8 reg, u8 * pval);
+
+extern int mhn_pmic_get_voltage(int cmd, int *pval);
+extern int mhn_pmic_set_voltage(int cmd, int val);
+
+/* Check whether USB VBUS is asserted */
+extern int mhn_pmic_is_vbus_assert(void);
+/* Check whether USB VBUS has gone above A-device VBUS valid threshold
+ * Min: 4.4V	Max: N/A
+ */
+extern int mhn_pmic_is_avbusvld(void);
+/* Check whether VBUS has gone above A-device Session Valid threshold
+ * Min: 0.8V	Max: 2.0V
+ */
+extern int mhn_pmic_is_asessvld(void);
+/* Check whether VBUS has gone above B-device Session Valid threshold
+ * Min: 0.8V	Max: 4.0V
+ */
+extern int mhn_pmic_is_bsessvld(void);
+/* Check whether VBUS has gone above B-device Session End threshold
+ * Min: 0.2V	Max: 0.8V
+ */
+extern int mhn_pmic_is_srp_ready(void);
+/* Initialize the USB PUMP */
+extern int mhn_pmic_set_pump(int enable);
+/* Check the events change of PMIC */
+extern int mhn_pmic_event_change(void);
+/* enable/disable VBUS supply */
+extern int mhn_pmic_set_vbus_supply(int enable, int srp);
+/* Set events mask for USB A-device
+ * A-device Sessino Valid event
+ * A-device VBUS Valid event
+ */
+extern int mhn_pmic_set_usbotg_a_mask(void);
+/* Set events mask for USB B-device
+ * B-device Session Valid event
+ * B-device Session end event
+ */
+extern int mhn_pmic_set_usbotg_b_mask(void);
+
+extern void pmic_set_ops(struct pmic_ops *ops);
+
+#endif
Index: linux-2.6.10/mvl_patches/pro-1437.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1437.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1437);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

