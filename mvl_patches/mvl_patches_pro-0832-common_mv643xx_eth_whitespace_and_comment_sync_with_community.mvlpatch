#! /usr/bin/env bash
# Patch: -common_mv643xx_eth_whitespace_and_comment_sync_with_community
# Date: Tue Aug  8 20:55:41 2006
# Source: MontaVista Software, Inc.
# MR: 16579
# Type: Cleanup
# Disposition: No need to submit, is already in mainline kernel
# Signed-off-by: Dale Farnsworth <dfarnsworth@mvista.com>
# Description:
# Clean up whitespace and comments to match driver in mainline kernel.
# 

PATCHNUM=832
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 16579
Type: Cleanup
Disposition: No need to submit, is already in mainline kernel
Signed-off-by: Dale Farnsworth <dfarnsworth@mvista.com>
Description:
Clean up whitespace and comments to match driver in mainline kernel.

Index: linux-2.6.10/drivers/net/mv643xx_eth.c
===================================================================
--- linux-2.6.10.orig/drivers/net/mv643xx_eth.c
+++ linux-2.6.10/drivers/net/mv643xx_eth.c
@@ -6,7 +6,7 @@
  * Copyright (C) 2002 rabeeh@galileo.co.il
  *
  * Copyright (C) 2003 PMC-Sierra, Inc.,
- *	written by Manish Lachwani (lachwani@pmc-sierra.com)
+ *	written by Manish Lachwani
  *
  * Copyright (C) 2003 Ralf Baechle <ralf@linux-mips.org>
  *
@@ -978,7 +978,6 @@ static void mv643xx_tx(struct net_device
 	struct pkt_info pkt_info;
 
 	while (eth_tx_return_desc(mp, &pkt_info) == ETH_OK) {
-
 		if (pkt_info.cmd_sts & ETH_TX_FIRST_DESC)
 			dma_unmap_single(NULL, pkt_info.buf_ptr,
 					pkt_info.byte_cnt,
@@ -1990,6 +1989,15 @@ static int eth_port_uc_addr(unsigned int
 	return 1;
 }
 
+/*
+ * The entries in each table are indexed by a hash of a packet's MAC
+ * address.  One bit in each entry determines whether the packet is
+ * accepted.  There are 4 entries (each 8 bits wide) in each register
+ * of the table.  The bits in each entry are defined as follows:
+ *	0	Accept=1, Drop=0
+ *	3-1	Queue			(ETH_Q0=0)
+ *	7-4	Reserved = 0;
+ */
 static void eth_port_set_filter_table_entry(int table, unsigned char entry)
 {
 	unsigned int table_reg;
@@ -2005,32 +2013,20 @@ static void eth_port_set_filter_table_en
 	mv_write(table + tbl_offset, table_reg);
 }
 
-/*******************************************************************************
-* eth_port_mc_addr - Multicast address settings.
-*
-* DESCRIPTION:
-*	This function controls the MV device MAC multicast support.
-*	The MV device supports multicast using two tables:
-*	1) Special Multicast Table for MAC addresses of the form
-*	   0x01-00-5E-00-00-XX (where XX is between 0x00 and 0x_FF).
-*	   The MAC DA[7:0] bits are used as a pointer to the Special Multicast
-*	   Table entries in the DA-Filter table.
-*	2) Other Multicast Table for multicast of another type. A CRC-8bit
-*	   is used as an index to the Other Multicast Table entries in the
-*	   DA-Filter table.  This function calculates the CRC-8bit value.
-*	In either case, eth_port_set_filter_table_entry() is then called
-*	to set to set the actual table entry.
-* INPUT:
-*	unsigned int 	eth_port_num	Port number.
-*	unsigned char 	*p_addr		Unicast MAC Address.
-*
-* OUTPUT:
-*	See description.
-*
-* RETURN:
-*	None.
-*
-*******************************************************************************/
+/*
+ * eth_port_mc_addr - Multicast address settings.
+ *
+ * The MV device supports multicast using two tables:
+ * 1) Special Multicast Table for MAC addresses of the form
+ *    0x01-00-5E-00-00-XX (where XX is between 0x00 and 0x_FF).
+ *    The MAC DA[7:0] bits are used as a pointer to the Special Multicast
+ *    Table entries in the DA-Filter table.
+ * 2) Other Multicast Table for multicast of another type. A CRC-8bit
+ *    is used as an index to the Other Multicast Table entries in the
+ *    DA-Filter table.  This function calculates the CRC-8bit value.
+ * In either case, eth_port_set_filter_table_entry() is then called
+ * to set to set the actual table entry.
+ */
 static void eth_port_mc_addr(unsigned int eth_port_num, unsigned char *p_addr)
 {
 	unsigned int mac_h;
@@ -2121,7 +2117,9 @@ static void eth_port_mc_addr(unsigned in
 	eth_port_set_filter_table_entry(table, crc_result);
 }
 
-/** Set the entire multicast list base on dev->mc_list. **/
+/*
+ * Set the entire multicast list based on dev->mc_list.
+ */
 static void eth_port_set_multicast_list(struct net_device *dev)
 {
 
@@ -2131,38 +2129,38 @@ static void eth_port_set_multicast_list(
 	struct mv643xx_private	*mp = netdev_priv(dev);
 	unsigned int		eth_port_num = mp->port_num;
 
-	/** If the device is in promiscuous mode or in all multicast mode,
-	 ** we will fully populate both multicast tables with accept.
-	 ** This is guaranteed to yield a match on all multicast addresses...
-	 **/
+	/* If the device is in promiscuous mode or in all multicast mode,
+	 * we will fully populate both multicast tables with accept.
+	 * This is guaranteed to yield a match on all multicast addresses...
+	 */
 	if ((dev->flags & IFF_PROMISC) || (dev->flags & IFF_ALLMULTI)) {
 		for (table_index = 0; table_index <= 0xFC; table_index += 4) {
-			 /** Set all entries in DA filter special multicast
-			  ** table (Ex_dFSMT)
-			  ** Set for ETH_Q0 for now
-			  ** Bits
-			  ** 0	  Accept=1, Drop=0
-			  ** 3-1  Queue	 ETH_Q0=0
-			  ** 7-4  Reserved = 0;
-			  **/
+			 /* Set all entries in DA filter special multicast
+			  * table (Ex_dFSMT)
+			  * Set for ETH_Q0 for now
+			  * Bits
+			  * 0	  Accept=1, Drop=0
+			  * 3-1  Queue	 ETH_Q0=0
+			  * 7-4  Reserved = 0;
+			  */
 			 mv_write(MV643XX_ETH_DA_FILTER_SPECIAL_MULTICAST_TABLE_BASE(eth_port_num) + table_index, 0x01010101);
 
-			 /** Set all entries in DA filter other multicast
-			  ** table (Ex_dFOMT)
-			  ** Set for ETH_Q0 for now
-			  ** Bits
-			  ** 0	  Accept=1, Drop=0
-			  ** 3-1  Queue	 ETH_Q0=0
-			  ** 7-4  Reserved = 0;
-			  **/
+			 /* Set all entries in DA filter other multicast
+			  * table (Ex_dFOMT)
+			  * Set for ETH_Q0 for now
+			  * Bits
+			  * 0	  Accept=1, Drop=0
+			  * 3-1  Queue	 ETH_Q0=0
+			  * 7-4  Reserved = 0;
+			  */
 			 mv_write(MV643XX_ETH_DA_FILTER_OTHER_MULTICAST_TABLE_BASE(eth_port_num) + table_index, 0x01010101);
        	}
 		return;
 	}
 
-	/** We will clear out multicast tables everytime we get the list.
-	 ** Then add the entire new list...
-	 **/
+	/* We will clear out multicast tables every time we get the list.
+	 * Then add the entire new list...
+	 */
 	for (table_index = 0; table_index <= 0xFC; table_index += 4) {
 		/* Clear DA filter special multicast table (Ex_dFSMT) */
 		mv_write(MV643XX_ETH_DA_FILTER_SPECIAL_MULTICAST_TABLE_BASE
@@ -2173,8 +2171,8 @@ static void eth_port_set_multicast_list(
 				(eth_port_num) + table_index, 0);
 	}
 
-	/** Get pointer to net_device multicast list and add each one... **/
-	for(i = 0, mc_list = dev->mc_list;
+	/* Get pointer to net_device multicast list and add each one... */
+	for (i = 0, mc_list = dev->mc_list;
 			(i < 256) && (mc_list != NULL) && (i < dev->mc_count);
 			i++, mc_list = mc_list->next)
 		if (mc_list->dmi_addrlen == 6)
Index: linux-2.6.10/mvl_patches/pro-0832.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0832.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(832);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

