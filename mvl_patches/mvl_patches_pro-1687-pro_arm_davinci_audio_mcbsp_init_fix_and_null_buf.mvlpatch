#! /usr/bin/env bash
# Patch: -pro_arm_davinci_audio_mcbsp_init_fix_and_null_buf
# Date: Mon Jan 21 23:06:56 2008
# Source: Texas Instruments Inc.
# MR: 23073
# Type: Enhancement
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# This patch derived from 
#  ti_davinci_mv_1_0_audio_mcbsp_init_fix_and_null_buf_implementation_034
#  some files such as davinci-audio.[ch], and dma are no longer valid due
#  to subsequent patches from TI.
# 
# Comments from TI
#   This patch implements the null buffer playback when McBSP has no data to
#   process. This patch also fixes the McBSP initialization sequence.
# 

PATCHNUM=1687
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 23073
Type: Enhancement
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
This patch derived from 
 ti_davinci_mv_1_0_audio_mcbsp_init_fix_and_null_buf_implementation_034
 some files such as davinci-audio.[ch], and dma are no longer valid due
 to subsequent patches from TI.

Comments from TI
  This patch implements the null buffer playback when McBSP has no data to
  process. This patch also fixes the McBSP initialization sequence.

Index: linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/mcbsp.c
+++ linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
@@ -257,20 +257,44 @@ void davinci_mcbsp_start_tx(unsigned int
 
 	mcbsp[id].tx_word_length =
 	    ((DAVINCI_MCBSP_READ(io_base, XCR1) >> 5) & 0x7);
-
-	/* Start the sample generator */
+		/* step 1: guaranteed by the system config for PSC and PINMUX */
+		/* step 2: guaranteed by the McBSP config for CLKG & FSG */
+		/* step 3: guaranteed by the McBSP config for SPCR & XCR */
+	
+		/* step 4: wait for 2 CLKR when use external clock*/
+	udelay(100);
+	
+		/* step 5: Start the sample generator, set GRST */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
-	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | (1 << 6));
-
-	/* Enable transmitter */
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | GRST);
+	
+		/* step 6: clear the potential XSYNCERR, set XRST, wait for 2 CLKR, then disable XRST */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
-	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | 1);
-
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | XRST);
+	udelay(100);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~XRST);
+	
+		/* step 7: guaranteed by start EDMA first*/	
+	
+	udelay(100);
+	
+		/* step 8: Enable transmitter */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | XRST);
+	
 	udelay(100);
 
-	/* Start frame sync */
+		/* step 9: FSGM has been set, need do step 10 & 11 */
+	
+		/* step 10: if XEMPTY = 1, write one data to DXR to clear the XEMPTY*/
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
-	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | (1 << 7));
+	if (!(w & XEMPTY))
+	    DAVINCI_MCBSP_WRITE(io_base, DXR1, 0x0);
+	
+		/* step 11: wait 7 to 8 CLKG before set FRST */
+	udelay(100);
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | FRST);
 
 	return;
 }
@@ -292,11 +316,15 @@ void davinci_mcbsp_start_rx(unsigned int
 	mcbsp[id].rx_word_length =
 	    ((DAVINCI_MCBSP_READ(io_base, RCR1) >> 5) & 0x7);
 
-	/* Start the sample generator */
+	udelay(100);
+	
+		/* Start the sample generator */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | (1 << 6));
 
-	/* Enable receiver */
+	udelay(100);
+	
+		/* Enable receiver */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR1);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR1, w | 1);
 
@@ -319,6 +347,19 @@ void davinci_mcbsp_stop_tx(unsigned int 
 
 	io_base = mcbsp[id].io_base;
 
+#if 1
+	/* Reset the frame sync generator, clear FRST */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~FRST);
+
+	/* Reset transmitter, clear XRST */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~XRST);
+	
+	/* Reset the sample rate generator, clear GRST */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~GRST);
+#else
 	/* Reset transmitter */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1));
@@ -330,6 +371,7 @@ void davinci_mcbsp_stop_tx(unsigned int 
 	/* Reset the frame sync generator */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1 << 7));
+#endif
 
 	return;
 }
@@ -344,6 +386,10 @@ void davinci_mcbsp_stop_rx(unsigned int 
 
 	io_base = mcbsp[id].io_base;
 
+	/* Reset the frame sync generator */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1 << 7));
+	
 	/* Reset receiver */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR1);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR1, w & ~(1));
@@ -352,10 +398,6 @@ void davinci_mcbsp_stop_rx(unsigned int 
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1 << 6));
 
-	/* Reset the frame sync generator */
-	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
-	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1 << 7));
-
 	return;
 }
 
Index: linux-2.6.10/sound/oss/dm644x/davinci-audio-aic33.c
===================================================================
--- linux-2.6.10.orig/sound/oss/dm644x/davinci-audio-aic33.c
+++ linux-2.6.10/sound/oss/dm644x/davinci-audio-aic33.c
@@ -856,8 +856,6 @@ static void davinci_aic33_shutdown(void 
 	davinci_mcbsp_stop_rx(AUDIO_MCBSP);
 	davinci_mcbsp_free(AUDIO_MCBSP);
 
-	/* Self clearing aic33 software reset */
-	audio_aic33_write(1, 0x80);
 }
 
 static void davinci_set_mono_stereo(int mode)
Index: linux-2.6.10/mvl_patches/pro-1687.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1687.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1687);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

