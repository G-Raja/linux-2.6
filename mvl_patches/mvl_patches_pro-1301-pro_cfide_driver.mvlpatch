#! /usr/bin/env bash
# Patch: -pro_cfide_driver
# Date: Mon Apr  9 00:18:09 2007
# Source: http://lkml.org/lkml/2006/2/1/47
# MR: 22730
# Type: Enhancement
# Disposition: needs rework sent upstream
# Signed-off-by: Gennadiy Kurtsman <gkurtsman@ru.mvista.com>
# Description:
# 	Compact flash I with true IDE interface driver. It has been
#    developed using http://lkml.org/lkml/2006/2/1/47 as
#    its prototype.
# 

PATCHNUM=1301
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: http://lkml.org/lkml/2006/2/1/47
MR: 22730
Type: Enhancement
Disposition: needs rework sent upstream
Signed-off-by: Gennadiy Kurtsman <gkurtsman@ru.mvista.com>
Description:
	Compact flash I with true IDE interface driver. It has been
   developed using http://lkml.org/lkml/2006/2/1/47 as
   its prototype.

Index: linux-2.6.10/drivers/ide/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/ide/Kconfig
+++ linux-2.6.10/drivers/ide/Kconfig
@@ -960,6 +960,12 @@ config BLK_DEV_MPC8xx_IDE
 
 	  If unsure, say N.
 
+config BLK_DEV_CFIDE
+	tristate "Compact Flash in True IDE mode"
+	help
+	  This is the IDE driver for a Memory Mapped Compact Flash Device
+	  running in True IDE mode.
+
 choice
 	prompt "Type of MPC8xx IDE interface"
 	depends on BLK_DEV_MPC8xx_IDE
Index: linux-2.6.10/drivers/ide/legacy/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/ide/legacy/Makefile
+++ linux-2.6.10/drivers/ide/legacy/Makefile
@@ -7,6 +7,8 @@ obj-$(CONFIG_BLK_DEV_UMC8672)		+= umc867
 
 obj-$(CONFIG_BLK_DEV_IDECS)		+= ide-cs.o
 
+obj-$(CONFIG_BLK_DEV_CFIDE)		+= cfide.o
+
 # Last of all
 obj-$(CONFIG_BLK_DEV_HD)		+= hd.o
 
Index: linux-2.6.10/drivers/ide/legacy/cfide.c
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/ide/legacy/cfide.c
@@ -0,0 +1,210 @@
+/*
+ * Compact Flash Memory Mapped True IDE mode driver
+ *
+ * Maintainer: Kumar Gala <galak@kernel.crashing.org>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/ide.h>
+#include <linux/ioport.h>
+#include <linux/module.h>
+#include <linux/cfide.h>
+#include <asm/io.h>
+
+static struct {
+	void __iomem *cfide_mapbase;
+	void __iomem *cfide_alt_mapbase;
+	ide_hwif_t *hwif;
+	int index;
+} hwif_prop;
+
+extern void cfide_platform_mmiops (ide_hwif_t *);
+extern void cfide_selectproc (ide_drive_t *);
+
+static ide_hwif_t * __devinit cfide_locate_hwif(void __iomem * base, void __iomem * ctrl,
+				struct cfide_platform_data *pdata, int irq)
+{
+	unsigned long port = (unsigned long)base;
+	ide_hwif_t *hwif;
+	int index, i;
+
+	for (index = 0; index < MAX_HWIFS; ++index) {
+		hwif = ide_hwifs + index;
+		if (hwif->io_ports[IDE_DATA_OFFSET] == port)
+			goto found;
+	}
+
+	for (index = 0; index < MAX_HWIFS; ++index) {
+		hwif = ide_hwifs + index;
+		if (hwif->io_ports[IDE_DATA_OFFSET] == 0)
+			goto found;
+	}
+
+	return NULL;
+
+ found:
+
+	hwif->hw.io_ports[IDE_DATA_OFFSET] = port;
+
+	port += pdata->regaddr_step + pdata->byte_lanes_swapping;
+	for (i = IDE_ERROR_OFFSET; i <= IDE_STATUS_OFFSET; i++, port += pdata->regaddr_step)
+		hwif->hw.io_ports[i] = port;
+
+	hwif->hw.io_ports[IDE_CONTROL_OFFSET] = (unsigned long)ctrl +
+		6 * pdata->regaddr_step + pdata->byte_lanes_swapping;
+
+	memcpy(hwif->io_ports, hwif->hw.io_ports, sizeof(hwif->hw.io_ports));
+	hwif->hw.irq = hwif->irq = irq;
+	hwif->selectproc = cfide_selectproc;
+
+	hwif->hw.dma = NO_DMA;
+	hwif->hw.chipset = ide_generic;
+
+	hwif->mmio = 2;
+	cfide_platform_mmiops(hwif);
+	hwif_prop.hwif = hwif;
+	hwif_prop.index = index;
+
+	return hwif;
+}
+
+static int __devinit cfide_lbus_probe(struct device *dev_raw)
+{
+	struct platform_device *dev = container_of(dev_raw,
+		struct platform_device, dev);
+	struct resource *res_base, *res_alt, *res_irq;
+	ide_hwif_t *hwif;
+	struct cfide_platform_data *pdata;
+	int ret = 0;
+
+	pdata = (struct cfide_platform_data*)dev->dev.platform_data;
+
+	/* get a pointer to the register memory */
+	res_base = platform_get_resource(dev, IORESOURCE_MEM, 0);
+	res_alt = platform_get_resource(dev, IORESOURCE_MEM, 1);
+	res_irq = platform_get_resource(dev, IORESOURCE_IRQ, 0);
+
+	if ((!res_base) || (!res_alt) || (!res_irq)) {
+		ret = -ENODEV;
+		goto out;
+	}
+
+	if (!request_mem_region
+	    (res_base->start, res_base->end - res_base->start + 1, dev->name)) {
+		dev_printk(KERN_DEBUG, dev_raw, "%s: request_mem_region of base failed\n", dev->name);
+		ret = -EBUSY;
+		goto out;
+	}
+
+	if (!request_mem_region
+	    (res_alt->start, res_alt->end - res_alt->start + 1, dev->name)) {
+		dev_printk(KERN_DEBUG, dev_raw, "%s: request_mem_region of alt failed\n", dev->name);
+		ret = -EBUSY;
+		goto release_base;
+	}
+
+	hwif_prop.cfide_mapbase =
+	    ioremap(res_base->start, res_base->end - res_base->start + 1);
+	if (!hwif_prop.cfide_mapbase) {
+		ret = -ENOMEM;
+		goto release_alt;
+	}
+
+	hwif_prop.cfide_alt_mapbase =
+	    ioremap(res_alt->start, res_alt->end - res_alt->start + 1);
+
+	if (!hwif_prop.cfide_alt_mapbase) {
+		ret = -ENOMEM;
+		goto unmap_base;
+	}
+
+	hwif = cfide_locate_hwif(hwif_prop.cfide_mapbase, hwif_prop.cfide_alt_mapbase,
+			 pdata, res_irq->start);
+
+	if (!hwif) {
+		ret = -ENODEV;
+		goto unmap_alt;
+	}
+	hwif->gendev.parent = &dev->dev;
+	hwif->noprobe = 0;
+
+	probe_hwif_init(hwif);
+
+	dev_set_drvdata(&dev->dev, hwif);
+	create_proc_ide_interfaces();
+
+	return 0;
+
+ unmap_alt:
+	iounmap(hwif_prop.cfide_alt_mapbase);
+ unmap_base:
+	iounmap(hwif_prop.cfide_mapbase);
+ release_alt:
+	release_mem_region(res_alt->start, res_alt->end - res_alt->start + 1);
+ release_base:
+	release_mem_region(res_base->start, res_base->end - res_base->start + 1);
+ out:
+	return ret;
+}
+
+static int __devexit cfide_lbus_remove(struct device *dev_raw)
+{
+	struct platform_device *dev = container_of(dev_raw,
+		struct platform_device, dev);
+
+	ide_hwif_t *hwif = dev->dev.driver_data;
+	struct resource *res_base, *res_alt;
+
+	/* get a pointer to the register memory */
+	res_base = platform_get_resource(dev, IORESOURCE_MEM, 0);
+	res_alt = platform_get_resource(dev, IORESOURCE_MEM, 1);
+
+	release_mem_region(res_base->start, res_base->end - res_base->start + 1);
+	release_mem_region(res_alt->start, res_alt->end - res_alt->start + 1);
+
+	dev_set_drvdata(&dev->dev, NULL);
+
+	if (hwif != hwif_prop.hwif)
+		dev_printk(KERN_DEBUG, dev_raw, "%s: hwif value error", dev->name);
+	else {
+		ide_unregister (hwif_prop.index);
+		hwif_prop.index = 0;
+		hwif_prop.hwif = NULL;
+	}
+
+	iounmap(hwif_prop.cfide_mapbase);
+	iounmap(hwif_prop.cfide_alt_mapbase);
+
+	return 0;
+}
+
+static struct device_driver cfide_driver = {
+	.name = "mmio-cfide",
+	.bus = &platform_bus_type,
+	.probe = cfide_lbus_probe,
+	.remove = __devexit_p(cfide_lbus_remove),
+};
+
+static int __init cfide_lbus_init(void)
+{
+	return driver_register(&cfide_driver);
+}
+
+static void __exit cfide_lbus_exit(void)
+{
+	driver_unregister(&cfide_driver);
+}
+
+MODULE_DESCRIPTION("MMIO based True IDE Mode Compact Flash Driver");
+MODULE_LICENSE("GPL");
+
+module_init(cfide_lbus_init);
+module_exit(cfide_lbus_exit);
+
Index: linux-2.6.10/include/linux/cfide.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/linux/cfide.h
@@ -0,0 +1,19 @@
+/*
+ *  linux/include/linux/cfide.h
+ *
+ *  Copyright (C) 2007 MontaVista Software
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#ifndef _LINUX_CFIDE_H
+#define _LINUX_CFIDE_H
+
+struct cfide_platform_data {
+	unsigned int byte_lanes_swapping;	/* 1 - swapping, else 0 */
+	unsigned int regaddr_step;		/* step of registers address */
+};
+
+#endif
Index: linux-2.6.10/mvl_patches/pro-1301.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1301.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1301);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

