#! /usr/bin/env bash
# Patch: -pro_arm_davinci_dm355_evm_nand_partition_map_for_256KB_blocks
# Date: Mon Jan 21 23:05:17 2008
# Source: MontaVista Software, Inc.
# MR: 25797
# Type: Enhancement
# Disposition: local
# Signed-off-by: Andy Lowe <alowe@mvista.com>
# Description:
# 	The DaVinci DM355 EVM board has a socketed NAND chip.  NAND chips with
# 	either 256KB blocks or 512KB blocks are both supported on the board.
# 	The boot firmware on the board is programmed into fixed block numbers.
# 	The offsets of these blocks are of course different if the block size is
# 	different.  Since the NAND flash map in the kernel is based on offsets,
# 	not block numbers, we require a different flash map depending on the
# 	type of flash chip installed in the board.  The flash map is fixed at
# 	compile time, so the only means to choose an alternate flash map is via
# 	a kernel configuration option.  This patch adds a kernel configuration
# 	option DM355_NAND_256KB_BLOCKS that is enabled by default.  If the NAND
# 	chip on your board has 512KB blocks, then you must disable this option.
# 

PATCHNUM=1670
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 25797
Type: Enhancement
Disposition: local
Signed-off-by: Andy Lowe <alowe@mvista.com>
Description:
	The DaVinci DM355 EVM board has a socketed NAND chip.  NAND chips with
	either 256KB blocks or 512KB blocks are both supported on the board.
	The boot firmware on the board is programmed into fixed block numbers.
	The offsets of these blocks are of course different if the block size is
	different.  Since the NAND flash map in the kernel is based on offsets,
	not block numbers, we require a different flash map depending on the
	type of flash chip installed in the board.  The flash map is fixed at
	compile time, so the only means to choose an alternate flash map is via
	a kernel configuration option.  This patch adds a kernel configuration
	option DM355_NAND_256KB_BLOCKS that is enabled by default.  If the NAND
	chip on your board has 512KB blocks, then you must disable this option.

Index: linux-2.6.10/arch/arm/mach-davinci/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/Kconfig
+++ linux-2.6.10/arch/arm/mach-davinci/Kconfig
@@ -56,6 +56,19 @@ config DAVINCI_BLK_DEV_CF
 	help
 	  Configure this option to enable CF Card support.
 
+config DM355_NAND_256KB_BLOCKS
+	bool "NAND chip installed on DM355 EVM has 256KB blocks"
+	default y
+	depends on MACH_DAVINCI_DM355_EVM
+	help
+	The boot firmware on the DM355 EVM assumes a default partition map
+	for NAND flash based on erase block offsets.  Thus, the partition map
+	varies based on the size of the erase blocks in the particular NAND
+	flash component installed on the board.  Answer Y here if the NAND
+	chip (e.g a 16 Gigabit Micron MT29F16G08QAA) installed on your board
+	has 256KB blocks.  Answer N here if the NAND chip (e.g. a 4 Gigabit
+	Micron MT29F4G08AAA) installed on your board has 128KB blocks.
+
 choice
 	prompt "Low-level debug console UART"
 	default DAVINCI_LL_DEBUG_UART0
Index: linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-dm355-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
@@ -103,32 +103,41 @@ extern void davinci_serial_init(struct p
 #if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
 
 
+/*
+ * The NAND partition map used by UBL/U-Boot is a function of the NAND block
+ * size.  We support NAND components with either a 128KB or 256KB block size.
+*/
+#ifdef CONFIG_DM355_NAND_256KB_BLOCKS
+	#define NAND_BLOCK_SIZE (SZ_256K)
+#else
+	#define NAND_BLOCK_SIZE (SZ_128K)
+#endif
+
 static struct mtd_partition nand_partitions[] = {
 	/* bootloader (UBL, U-Boot, BBT) in sectors: 0 - 14 */
 	{
 		.name		= "bootloader",
-		.offset   = 0,
-		.size             = 15*SZ_128K,
+		.offset		= 0,
+		.size		= 15*NAND_BLOCK_SIZE,
 		.mask_flags	= MTD_WRITEABLE, /* force read-only */
 	},
 	/* bootloader params in the next sector 15 */
 	{
 		.name		= "params",
-		.offset   = MTDPART_OFS_APPEND,
-		.size             = SZ_128K,
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= 1*NAND_BLOCK_SIZE,
 		.mask_flags	= MTD_WRITEABLE, /* force read-only */
 	},
-	/* kernel in sectors: 16 - 47 */
+	/* kernel in sectors: 16 */
 	{
 		.name		= "kernel",
-		.offset	= MTDPART_OFS_APPEND,
+		.offset		= MTDPART_OFS_APPEND,
 		.size		= SZ_4M,
 		.mask_flags	= 0
 	},
-	/* file system in sectors: 48 - last */
 	{
 		.name		= "filesystem",
-		.offset	= MTDPART_OFS_APPEND,
+		.offset		= MTDPART_OFS_APPEND,
 		.size		= MTDPART_SIZ_FULL,
 		.mask_flags	= 0
 	}
Index: linux-2.6.10/mvl_patches/pro-1670.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1670.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1670);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

