#! /usr/bin/env bash
# Patch: -pro_arm_davinci_nand_4bit_ecc
# Date: Mon Jan 21 23:05:35 2008
# Source: MontaVista Software, Inc.
# MR: 25797
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Andy Lowe <alowe@mvista.com>
# Description:
# 		Davinci NAND 4-bit ECC implementation.
# 

PATCHNUM=1671
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 25797
Type: Defect Fix
Disposition: local
Signed-off-by: Andy Lowe <alowe@mvista.com>
Description:
		Davinci NAND 4-bit ECC implementation.

Index: linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-dm355-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
@@ -146,7 +146,7 @@ static struct mtd_partition nand_partiti
 
 static struct nand_davinci_platform_data nand_data = {
 	.options	= 0,
-	.eccmode	= NAND_ECC_HW3_512,
+	.eccmode	= NAND_ECC_HW10_512,
 	.cle_mask	= 0x10,
 	.ale_mask	= 0x08,
 	.parts		= nand_partitions,
Index: linux-2.6.10/drivers/mtd/nand/nand_davinci.c
===================================================================
--- linux-2.6.10.orig/drivers/mtd/nand/nand_davinci.c
+++ linux-2.6.10/drivers/mtd/nand/nand_davinci.c
@@ -106,18 +106,19 @@ struct nand_davinci_info {
 #define NANDERRVAL2		0xDC
 #define EMIF_REG_SIZE		0x1000
 
-#define NAND_Ecc_P1e            (1 << 0)
-#define NAND_Ecc_P2e            (1 << 1)
-#define NAND_Ecc_P4e            (1 << 2)
-#define NAND_Ecc_P8e            (1 << 3)
-#define NAND_Ecc_P16e           (1 << 4)
-#define NAND_Ecc_P32e           (1 << 5)
-#define NAND_Ecc_P64e           (1 << 6)
-#define NAND_Ecc_P128e          (1 << 7)
-#define NAND_Ecc_P256e          (1 << 8)
-#define NAND_Ecc_P512e          (1 << 9)
-#define NAND_Ecc_P1024e         (1 << 10)
-#define NAND_Ecc_P2048e         (1 << 11)
+/* Definitions for 1-bit hardware ECC */
+#define NAND_Ecc_P1e		(1 << 0)
+#define NAND_Ecc_P2e		(1 << 1)
+#define NAND_Ecc_P4e		(1 << 2)
+#define NAND_Ecc_P8e		(1 << 3)
+#define NAND_Ecc_P16e		(1 << 4)
+#define NAND_Ecc_P32e		(1 << 5)
+#define NAND_Ecc_P64e		(1 << 6)
+#define NAND_Ecc_P128e		(1 << 7)
+#define NAND_Ecc_P256e		(1 << 8)
+#define NAND_Ecc_P512e		(1 << 9)
+#define NAND_Ecc_P1024e		(1 << 10)
+#define NAND_Ecc_P2048e		(1 << 11)
 
 #define NAND_Ecc_P1o            (1 << 16)
 #define NAND_Ecc_P2o            (1 << 17)
@@ -136,12 +137,12 @@ struct nand_davinci_info {
 
 #define P2048e(a)       (TF(a & NAND_Ecc_P2048e)        << 0 )
 #define P2048o(a)       (TF(a & NAND_Ecc_P2048o)        << 1 )
-#define P1e(a)          (TF(a & NAND_Ecc_P1e)           << 2 )
-#define P1o(a)          (TF(a & NAND_Ecc_P1o)           << 3 )
-#define P2e(a)          (TF(a & NAND_Ecc_P2e)           << 4 )
-#define P2o(a)          (TF(a & NAND_Ecc_P2o)           << 5 )
-#define P4e(a)          (TF(a & NAND_Ecc_P4e)           << 6 )
-#define P4o(a)          (TF(a & NAND_Ecc_P4o)           << 7 )
+#define P1e(a)		(TF(a & NAND_Ecc_P1e)           << 2 )
+#define P1o(a)		(TF(a & NAND_Ecc_P1o)           << 3 )
+#define P2e(a)		(TF(a & NAND_Ecc_P2e)           << 4 )
+#define P2o(a)		(TF(a & NAND_Ecc_P2o)           << 5 )
+#define P4e(a)		(TF(a & NAND_Ecc_P4e)           << 6 )
+#define P4o(a)		(TF(a & NAND_Ecc_P4o)           << 7 )
 
 #define P8e(a)          (TF(a & NAND_Ecc_P8e)           << 0 )
 #define P8o(a)          (TF(a & NAND_Ecc_P8o)           << 1 )
@@ -170,8 +171,41 @@ struct nand_davinci_info {
 #define P2e_s(a)        (TF(a & NAND_Ecc_P2e)           << 6 )
 #define P2o_s(a)        (TF(a & NAND_Ecc_P2o)           << 7 )
 
-#define P4e_s(a)        (TF(a & NAND_Ecc_P4e)           << 0 )
-#define P4o_s(a)        (TF(a & NAND_Ecc_P4o)           << 1 )
+#define P4e_s(a)		(TF(a & NAND_Ecc_P4e)           << 0 )
+#define P4o_s(a)		(TF(a & NAND_Ecc_P4o)           << 1 )
+
+/* Definitions for 4-bit hardware ECC */
+#define NAND_4BITECC_MASK		0x03FF03FF
+#define EMIF_NANDFSR_ECC_STATE_MASK  	0x00000F00
+#define ECC_STATE_NO_ERR		0x0
+#define ECC_STATE_TOO_MANY_ERRS		0x1
+#define ECC_STATE_ERR_CORR_COMP_P	0x2
+#define ECC_STATE_ERR_CORR_COMP_N	0x3
+#define ECC_MAX_CORRECTABLE_ERRORS	0x4
+
+/* flash bbt decriptors */
+static uint8_t nand_davinci_bbt_pattern[] = { 'B', 'b', 't', '0' };
+static uint8_t nand_davinci_mirror_pattern[] = { '1', 't', 'b', 'B' };
+
+static struct nand_bbt_descr nand_davinci_bbt_main_descr = {
+	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
+	    | NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+	.offs = 2,
+	.len = 4,
+	.veroffs = 16,
+	.maxblocks = 4,
+	.pattern = nand_davinci_bbt_pattern
+};
+
+static struct nand_bbt_descr nand_davinci_bbt_mirror_descr = {
+	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
+	    | NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+	.offs = 2,
+	.len = 4,
+	.veroffs = 16,
+	.maxblocks = 4,
+	.pattern = nand_davinci_mirror_pattern
+};
 
 /*
  * nand_davinci_select_chip
@@ -216,7 +250,11 @@ static void nand_davinci_hwcontrol(struc
 	this->IO_ADDR_W = (void __iomem *)IO_ADDR_W;
 }
 
-static void nand_davinci_enable_hwecc(struct mtd_info *mtd, int mode)
+/*
+ * 1-bit ECC routines
+ */
+
+static void nand_davinci_1bit_enable_hwecc(struct mtd_info *mtd, int mode)
 {
 	struct nand_chip *this = mtd->priv;
 	struct nand_davinci_info *info = this->priv;
@@ -236,7 +274,7 @@ static void nand_davinci_enable_hwecc(st
 /*
  * Read the NAND ECC register corresponding to chip enable ce, where 0<=ce<=3.
  */
-static u32 nand_davinci_readecc(struct mtd_info *mtd, u32 ce)
+static u32 nand_davinci_1bit_readecc(struct mtd_info *mtd, u32 ce)
 {
 	struct nand_chip *this = mtd->priv;
 	struct nand_davinci_info *info = this->priv;
@@ -244,14 +282,15 @@ static u32 nand_davinci_readecc(struct m
 	return __raw_readl(info->emifregs + NANDF1ECC + 4 * ce);
 }
 
-static int nand_davinci_calculate_ecc(struct mtd_info *mtd, const u_char * dat,
-				      u_char * ecc_code)
+static int nand_davinci_1bit_calculate_ecc(struct mtd_info *mtd,
+					   const u_char * dat,
+					   u_char * ecc_code)
 {
 	unsigned int l;
 	struct nand_chip *this = mtd->priv;
 	struct nand_davinci_info *info = this->priv;
 
-	l = nand_davinci_readecc(mtd, info->ce);
+	l = nand_davinci_1bit_readecc(mtd, info->ce);
 	*ecc_code++ = l;	// P128e, ..., P1e
 	*ecc_code++ = l >> 16;	// P128o, ..., P1o
 	// P2048o, P1024o, P512o, P256o, P2048e, P1024e, P512e, P256e
@@ -260,7 +299,7 @@ static int nand_davinci_calculate_ecc(st
 	return 0;
 }
 
-static void nand_davinci_gen_true_ecc(u8 * ecc_buf)
+static void nand_davinci_1bit_gen_true_ecc(u8 * ecc_buf)
 {
 	u32 tmp =
 	    ecc_buf[0] | (ecc_buf[1] << 16) | ((ecc_buf[2] & 0xF0) << 20) |
@@ -277,9 +316,9 @@ static void nand_davinci_gen_true_ecc(u8
 	      P2048o(tmp) | P2048e(tmp));
 }
 
-static int nand_davinci_compare_ecc(u8 * ecc_data1,	/* read from NAND memory */
-				    u8 * ecc_data2,	/* read from register */
-				    u8 * page_data)
+static int nand_davinci_1bit_compare_ecc(u8 * ecc_data1,	/* read from NAND memory */
+					 u8 * ecc_data2,	/* read from register */
+					 u8 * page_data)
 {
 	u32 i;
 	u8 tmp0_bit[8], tmp1_bit[8], tmp2_bit[8];
@@ -292,8 +331,8 @@ static int nand_davinci_compare_ecc(u8 *
 
 	isEccFF = ((*(u32 *) ecc_data1 & 0xFFFFFF) == 0xFFFFFF);
 
-	nand_davinci_gen_true_ecc(ecc_data1);
-	nand_davinci_gen_true_ecc(ecc_data2);
+	nand_davinci_1bit_gen_true_ecc(ecc_data1);
+	nand_davinci_1bit_gen_true_ecc(ecc_data2);
 
 	for (i = 0; i <= 2; i++) {
 		*(ecc_data1 + i) = ~(*(ecc_data1 + i));
@@ -392,8 +431,8 @@ static int nand_davinci_compare_ecc(u8 *
 	}
 }
 
-static int nand_davinci_correct_data(struct mtd_info *mtd, u_char * dat,
-				     u_char * read_ecc, u_char * calc_ecc)
+static int nand_davinci_1bit_correct_data(struct mtd_info *mtd, u_char * dat,
+					  u_char * read_ecc, u_char * calc_ecc)
 {
 	int r = 0;
 
@@ -405,12 +444,361 @@ static int nand_davinci_correct_data(str
 			read_ecc_copy[i] = read_ecc[i];
 			calc_ecc_copy[i] = calc_ecc[i];
 		}
-		r = nand_davinci_compare_ecc(read_ecc_copy, calc_ecc_copy, dat);
+		r = nand_davinci_1bit_compare_ecc(read_ecc_copy, calc_ecc_copy,
+						  dat);
 	}
 
 	return r;
 }
 
+/*
+ * 4-bit ECC routines
+ */
+
+/*
+ * Instead of placing the spare data at the end of the page, the 4-bit ECC
+ * hardware generator requires that the page be subdivided into 4 subpages,
+ * each with its own spare data area.  This structure defines the format of
+ * each of these subpages.
+ */
+static struct page_layout_item nand_davinci_hw10_512_layout[] = {
+	{.type = ITEM_TYPE_DATA,.length = 512},
+	{.type = ITEM_TYPE_OOB,.length = 6,},
+	{.type = ITEM_TYPE_ECC,.length = 10,},
+	{.type = 0,.length = 0,},
+};
+
+static struct nand_oobinfo nand_davinci_hw10_512_oobinfo = {
+	.useecc = MTD_NANDECC_AUTOPLACE,
+	/*
+	 * We actually have 40 bytes of ECC per page, but the nand_oobinfo
+	 * structure definition limits us to a maximum of 32 bytes.  This
+	 * doesn't matter, because out page_layout_item structure definition
+	 * determines where our ECC actually goes in the flash page.
+	 */
+	.eccbytes = 32,
+	.eccpos = {6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
+		   22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
+		   38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
+		   54, 55,
+		   },
+	.oobfree = {{0, 6}, {16, 6}, {32, 6}, {48, 6}},
+};
+
+/*
+ * We should always have a flash-based bad block table.  However, if one isn't
+ * found then all blocks will be scanned to look for factory-marked bad blocks.
+ * We supply a null pattern so that no blocks will be detected as bad.
+ */
+static struct nand_bbt_descr nand_davinci_hw10_512_badblock_pattern = {
+	.options = 0,
+	.offs = 0,
+	.len = 0,
+	.pattern = NULL,
+};
+
+/*
+ * When using 4-bit ECC with a 2048-byte data + 64-byte spare page size, the
+ * oob is scattered throughout the page in 4 16-byte chunks instead of being
+ * grouped together at the end of the page.  This means that the factory
+ * bad-block markers at offsets 2048 and 2049 will be overwritten when data
+ * is written to the flash.  Thus, we cannot use the factory method to mark
+ * or detect bad blocks and must rely on a flash-based bad block table instead.
+ *
+ */
+static int nand_davinci_hw10_512_block_bad(struct mtd_info *mtd, loff_t ofs,
+					   int getchip)
+{
+	return 0;
+}
+
+static int nand_davinci_hw10_512_block_markbad(struct mtd_info *mtd, loff_t ofs)
+{
+	struct nand_chip *this = mtd->priv;
+	int block;
+
+	/* Get block number */
+	block = ((int)ofs) >> this->bbt_erase_shift;
+	if (this->bbt)
+		this->bbt[block >> 2] |= 0x01 << ((block & 0x03) << 1);
+
+	/* Do we have a flash based bad block table ? */
+	if (this->options & NAND_USE_FLASH_BBT)
+		return nand_update_bbt(mtd, ofs);
+
+	return 0;
+}
+
+static void nand_davinci_4bit_enable_hwecc(struct mtd_info *mtd, int mode)
+{
+	struct nand_chip *this = mtd->priv;
+	struct nand_davinci_info *info = this->priv;
+	void __iomem *nandfcr;
+	u32 val;
+
+	switch (mode) {
+	case NAND_ECC_WRITE:
+	case NAND_ECC_READ:
+		/*
+		 * Start a new ECC calculation for reading or writing 512 bytes
+		 *  of data.
+		 */
+		nandfcr = info->emifregs + NANDFCR;
+		val = (__raw_readl(nandfcr) & ~(3 << 4))
+		    | (info->ce << 4) | (1 << 12);
+		__raw_writel(val, nandfcr);
+		break;
+	case NAND_ECC_WRITEOOB:
+	case NAND_ECC_READOOB:
+		/*
+		 * Terminate ECC calculation by performing a dummy read of an
+		 * ECC register.  Our hardware ECC generator supports including
+		 * the OOB in the ECC calculation, but the NAND core code
+		 * doesn't really support that.  We will only calculate the ECC
+		 * on the data; errors in the non-ECC bytes in the OOB will not
+		 * be detected or corrected.
+		 */
+		__raw_readl(info->emifregs + NAND4BITECC1);
+		break;
+	case NAND_ECC_WRITESYN:
+	case NAND_ECC_READSYN:
+		/*
+		 * Our ECC calculation has already been terminated, so no need
+		 * to do anything here.
+		 */
+		break;
+	default:
+		break;
+	}
+}
+
+static u32 nand_davinci_4bit_readecc(struct mtd_info *mtd, unsigned int ecc[4])
+{
+	struct nand_chip *this = mtd->priv;
+	struct nand_davinci_info *info = this->priv;
+
+	ecc[0] = __raw_readl(info->emifregs + NAND4BITECC1) & NAND_4BITECC_MASK;
+	ecc[1] = __raw_readl(info->emifregs + NAND4BITECC2) & NAND_4BITECC_MASK;
+	ecc[2] = __raw_readl(info->emifregs + NAND4BITECC3) & NAND_4BITECC_MASK;
+	ecc[3] = __raw_readl(info->emifregs + NAND4BITECC4) & NAND_4BITECC_MASK;
+
+	return 0;
+}
+
+static int nand_davinci_4bit_calculate_ecc(struct mtd_info *mtd,
+					   const u_char * dat,
+					   u_char * ecc_code)
+{
+	unsigned int hw_4ecc[4] = { 0, 0, 0, 0 };
+	unsigned int const1 = 0, const2 = 0;
+	unsigned char count1 = 0;
+
+	/*
+	 * Since the NAND_HWECC_SYNDROME option is enabled, this routine is
+	 * only called just after the data and oob have been written.  The
+	 * ECC value calculated by the hardware ECC generator is available
+	 * for us to read.
+	 */
+	nand_davinci_4bit_readecc(mtd, hw_4ecc);
+
+	/*Convert 10 bit ecc value to 8 bit */
+	for (count1 = 0; count1 < 2; count1++) {
+		const2 = count1 * 5;
+		const1 = count1 * 2;
+
+		/* Take first 8 bits from val1 (count1=0) or val5 (count1=1) */
+		ecc_code[const2] = hw_4ecc[const1] & 0xFF;
+
+		/*
+		 * Take 2 bits as LSB bits from val1 (count1=0) or val5
+		 * (count1=1) and 6 bits from val2 (count1=0) or val5 (count1=1)
+		 */
+		ecc_code[const2 + 1] =
+		    ((hw_4ecc[const1] >> 8) & 0x3) | ((hw_4ecc[const1] >> 14) &
+						      0xFC);
+
+		/*
+		 * Take 4 bits from val2 (count1=0) or val5 (count1=1) and
+		 * 4 bits from val3 (count1=0) or val6 (count1=1)
+		 */
+		ecc_code[const2 + 2] =
+		    ((hw_4ecc[const1] >> 22) & 0xF) |
+		    ((hw_4ecc[const1 + 1] << 4) & 0xF0);
+
+		/*
+		 * Take 6 bits from val3(count1=0) or val6 (count1=1) and
+		 * 2 bits from val4 (count1=0) or  val7 (count1=1)
+		 */
+		ecc_code[const2 + 3] =
+		    ((hw_4ecc[const1 + 1] >> 4) & 0x3F) |
+		    ((hw_4ecc[const1 + 1] >> 10) & 0xC0);
+
+		/* Take 8 bits from val4 (count1=0) or val7 (count1=1) */
+		ecc_code[const2 + 4] = (hw_4ecc[const1 + 1] >> 18) & 0xFF;
+	}
+
+	return 0;
+}
+
+static int nand_davinci_4bit_compare_ecc(struct mtd_info *mtd, u8 * read_ecc,	/* read from NAND */
+					 u8 * page_data)
+{
+	struct nand_chip *this = mtd->priv;
+	struct nand_davinci_info *info = this->priv;
+	unsigned short ecc_10bit[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
+	int i;
+	unsigned int hw_4ecc[4] = { 0, 0, 0, 0 }, iserror = 0;
+	unsigned short *pspare = NULL, *pspare1 = NULL;
+	unsigned int numErrors, errorAddress, errorValue;
+
+	/*
+	 * Check for an ECC where all bytes are 0xFF.  If this is the case, we
+	 * will assume we are looking at an erased page and we should ignore the
+	 * ECC.
+	 */
+	for (i = 0; i < 10; i++) {
+		if (read_ecc[i] != 0xFF)
+			break;
+	}
+	if (i == 10)
+		return 0;
+
+	/* Convert 8 bit in to 10 bit */
+	pspare = (unsigned short *)&read_ecc[2];
+	pspare1 = (unsigned short *)&read_ecc[0];
+	/* Take 10 bits from 0th and 1st bytes */
+	ecc_10bit[0] = (*pspare1) & 0x3FF;	/* 10 */
+	/* Take 6 bits from 1st byte and 4 bits from 2nd byte */
+	ecc_10bit[1] = (((*pspare1) >> 10) & 0x3F)
+	    | (((pspare[0]) << 6) & 0x3C0);	/* 6 + 4 */
+	/* Take 4 bits form 2nd bytes and 6 bits from 3rd bytes */
+	ecc_10bit[2] = ((pspare[0]) >> 4) & 0x3FF;	/* 10 */
+	/*Take 2 bits from 3rd byte and 8 bits from 4th byte */
+	ecc_10bit[3] = (((pspare[0]) >> 14) & 0x3)
+	    | ((((pspare[1])) << 2) & 0x3FC);	/* 2 + 8 */
+	/* Take 8 bits from 5th byte and 2 bits from 6th byte */
+	ecc_10bit[4] = ((pspare[1]) >> 8)
+	    | ((((pspare[2])) << 8) & 0x300);	/* 8 + 2 */
+	/* Take 6 bits from 6th byte and 4 bits from 7th byte */
+	ecc_10bit[5] = (pspare[2] >> 2) & 0x3FF;	/* 10 */
+	/* Take 4 bits from 7th byte and 6 bits from 8th byte */
+	ecc_10bit[6] = (((pspare[2]) >> 12) & 0xF)
+	    | ((((pspare[3])) << 4) & 0x3F0);	/* 4 + 6 */
+	/*Take 2 bits from 8th byte and 8 bits from 9th byte */
+	ecc_10bit[7] = ((pspare[3]) >> 6) & 0x3FF;	/* 10 */
+
+	/*
+	 * Write the parity values in the NAND Flash 4-bit ECC Load register.
+	 * Write each parity value one at a time starting from 4bit_ecc_val8
+	 * to 4bit_ecc_val1.
+	 */
+	for (i = 7; i >= 0; i--)
+		__raw_writel(ecc_10bit[i], info->emifregs + NAND4BITECCLOAD);
+
+	/*
+	 * Perform a dummy read to the EMIF Revision Code and Status register.
+	 * This is required to ensure time for syndrome calculation after
+	 * writing the ECC values in previous step.
+	 */
+	__raw_readl(info->emifregs + NANDFSR);
+
+	/*
+	 * Read the syndrome from the NAND Flash 4-Bit ECC 1-4 registers.
+	 * A syndrome value of 0 means no bit errors. If the syndrome is
+	 * non-zero then go further otherwise return.
+	 */
+	nand_davinci_4bit_readecc(mtd, hw_4ecc);
+
+	if (hw_4ecc[0] == ECC_STATE_NO_ERR && hw_4ecc[1] == ECC_STATE_NO_ERR &&
+	    hw_4ecc[2] == ECC_STATE_NO_ERR && hw_4ecc[3] == ECC_STATE_NO_ERR)
+		return 0;
+
+	/*
+	 * Clear any previous address calculation by doing a dummy read of an
+	 * error address register.
+	 */
+	__raw_readl(info->emifregs + NANDERRADD1);
+
+	/*
+	 * Set the addr_calc_st bit(bit no 13) in the NAND Flash Control
+	 * register to 1.
+	 */
+	__raw_writel(__raw_readl(info->emifregs + NANDFCR) | (1 << 13),
+		     info->emifregs + NANDFCR);
+
+	/*
+	 * Wait for the corr_state field (bits 8 to 11)in the
+	 * NAND Flash Status register to be equal to 0x0, 0x1, 0x2, or 0x3.
+	 */
+	do {
+		iserror = __raw_readl(info->emifregs + NANDFSR);
+		iserror &= EMIF_NANDFSR_ECC_STATE_MASK;
+		iserror = iserror >> 8;
+	} while ((ECC_STATE_NO_ERR != iserror) &&
+		 (ECC_STATE_TOO_MANY_ERRS != iserror) &&
+		 (ECC_STATE_ERR_CORR_COMP_P != iserror) &&
+		 (ECC_STATE_ERR_CORR_COMP_N != iserror));
+
+	/*
+	 * ECC_STATE_TOO_MANY_ERRS (0x1) means errors cannot be
+	 * corrected (five or more errors).  The number of errors
+	 * calculated (err_num field) differs from the number of errors
+	 * searched.  ECC_STATE_ERR_CORR_COMP_P (0x2) means error
+	 * correction complete (errors on bit 8 or 9).
+	 * ECC_STATE_ERR_CORR_COMP_N (0x3) means error correction
+	 * complete (error exists).
+	 */
+
+	if (iserror == ECC_STATE_NO_ERR)
+		return 0;
+	else if (iserror == ECC_STATE_TOO_MANY_ERRS)
+		return -1;
+
+	numErrors = ((__raw_readl(info->emifregs + NANDFSR) >> 16) & 0x3) + 1;
+
+	/* Read the error address, error value and correct */
+	for (i = 0; i < numErrors; i++) {
+		if (i > 1) {
+			errorAddress =
+			    ((__raw_readl(info->emifregs + NANDERRADD2) >>
+			      (16 * (i & 1))) & 0x3FF);
+			errorAddress = ((512 + 7) - errorAddress);
+			errorValue =
+			    ((__raw_readl(info->emifregs + NANDERRVAL2) >>
+			      (16 * (i & 1))) & 0xFF);
+		} else {
+			errorAddress =
+			    ((__raw_readl(info->emifregs + NANDERRADD1) >>
+			      (16 * (i & 1))) & 0x3FF);
+			errorAddress = ((512 + 7) - errorAddress);
+			errorValue =
+			    ((__raw_readl(info->emifregs + NANDERRVAL1) >>
+			      (16 * (i & 1))) & 0xFF);
+		}
+		/* xor the corrupt data with error value */
+		if (errorAddress < 512)
+			page_data[errorAddress] ^= errorValue;
+	}
+
+	return numErrors;
+}
+
+static int nand_davinci_4bit_correct_data(struct mtd_info *mtd, u_char * dat,
+					  u_char * read_ecc, u_char * calc_ecc)
+{
+	int r;
+
+	/*
+	 * dat points to 512 bytes of data.  read_ecc points to the start of the
+	 * oob area for this subpage, so the ecc values start at offset 6.
+	 * The calc_ecc pointer is not needed since our caclulated ECC is
+	 * already latched in the hardware ECC generator.
+	 */
+	r = nand_davinci_4bit_compare_ecc(mtd, read_ecc + 6, dat);
+
+	return r;
+}
+
 static int nand_flash_init(struct nand_davinci_info *info)
 {
 	__raw_writel((1 << info->ce), info->emifregs + NANDFCR);
@@ -519,6 +907,8 @@ static int __devinit nand_davinci_probe(
 	this->hwcontrol = nand_davinci_hwcontrol;
 	this->options = pdata->options;
 	this->eccmode = pdata->eccmode;
+	this->bbt_td = &nand_davinci_bbt_main_descr;
+	this->bbt_md = &nand_davinci_bbt_mirror_descr;
 
 	info->cle_mask = pdata->cle_mask;
 	info->ale_mask = pdata->ale_mask;
@@ -532,9 +922,22 @@ static int __devinit nand_davinci_probe(
 		break;
 	case NAND_ECC_HW3_512:
 		dev_info(dev, "Using 1-bit hardware ECC\n");
-		this->calculate_ecc = nand_davinci_calculate_ecc;
-		this->correct_data = nand_davinci_correct_data;
-		this->enable_hwecc = nand_davinci_enable_hwecc;
+		this->calculate_ecc = nand_davinci_1bit_calculate_ecc;
+		this->correct_data = nand_davinci_1bit_correct_data;
+		this->enable_hwecc = nand_davinci_1bit_enable_hwecc;
+		break;
+	case NAND_ECC_HW10_512:
+		dev_info(dev, "Using 4-bit hardware ECC\n");
+		this->options |= NAND_USE_FLASH_BBT | NAND_HWECC_SYNDROME;
+		this->autooob = &nand_davinci_hw10_512_oobinfo;
+		this->layout = nand_davinci_hw10_512_layout;
+		this->calculate_ecc = nand_davinci_4bit_calculate_ecc;
+		this->correct_data = nand_davinci_4bit_correct_data;
+		this->enable_hwecc = nand_davinci_4bit_enable_hwecc;
+		this->block_bad = nand_davinci_hw10_512_block_bad;
+		this->block_markbad = nand_davinci_hw10_512_block_markbad;
+		this->badblock_pattern =
+		    &nand_davinci_hw10_512_badblock_pattern;
 		break;
 	default:
 		dev_err(dev, "Unsupported ECC mode %d requested\n",
@@ -562,11 +965,24 @@ static int __devinit nand_davinci_probe(
 		goto out_unuse_clk;
 	}
 
-	if (this->eccmode == NAND_ECC_HW3_512) {
-		/* Clear the NANDFnECC register */
-		nand_davinci_enable_hwecc(info->mtd, NAND_ECC_WRITE);
-		nand_davinci_readecc(info->mtd, info->ce);
+	/* Terminate any ECC calculation already in progress */
+	switch (this->eccmode) {
+	case NAND_ECC_HW3_512:
+		nand_davinci_1bit_enable_hwecc(info->mtd, NAND_ECC_WRITE);
+		nand_davinci_1bit_readecc(info->mtd, info->ce);
+		break;
+	case NAND_ECC_HW10_512:
+		{
+			unsigned int ecc[4];
+
+			nand_davinci_4bit_enable_hwecc(info->mtd,
+						       NAND_ECC_WRITE);
+			nand_davinci_4bit_readecc(info->mtd, ecc);
+		}
+	default:
+		break;
 	}
+
 #ifdef CONFIG_MTD_PARTITIONS
 	err = parse_mtd_partitions(info->mtd, part_probes, &info->parts, 0);
 	if (err > 0)
Index: linux-2.6.10/mvl_patches/pro-1671.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1671.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1671);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

