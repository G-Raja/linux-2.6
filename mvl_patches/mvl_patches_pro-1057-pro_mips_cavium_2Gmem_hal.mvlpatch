#! /usr/bin/env bash
# Patch: -pro_mips_cavium_2Gmem_hal
# Date: Tue Feb  6 08:14:51 2007
# Source: MontaVista Software, Inc.
# MR:19143
# Type: Defect Fix
# Disposition: needs submitting to community
# Signed-off-by: Yadviga Grigorieva<yadviga@ru.mvista.com>
# Description:
# 1. lcd_address now is defined in bootloader structure, not hardcoded.
# 2. Whether PCI is present or not. The pci bit is asked from bootloader structure. 
# 3. Value of cpu rate is set in special routine.
# 4. Routines for getting board type, cpu mask, arguments from bootloader are added.
# 5. Routine  octeon_hal_init for led and reserve memory initializing  is added instead of octeon_led_init.
# 6. Routine octeon_hal_setup_reserved32 for setting up  reserve memory region is added.
# 

PATCHNUM=1057
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR:19143
Type: Defect Fix
Disposition: needs submitting to community
Signed-off-by: Yadviga Grigorieva<yadviga@ru.mvista.com>
Description:
1. lcd_address now is defined in bootloader structure, not hardcoded.
2. Whether PCI is present or not. The pci bit is asked from bootloader structure. 
3. Value of cpu rate is set in special routine.
4. Routines for getting board type, cpu mask, arguments from bootloader are added.
5. Routine  octeon_hal_init for led and reserve memory initializing  is added instead of octeon_led_init.
6. Routine octeon_hal_setup_reserved32 for setting up  reserve memory region is added.

Index: linux-2.6.10/arch/mips/cavium-octeon/hal.c
===================================================================
--- linux-2.6.10.orig/arch/mips/cavium-octeon/hal.c
+++ linux-2.6.10/arch/mips/cavium-octeon/hal.c
@@ -8,6 +8,7 @@
 #include <linux/kernel.h>
 #include <linux/string.h>
 #include <linux/module.h>
+#include <octeon-app-init.h>
 
 #include <hal.h>
 #include <cvmx-bootmem-shared.h>
@@ -20,35 +21,150 @@ EXPORT_SYMBOL(octeon_bootmem_alloc);
 /* This must not be static since inline functions access it */
 spinlock_t octeon_led_lock;
 
+ /* Set to non-zero, so it is not in .bss section and is not zeroed */
+volatile octeon_boot_descriptor_t *octeon_boot_desc_ptr = (void *)0xEADBEEFULL;
+cvmx_bootinfo_t *octeon_bootinfo;
+
+#if CONFIG_CAVIUM_RESERVE32
+uint64_t octeon_reserve32_memory = 0;
+#endif
+
 void octeon_write_lcd(const char *s)
 {
-#ifndef CONFIG_CAVIUM_OCTEON_SIMULATOR
-	extern octeon_bootinfo_t *octeon_bootinfo;
-
-	if (octeon_bootinfo->board_rev_major < 2) {
-		volatile char *lcd_address =
-		    (volatile char *)0x800000001d020004ull;
-		int i;
-		for (i = 0; i < 4; i++) {
-			if (*s)
-				lcd_address[3 - i] = *s++;
-			else
-				lcd_address[3 - i] = ' ';
-		}
-	} else {
-		volatile char *lcd_address =
-		    (volatile char *)0x800000001d0200f8ull;
+    if (octeon_bootinfo->led_display_base_addr)
+    {
+	volatile char *lcd_address = (volatile char*)((1ull << 63) | octeon_bootinfo->led_display_base_addr);
 		int i;
-		for (i = 0; i < 8; i++) {
+	for (i=0; i<8; i++)
+	{
 			if (*s)
 				lcd_address[i] = *s++;
 			else
 				lcd_address[i] = ' ';
 		}
 	}
+
+}
+
+/**
+  * Return true if Octeon is in PCI Host mode. This means
+  * Linux can control the PCI bus.
+  *
+  * @return Non zero if Octeon in host mode
+  */
+ int octeon_is_pci_host(void)
+ {
+     return (octeon_bootinfo->config_flags & CVMX_BOOTINFO_CFG_FLAG_PCI_HOST);
+ }
+
+
+ /**
+  * Get the clock rate of Octeon
+  *
+  * @return Clock rate in HZ
+  */
+ uint64_t octeon_get_clock_rate(void)
+ {
+
+ #ifdef CONFIG_CAVIUM_OCTEON_SIMULATOR
+     octeon_bootinfo->eclock_hz = 6000000;
+ #else
+     if ((octeon_bootinfo->eclock_hz < 300000000) ||
+	 (octeon_bootinfo->eclock_hz > 800000000))
+     {
+	 printk("Clock speed from bootloader (%dMhz) is out of range. Assuming 500Mhz\n",
+		octeon_bootinfo->eclock_hz/1000000);
+	 octeon_bootinfo->eclock_hz = 500000000;
+     }
+ #endif
+
+     return octeon_bootinfo->eclock_hz;
+ }
+
+
+ /**
+  * Return the board name as a constant string
+  *
+  * @return board name
+  */
+ const char *octeon_board_type_string(void)
+ {
+     return cvmx_board_type_to_string(octeon_bootinfo->board_type);
+ }
+
+
+ /**
+  * Get the coremask Linux was booted on.
+  *
+  * @return Core mask
+  */
+ int octeon_get_boot_coremask(void)
+ {
+     return octeon_boot_desc_ptr->core_mask;
+ }
+
+
+ /**
+  * Return the number of arguments we got from the bootloader
+  *
+  * @return argc
+  */
+ int octeon_get_boot_num_arguments(void)
+ {
+     return octeon_boot_desc_ptr->argc;
+ }
+
+
+ /**
+  * Get an argument from the bootloader
+  *
+  * @param arg    argument to get
+  * @return argument
+  */
+ const char *octeon_get_boot_argument(int arg)
+ {
+     return octeon_phys_to_ptr(octeon_boot_desc_ptr->argv[arg]);
+ }
+
+
+ void octeon_hal_init(void)
+  {
+     /* Make sure we got the boot descriptor block */
+     if ((octeon_boot_desc_ptr == (void *)0xEADBEEFULL))
+	 panic("Boot descriptor block wasn't passed properly\n");
+
+     octeon_bootinfo = octeon_phys_to_ptr(octeon_boot_desc_ptr->cvmx_desc_vaddr);
+
+     spin_lock_init(&octeon_led_lock);
+     octeon_write_csr(OCTEON_LED_EN, 0);
+     octeon_write_csr(OCTEON_LED_PRT, 0);
+#if CONFIG_CAVIUM_RESERVE32
+    cvmx_bootmem_desc_t *bootmem_desc = octeon_phys_to_ptr(octeon_bootinfo->phy_mem_desc_addr);
+    octeon_reserve32_memory = octeon_phy_mem_named_block_alloc(bootmem_desc, CONFIG_CAVIUM_RESERVE32<<20, 0, 0, 2<<20, "CAVIUM_RESERVE32");
+    if (octeon_reserve32_memory == 0)
+	printk("Failed to allocate CAVIUM_RESERVE32 memory area\n");
 #endif
 }
 
+/**
+ * Called after Linux allocates all of its memory. This sets
+ * up the 32bit shared region. Note that this region was
+ * allocated as a named block during HAL init. This made sure
+ * that nobody used the memory for something else during
+ * init. Now we'll free it so userspace apps can use this
+ * memory region with bootmem_alloc.
+ */
+void octeon_hal_setup_reserved32(void)
+ {
+ #if CONFIG_CAVIUM_RESERVE32
+     if (octeon_reserve32_memory)
+     {
+	 cvmx_bootmem_desc_t *bootmem_desc = octeon_phys_to_ptr(octeon_bootinfo->phy_mem_desc_addr);
+	 octeon_phy_mem_named_block_free(bootmem_desc, "CAVIUM_RESERVE32");
+     }
+ #endif
+}
+
 void octeon_check_cpu_bist(void)
 {
 	const int coreid = octeon_get_core_num();
@@ -106,7 +222,6 @@ void *octeon_bootmem_alloc(uint64_t size
 void *octeon_bootmem_alloc_range(uint64_t size, uint64_t alignment,
 				 uint64_t min_addr, uint64_t max_addr)
 {
-	extern octeon_bootinfo_t *octeon_bootinfo;
 	cvmx_bootmem_desc_t *bootmem_desc =
 	    octeon_phys_to_ptr(octeon_bootinfo->phy_mem_desc_addr);
 
@@ -162,3 +277,7 @@ static void *cvmx_bootmem_alloc_range(ui
 
 EXPORT_SYMBOL(cvmx_bootmem_alloc_range);
 EXPORT_SYMBOL(cvmx_bootmem_alloc);
+EXPORT_SYMBOL(octeon_bootinfo);
+#if CONFIG_CAVIUM_RESERVE32
+EXPORT_SYMBOL(octeon_reserve32_memory);
+#endif
Index: linux-2.6.10/mvl_patches/pro-1057.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1057.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1057);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

