#! /usr/bin/env bash
# Patch: -pro_mpc8349mIDX_initial
# Date: Mon Apr  9 00:17:53 2007
# Source: MontaVista Software, Inc.
# MR: 21950
# Type: Enhancement
# Disposition: backport of linux-2.6.19, git://git.kernel.org/pub/scm/linux/kernel/git/paulus/powerpc.git
# Signed-off-by: Gennadiy Kurtsman <gkurtsman@ru.mvista.com>
# Description:
#     Patch adds support for the MPC834x-mITX reference platform from Freescale.
# 

PATCHNUM=1299
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 21950
Type: Enhancement
Disposition: backport of linux-2.6.19, git://git.kernel.org/pub/scm/linux/kernel/git/paulus/powerpc.git
Signed-off-by: Gennadiy Kurtsman <gkurtsman@ru.mvista.com>
Description:
    Patch adds support for the MPC834x-mITX reference platform from Freescale.

Index: linux-2.6.10/arch/ppc/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/ppc/Kconfig
+++ linux-2.6.10/arch/ppc/Kconfig
@@ -738,6 +738,11 @@ config MPC834x_SYS
 	  3 PCI slots.  The PIBs PCI initialization is the bootloader's
 	  responsiblilty.
 
+config MPC834x_ITX
+	bool "Freescale MPC834x ITX"
+	help
+	  This option enables support for the MPC834x ITX evaluation board.
+
 config MPC8641_HPCN
 	bool "Freescale MPC8641-HPCN "
 	select 86xx
@@ -792,7 +797,7 @@ config 8272
 
 config MPC834x
 	bool
-	depends on MPC834x_SYS
+	depends on MPC834x_SYS || MPC834x_ITX
 	default y
 
 config MPC8360
Index: linux-2.6.10/arch/ppc/platforms/83xx/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/ppc/platforms/83xx/Kconfig
+++ linux-2.6.10/arch/ppc/platforms/83xx/Kconfig
@@ -1,6 +1,6 @@
 config 834x_USB_SUPPORT
 	bool "834x USB Support"
-	depends on MPC834x_SYS
+	depends on MPC834x_SYS || MPC834x_ITX
 	default y
 	---help---
 	  Enables support for the USB controllers on the MPC834x chip. The 834x
Index: linux-2.6.10/arch/ppc/platforms/83xx/Makefile
===================================================================
--- linux-2.6.10.orig/arch/ppc/platforms/83xx/Makefile
+++ linux-2.6.10/arch/ppc/platforms/83xx/Makefile
@@ -2,4 +2,5 @@
 # Makefile for the PowerPC 83xx linux kernel.
 #
 obj-$(CONFIG_MPC834x_SYS)	+= mpc834x_sys.o
+obj-$(CONFIG_MPC834x_ITX)	+= mpc834x_itx.o
 obj-$(CONFIG_MPC8360E_PB)	+= mpc8360e_pb.o
Index: linux-2.6.10/arch/ppc/platforms/83xx/mpc834x_itx.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/ppc/platforms/83xx/mpc834x_itx.c
@@ -0,0 +1,503 @@
+/*
+ * arch/ppc/platforms/83xx/mpc834x_itx.c
+ *
+ * MPC834x ITX board specific routines
+ *
+ * Maintainer: Kumar Gala <kumar.gala@freescale.com>
+ *
+ * Copyright 2005 Freescale Semiconductor Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/config.h>
+#include <linux/stddef.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/reboot.h>
+#include <linux/pci.h>
+#include <linux/kdev_t.h>
+#include <linux/major.h>
+#include <linux/console.h>
+#include <linux/delay.h>
+#include <linux/irq.h>
+#include <linux/seq_file.h>
+#include <linux/root_dev.h>
+#include <linux/serial.h>
+#include <linux/tty.h>		/* for linux/serial_core.h */
+#include <linux/serial_core.h>
+#include <linux/mtd/physmap.h>
+#include <linux/initrd.h>
+#include <linux/module.h>
+#include <linux/fsl_devices.h>
+#include <linux/kgdb.h>
+
+#include <asm/system.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+#include <asm/atomic.h>
+#include <asm/time.h>
+#include <asm/io.h>
+#include <asm/machdep.h>
+#include <asm/ipic.h>
+#include <asm/bootinfo.h>
+#include <asm/pci-bridge.h>
+#include <asm/mpc83xx.h>
+#include <asm/irq.h>
+#include <asm/kgdb.h>
+#include <asm/ppc_sys.h>
+#include <mm/mmu_decl.h>
+
+#include <syslib/ppc83xx_setup.h>
+
+#ifndef CONFIG_PCI
+unsigned long isa_io_base;
+unsigned long isa_mem_base;
+#endif
+
+extern unsigned long total_memory;	/* in mm/init */
+extern void gen550_progress(char *, unsigned short);
+extern void gen550_init(int, struct uart_port *);
+
+unsigned char __res[sizeof(bd_t)];
+
+#ifdef CONFIG_PCI
+int mpc83xx_map_irq(struct pci_dev *dev, unsigned char idsel, unsigned char pin)
+{
+	static char pci_irq_table[][1] =
+	    /*
+	     *      PCI IDSEL/INTPIN->INTLINE
+	     *       A      B      C      D
+	     */
+	{
+		{PIRQB},	/* idsel 0x0e */
+		{PIRQC},	/* idsel 0x0f */
+		{PIRQA},	/* idsel 0x10 */
+	};
+
+	const long min_idsel = 0x0e, max_idsel = 0x10, irqs_per_slot = 1;
+	if ((idsel < min_idsel) || (idsel > max_idsel) || (!dev) || (pin > 1))
+		return -EINVAL;
+	return PCI_IRQ_TABLE_LOOKUP;
+}
+
+int mpc83xx_exclude_device(u_char bus, u_char devfn)
+{
+	return PCIBIOS_SUCCESSFUL;
+}
+#endif				/* CONFIG_PCI */
+
+#ifdef CONFIG_834x_USB_SUPPORT
+/*
+ * Configure the on-chip USB controller. The MPC834xMDS only supports the
+ * second USB interface (port 1). This code sets up the hardware and then
+ * lets the platform driver take over device setup.
+ */
+
+void mpc834x_board_init(void)
+{
+}
+
+void mpc834x_usb_clk_cfg(void)
+{
+	unsigned long sccr;
+
+	sccr = in_be32((void *)VIRT_IMMRBAR + MPC83XX_SCCR_OFFS);
+
+	sccr |= MPC83XX_SCCR_USB_MPHCM_11 | MPC83XX_SCCR_USB_DRCM_11;
+
+	out_be32((void *)VIRT_IMMRBAR + MPC83XX_SCCR_OFFS, sccr);
+}
+
+void mpc834x_usb_pin_cfg(struct fsl_usb2_platform_data *pdata)
+{
+	unsigned long sicrl;
+
+	sicrl = in_be32((void *)VIRT_IMMRBAR + MPC83XX_SICRL_OFFS);
+
+	/* set both ports to MPH mode */
+	sicrl &= ~(MPC83XX_SICRL_USB0 | MPC83XX_SICRL_USB1);
+
+	if (pdata->operating_mode == FSL_USB2_DR_HOST) {
+		if (pdata->phy_mode == FSL_USB2_PHY_UTMI_WIDE) {
+			/* UTMI WIDE combines both ports into a single 16-bit port */
+			sicrl |= MPC83XX_SICRL_USB0 | MPC83XX_SICRL_USB1;
+		} else {
+			if (pdata->port_enables & FSL_USB2_PORT1_ENABLED)
+				sicrl |= MPC83XX_SICRL_USB1;
+		}
+	}
+	out_be32((void *)VIRT_IMMRBAR + MPC83XX_SICRL_OFFS, sicrl);
+}
+
+static void __init mpc834x_usb_init(void)
+{
+	struct fsl_usb2_platform_data *pdata;
+
+#ifdef CONFIG_834x_DR_USB_SUPPORT
+	ppc_sys_device_remove(MPC83xx_USB2_MPH);
+	pdata =
+	    (struct fsl_usb2_platform_data *)ppc_sys_get_pdata(MPC83xx_USB2_DR);
+
+	if (pdata) {
+		pdata->phy_mode = FSL_USB2_PHY_ULPI;
+		pdata->operating_mode = FSL_USB2_DR_HOST;
+		pdata->port_enables = FSL_USB2_PORT1_ENABLED;
+	}
+#elif defined(CONFIG_834x_MPH_USB_SUPPORT)
+	ppc_sys_device_remove(MPC83xx_USB2_DR);
+	pdata =
+	    (struct fsl_usb2_platform_data *)
+	    ppc_sys_get_pdata(MPC83xx_USB2_MPH);
+
+	if (pdata) {
+		pdata->phy_mode = FSL_USB2_PHY_ULPI;
+		pdata->operating_mode = FSL_USB2_MPH_HOST;
+		pdata->port_enables = FSL_USB2_PORT1_ENABLED;
+	}
+#endif
+	mpc834x_board_init();
+	mpc834x_usb_pin_cfg(pdata);
+	mpc834x_usb_clk_cfg();
+}
+#endif				/* CONFIG_834x_USB_SUPPORT */
+
+/* ************************************************************************
+ *
+ * Setup the architecture
+ *
+ */
+static void __init mpc834x_itx_setup_arch(void)
+{
+	bd_t *binfo = (bd_t *) __res;
+	unsigned int freq;
+	struct gianfar_platform_data *pdata;
+
+	/* get the core frequency */
+	freq = binfo->bi_intfreq;
+
+	/* Set loops_per_jiffy to a half-way reasonable value,
+	   for use until calibrate_delay gets called. */
+	loops_per_jiffy = freq / HZ;
+
+#ifdef CONFIG_PCI
+	/* setup PCI host bridges */
+	mpc83xx_setup_hose();
+#endif
+	mpc83xx_early_serial_map();
+
+	/* setup the board related information for the enet controllers */
+	pdata =
+	    (struct gianfar_platform_data *)ppc_sys_get_pdata(MPC83xx_TSEC1);
+	if (pdata) {
+		pdata->board_flags = FSL_GIANFAR_BRD_HAS_PHY_INTR;
+		pdata->bus_id = 1;
+		pdata->phy_id = 0x1c;
+		/* fixup phy address */
+		memcpy(pdata->mac_addr, binfo->bi_enetaddr, 6);
+	}
+
+	pdata =
+	    (struct gianfar_platform_data *)ppc_sys_get_pdata(MPC83xx_TSEC2);
+	if (pdata) {
+		pdata->board_flags =
+		    FSL_GIANFAR_BRD_HAS_PHY_INTR | FSL_GIANFAR_BRD_PHY_ANEG;
+		pdata->bus_id = 1;
+		pdata->phy_id = 0x1f;
+		/* fixup phy address */
+		memcpy(pdata->mac_addr, binfo->bi_enet1addr, 6);
+	}
+#ifdef CONFIG_834x_USB_SUPPORT
+	mpc834x_usb_init();
+#else
+	ppc_sys_device_remove(MPC83xx_USB2_MPH);
+	ppc_sys_device_remove(MPC83xx_USB2_DR);
+#endif
+
+#ifdef CONFIG_BLK_DEV_INITRD
+	if (initrd_start)
+		ROOT_DEV = Root_RAM0;
+	else
+#endif
+#ifdef  CONFIG_ROOT_NFS
+		ROOT_DEV = Root_NFS;
+#else
+		ROOT_DEV = Root_HDA1;
+#endif
+}
+
+#if defined(CONFIG_MTD_PHYSMAP) && defined(CONFIG_MTD_PARTITIONS)
+
+/*
+ * The firmware doesn't seem to provide the correct FLASH values,
+ * hence these defines. They will most likely need to be updated for
+ * later boards.
+ */
+#if (CONFIG_MTD_PHYSMAP_START!=0)
+#define MPC8349MDS_FLASH_ADDR CONFIG_MTD_PHYSMAP_START
+#else
+#define MPC8349MDS_FLASH_ADDR 0xFE000000
+#endif
+#if (CONFIG_MTD_PHYSMAP_LEN!=0)
+#define MPC8349MDS_FLASH_SIZE CONFIG_MTD_PHYSMAP_LEN
+#else
+#define MPC8349MDS_FLASH_SIZE 0x00800000
+#endif
+#define MPC8349MDS_TP_SIZE	0x00200000
+#define MPC8349MDS_UBOOT_SIZE	0x00400000
+#define MPC8349MDS_FS_SIZE	(MPC8349MDS_FLASH_SIZE - \
+				 MPC8349MDS_TP_SIZE - \
+				 MPC8349MDS_UBOOT_SIZE)
+
+static struct mtd_partition ptbl[] = {
+
+	{
+	 .name = "ROM Monitor",
+	 .size = MPC8349MDS_UBOOT_SIZE,
+	 .offset = 0,
+	 .mask_flags = MTD_CAP_ROM,
+	 },
+	{
+	 .name = "User FS",
+	 .size = MPC8349MDS_FS_SIZE,
+	 .offset = MTDPART_OFS_APPEND,
+	 .mask_flags = MTD_ERASEABLE,
+	 },
+	{
+	 .name = "Third_party",
+	 .size = MPC8349MDS_TP_SIZE,
+	 .offset = MTDPART_OFS_APPEND,
+	 .mask_flags = MTD_CAP_ROM,
+	 },
+};
+
+static int __init mpc834x_setup_mtd(void)
+{
+	physmap_configure(MPC8349MDS_FLASH_ADDR, MPC8349MDS_FLASH_SIZE, 2,
+			  NULL);
+	physmap_set_partitions(ptbl, sizeof(ptbl) / sizeof(ptbl[0]));
+	return 0;
+}
+
+arch_initcall(mpc834x_setup_mtd);
+#endif
+
+static void __init mpc834x_sys_map_io(void)
+{
+	/* we steal the lowest ioremap addr for virt space */
+	io_block_mapping(VIRT_IMMRBAR, immrbar, 1024 * 1024, _PAGE_IO);
+}
+
+int mpc834x_itx_show_cpuinfo(struct seq_file *m)
+{
+	uint pvid, svid, phid1;
+	bd_t *binfo = (bd_t *) __res;
+	unsigned int freq;
+
+	/* get the core frequency */
+	freq = binfo->bi_intfreq;
+
+	pvid = mfspr(PVR);
+	svid = mfspr(SVR);
+
+	seq_printf(m, "Vendor\t\t: Freescale Inc.\n");
+	seq_printf(m, "Machine\t\t: mpc%s itx\n",
+		   cur_ppc_sys_spec->ppc_sys_name);
+	seq_printf(m, "core clock\t: %d MHz\n" "bus  clock\t: %d MHz\n",
+		   (int)(binfo->bi_intfreq / 1000000),
+		   (int)(binfo->bi_busfreq / 1000000));
+	seq_printf(m, "PVR\t\t: 0x%x\n", pvid);
+	seq_printf(m, "SVR\t\t: 0x%x\n", svid);
+
+	/* Display cpu Pll setting */
+	phid1 = mfspr(HID1);
+	seq_printf(m, "PLL setting\t: 0x%x\n", ((phid1 >> 24) & 0x3f));
+
+	/* Display the amount of memory */
+	seq_printf(m, "Memory\t\t: %d MB\n",
+		   (int)(binfo->bi_memsize / (1024 * 1024)));
+
+	return 0;
+}
+
+void __init mpc834x_itx_init_IRQ(void)
+{
+	bd_t *binfo = (bd_t *) __res;
+
+	u8 senses[8] = {
+		0,		/* EXT 0 */
+		IRQ_SENSE_LEVEL,	/* EXT 1 */
+		IRQ_SENSE_LEVEL,	/* EXT 2 */
+		0,		/* EXT 3 */
+#ifdef CONFIG_PCI
+		IRQ_SENSE_LEVEL,	/* EXT 4 */
+		IRQ_SENSE_LEVEL,	/* EXT 5 */
+		IRQ_SENSE_LEVEL,	/* EXT 6 */
+		IRQ_SENSE_LEVEL,	/* EXT 7 */
+#else
+		0,		/* EXT 4 */
+		0,		/* EXT 5 */
+		0,		/* EXT 6 */
+		0,		/* EXT 7 */
+#endif
+	};
+
+	ipic_init(binfo->bi_immr_base + 0x00700, 0, MPC83xx_IPIC_IRQ_OFFSET,
+		  senses, 8);
+
+	/* Initialize the default interrupt mapping priorities,
+	 * in case the boot rom changed something on us.
+	 */
+	ipic_set_default_priority();
+}
+
+#if defined(CONFIG_I2C_MPC) && defined(CONFIG_SENSORS_DS1374)
+extern ulong ds1374_get_rtc_time(void);
+extern int ds1374_set_rtc_time(ulong);
+
+static int __init mpc834x_rtc_hookup(void)
+{
+	struct timespec tv;
+
+	ppc_md.get_rtc_time = ds1374_get_rtc_time;
+	ppc_md.set_rtc_time = ds1374_set_rtc_time;
+
+	tv.tv_nsec = 0;
+	tv.tv_sec = (ppc_md.get_rtc_time) ();
+	do_settimeofday(&tv);
+
+	return 0;
+}
+
+late_initcall(mpc834x_rtc_hookup);
+#endif
+
+static __inline__ void mpc834x_itx_set_bat(void)
+{
+	/* we steal the lowest ioremap addr for virt space */
+	mb();
+	mtspr(DBAT1U, VIRT_IMMRBAR | 0x1e);
+	mtspr(DBAT1L, immrbar | 0x2a);
+	mb();
+}
+
+void mpc83xx_itx_restart(char *cmd)
+{
+#define RST_OFFSET      0x00000900
+#define RST_PROT_REG    0x00000018
+#define RST_CTRL_REG    0x0000001c
+	__be32 __iomem *reg;
+
+	/* map reset register space */
+	reg = ioremap(immrbar + RST_OFFSET, 0xff);
+
+	local_irq_disable();
+
+	/* enable software reset "RSTE" */
+	out_be32(reg + (RST_PROT_REG >> 2), 0x52535445);
+
+	/* set software hard reset */
+	out_be32(reg + (RST_CTRL_REG >> 2), 0x2);
+	for (;;) ;
+}
+
+void __init
+platform_init(unsigned long r3, unsigned long r4, unsigned long r5,
+	      unsigned long r6, unsigned long r7)
+{
+	bd_t *binfo = (bd_t *) __res;
+
+	/* parse_bootinfo must always be called first */
+	parse_bootinfo(find_bootinfo());
+
+	/*
+	 * If we were passed in a board information, copy it into the
+	 * residual data area.
+	 */
+	if (r3) {
+		memcpy((void *)__res, (void *)(r3 + KERNELBASE), sizeof(bd_t));
+	}
+#if defined(CONFIG_BLK_DEV_INITRD)
+	/*
+	 * If the init RAM disk has been configured in, and there's a valid
+	 * starting address for it, set it up.
+	 */
+	if (r4) {
+		initrd_start = r4 + KERNELBASE;
+		initrd_end = r5 + KERNELBASE;
+	}
+#endif				/* CONFIG_BLK_DEV_INITRD */
+
+	/* Copy the kernel command line arguments to a safe place. */
+	if (r6) {
+		*(char *)(r7 + KERNELBASE) = 0;
+		strcpy(cmd_line, (char *)(r6 + KERNELBASE));
+	}
+
+	immrbar = binfo->bi_immr_base;
+
+	mpc834x_itx_set_bat();
+
+#if defined(CONFIG_SERIAL_8250) && defined(CONFIG_SERIAL_TEXT_DEBUG)
+	{
+		struct uart_port p;
+
+		memset(&p, 0, sizeof(p));
+		p.iotype = SERIAL_IO_MEM;
+		p.membase = (unsigned char __iomem *)(VIRT_IMMRBAR + 0x4500);
+		p.uartclk = binfo->bi_busfreq;
+
+		gen550_init(0, &p);
+#if (defined CONFIG_KGDB_8250) && (defined CONFIG_KGDB_TTYS0)
+		kgdb8250_add_port(0, &p);
+#endif
+		memset(&p, 0, sizeof(p));
+		p.iotype = SERIAL_IO_MEM;
+		p.membase = (unsigned char __iomem *)(VIRT_IMMRBAR + 0x4600);
+		p.uartclk = binfo->bi_busfreq;
+
+		gen550_init(1, &p);
+#if (defined CONFIG_KGDB_8250) && (defined CONFIG_KGDB_TTYS1)
+		kgdb8250_add_port(1, &p);
+#endif
+	}
+#endif
+
+	identify_ppc_sys_by_name_and_id("8349E_ITX", mfspr(SVR));
+
+	/* setup the PowerPC module struct */
+	ppc_md.setup_arch = mpc834x_itx_setup_arch;
+	ppc_md.show_cpuinfo = mpc834x_itx_show_cpuinfo;
+
+	ppc_md.init_IRQ = mpc834x_itx_init_IRQ;
+	ppc_md.get_irq = ipic_get_irq;
+
+	ppc_md.restart = mpc83xx_itx_restart;
+	ppc_md.power_off = mpc83xx_power_off;
+	ppc_md.halt = mpc83xx_halt;
+
+	ppc_md.find_end_of_memory = mpc83xx_find_end_of_memory;
+	ppc_md.setup_io_mappings = mpc834x_sys_map_io;
+
+	ppc_md.time_init = mpc83xx_time_init;
+	ppc_md.set_rtc_time = NULL;
+	ppc_md.get_rtc_time = NULL;
+	ppc_md.calibrate_decr = mpc83xx_calibrate_decr;
+
+#if defined(CONFIG_SERIAL_8250) && defined(CONFIG_SERIAL_TEXT_DEBUG)
+	ppc_md.progress = gen550_progress;
+#endif				/* CONFIG_SERIAL_8250 && CONFIG_SERIAL_TEXT_DEBUG */
+
+	if (ppc_md.progress)
+		ppc_md.progress("mpc834x_itx_init(): exit", 0);
+
+	return;
+}
+
+#ifdef CONFIG_RTC_CLASS
+late_initcall(rtc_class_hookup);
+#endif
Index: linux-2.6.10/arch/ppc/platforms/83xx/mpc834x_itx.h
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/ppc/platforms/83xx/mpc834x_itx.h
@@ -0,0 +1,49 @@
+/*
+ * arch/ppc/platforms/83xx/mpc834x_itx.h
+ *
+ * MPC834X ITX common board definitions
+ *
+ * Maintainer: Kumar Gala <kumar.gala@freescale.com>
+ *
+ * Copyright 2005 Freescale Semiconductor, Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ */
+
+#ifndef __MACH_MPC83XX_ITX_H__
+#define __MACH_MPC83XX_ITX_H__
+
+#include <linux/config.h>
+#include <linux/init.h>
+#include <linux/seq_file.h>
+#include <syslib/ppc83xx_setup.h>
+#include <asm/ppcboot.h>
+
+#define VIRT_IMMRBAR		((uint)0xfe000000)
+
+#define PIRQA	MPC83xx_IRQ_EXT6
+#define PIRQB	MPC83xx_IRQ_EXT7
+#define PIRQC	MPC83xx_IRQ_EXT4
+
+#define MPC83xx_PCI1_LOWER_IO	0x00000000
+#define MPC83xx_PCI1_UPPER_IO	0x00ffffff
+#define MPC83xx_PCI1_LOWER_MEM	0x80000000
+#define MPC83xx_PCI1_UPPER_MEM	0x9fffffff
+#define MPC83xx_PCI1_IO_BASE	0xe2000000
+#define MPC83xx_PCI1_MEM_OFFSET	0x00000000
+#define MPC83xx_PCI1_IO_SIZE	0x01000000
+
+#define MPC83xx_PCI2_LOWER_IO	0x00000000
+#define MPC83xx_PCI2_UPPER_IO	0x00ffffff
+#define MPC83xx_PCI2_LOWER_MEM	0xa0000000
+#define MPC83xx_PCI2_UPPER_MEM	0xbfffffff
+#define MPC83xx_PCI2_IO_BASE	0xe3000000
+#define MPC83xx_PCI2_MEM_OFFSET	0x00000000
+#define MPC83xx_PCI2_IO_SIZE	0x01000000
+
+#endif                /* __MACH_MPC83XX_ITX_H__ */
+
Index: linux-2.6.10/include/asm-ppc/mpc83xx.h
===================================================================
--- linux-2.6.10.orig/include/asm-ppc/mpc83xx.h
+++ linux-2.6.10/include/asm-ppc/mpc83xx.h
@@ -28,6 +28,9 @@
 #ifdef CONFIG_MPC834x_SYS
 #include <platforms/83xx/mpc834x_sys.h>
 #endif
+#ifdef CONFIG_MPC834x_ITX
+#include <platforms/83xx/mpc834x_itx.h>
+#endif
 #ifdef CONFIG_MPC8360E_PB
 #include <platforms/83xx/mpc8360e_pb.h>
 #endif
@@ -188,6 +191,7 @@ enum ppc_sys_devices {
 	MPC83xx_USB2_DR,
 	MPC83xx_USB2_MPH,
 	MPC83xx_MDIO,
+	MPC83xx_MDIO_TSEC1,
 	MPC83xx_QE_UCC1,
 	MPC83xx_QE_UCC2,
 	MPC83xx_QE_UCC3,
Index: linux-2.6.10/arch/ppc/syslib/mpc83xx_devices.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/syslib/mpc83xx_devices.c
+++ linux-2.6.10/arch/ppc/syslib/mpc83xx_devices.c
@@ -312,6 +312,24 @@ struct platform_device ppc_sys_platform_
 			},
 		},
 	},
+	[MPC83xx_MDIO_TSEC1] = {
+		.name = "fsl-gianfar_mdio",
+		.id = 1,
+		.dev.platform_data = &mpc83xx_mdio_pdata,
+		.num_resources = 2,
+		.resource = (struct resource[]) {
+			{
+				.start	= 0x24520,
+				.end	= 0x2453f,
+				.flags	= IORESOURCE_MEM,
+			},
+			{
+				.start	= MPC83xx_IRQ_EXT1,
+				.end	= MPC83xx_IRQ_EXT1,
+				.flags	= IORESOURCE_IRQ,
+			},
+		},
+	},
 };
 
 static int __init mach_mpc83xx_fixup(struct platform_device *pdev)
Index: linux-2.6.10/arch/ppc/syslib/mpc83xx_sys.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/syslib/mpc83xx_sys.c
+++ linux-2.6.10/arch/ppc/syslib/mpc83xx_sys.c
@@ -33,6 +33,18 @@ struct ppc_sys_spec ppc_sys_specs[] = {
 		},
 	},
 	{
+		.ppc_sys_name	= "8349E_ITX",
+		.mask 		= 0xFFFF0000,
+		.value 		= 0x80500000,
+		.num_devices	= 9,
+		.device_list	= (enum ppc_sys_devices[])
+		{
+			MPC83xx_TSEC1, MPC83xx_TSEC2, MPC83xx_IIC1,
+			MPC83xx_IIC2, MPC83xx_DUART, MPC83xx_SEC2,
+			MPC83xx_USB2_DR, MPC83xx_USB2_MPH, MPC83xx_MDIO_TSEC1,
+		},
+	},
+	{
 		.ppc_sys_name	= "8349",
 		.mask 		= 0xFFFF0000,
 		.value 		= 0x80510000,
Index: linux-2.6.10/mvl_patches/pro-1299.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1299.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1299);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

