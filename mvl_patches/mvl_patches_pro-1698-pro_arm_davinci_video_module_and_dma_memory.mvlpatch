#! /usr/bin/env bash
# Patch: -pro_arm_davinci_video_module_and_dma_memory
# Date: Mon Jan 21 23:07:50 2008
# Source: Texas Instruments Inc.
# MR: 26533
# Type: Enhancement
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# 
# TI MR - 72406
# 
#  1. Fixes Davinci video driversr to support dynamic loadability of capture
#     drivers.
# 
#  2. Fixes loading THS8200 encoder module.
# 
#  3. Increase DMA memory pool (dma_alloc_coherent()) from 14M to 40M. 40M is
#     required to support THS8200 on DM355 and DM6446 EVMs.
# 	

PATCHNUM=1698
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 26533
Type: Enhancement
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:

TI MR - 72406

 1. Fixes Davinci video driversr to support dynamic loadability of capture
    drivers.

 2. Fixes loading THS8200 encoder module.

 3. Increase DMA memory pool (dma_alloc_coherent()) from 14M to 40M. 40M is
    required to support THS8200 on DM355 and DM6446 EVMs.
	
Index: linux-2.6.10/drivers/media/video/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/media/video/Kconfig
+++ linux-2.6.10/drivers/media/video/Kconfig
@@ -43,7 +43,7 @@ config VIDEO_TVP5146
 
 config VIDEO_MT9T001
         tristate "MT9T001 Sensor"
-        depends on I2C && ARCH_DAVINCI && MACH_DAVINCI_EVM && VIDEO_DAVINCI_CAPTURE
+        depends on I2C && ARCH_DAVINCI && VIDEO_DAVINCI_CAPTURE
         help
           Support for I2C bus based MT9T001 Driver
 	  
@@ -153,7 +153,7 @@ config VIDEO_DAVINCIHD_VPIF
 	  module will be called vpif.
 
 config DAVINCI_OSD 
-	tristate "Davinci Display Manage"
+	tristate "Davinci Display Manager"
 	depends on VIDEO_DAVINCI_DISPLAY || FB_DAVINCI
 	help
 	  Support for Davinci Display Manager.
Index: linux-2.6.10/drivers/media/video/davinci/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/Makefile
+++ linux-2.6.10/drivers/media/video/davinci/Makefile
@@ -3,11 +3,15 @@
 #
 
 # Capture: DaVinci and DM355
-obj-$(CONFIG_ARCH_DAVINCI_DM644x) += ccdc_davinci.o
-obj-$(CONFIG_ARCH_DAVINCI_DM355) += ccdc_dm355.o
+ifdef CONFIG_ARCH_DAVINCI_DM644x
+davinci_capture-objs := ccdc_davinci.o davinci_vpfe.o 
+endif
+ifdef CONFIG_ARCH_DAVINCI_DM355
+davinci_capture-objs := ccdc_dm355.o davinci_vpfe.o 
+endif
 obj-$(CONFIG_VIDEO_TVP5146) += tvp5146.o
 obj-$(CONFIG_VIDEO_MT9T001) += mt9t001.o
-obj-$(CONFIG_VIDEO_DAVINCI_CAPTURE) += davinci_vpfe.o
+obj-$(CONFIG_VIDEO_DAVINCI_CAPTURE) += davinci_capture.o
 obj-$(CONFIG_DAVINCI_OSD) += davinci_osd.o davinci_platform.o
 
 # Encoder Manager and Encoders
Index: linux-2.6.10/drivers/media/video/davinci/davinci_enc_mngr.c
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/davinci_enc_mngr.c
+++ linux-2.6.10/drivers/media/video/davinci/davinci_enc_mngr.c
@@ -892,7 +892,7 @@ int vid_enc_register_encoder(struct vid_
 		/* set default for the first encoder */
 		err = encoder->initialize(encoder, VID_ENC_FULL_INIT_FLAG);
 
-		if (err == 0) {
+		if (err >= 0) {
 			/* see if this has output requested by default
 			   or bootarg */
 
@@ -956,7 +956,7 @@ int vid_enc_register_encoder(struct vid_
 			err = encoder->initialize(encoder,
 						  VID_ENC_FULL_INIT_FLAG);
 
-			if (err != 0) {
+			if (err < 0) {
 				/* no change if new one cannot be
 				   initialized */
 				encoder->deinitialize(encoder);
Index: linux-2.6.10/include/asm-arm/arch-davinci/memory.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-davinci/memory.h
+++ linux-2.6.10/include/asm-arm/arch-davinci/memory.h
@@ -59,7 +59,8 @@
 /*
  * Increase size of DMA-consistent memory region
  */
-#define CONSISTENT_DMA_SIZE (14<<20)
+/* 40M memory pool is required for HD video */
+#define CONSISTENT_DMA_SIZE (40<<20)
 
 #ifndef __ASSEMBLY__
 /*
Index: linux-2.6.10/mvl_patches/pro-1698.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1698.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1698);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

