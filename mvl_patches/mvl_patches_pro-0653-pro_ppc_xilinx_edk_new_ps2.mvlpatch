#! /usr/bin/env bash
# Patch: -pro_ppc_xilinx_edk_new_ps2
# Date: Thu Jun 22 21:15:14 2006
# Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
# MR: 19052
# Type: Integration
# Disposition: needs submitting to community
# Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
# Description:
#     Xilinx EDK drivers for PS2 - The newer Xilinx drivers for ML40x board 
#     with the CfgInitialize() routine. Xilinx re-newed their drivers quite 
#     recently, so it's going as a different patch.
# 

PATCHNUM=653
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
MR: 19052
Type: Integration
Disposition: needs submitting to community
Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
Description:
    Xilinx EDK drivers for PS2 - The newer Xilinx drivers for ML40x board 
    with the CfgInitialize() routine. Xilinx re-newed their drivers quite 
    recently, so it's going as a different patch.

Index: linux-2.6.10/drivers/input/serio/xilinx_ps2/adapter.c
===================================================================
--- linux-2.6.10.orig/drivers/input/serio/xilinx_ps2/adapter.c
+++ linux-2.6.10/drivers/input/serio/xilinx_ps2/adapter.c
@@ -42,15 +42,15 @@
 #define XPS2_NAME_DESC		"Xilinx PS/2 Port #%d"
 #define XPS2_PHYS_DESC		"xilinxps2/serio%d"
 
-struct xps2data{
-	int			irq;
-	u32			phys_addr;
-	u32			remap_size;
-	struct pt_regs		*saved_regs;
-	spinlock_t		lock;
-	u8			rxb;	/* Rx buffer */
-	unsigned long		tx_end;
-	unsigned int		dfl;
+struct xps2data {
+	int irq;
+	u32 phys_addr;
+	u32 remap_size;
+	struct pt_regs *saved_regs;
+	spinlock_t lock;
+	u8 rxb;			/* Rx buffer */
+	unsigned long tx_end;
+	unsigned int dfl;
 	/*
 	 * The underlying OS independent code needs space as well.  A
 	 * pointer to the following XPs2 structure will be passed to
@@ -58,11 +58,11 @@ struct xps2data{
 	 * data as an opaque object in this file (meaning that we never
 	 * reference any of the fields inside of the structure).
 	 */
-	XPs2			ps2;
+	XPs2 ps2;
 	/*
 	 * serio
 	 */
-	struct serio		serio;
+	struct serio serio;
 };
 
 /*******************************************************************************
@@ -71,30 +71,6 @@ struct xps2data{
  ******************************************************************************/
 
 static DECLARE_MUTEX(cfg_sem);
-static XPs2_Config * p_xps2_cfg;
-
-/*
- * Lookup the device configuration based on the unique device ID.
- * Prototyped in xps2.h.
- * We rely on that p_xps2_cfg is set properly right before XPs2_Initialize()
- * calls XPs2_LookupConfig().
- */
-XPs2_Config * XPs2_LookupConfig(u16 DeviceId)
-{
-	return p_xps2_cfg;
-}
-
-static XStatus XPs2_CfgInitialize(XPs2 * InstancePtr, XPs2_Config * CfgPtr)
-{
-	XStatus retval;
-
-	down(&cfg_sem);
-	p_xps2_cfg = CfgPtr;
-	retval = XPs2_Initialize(InstancePtr, 0);
-	up(&cfg_sem);
-
-	return retval;
-}
 
 /*********************/
 /* Interrupt handler */
@@ -102,7 +78,7 @@ static XStatus XPs2_CfgInitialize(XPs2 *
 
 static irqreturn_t xps2_interrupt(int irq, void *dev_id, struct pt_regs *regs)
 {
-	struct xps2data *drvdata = (struct xps2data *) dev_id;
+	struct xps2data *drvdata = (struct xps2data *)dev_id;
 
 	/* We will need to pass pt_regs *regs to input subsystem */
 	drvdata->saved_regs = regs;
@@ -114,7 +90,7 @@ static irqreturn_t xps2_interrupt(int ir
 
 static void sxps2_handler(void *CallbackRef, u32 Event, unsigned int EventData)
 {
-	struct xps2data *drvdata = (struct xps2data *) CallbackRef;
+	struct xps2data *drvdata = (struct xps2data *)CallbackRef;
 	u8 c;
 
 	switch (Event) {
@@ -151,7 +127,6 @@ static void sxps2_handler(void *Callback
 	}
 }
 
-
 /*******************/
 /* serio callbacks */
 /*******************/
@@ -185,7 +160,7 @@ static int sxps2_write(struct serio *pse
 		}
 	} while (!time_after(jiffies, drvdata->tx_end));
 
-	return 1;	/* transmission is frozen */
+	return 1;		/* transmission is frozen */
 }
 
 /*
@@ -210,7 +185,7 @@ static int sxps2_open(struct serio *pser
 	XPs2_EnableInterrupt(&drvdata->ps2);
 	XPs2_Recv(&drvdata->ps2, &drvdata->rxb, 1);
 
-	return 0; /* success */
+	return 0;		/* success */
 }
 
 /*
@@ -285,13 +260,17 @@ static int xps2_probe(struct device *dev
 	}
 
 	/* Tell the Xilinx code to bring this PS/2 interface up. */
-	if (XPs2_CfgInitialize(&drvdata->ps2, &xps2_cfg) != XST_SUCCESS) {
+	down(&cfg_sem);
+	if (XPs2_CfgInitialize(&drvdata->ps2, &xps2_cfg, xps2_cfg.BaseAddress)
+	    != XST_SUCCESS) {
+		up(&cfg_sem);
 		printk(KERN_ERR
 		       "%s #%d: Could not initialize device.\n",
 		       DRIVER_NAME, pdev->id);
 		retval = -ENODEV;
 		goto failed3;
 	}
+	up(&cfg_sem);
 
 	/* Set up the interrupt handler. */
 	XPs2_SetHandler(&drvdata->ps2, sxps2_handler, drvdata);
@@ -300,27 +279,27 @@ static int xps2_probe(struct device *dev
 	       DRIVER_NAME, pdev->id,
 	       drvdata->phys_addr, drvdata->ps2.BaseAddress);
 
-	drvdata->serio.type		= SERIO_8042;
-	drvdata->serio.write		= sxps2_write;
-	drvdata->serio.open		= sxps2_open;
-	drvdata->serio.close		= sxps2_close;
-	drvdata->serio.port_data	= drvdata;
-	drvdata->serio.dev.parent	= dev;
+	drvdata->serio.type = SERIO_8042;
+	drvdata->serio.write = sxps2_write;
+	drvdata->serio.open = sxps2_open;
+	drvdata->serio.close = sxps2_close;
+	drvdata->serio.port_data = drvdata;
+	drvdata->serio.dev.parent = dev;
 	snprintf(drvdata->serio.name, sizeof(drvdata->serio.name),
 		 XPS2_NAME_DESC, pdev->id);
 	snprintf(drvdata->serio.phys, sizeof(drvdata->serio.phys),
 		 XPS2_PHYS_DESC, pdev->id);
 	serio_register_port(&drvdata->serio);
 
-	return 0;	/* success */
+	return 0;		/* success */
 
-failed3:
-	iounmap((void *) (xps2_cfg.BaseAddress));
+      failed3:
+	iounmap((void *)(xps2_cfg.BaseAddress));
 
-failed2:
+      failed2:
 	release_mem_region(regs_res->start, remap_size);
 
-failed1:
+      failed1:
 	kfree(drvdata);
 	dev_set_drvdata(dev, NULL);
 
@@ -334,26 +313,25 @@ static int xps2_remove(struct device *de
 	if (!dev)
 		return -EINVAL;
 
-	drvdata = (struct xps2drvdata *) dev_get_drvdata(dev);
+	drvdata = (struct xps2drvdata *)dev_get_drvdata(dev);
 
 	serio_unregister_port(&drvdata->serio);
 
-	iounmap((void *) (drvdata->ps2.BaseAddress));
+	iounmap((void *)(drvdata->ps2.BaseAddress));
 
 	release_mem_region(drvdata->phys_addr, drvdata->remap_size);
 
 	kfree(drvdata);
 	dev_set_drvdata(dev, NULL);
 
-	return 0;	/* success */
+	return 0;		/* success */
 }
 
-
 static struct device_driver xps2_driver = {
-	.name		= DRIVER_NAME,
-	.bus		= &platform_bus_type,
-	.probe		= xps2_probe,
-	.remove		= xps2_remove
+	.name = DRIVER_NAME,
+	.bus = &platform_bus_type,
+	.probe = xps2_probe,
+	.remove = xps2_remove
 };
 
 static int __init xps2_init(void)
Index: linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2.c
===================================================================
--- linux-2.6.10.orig/drivers/input/serio/xilinx_ps2/xps2.c
+++ linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2.c
@@ -27,7 +27,7 @@
 *     expressly prohibited.
 *
 *
-*     (c) Copyright 2002 Xilinx Inc.
+*     (c) Copyright 2002-2005 Xilinx Inc.
 *     All rights reserved.
 *
 *
@@ -36,6 +36,7 @@
 *     675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ******************************************************************************/
+/****************************************************************************/
 /**
 *
 * @file xps2.c
@@ -50,6 +51,14 @@
 * ----- ---- -------- -----------------------------------------------
 * 1.00a ch   06/18/02 First release
 * 1.00a rmm  05/14/03 Fixed diab compiler warnings relating to asserts.
+* 1.01a jvb  12/13/05 I changed Initialize() into CfgInitialize(), and made
+*                     CfgInitialize() take a pointer to a config structure
+*                     instead of a device id. I moved Initialize() into
+*                     xgpio_sinit.c, and had Initialize() call CfgInitialize()
+*                     after it retrieved the config structure using the device
+*                     id. I removed include of xparameters.h along with any
+*                     dependencies on xparameters.h and the _g.c config table.
+*
 * </pre>
 *
 *****************************************************************************/
@@ -81,46 +90,42 @@ static void XPs2_StubHandler(void *CallB
 * Initializes a specific PS/2 instance such that it is ready to be used.
 * The default operating mode of the driver is polled mode.
 *
-* @param    InstancePtr is a pointer to the XPs2 instance to be worked on.
-* @param    DeviceId is the unique id of the device controlled by this
-*           XPs2 instance. Passing in a device id associates the generic
-*           XPs2 instance to a specific device, as chosen by the caller
-*           or application developer.
+* @param InstancePtr is a pointer to the XPs2 instance to be worked on.
+* @param Config is a reference to a structure containing information about
+*        a specific PS2 device. This function initializes an InstancePtr object
+*        for a specific device specified by the contents of Config. This
+*        function can initialize multiple instance objects with the use of
+*        multiple calls giving different Config information on each call.
+* @param EffectiveAddr is the device base address in the virtual memory address
+*        space. The caller is responsible for keeping the address mapping
+*        from EffectiveAddr to the device physical base address unchanged
+*        once this function is invoked. Unexpected errors may occur if the
+*        address mapping changes after this function is called. If address
+*        translation is not used, use Config->BaseAddress for this parameters,
+*        passing the physical address instead.
 *
 * @return
 *
 * - XST_SUCCESS if initialization was successful
-* - XST_DEVICE_NOT_FOUND if the device ID could not be found in the
-*           configuration table
 *
 * @note
 *
-* None.
+* The Config pointer argument is not used by this function, but is provided
+* to keep the function signature consistent with other drivers.
 *
 *****************************************************************************/
-XStatus XPs2_Initialize(XPs2 * InstancePtr, u16 DeviceId)
+XStatus XPs2_CfgInitialize(XPs2 * InstancePtr, XPs2_Config * Config,
+			   u32 EffectiveAddr)
 {
-	XPs2_Config *Ps2ConfigPtr;
-
 	/*
 	 * Assert validates the input arguments
 	 */
 	XASSERT_NONVOID(InstancePtr != NULL);
 
 	/*
-	 * Lookup the device configuration in the temporary CROM table. Use this
-	 * configuration info down below when initializing this component.
-	 */
-	Ps2ConfigPtr = XPs2_LookupConfig(DeviceId);
-
-	if (Ps2ConfigPtr == (XPs2_Config *) NULL) {
-		return XST_DEVICE_NOT_FOUND;
-	}
-
-	/*
 	 * Setup the data that is from the configuration information
 	 */
-	InstancePtr->BaseAddress = Ps2ConfigPtr->BaseAddress;
+	InstancePtr->BaseAddress = EffectiveAddr;
 
 	/*
 	 * Initialize the instance data to some default values and setup a default
Index: linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2.h
===================================================================
--- linux-2.6.10.orig/drivers/input/serio/xilinx_ps2/xps2.h
+++ linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2.h
@@ -27,7 +27,7 @@
 *     expressly prohibited.
 *
 *
-*     (c) Copyright 2002 Xilinx Inc.
+*     (c) Copyright 2002-2005 Xilinx Inc.
 *     All rights reserved.
 *
 *
@@ -36,6 +36,7 @@
 *     675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ******************************************************************************/
+/*****************************************************************************/
 /**
 *
 * @file xps2.h
@@ -74,6 +75,25 @@
 * allow data to be sent and received. They are designed to be used in polled
 * or interrupt modes.
 *
+* <b>Initialization & Configuration</b>
+*
+* The XPs2_Config structure is used by the driver to configure itself. This
+* configuration structure is typically created by the tool-chain based on HW
+* build properties.
+*
+* To support multiple runtime loading and initialization strategies employed
+* by various operating systems, the driver instance can be initialized in one
+* of the following ways:
+*
+*   - XPs2_Initialize(InstancePtr, DeviceId) - The driver looks up its own
+*     configuration structure created by the tool-chain based on an ID provided
+*     by the tool-chain.
+*
+*   - XPs2_CfgInitialize(InstancePtr, CfgPtr, EffectiveAddr) - Uses a
+*     configuration structure provided by the caller. If running in a system
+*     with address translation, the provided virtual memory base address
+*     replaces the physical address present in the configuration structure.
+*
 * @note
 *
 * None.
@@ -84,6 +104,10 @@
 * Ver   Who  Date     Changes
 * ----- ---- -------- -----------------------------------------------
 * 1.00a ch   06/18/02 First release
+* 1.01a jvb  12/14/05 I separated dependency on the static config table and
+*                     xparameters.h from the driver initialization by moving
+*                     _Initialize and _LookupConfig to _sinit.c. I also added
+*                     the new _CfgInitialize routine.
 * </pre>
 *
 ******************************************************************************/
@@ -91,6 +115,10 @@
 #ifndef XPS2_H			/* prevent circular inclusions */
 #define XPS2_H			/* by using protection macros */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /***************************** Include Files ********************************/
 
 #include "xbasic_types.h"
@@ -127,20 +155,20 @@
 /*
  * This typedef contains configuration information for the device
  */
-typedef struct {
-	u16 DeviceId;		/* Unique ID  of device */
-	u32 BaseAddress;	/* Base address of device */
-} XPs2_Config;
+	typedef struct {
+		u16 DeviceId;	/* Unique ID  of device */
+		u32 BaseAddress;	/* Base address of device */
+	} XPs2_Config;
 
 /*
  * The following data type is used to manage the buffers that are handled
  * when sending and receiving data in the interrupt mode
  */
-typedef struct {
-	u8 *NextBytePtr;
-	unsigned int RequestedBytes;
-	unsigned int RemainingBytes;
-} XPs2Buffer;
+	typedef struct {
+		u8 *NextBytePtr;
+		unsigned int RequestedBytes;
+		unsigned int RemainingBytes;
+	} XPs2Buffer;
 
 /*
  * This data type defines a handler which the application must define
@@ -155,20 +183,20 @@ typedef struct {
  * @param EventData contains the number of bytes sent or received at the time
 *         of the call.
 */
-typedef void (*XPs2_Handler) (void *CallBackRef, u32 Event,
-			      unsigned int EventData);
+	typedef void (*XPs2_Handler) (void *CallBackRef, u32 Event,
+				      unsigned int EventData);
 /*
  * PS/2 statistics
  */
-typedef struct {
-	u16 TransmitInterrupts;
-	u16 ReceiveInterrupts;
-	u16 CharactersTransmitted;
-	u16 CharactersReceived;
-	u16 ReceiveErrors;
-	u16 ReceiveOverflowErrors;
-	u16 TransmitErrors;
-} XPs2Stats;
+	typedef struct {
+		u16 TransmitInterrupts;
+		u16 ReceiveInterrupts;
+		u16 CharactersTransmitted;
+		u16 CharactersReceived;
+		u16 ReceiveErrors;
+		u16 ReceiveOverflowErrors;
+		u16 TransmitErrors;
+	} XPs2Stats;
 
 /*
  * The PS/2 driver instance data. The user is required to allocate a
@@ -180,47 +208,55 @@ typedef struct {
  * A pointer to a variable of this type is then passed to the driver API
  * functions
  */
-typedef struct {
-	XPs2Stats Stats;	/* Component Statistics */
-	u32 BaseAddress;	/* Base address of device (IPIF) */
-	u32 IsReady;		/* Device is initialized and ready */
-	u8 LastErrors;		/* the accumulated errors */
-
-	XPs2Buffer SendBuffer;
-	XPs2Buffer ReceiveBuffer;
-
-	XPs2_Handler Handler;
-	void *CallBackRef;	/* Callback reference for control handler */
-} XPs2;
+	typedef struct {
+		XPs2Stats Stats;	/* Component Statistics */
+		u32 BaseAddress;	/* Base address of device (IPIF) */
+		u32 IsReady;	/* Device is initialized and ready */
+		u8 LastErrors;	/* the accumulated errors */
+
+		XPs2Buffer SendBuffer;
+		XPs2Buffer ReceiveBuffer;
+
+		XPs2_Handler Handler;
+		void *CallBackRef;	/* Callback reference for control handler */
+	} XPs2;
 
 /***************** Macros (Inline Functions) Definitions ********************/
 
 /************************** Function Prototypes *****************************/
 
 /*
- * required functions is xps2.c
+ * Initialization functions in xps2_sinit.c
  */
-XStatus XPs2_Initialize(XPs2 * InstancePtr, u16 DeviceId);
+	XStatus XPs2_Initialize(XPs2 * InstancePtr, u16 DeviceId);
+	XPs2_Config *XPs2_LookupConfig(u16 DeviceId);
 
-unsigned int XPs2_Send(XPs2 * InstancePtr, u8 * BufferPtr,
-		       unsigned int NumBytes);
-unsigned int XPs2_Recv(XPs2 * InstancePtr, u8 * BufferPtr,
-		       unsigned int NumBytes);
-XPs2_Config *XPs2_LookupConfig(u16 DeviceId);
+/*
+ * required functions is xps2.c
+ */
+	XStatus XPs2_CfgInitialize(XPs2 * InstancePtr, XPs2_Config * Config,
+				   u32 EffectiveAddr);
+	unsigned int XPs2_Send(XPs2 * InstancePtr, u8 * BufferPtr,
+			       unsigned int NumBytes);
+	unsigned int XPs2_Recv(XPs2 * InstancePtr, u8 * BufferPtr,
+			       unsigned int NumBytes);
 
 /*
  * options functions in xps2_options.c
  */
-u8 XPs2_GetLastErrors(XPs2 * InstancePtr);
-u32 XPs2_IsSending(XPs2 * InstancePtr);
+	u8 XPs2_GetLastErrors(XPs2 * InstancePtr);
+	u32 XPs2_IsSending(XPs2 * InstancePtr);
 
 /*
  * interrupt functions in xps2_intr.c
  */
-void XPs2_SetHandler(XPs2 * InstancePtr, XPs2_Handler FuncPtr,
-		     void *CallBackRef);
-void XPs2_InterruptHandler(XPs2 * InstancePtr);
-void XPs2_EnableInterrupt(XPs2 * InstancePtr);
-void XPs2_DisableInterrupt(XPs2 * InstancePtr);
-
+	void XPs2_SetHandler(XPs2 * InstancePtr, XPs2_Handler FuncPtr,
+			     void *CallBackRef);
+	void XPs2_InterruptHandler(XPs2 * InstancePtr);
+	void XPs2_EnableInterrupt(XPs2 * InstancePtr);
+	void XPs2_DisableInterrupt(XPs2 * InstancePtr);
+
+#ifdef __cplusplus
+}
+#endif
 #endif				/* end of protection macro */
Index: linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_i.h
===================================================================
--- linux-2.6.10.orig/drivers/input/serio/xilinx_ps2/xps2_i.h
+++ linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_i.h
@@ -36,6 +36,7 @@
 *     675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ******************************************************************************/
+/****************************************************************************/
 /**
 *
 * @file xps2_i.h
@@ -55,6 +56,10 @@
 #ifndef XPS2_I_H		/* prevent circular inclusions */
 #define XPS2_I_H		/* by using protection macros */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /***************************** Include Files ********************************/
 
 #include "xps2.h"
@@ -93,9 +98,16 @@
     InstancePtr->Stats.TransmitErrors = 0UL;                            \
 }
 
+/************************** Variable Definitions ****************************/
+
+	extern XPs2_Config XPs2_ConfigTable[];
+
 /************************** Function Prototypes *****************************/
 
-unsigned int XPs2_SendBuffer(XPs2 * InstancePtr);
-unsigned int XPs2_ReceiveBuffer(XPs2 * InstancePtr);
+	unsigned int XPs2_SendBuffer(XPs2 * InstancePtr);
+	unsigned int XPs2_ReceiveBuffer(XPs2 * InstancePtr);
 
+#ifdef __cplusplus
+}
+#endif
 #endif
Index: linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_intr.c
===================================================================
--- linux-2.6.10.orig/drivers/input/serio/xilinx_ps2/xps2_intr.c
+++ linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_intr.c
@@ -36,6 +36,7 @@
 *     675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ******************************************************************************/
+/****************************************************************************/
 /**
 *
 * @file xps2_intr.c
@@ -119,7 +120,7 @@ void XPs2_SetHandler(XPs2 * InstancePtr,
 *
 * This function is the interrupt handler for the PS/2 driver.
 * It must be connected to an interrupt system by the user such that it is
-* called when an interrupt for any PS/2 port occurs. This function does
+* called when an interrupt for any PS/2 port occurs. This function does 
 * not save or restore the processor context such that the user must
 * ensure this occurs.
 *
Index: linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_l.c
===================================================================
--- linux-2.6.10.orig/drivers/input/serio/xilinx_ps2/xps2_l.c
+++ linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_l.c
@@ -36,6 +36,7 @@
 *     675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ******************************************************************************/
+/*****************************************************************************/
 /**
 *
 * @file xps2_l.c
Index: linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_l.h
===================================================================
--- linux-2.6.10.orig/drivers/input/serio/xilinx_ps2/xps2_l.h
+++ linux-2.6.10/drivers/input/serio/xilinx_ps2/xps2_l.h
@@ -36,6 +36,7 @@
 *     675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ******************************************************************************/
+/*****************************************************************************/
 /**
 *
 * @file xps2_l.h
@@ -58,6 +59,10 @@
 #ifndef XPS2_L_H		/* prevent circular inclusions */
 #define XPS2_L_H		/* by using protection macros */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /***************************** Include Files ********************************/
 
 #include "xbasic_types.h"
@@ -253,9 +258,12 @@
 
 /************************** Function Prototypes *****************************/
 
-void XPs2_SendByte(u32 BaseAddress, u8 Data);
-u8 XPs2_RecvByte(u32 BaseAddress);
+	void XPs2_SendByte(u32 BaseAddress, u8 Data);
+	u8 XPs2_RecvByte(u32 BaseAddress);
 
 /****************************************************************************/
 
+#ifdef __cplusplus
+}
+#endif
 #endif
Index: linux-2.6.10/mvl_patches/pro-0653.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0653.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(653);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

