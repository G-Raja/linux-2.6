#! /usr/bin/env bash
# Patch: -common_pxafb_waitforvsync
# Date: Fri Dec  7 11:51:10 2007
# Source: MontaVista Software, Inc.
# MR: 15187
# Type: Enhancement
# Disposition: needs submitting to linux-arm-kernel
# Signed-off-by: Steve Longerbeam <stevel@mvista.com>
# Keywords: PXA, framebuffer
# Description:
#   WaitForVSynv support for pxafb. Uses End Of Frame interrupts in
#   base layer. Support for EOF interrupts in the other DMA channels
#   as well.
# 

PATCHNUM=1424
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 15187
Type: Enhancement
Disposition: needs submitting to linux-arm-kernel
Signed-off-by: Steve Longerbeam <stevel@mvista.com>
Keywords: PXA, framebuffer
Description:
  WaitForVSynv support for pxafb. Uses End Of Frame interrupts in
  base layer. Support for EOF interrupts in the other DMA channels
  as well.

Index: linux-2.6.10/drivers/video/pxafb.c
===================================================================
--- linux-2.6.10.orig/drivers/video/pxafb.c
+++ linux-2.6.10/drivers/video/pxafb.c
@@ -319,6 +319,51 @@ static inline u_int chan_to_field(u_int 
 	return chan << bf->offset;
 }
 
+
+static int pxafb_wait_for_eof(struct pxafb_info *fbi, u_int ch_mask)
+{
+	int ret;
+
+#ifdef CONFIG_PXA27x
+	/* must be channels 0-6 */
+	if (ch_mask & ~0x7f)
+		return -EINVAL;
+#else
+	/* must be channel 0 */
+	if (ch_mask & ~0x1)
+		return -EINVAL;
+#endif
+
+	down(&fbi->ctrlr_sem);
+
+	fbi->eof_mask = 0;
+
+	if (ch_mask & 1) {
+		/* channel 0 */
+		CLEAR_LCD_INTR(LCSR0, LCSR_EOF); /* clear */
+		LCCR0 &= ~LCCR0_EFM; /* unmask */
+	}
+
+#ifdef CONFIG_PXA27x
+	if (ch_mask & 0x7e) {
+		/* channels 1-6 */
+		CLEAR_LCD_INTR(LCSR1, (0x3f << 8)); /* clear 1-6 */
+		LCCR5 &= ~((ch_mask >> 1) << 8); /* unmask */
+	}
+#endif
+
+	ret = wait_event_interruptible_timeout(
+		fbi->eof_wait, (fbi->eof_mask & ch_mask) == ch_mask, HZ/10);
+
+	if (ret == 0)
+		ret = -ETIMEDOUT;
+	else if (ret > 0)
+		ret = 0;
+
+	up(&fbi->ctrlr_sem);
+	return ret;
+}
+
 static int
 pxafb_setpalettereg(u_int regno, u_int red, u_int green, u_int blue,
 		       u_int trans, struct fb_info *info)
@@ -785,6 +830,21 @@ static int pxafb_blank(int blank, struct
 	return 0;
 }
 
+static int pxafb_ioctl(struct inode *inode, struct file *file, u_int cmd,
+		       u_long arg, struct fb_info *info)
+{
+	struct pxafb_info *fbi = (struct pxafb_info *)info;
+
+	switch (cmd) {
+	case FBIO_WAITFORVSYNC:
+		return pxafb_wait_for_eof(fbi, 0x1);
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static struct fb_ops pxafb_ops = {
 	.owner		= THIS_MODULE,
 	.fb_check_var	= pxafb_check_var,
@@ -794,6 +854,7 @@ static struct fb_ops pxafb_ops = {
 	.fb_copyarea	= cfb_copyarea,
 	.fb_imageblit	= cfb_imageblit,
 	.fb_blank	= pxafb_blank,
+	.fb_ioctl       = pxafb_ioctl,
 	.fb_cursor	= soft_cursor,
 };
 
@@ -1146,13 +1207,12 @@ static int pxafb_activate_var(struct fb_
 	fbi->dmadesc_fblow_cpu->fdadr = fbi->dmadesc_fblow_dma;
 	fbi->dmadesc_fblow_cpu->fsadr = fbi->screen_dma + BYTES_PER_PANEL;
 	fbi->dmadesc_fblow_cpu->fidr  = 0;
-	fbi->dmadesc_fblow_cpu->ldcmd = BYTES_PER_PANEL;
-
+	fbi->dmadesc_fblow_cpu->ldcmd = BYTES_PER_PANEL | LDCMD_EOFINT;
 	fbi->fdadr1 = fbi->dmadesc_fblow_dma; /* only used in dual-panel mode */
 
 	fbi->dmadesc_fbhigh_cpu->fsadr = fbi->screen_dma;
 	fbi->dmadesc_fbhigh_cpu->fidr = 0;
-	fbi->dmadesc_fbhigh_cpu->ldcmd = BYTES_PER_PANEL;
+	fbi->dmadesc_fbhigh_cpu->ldcmd = BYTES_PER_PANEL | LDCMD_EOFINT;
 
 	fbi->dmadesc_palette_cpu->fsadr = fbi->palette_dma;
 	fbi->dmadesc_palette_cpu->fidr  = 0;
@@ -1346,25 +1406,47 @@ static void pxafb_disable_controller(str
 /*
  *  pxafb_handle_irq: Handle 'LCD DONE' interrupts.
  */
-static irqreturn_t pxafb_handle_irq(int irq, void *dev_id, struct pt_regs *regs)
+static irqreturn_t pxafb_handle_irq(int irq, void *dev_id,
+				    struct pt_regs *regs)
 {
 	struct pxafb_info *fbi = dev_id;
 	unsigned int lcsr0 = LCSR0;
+#ifdef CONFIG_PXA27x
 	unsigned int lcsr1 = LCSR1;
+	unsigned long channels;
+#endif
 	unsigned long flags;
 	
 	local_irq_save(flags);
 	LCSR0 = lcsr0;
+#ifdef CONFIG_PXA27x
 	LCSR1 = lcsr1;
+#endif
 
 	if (lcsr0 & LCSR_LDD) {
 		LCCR0 |= LCCR0_LDM;
-		local_irq_restore(flags);
 		wake_up(&fbi->ctrlr_wait);
 	}
-	else
-		local_irq_restore(flags);
 
+	if (lcsr0 & LCSR_EOF) {
+		LCCR0 |= LCCR0_EFM; /* mask */
+		CLEAR_LCD_INTR(LCSR0, LCSR_EOF); /* clear */
+		fbi->eof_mask |= (1<<0);
+	}
+
+#ifdef CONFIG_PXA27x
+	channels = (lcsr1 & (0x3f << 8)) >> 8;
+	if (channels) {
+		/* mask and clear */
+		LCCR5 |= (channels << 8);
+		CLEAR_LCD_INTR(LCSR1, (channels << 8));
+		fbi->eof_mask |= (channels << 1);
+	}
+#endif
+
+	wake_up(&fbi->eof_wait);
+
+	local_irq_restore(flags);
 	return IRQ_HANDLED;
 }
 
@@ -2359,6 +2441,7 @@ static struct pxafb_info *__init pxafb_i
 	fbi->fb.fix.smem_len = PAGE_ALIGN(MAX_XRES * MAX_YRES * inf->bpp / 8);
 
 	init_waitqueue_head(&fbi->ctrlr_wait);
+	init_waitqueue_head(&fbi->eof_wait);
 	INIT_WORK(&fbi->task, pxafb_task, fbi);
 	init_MUTEX(&fbi->ctrlr_sem);
 
Index: linux-2.6.10/drivers/video/pxafb.h
===================================================================
--- linux-2.6.10.orig/drivers/video/pxafb.h
+++ linux-2.6.10/drivers/video/pxafb.h
@@ -94,8 +94,12 @@ struct pxafb_info {
 	volatile u_char		task_state;
 	struct semaphore	ctrlr_sem;
 	wait_queue_head_t	ctrlr_wait;
+	wait_queue_head_t       eof_wait;
 	struct work_struct	task;
 
+	u_int                   eof_mask; /* end-of-frame flags,
+					     mask of DMA channels */
+
 #ifdef CONFIG_CPU_FREQ
 	struct notifier_block	freq_transition;
 	struct notifier_block	freq_policy;
@@ -167,6 +171,8 @@ struct overlayfb_info {
 
 #define PXA_NAME	"PXA"
 
+#define FBIO_WAITFORVSYNC       _IOW('F', 0x20, u_int32_t)
+
 /*
  *  Debug macros
  */
Index: linux-2.6.10/include/asm-arm/arch-pxa/pxa-regs.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/pxa-regs.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/pxa-regs.h
@@ -2628,10 +2628,8 @@
 
 #define LDCMD_PAL	(1 << 26)	/* instructs DMA to load palette buffer */
 
-#ifdef CONFIG_PXA27x
 #define LDCMD_SOFINT	(1 << 22)
 #define LDCMD_EOFINT	(1 << 21)
-#endif
 
 #define LCSR1_SOF1      (1 << 0)
 #define LCSR1_SOF2      (1 << 1)
Index: linux-2.6.10/mvl_patches/pro-1424.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1424.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1424);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

