#! /usr/bin/env bash
# Patch: -ppc_8641d_smp
# Date: Fri Mar 23 11:43:38 2007
# Source: Zhang Wei <wei.zhang@freescale.com>
# MR: 20627
# Type: Enhancement
# Disposition: merged from git://www.jdl.com/software/linux-2.6-86xx.git
# Signed-off-by: Dale Farnsworth <dfarnsworth@mvista.com>
# Description:
#     Add SMP support for the mpc8641d_hpcn platform.
# 
#     These changes already exist in another form in community arch/powerpc.
# 

PATCHNUM=1216
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Zhang Wei <wei.zhang@freescale.com>
MR: 20627
Type: Enhancement
Disposition: merged from git://www.jdl.com/software/linux-2.6-86xx.git
Signed-off-by: Dale Farnsworth <dfarnsworth@mvista.com>
Description:
    Add SMP support for the mpc8641d_hpcn platform.

    These changes already exist in another form in community arch/powerpc.

Index: linux-2.6.10/arch/ppc/kernel/head.S
===================================================================
--- linux-2.6.10.orig/arch/ppc/kernel/head.S
+++ linux-2.6.10/arch/ppc/kernel/head.S
@@ -353,6 +353,16 @@ i##n:								\
 #if defined(CONFIG_GEMINI) && defined(CONFIG_SMP)
 	. = 0x100
 	b	__secondary_start_gemini
+#elif defined(CONFIG_86xx) && defined(CONFIG_SMP)
+/* we need to ensure that the address translation is disabled */
+	. = 0x100
+	mfmsr	r3
+	ori	r0, r0, (MSR_IR | MSR_DR)
+	andc	r3, r3, r0
+	mtmsr	r3
+	isync
+	mfspr	r24, SPRN_PIR			/* get this CPU # */
+	b	__secondary_start
 #else
 	EXCEPTION(0x100, Reset, UnknownException, EXC_XFER_STD)
 #endif
Index: linux-2.6.10/arch/ppc/platforms/86xx/mpc8641_hpcn.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/platforms/86xx/mpc8641_hpcn.c
+++ linux-2.6.10/arch/ppc/platforms/86xx/mpc8641_hpcn.c
@@ -58,6 +58,7 @@
 
 extern void gen550_progress(char *, unsigned short);
 extern void gen550_init(int, struct uart_port *);
+extern void __init mpc86xx_smp_init(void);
 
 #ifndef CONFIG_PCI
 unsigned long isa_io_base = 0;
@@ -619,6 +620,10 @@ platform_init(unsigned long r3, unsigned
 	ppc_md.progress = gen550_progress;
 #endif	/* CONFIG_SERIAL_8250 && CONFIG_SERIAL_TEXT_DEBUG */
 
+#ifdef CONFIG_SMP
+	mpc86xx_smp_init();
+#endif
+
 	if (ppc_md.progress)
 		ppc_md.progress("mpc8641hpcn_init(): exit", 0);
 }
Index: linux-2.6.10/arch/ppc/platforms/86xx/Makefile
===================================================================
--- linux-2.6.10.orig/arch/ppc/platforms/86xx/Makefile
+++ linux-2.6.10/arch/ppc/platforms/86xx/Makefile
@@ -3,3 +3,4 @@
 #
 
 obj-$(CONFIG_MPC8641_HPCN)	+= mpc8641_hpcn.o
+obj-$(CONFIG_SMP)		+= mpc86xx_smp.o
Index: linux-2.6.10/arch/ppc/platforms/86xx/mpc86xx_smp.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/ppc/platforms/86xx/mpc86xx_smp.c
@@ -0,0 +1,85 @@
+/*
+ * Author: Xianghua Xiao <x.xiao@freescale.com>
+ *         Zhang Wei <wei.zhang@freescale.com>
+ *
+ * Copyright 2006 Freescale Semiconductor Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/stddef.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+
+#include <asm/pci-bridge.h>
+#include <asm/open_pic.h>
+#include <asm/mpc86xx.h>
+
+static void __init
+smp_86xx_kick_cpu(int nr)
+{
+	bd_t *binfo = (bd_t *) __res;
+	__be32 __iomem *mcm_vaddr;
+	unsigned long pcr;
+
+	if (nr < 0 || nr >= NR_CPUS)
+		return;
+
+	pr_debug("smp_86xx_kick_cpu: kick CPU #%d\n", nr);
+
+	/*
+	 * Startup Core #nr.
+	 */
+	mcm_vaddr = ioremap(binfo->bi_immr_base + MPC86xx_MCM_OFFSET,
+			    MPC86xx_MCM_SIZE);
+	pcr = in_be32(mcm_vaddr + (MCM_PORT_CONFIG_OFFSET >> 2));
+	pcr |= 1 << (nr + 24);
+	out_be32(mcm_vaddr + (MCM_PORT_CONFIG_OFFSET >> 2), pcr);
+}
+
+
+static void __init
+smp_86xx_setup_cpu(int cpu_nr)
+{
+	if (OpenPIC_Addr)
+		do_openpic_setup_cpu();
+}
+
+
+static int __init
+smp_86xx_probe(void)
+{
+	openpic_request_IPIs();
+	smp_hw_index[1] = 1;
+	return 2;
+}
+
+
+static void __init
+smp_86xx_space_timers(int nr)
+{
+	(void)nr;
+	return;
+}
+
+
+struct smp_ops_t smp_86xx_ops = {
+	.message_pass = smp_openpic_message_pass,
+	.probe = smp_86xx_probe,
+	.kick_cpu = smp_86xx_kick_cpu,
+	.space_timers = smp_86xx_space_timers,
+	.setup_cpu = smp_86xx_setup_cpu,
+	.take_timebase = smp_generic_take_timebase,
+	.give_timebase = smp_generic_give_timebase,
+};
+
+
+void __init
+mpc86xx_smp_init(void)
+{
+	ppc_md.smp_ops = &smp_86xx_ops;
+}
Index: linux-2.6.10/mvl_patches/pro-1216.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1216.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1216);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

