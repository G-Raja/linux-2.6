#! /usr/bin/env bash
# Patch: -pro_arm_davinci_v4l2_display_interlaced_video_synchronization
# Date: Fri Jan 25 17:21:08 2008
# Source: Texas Instruments Inc.
# MR: 26728
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Andy Lowe <alowe@mvista.com>
# Description:
# 	The patch fixes the video jitter issue that was seen during the video
# 	stability test. The jitter in the horizontal direction was caused by
# 	the video display going out-of-sync. Along with the fix, the top/bottom
# 	field labels are updated to be consistent.
# 

PATCHNUM=1717
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 26728
Type: Defect Fix
Disposition: local
Signed-off-by: Andy Lowe <alowe@mvista.com>
Description:
	The patch fixes the video jitter issue that was seen during the video
	stability test. The jitter in the horizontal direction was caused by
	the video display going out-of-sync. Along with the fix, the top/bottom
	field labels are updated to be consistent.

Index: linux-2.6.10/drivers/media/video/davinci/davinci_display.c
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/davinci_display.c
+++ linux-2.6.10/drivers/media/video/davinci/davinci_display.c
@@ -327,14 +327,8 @@ static struct videobuf_queue_ops video_q
 
 static u8 layer_first_int = 1;
 
-/* TBD */
-/* =====davinci_layer_isr=====*/
 /* It changes status of the displayed buffer, takes next buffer from the queue
  * and sets its address in VPBE registers */
-/*
-static irqreturn_t davinci_display_isr(int irq, void *dispObj,
-				    struct pt_regs *regs)
-*/
 static void davinci_display_isr(unsigned int event, void *dispObj)
 {
 	unsigned long jiffies_time = get_jiffies_64();
@@ -393,10 +387,10 @@ static void davinci_display_isr(unsigned
 			}
 
 			layer->field_id ^= 1;
-			if (event & DAVINCI_DISP_TOP_FIELD)
-				fid = 1;
-			else if (event & DAVINCI_DISP_BOTTOM_FIELD)
+			if (event & DAVINCI_DISP_FIRST_FIELD)
 				fid = 0;
+			else if (event & DAVINCI_DISP_SECOND_FIELD)
+				fid = 1;
 			else
 				return;
 
@@ -1002,7 +996,7 @@ static int davinci_doioctl(struct inode 
 				    (layer->layer_info.id,
 				     &layer->layer_info.config)) {
 					dev_err(davinci_display_dev,
-					     "Error in S_FMT params:- field\n");
+						"Error in S_FMT params:- field\n");
 					up(&davinci_dm.lock);
 					return -EINVAL;
 				}
@@ -1121,7 +1115,8 @@ static int davinci_doioctl(struct inode 
 			}
 			if (!(list_empty(&layer->dma_queue)) ||
 			    (layer->curFrm != layer->nextFrm) ||
-			    !(layer->started)) {
+			    !(layer->started) ||
+			    (layer->started && (0 == layer->field_id))) {
 
 				ret = videobuf_qbuf(&layer->buffer_queue,
 						    (struct v4l2_buffer *)arg);
@@ -1789,8 +1784,8 @@ static __init int davinci_display_init(v
 	}
 
 	davinci_dm.event_callback.mask = (DAVINCI_DISP_END_OF_FRAME |
-					  DAVINCI_DISP_TOP_FIELD |
-					  DAVINCI_DISP_BOTTOM_FIELD);
+					  DAVINCI_DISP_FIRST_FIELD |
+					  DAVINCI_DISP_SECOND_FIELD);
 
 	davinci_dm.event_callback.arg = &davinci_dm;
 	davinci_dm.event_callback.handler = davinci_display_isr;
Index: linux-2.6.10/drivers/media/video/davinci/davinci_osd.c
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/davinci_osd.c
+++ linux-2.6.10/drivers/media/video/davinci/davinci_osd.c
@@ -140,9 +140,9 @@ static irqreturn_t davinci_disp_isr(int 
 
 	if ((davinci_readl(osd->vencregs + VENC_VSTAT) & VENC_VSTAT_FIDST) ==
 	    VENC_VSTAT_FIDST)
-		event |= DAVINCI_DISP_TOP_FIELD;
+		event |= DAVINCI_DISP_SECOND_FIELD;
 	else
-		event |= DAVINCI_DISP_BOTTOM_FIELD;
+		event |= DAVINCI_DISP_FIRST_FIELD;
 
 	if (event == (last_event & ~DAVINCI_DISP_END_OF_FRAME)) {
 		/*
@@ -153,7 +153,7 @@ static irqreturn_t davinci_disp_isr(int 
 		 * from the previous interrupt.
 		 */
 		event |= DAVINCI_DISP_END_OF_FRAME;
-	} else if (event == DAVINCI_DISP_TOP_FIELD) {
+	} else if (event == DAVINCI_DISP_SECOND_FIELD) {
 		/* end-of-frame for interlaced display */
 		event |= DAVINCI_DISP_END_OF_FRAME;
 	}
@@ -165,7 +165,7 @@ static irqreturn_t davinci_disp_isr(int 
 		 * workaround for field signal inversion Advisory 1.3.8 for
 		 * the DM6446.
 		 */
-		if (event & DAVINCI_DISP_TOP_FIELD)
+		if (event & DAVINCI_DISP_SECOND_FIELD)
 			osd_set(OSD_MISCCTL_PPSW, OSD_MISCCTL);
 		else
 			osd_clear(OSD_MISCCTL_PPSW, OSD_MISCCTL);
Index: linux-2.6.10/include/video/davinci_osd.h
===================================================================
--- linux-2.6.10.orig/include/video/davinci_osd.h
+++ linux-2.6.10/include/video/davinci_osd.h
@@ -271,8 +271,8 @@ struct davinci_disp_callback {
 
 /* display manager events */
 #define DAVINCI_DISP_END_OF_FRAME	1
-#define DAVINCI_DISP_TOP_FIELD		2
-#define DAVINCI_DISP_BOTTOM_FIELD	4
+#define DAVINCI_DISP_FIRST_FIELD	2
+#define DAVINCI_DISP_SECOND_FIELD	4
 
 /**
  * struct davinci_layer_config
@@ -869,7 +869,7 @@ int davinci_disp_get_field_inversion(voi
  * modify the @callback struct until the callback has been unregistered.
  *
  * The display manager events are %DAVINCI_DISP_END_OF_FRAME,
- * %DAVINCI_DISP_TOP_FIELD, and %DAVINCI_DISP_BOTTOM_FIELD.
+ * %DAVINCI_DISP_FIRST_FIELD, and %DAVINCI_DISP_SECOND_FIELD.
  */
 int davinci_disp_register_callback(struct davinci_disp_callback *callback);
 
Index: linux-2.6.10/mvl_patches/pro-1717.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1717.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1717);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

