#! /usr/bin/env bash
# Patch: -pro_arm_davinci_new_pinmux_layer
# Date: Mon Jan 21 23:07:04 2008
# Source: MontaVista Software, Inc.
# MR: 26000
# Type: Enhancement
# Disposition: local
# Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
# Signed-off-by: Steve Chen <schen@mvista.com>
# 
# Description:
#         Adds new pin multiplexing support layer for DAVINCI boards.
# 

PATCHNUM=1689
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 26000
Type: Enhancement
Disposition: local
Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
Signed-off-by: Steve Chen <schen@mvista.com>

Description:
        Adds new pin multiplexing support layer for DAVINCI boards.

Index: linux-2.6.10/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-evm.c
@@ -57,6 +57,7 @@
 #include <asm/arch/edma.h>
 #include <linux/kgdb.h>
 #include <asm/arch/cpu.h>
+#include <asm/arch/mux.h>
 #include "clock.h"
 
 /**************************************************************************
@@ -422,7 +423,8 @@ static void dm644x_setup_pinmux(unsigned
 {
 	switch (id) {
 	case DAVINCI_LPSC_ATA:
-		PINMUX0 |= (1 << 17) | (1 << 16);
+		davinci_cfg_reg(DM644X_HDIREN);
+		davinci_cfg_reg(DM644X_ATAEN);
 		break;
 	case DAVINCI_LPSC_MMC_SD0:
 		/* VDD power manipulations are done in U-Boot for CPMAC
@@ -430,25 +432,26 @@ static void dm644x_setup_pinmux(unsigned
 		*/
 		/*Set up the pull register for MMC */
 		DAVINCI_VDD3P3V_PWDN = 0x0;
-		PINMUX1 &= (~(1 << 9));
+		davinci_cfg_reg(DM644X_MSTK);
 		break;
 	case DAVINCI_LPSC_I2C:
-		PINMUX1 |= (1 << 7);
+		davinci_cfg_reg(DM644X_I2C);
 		break;
 	case DAVINCI_LPSC_McBSP0:
-		PINMUX1 |= (1 << 10);
+		davinci_cfg_reg(DM644X_MCBSP0);
 		break;
 	case DAVINCI_LPSC_PWM0:
-		PINMUX1 |= (1 << 4);
+		davinci_cfg_reg(DM644X_PWM0);
 		break;
 	case DAVINCI_LPSC_PWM1:
-		PINMUX1 |= (1 << 5);
+		davinci_cfg_reg(DM644X_PWM1);
 		break;
 	case DAVINCI_LPSC_PWM2:
-		PINMUX1 |= (1 << 6);
+		davinci_cfg_reg(DM644X_PWM2);
 		break;
 	case DAVINCI_LPSC_VLYNQ:
-		PINMUX0 |= (3 << 12) | (1 << 15);
+		davinci_cfg_reg(DM644X_VLINQEN);
+		davinci_cfg_reg(DM644X_VLINQWD);
 		break;
 	default:
 		break;
Index: linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-dm355-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
@@ -43,6 +43,7 @@
 #include <asm/arch/irqs.h>
 #include <asm/arch/hardware.h>
 #include <asm/arch/edma.h>
+#include <asm/arch/mux.h>
 #include <linux/kgdb.h>
 #include "clock.h"
 
@@ -516,34 +517,46 @@ static void dm355_setup_pinmux(unsigned 
 	switch (id) {
 	case DAVINCI_LPSC_ATA:
 		/* DAVINCI_LPSC_PWM3 */
-		PINMUX1 |= 0x3ca000;
-		PINMUX1 &= ~0x005000;
+		davinci_cfg_reg(DM355_PWM3_G69);
+		davinci_cfg_reg(DM355_PWM3_G70);
+		davinci_cfg_reg(DM355_PWM3_G74);
+		davinci_cfg_reg(DM355_PWM3_G75);
+
 		break;
 	case DAVINCI_LPSC_MMC_SD0:
-		PINMUX4 &= (~(1 << 2));
+		davinci_cfg_reg(DM355_MMCSD0);
 		break;
 	case DAVINCI_LPSC_MMC_SD1:
-		PINMUX3 &= ~0x0000ff00;
-		PINMUX3 |= 0x000055c0;
+		davinci_cfg_reg(DM355_SD1_CLK);
+		davinci_cfg_reg(DM355_SD1_CMD);
+		davinci_cfg_reg(DM355_SD1_DATA3);
+		davinci_cfg_reg(DM355_SD1_DATA2);
+		davinci_cfg_reg(DM355_SD1_DATA1);
+		davinci_cfg_reg(DM355_SD1_DATA0);
 		break;
 	case DAVINCI_LPSC_I2C:
-		PINMUX3 |= (1 << 19);
-		PINMUX3 |= (1 << 20);
+		davinci_cfg_reg(DM355_I2C_SDA);
+		davinci_cfg_reg(DM355_I2C_SCL);
 		break;
 	case DAVINCI_LPSC_McBSP0:
-		PINMUX3 |= 0x3F;
+		davinci_cfg_reg(DM355_MCBSP0_BDX);
+		davinci_cfg_reg(DM355_MCBSP0_X);
+		davinci_cfg_reg(DM355_MCBSP0_BFSX);
+		davinci_cfg_reg(DM355_MCBSP0_BDR);
+		davinci_cfg_reg(DM355_MCBSP0_R);
+		davinci_cfg_reg(DM355_MCBSP0_BFSR);
 		break;
 	case DAVINCI_LPSC_PWM0:
-		PINMUX1 |= 0x2;
-		PINMUX1 &= ~0x1;
+		davinci_cfg_reg(DM355_PWM0);
 		break;
 	case DAVINCI_LPSC_PWM1:
-		PINMUX1 |= 0x8;
-		PINMUX1 &= ~0x4;
+		davinci_cfg_reg(DM355_PWM1);
 		break;
 	case DAVINCI_LPSC_PWM2:
-		PINMUX1 |= 0xaa0;
-		PINMUX1 &= ~0x550;
+		davinci_cfg_reg(DM355_PWM2_G76);
+		davinci_cfg_reg(DM355_PWM2_G77);
+		davinci_cfg_reg(DM355_PWM2_G78);
+		davinci_cfg_reg(DM355_PWM2_G79);
 		break;
 	default:
 		break;
Index: linux-2.6.10/arch/arm/mach-davinci/board-dm6467-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-dm6467-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm6467-evm.c
@@ -43,6 +43,7 @@
 #include <asm/arch/edma.h>
 #include <linux/kgdb.h>
 #include <asm/arch/cpu.h>
+#include <asm/arch/mux.h>
 #include "clock.h"
 
 /**************************************************************************
@@ -371,10 +372,10 @@ static void dm646x_setup_pinmux(unsigned
 {
 	switch (id) {
 	case DAVINCI_LPSC_ATA:
-		PINMUX0 |= 1;
+		davinci_cfg_reg(DM646X_ATAEN);
 		break;
 	case DAVINCI_LPSC_USB:
-		PINMUX0 &= 0x7FFFFFFF;
+		davinci_cfg_reg(DM646X_VBUSDIS);
 		DAVINCI_VDD3P3V_PWDN &= 0xEFFFFFFF;
 		break;
 	case DAVINCI_DM646X_LPSC_I2C:
Index: linux-2.6.10/arch/arm/mach-davinci/clock.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/clock.c
+++ linux-2.6.10/arch/arm/mach-davinci/clock.c
@@ -47,6 +47,7 @@
 
 #include <asm/arch/hardware.h>
 #include <asm/arch/cpu.h>
+#include <asm/arch/mux.h>
 #include "clock.h"
 
 #define PLL1_PLLM   __REG(0x01c40910)
@@ -61,11 +62,6 @@
 #define MDCTL   IO_ADDRESS(0x01C41A00)
 #define VDD3P3V_PWDN  __REG(0x01C40048)
 
-#define PINMUX0     __REG(0x01c40000)
-#define PINMUX1     __REG(0x01c40004)
-#define PINMUX3     __REG(0x01C4000C)
-#define PINMUX4     __REG(0x01c40010)
-
 static LIST_HEAD(clocks);
 static DECLARE_MUTEX(clocks_sem);
 static DEFINE_RAW_SPINLOCK(clockfw_lock);
@@ -76,8 +72,6 @@ static unsigned int div_by_eight;
 static unsigned int armrate;
 static unsigned int fixedrate;
 
-void (*davinci_pinmux_setup)(unsigned int id);
-
 /**************************************
  Routine: board_setup_psc
  Description:  Enable/Disable a PSC domain
Index: linux-2.6.10/arch/arm/mach-davinci/clock.h
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/clock.h
+++ linux-2.6.10/arch/arm/mach-davinci/clock.h
@@ -58,6 +58,4 @@ void clk_unregister(struct clk *clk);
 int clk_init(void);
 void board_setup_psc(unsigned int domain, unsigned int id, char enable);
 
-extern void (*davinci_pinmux_setup)(unsigned int id);
-
 #endif
Index: linux-2.6.10/arch/arm/mach-davinci/io.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/io.c
+++ linux-2.6.10/arch/arm/mach-davinci/io.c
@@ -20,6 +20,7 @@
 #include <asm/mach/map.h>
 #include <asm/arch/memory.h>
 #include <asm/arch/cpu.h>
+#include <asm/arch/mux.h>
 
 extern int davinci_clk_init(void);
 extern void davinci_check_revision(void);
@@ -91,5 +92,7 @@ void __init davinci_map_common_io(void)
 	flush_tlb_all();
 	flush_cache_all();
 
+
+	davinci_mux_init();
 	davinci_clk_init();
 }
Index: linux-2.6.10/arch/arm/mach-davinci/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/Kconfig
+++ linux-2.6.10/arch/arm/mach-davinci/Kconfig
@@ -53,10 +53,36 @@ config DAVINCI_I2C_EXPANDER
 	  Configure this option to specify whether the board used
 	  has I2C exapnder with ATA, USB, CF.
 
+config DAVINCI_MUX
+	bool "DAVINCI multiplexing support"
+	depends on ARCH_DAVINCI
+	default y
+	help
+	  Pin multiplexing support for DAVINCI boards. If your bootloader
+	  sets the multiplexing correctly, say N. Otherwise, or if unsure,
+	  say Y.
+
+config DAVINCI_MUX_DEBUG
+	bool "Multiplexing debug output"
+	depends on DAVINCI_MUX
+	help
+	  Makes the multiplexing functions print out a lot of debug info.
+	  This is useful if you want to find out the correct values of the
+	  multiplexing registers.
+
+config DAVINCI_MUX_WARNINGS
+	bool "Warn about pins the bootloader didn't set up"
+	depends on DAVINCI_MUX
+	default y
+	help
+	  Choose Y here to warn whenever driver initialization logic needs
+	  to change the pin multiplexing setup.  When there are no warnings
+	  printed, it's safe to deselect DAVINCI_MUX for your product.
+
 config DAVINCI_MCBSP
 	bool
 	prompt "DaVinci McBSP Driver" if SOUND_DAVINCI=y && ARCH_DAVINCI_DM646x=n
-	depends on ARCH_DAVINCI && ARCH_DAVINCI_DM644x
+	depends on ARCH_DAVINCI
 	default y if SOUND_DAVINCI
 	---help---
 	DaVinci McBSP driver.  Auto-enabled by DaVinci sound driver.
Index: linux-2.6.10/arch/arm/mach-davinci/Makefile
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/Makefile
+++ linux-2.6.10/arch/arm/mach-davinci/Makefile
@@ -6,7 +6,7 @@
 
 # Common objects
 obj-y                                 := time.o irq.o dma.o serial.o clock.o  io.o \
-                                       id.o gpio.o pinmux.o video_hdevm.o
+                                       id.o gpio.o mux.o mux_cfg.o
 
 
 
Index: linux-2.6.10/arch/arm/mach-davinci/mux.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-davinci/mux.c
@@ -0,0 +1,107 @@
+/*
+ * Utility to set the DAVINCI MUX register from a table in mux.h
+ *
+ * Author: Vladimir Barinov, MontaVista Software, Inc. <source@mvista.com>
+ *
+ * Based on linux/arch/arm/plat-omap/mux.c:
+ * Copyright (C) 2003 - 2005 Nokia Corporation
+ * Written by Tony Lindgren <tony.lindgren@nokia.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <linux/spinlock.h>
+#include <asm/arch/mux.h>
+
+#ifdef CONFIG_DAVINCI_MUX
+
+void (*davinci_pinmux_setup)(unsigned int id);
+static struct pin_config *pin_table;
+static unsigned long pin_table_sz;
+
+extern struct pin_config *davinci_dm644x_pins;
+extern struct pin_config *davinci_dm646x_pins;
+extern struct pin_config *davinci_dm355_pins;
+
+int __init davinci_mux_register(struct pin_config *pins, unsigned long size)
+{
+	pin_table = pins;
+	pin_table_sz = size;
+
+	return 0;
+}
+
+/*
+ * Sets the DAVINCI MUX register based on the table
+ */
+int __init_or_module davinci_cfg_reg(const unsigned long index)
+{
+	static DEFINE_SPINLOCK(mux_spin_lock);
+
+	unsigned long flags;
+	struct pin_config *cfg;
+	unsigned int reg_orig = 0, reg = 0;
+	unsigned int mask, warn = 0;
+
+	if (!pin_table)
+		BUG();
+
+	if (index >= pin_table_sz) {
+		printk(KERN_ERR "Invalid pin mux index: %lu (%lu)\n",
+		       index, pin_table_sz);
+		dump_stack();
+		return -ENODEV;
+	}
+
+	cfg = (struct pin_config *)&pin_table[index];
+
+	/* Check the mux register in question */
+	if (cfg->mux_reg) {
+		unsigned	tmp1, tmp2;
+
+		spin_lock_irqsave(&mux_spin_lock, flags);
+		reg_orig = davinci_readl(cfg->mux_reg);
+
+		mask = (cfg->mask << cfg->mask_offset);
+		tmp1 = reg_orig & mask;
+		reg = reg_orig & ~mask;
+
+		tmp2 = (cfg->mode << cfg->mask_offset);
+		reg |= tmp2;
+
+		if (tmp1 != tmp2)
+			warn = 1;
+
+		davinci_writel(reg, cfg->mux_reg);
+		spin_unlock_irqrestore(&mux_spin_lock, flags);
+	}
+
+	if (warn) {
+#ifdef CONFIG_DAVINCI_MUX_WARNINGS
+		printk(KERN_WARNING "MUX: initialized %s\n", cfg->name);
+#endif
+	}
+
+#ifdef CONFIG_DAVINCI_MUX_DEBUG
+	if (cfg->debug || warn) {
+		printk(KERN_WARNING "MUX: Setting register %s\n", cfg->name);
+		printk(KERN_WARNING "      %s (0x%08x) = 0x%08x -> 0x%08x\n",
+		       cfg->mux_reg_name, cfg->mux_reg, reg_orig, reg);
+	}
+#endif
+
+	return 0;
+}
+EXPORT_SYMBOL(davinci_cfg_reg);
+#else
+#define davinci_mux_init()	do {} while (0)
+#define davinci_cfg_reg(x)	do {} while (0)
+#endif	/* CONFIG_DAVINCI_MUX */
Index: linux-2.6.10/arch/arm/mach-davinci/mux_cfg.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-davinci/mux_cfg.c
@@ -0,0 +1,162 @@
+/*
+ * DAVINCI pin multiplexing configurations
+ *
+ * Author: Vladimir Barinov, MontaVista Software, Inc. <source@mvista.com>
+ *
+ * Based on linux/arch/arm/mach-omap1/mux.c:
+ * Copyright (C) 2003 - 2005 Nokia Corporation
+ * Written by Tony Lindgren <tony.lindgren@nokia.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <linux/spinlock.h>
+
+#include <asm/arch/mux.h>
+
+#ifdef CONFIG_DAVINCI_MUX
+
+struct pin_config __initdata_or_module davinci_dm644x_pins[] = {
+/*
+ *	 description		mux  mode   mode  mux	 dbg
+ *				reg  offset mask  mode
+ */
+MUX_CFG("HDIREN",		 0,   16,    1,	  1,	 1)
+MUX_CFG("ATAEN",		 0,   17,    1,	  1,	 1)
+
+MUX_CFG("MSTK",			 1,   9,     1,	  0,	 0)
+
+MUX_CFG("I2C",			 1,   7,     1,	  1,	 0)
+
+MUX_CFG("MCBSP0",		 1,   10,    1,	  1,	 0)
+
+MUX_CFG("PWM0",			 1,   4,     1,	  1,	 0)
+
+MUX_CFG("PWM1",			 1,   5,     1,	  1,	 0)
+
+MUX_CFG("PWM2",			 1,   6,     1,	  1,	 0)
+
+MUX_CFG("VLINQEN",		 0,   15,    1,	  1,	 0)
+MUX_CFG("VLINQWD",		 0,   12,    3,	  3,	 0)
+
+MUX_CFG("EMACEN",		 0,   31,    1,	  1,	 1)
+
+MUX_CFG("GPIO3V",		 0,   31,    1,	  0,	 1)
+
+MUX_CFG("GPIO0",		 0,   24,    1,	  0,	 1)
+MUX_CFG("GPIO3",		 0,   25,    1,	  0,	 0)
+MUX_CFG("GPIO43_44",		 1,   7,     1,	  0,	 0)
+MUX_CFG("GPIO46_47",		 0,   22,    1,	  0,	 1)
+
+MUX_CFG("RGB666",		 0,   22,    1,	  1,	 1)
+
+MUX_CFG("LOEEN",		 0,   24,    1,	  1,	 1)
+MUX_CFG("LFLDEN",		 0,   25,    1,	  1,	 0)
+};
+
+struct pin_config __initdata_or_module davinci_dm646x_pins[] = {
+/*
+ *	 description		mux  mode   mode  mux	 dbg
+ *				reg  offset mask  mode
+ */
+MUX_CFG("ATAEN",		 0,   0,     1,	  1,	 1)
+
+MUX_CFG("VBUSDIS",		 0,   31,    1,	  0,	 0)
+};
+
+struct pin_config __initdata_or_module davinci_dm355_pins[] = {
+/*
+ *	 description		mux  mode   mode  mux	 dbg
+ *				reg  offset mask  mode
+ */
+MUX_CFG("MMCSD0",		 4,   2,     1,	  0,	 0)
+
+MUX_CFG("SD1_CLK",		 3,   6,     1,	  1,	 0)
+MUX_CFG("SD1_CMD",		 3,   7,     1,	  1,	 0)
+MUX_CFG("SD1_DATA3",		 3,   8,     3,	  1,	 0)
+MUX_CFG("SD1_DATA2",		 3,   10,    3,	  1,	 0)
+MUX_CFG("SD1_DATA1",		 3,   12,    3,	  1,	 0)
+MUX_CFG("SD1_DATA0",		 3,   14,    3,	  1,	 0)
+
+MUX_CFG("I2C_SDA",		 3,   19,    1,	  1,	 0)
+MUX_CFG("I2C_SCL",		 3,   20,    1,	  1,	 0)
+
+MUX_CFG("MCBSP0_BDX",		 3,   0,     1,	  1,	 0)
+MUX_CFG("MCBSP0_X",		 3,   1,     1,	  1,	 0)
+MUX_CFG("MCBSP0_BFSX",		 3,   2,     1,	  1,	 0)
+MUX_CFG("MCBSP0_BDR",		 3,   3,     1,	  1,	 0)
+MUX_CFG("MCBSP0_R",		 3,   4,     1,	  1,	 0)
+MUX_CFG("MCBSP0_BFSR",		 3,   5,     1,	  1,	 0)
+
+MUX_CFG("PWM0",			 1,   0,     3,	  2,	 1)
+
+MUX_CFG("PWM1",			 1,   2,     3,	  2,	 1)
+
+MUX_CFG("PWM2_G76",		 1,   10,    3,	  2,	 1)
+MUX_CFG("PWM2_G77",		 1,   8,     3,	  2,	 1)
+MUX_CFG("PWM2_G78",		 1,   6,     3,	  2,	 1)
+MUX_CFG("PWM2_G79",		 1,   4,     3,	  2,	 1)
+
+MUX_CFG("PWM3_G69",		 1,   20,    3,	  3,	 0)
+MUX_CFG("PWM3_G70",		 1,   18,    3,	  3,	 0)
+MUX_CFG("PWM3_G74",		 1,   14,    3,	  2,	 1)
+MUX_CFG("PWM3_G75",		 1,   12,    3,	  2,	 1)
+
+MUX_CFG("SPI0_SDI",		 4,   1,     1,	  0,	 0)
+MUX_CFG("SPI0_SDENA0",		 4,   0,     1,	  0,	 0)
+MUX_CFG("SPI0_SDENA1",		 3,   28,    1,	  1,	 0)
+
+MUX_CFG("SPI1_SCLK",		 3,   24,    1,	  1,	 0)
+MUX_CFG("SPI1_SDO",		 3,   27,    1,	  1,	 0)
+MUX_CFG("SPI1_SDENA0",		 3,   23,    1,	  1,	 0)
+MUX_CFG("SPI1_SDENA1",		 3,   25,    3,	  2,	 0)
+
+MUX_CFG("SPI2_SCLK",		 0,   0,     3,	  2,	 0)
+MUX_CFG("SPI2_SDO",		 0,   2,     3,	  2,	 0)
+MUX_CFG("SPI2_SDENA0",		 0,   4,     3,	  2,	 0)
+MUX_CFG("SPI2_SDENA1",		 0,   6,     3,	  3,	 0)
+
+MUX_CFG("GPIO14",		 3,   20,    1,	  0,	 0)
+MUX_CFG("GPIO15",		 3,   19,    1,	  0,	 0)
+MUX_CFG("GPIO71",		 1,   17,    1,	  1,	 0)
+
+MUX_CFG("VOUT_FIELD",		 1,   18,    3,	  1,	 1)
+MUX_CFG("VOUT_FIELD_G70",	 1,   18,    3,	  0,	 1)
+MUX_CFG("VOUT_HVSYNC",		 1,   16,    1,	  0,	 0)
+MUX_CFG("VOUT_COUTL_EN",	 1,   0,     0xff, 0x55,  1)
+MUX_CFG("VOUT_COUTH_EN",	 1,   8,     0xff, 0x55,  1)
+
+MUX_CFG("VIN_PCLK",		 0,   14,    1,	  1,	 0)
+MUX_CFG("VIN_CAM_WEN",		 0,   13,    1,	  1,	 0)
+MUX_CFG("VIN_CAM_VD",		 0,   12,    1,	  1,	 0)
+MUX_CFG("VIN_CAM_HD",		 0,   11,    1,	  1,	 0)
+MUX_CFG("VIN_YIN_EN",		 0,   10,    1,	  1,	 0)
+MUX_CFG("VIN_CINL_EN",		 0,   0,     0xff, 0x55,  0)
+MUX_CFG("VIN_CINH_EN",		 0,   8,     3,	  3,	 0)
+};
+
+int __init davinci_mux_init(void)
+{
+	if (cpu_is_davinci_dm644x())
+		davinci_mux_register(davinci_dm644x_pins,
+					ARRAY_SIZE(davinci_dm644x_pins));
+	else if (cpu_is_davinci_dm6467())
+		davinci_mux_register(davinci_dm646x_pins,
+					ARRAY_SIZE(davinci_dm646x_pins));
+	else if (cpu_is_davinci_dm355())
+		davinci_mux_register(davinci_dm355_pins,
+					ARRAY_SIZE(davinci_dm355_pins));
+	else
+		printk(KERN_WARNING "DaVinci variant not supported\n");
+
+	return 0;
+}
+
+#endif
Index: linux-2.6.10/drivers/char/davinci_pwm.c
===================================================================
--- linux-2.6.10.orig/drivers/char/davinci_pwm.c
+++ linux-2.6.10/drivers/char/davinci_pwm.c
@@ -39,7 +39,6 @@
 
 #define	DRIVER_NAME		"PWM"
 #define	DAVINCI_PWM_TIMEOUT	(1*HZ)
-#define	PINMUX1			__REG(0x01c40004)
 
 struct pwm_davinci_device {
 	char name[20];
Index: linux-2.6.10/drivers/usb/musb/davinci.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/davinci.c
+++ linux-2.6.10/drivers/usb/musb/davinci.c
@@ -44,6 +44,7 @@
 #include "musb_host.h"
 
 #include <asm/arch/i2c-client.h>
+#include <asm/arch/mux.h>
 #include "davinci.h"
 
 #ifdef CONFIG_USB_TI_CPPI_DMA
@@ -323,7 +324,7 @@ int __init musb_platform_init(struct mus
 	/* clear EMACEN to enble OTG GPIO 16 for VBus power control */
 	/* Set GPIO Direction */
 	REG_DVEVM_GPIO45_DIR &= ~(DVEVM_GPIO45_DIR_OUT);
-	DAVINCI_PINMUX0 &= ~(0x80000000);
+	davinci_cfg_reg(DM644X_GPIO3V);
 #endif
 	evm_vbus_work.data = musb;
 #endif
@@ -374,7 +375,7 @@ int musb_platform_exit(struct musb *musb
 #ifdef CONFIG_USB_MUSB_OTG
 	/* Set EMACEN to enable OTG GPIO 16 for Emac control */
 	/* Set GPIO Direction */
-	DAVINCI_PINMUX0 |= (0x80000000);
+	davinci_cfg_reg(DM644X_EMACEN);
 #endif
 #endif
 
Index: linux-2.6.10/drivers/usb/musb/davinci.h
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/davinci.h
+++ linux-2.6.10/drivers/usb/musb/davinci.h
@@ -92,9 +92,6 @@
 #define DAVINCI_DMA_ALL_CHANNELS_ENABLE	0xF
 #define DAVINCI_DMA_ALL_CHANNELS_DISABLE 0xF
 
-/* PINMUX0 Register */
-#define DAVINCI_PINMUX0 __REG(DAVINCI_SYSTEM_MODULE_BASE)
-
 #define REG_DVEVM_GPIO45_DIR		__REG(0x01C67060)
 #define REG_DVEVM_GPIO45_SET		__REG(0x01C67068)
 #define REG_DVEVM_GPIO45_CLR		__REG(0x01C6706c)
Index: linux-2.6.10/include/asm-arm/arch-davinci/hardware.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-davinci/hardware.h
+++ linux-2.6.10/include/asm-arm/arch-davinci/hardware.h
@@ -97,6 +97,16 @@
 #define DAVINCI_GPSC_DSPDOMAIN      1
 
 /*
+ * System module registers
+ */
+#define PINMUX0			(DAVINCI_SYSTEM_MODULE_BASE + 0x00)
+#define PINMUX1			(DAVINCI_SYSTEM_MODULE_BASE + 0x04)
+/* dm355 only */
+#define PINMUX2			(DAVINCI_SYSTEM_MODULE_BASE + 0x08)
+#define PINMUX3			(DAVINCI_SYSTEM_MODULE_BASE + 0x0c)
+#define PINMUX4			(DAVINCI_SYSTEM_MODULE_BASE + 0x10)
+
+/*
  * LPSC Assignments
  */
 #define DAVINCI_LPSC_VPSSMSTR       0       /* VPSS Master LPSC */
Index: linux-2.6.10/include/asm-arm/arch-davinci/mux.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-davinci/mux.h
@@ -0,0 +1,203 @@
+/*
+ * Table of the DAVINCI register configurations for the PINMUX combinations
+ *
+ * Author: Vladimir Barinov, MontaVista Software, Inc. <source@mvista.com>
+ *
+ * Based on linux/include/asm-arm/arch-omap/mux.h:
+ * Copyright (C) 2003 - 2005 Nokia Corporation
+ * Written by Tony Lindgren <tony.lindgren@nokia.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#ifndef __ASM_ARCH_MUX_H
+#define __ASM_ARCH_MUX_H
+
+#ifdef	CONFIG_DAVINCI_MUX_DEBUG
+#define MUX_REG(reg, mode_offset, mode_mask, mux_mode) \
+			.mux_reg_name = "PINMUX"#reg, \
+			.mux_reg = PINMUX##reg, \
+			.mask_offset = mode_offset, \
+			.mask = mode_mask, \
+			.mode = mux_mode,
+#else
+#define MUX_REG(reg, mode_offset, mode_mask, mux_mode) \
+			.mux_reg = PINMUX##reg, \
+			.mask_offset = mode_offset, \
+			.mask = mode_mask, \
+			.mode = mux_mode,
+#endif /* CONFIG_DAVINCI_MUX_DEBUG */
+
+#define MUX_CFG(desc, mux_reg, mode_offset, mode_mask,		\
+		mux_mode, dbg)					\
+{								\
+	.name =	 desc,						\
+	.debug = dbg,						\
+	MUX_REG(mux_reg, mode_offset, mode_mask, mux_mode)	\
+},
+
+struct pin_config {
+	char *name;
+	unsigned char busy;
+	unsigned char debug;
+
+	const char *mux_reg_name;
+	const unsigned int mux_reg;
+	const unsigned char mask_offset;
+	const unsigned char mask;
+	const unsigned char mode;
+};
+
+enum davinci_dm644x_index {
+	/* ATA and HDDIR functions */
+	DM644X_HDIREN,
+	DM644X_ATAEN,
+
+	/* Memory Stick */
+	DM644X_MSTK,
+
+	/* I2C */
+	DM644X_I2C,
+
+	/* ASP function */
+	DM644X_MCBSP0,
+
+	/* PWM0 */
+	DM644X_PWM0,
+
+	/* PWM1 */
+	DM644X_PWM1,
+
+	/* PWM2 */
+	DM644X_PWM2,
+
+	/* VLINQ function */
+	DM644X_VLINQEN,
+	DM644X_VLINQWD,
+
+	/* EMAC and MDIO function */
+	DM644X_EMACEN,
+
+	/* GPIO3V[0:16] pins */
+	DM644X_GPIO3V,
+
+	/* GPIO pins */
+	DM644X_GPIO0,
+	DM644X_GPIO3,
+	DM644X_GPIO43_44,
+	DM644X_GPIO46_47,
+
+	/* VPBE */
+	DM644X_RGB666,
+
+	/* LCD */
+	DM644X_LOEEN,
+	DM644X_LFLDEN,
+};
+
+enum davinci_dm646x_index {
+	/* ATA function */
+	DM646X_ATAEN,
+
+	/* USB */
+	DM646X_VBUSDIS,
+};
+
+enum davinci_dm355_index {
+	/* MMC/SD 0 */
+	DM355_MMCSD0,
+
+	/* MMC/SD 1 */
+	DM355_SD1_CLK,
+	DM355_SD1_CMD,
+	DM355_SD1_DATA3,
+	DM355_SD1_DATA2,
+	DM355_SD1_DATA1,
+	DM355_SD1_DATA0,
+
+	/* I2C */
+	DM355_I2C_SDA,
+	DM355_I2C_SCL,
+
+	/* ASP function */
+	DM355_MCBSP0_BDX,
+	DM355_MCBSP0_X,
+	DM355_MCBSP0_BFSX,
+	DM355_MCBSP0_BDR,
+	DM355_MCBSP0_R,
+	DM355_MCBSP0_BFSR,
+
+	/* PWM0 */
+	DM355_PWM0,
+
+	/* PWM1 */
+	DM355_PWM1,
+
+	/* PWM2 */
+	DM355_PWM2_G76,
+	DM355_PWM2_G77,
+	DM355_PWM2_G78,
+	DM355_PWM2_G79,
+
+	/* PWM3 */
+	DM355_PWM3_G69,
+	DM355_PWM3_G70,
+	DM355_PWM3_G74,
+	DM355_PWM3_G75,
+
+	/* SPI0 */
+	DM355_SPI0_SDI,
+	DM355_SPI0_SDENA0,
+	DM355_SPI0_SDENA1,
+
+	/* SPI1 */
+	DM355_SPI1_SCLK,
+	DM355_SPI1_SDO,
+	DM355_SPI1_SDENA0,
+	DM355_SPI1_SDENA1,
+
+	/* SPI2 */
+	DM355_SPI2_SCLK,
+	DM355_SPI2_SDO,
+	DM355_SPI2_SDENA0,
+	DM355_SPI2_SDENA1,
+
+	/* GPIO */
+	DM355_GPIO14,
+	DM355_GPIO15,
+	DM355_GPIO71,
+
+	/* Video Out */
+	DM355_VOUT_FIELD,
+	DM355_VOUT_FIELD_G70,
+	DM355_VOUT_HVSYNC,
+	DM355_VOUT_COUTL_EN,
+	DM355_VOUT_COUTH_EN,
+
+	/* Video In */
+	DM355_VIN_PCLK,
+	DM355_VIN_CAM_WEN,
+	DM355_VIN_CAM_VD,
+	DM355_VIN_CAM_HD,
+	DM355_VIN_YIN_EN,
+	DM355_VIN_CINL_EN,
+	DM355_VIN_CINH_EN,
+};
+
+#ifdef	CONFIG_DAVINCI_MUX
+/* setup pin muxing in Linux */
+extern int davinci_mux_init(void);
+extern int davinci_mux_register(struct pin_config *pins, unsigned long size);
+extern int davinci_cfg_reg(unsigned long reg_cfg);
+#else
+/* boot loader does it all (no warnings from CONFIG_DAVINCI_MUX_WARNINGS) */
+static inline int davinci_mux_init(void) { return 0; }
+static inline int davinci_cfg_reg(unsigned long reg_cfg) { return 0; }
+#endif
+
+extern void (*davinci_pinmux_setup)(unsigned int id);
+
+#endif
Index: linux-2.6.10/drivers/i2c/busses/i2c-davinci.c
===================================================================
--- linux-2.6.10.orig/drivers/i2c/busses/i2c-davinci.c
+++ linux-2.6.10/drivers/i2c/busses/i2c-davinci.c
@@ -51,6 +51,7 @@
 #include <linux/wait.h>
 #include <asm/arch/irqs.h>
 #include <asm/arch/cpu.h>
+#include <asm/arch/mux.h>
 #include <asm/mach-types.h>
 #include "i2c-davinci.h"
 
@@ -107,8 +108,6 @@ static struct i2c_davinci_device i2c_dav
 
 static struct clk *i2c_clock;
 
-#define PINMUX1		__REG(0x01c40004)
-#define PINMUX3		__REG(0x01c4000c)
 #define GPIO		__REG(0x01C67000)
 #define GPIO23_DIR	__REG(0x01C67038)
 #define GPIO23_SET	__REG(0x01C67040)
@@ -134,15 +133,14 @@ static void disable_i2c_pins(void)
 		gpio_direction_input(44);
 		gpio_direction_output(43, 0);
 		gpio_set_value(43, 1);
-
-		PINMUX1 &= ~(1 << 7);
+		davinci_cfg_reg(DM644X_GPIO43_44);
 	} else if (cpu_is_davinci_dm355()) {
 		/* I2C clock on GPIO14, I2C data on GPIO15 */
 		gpio_direction_input(15);
 		gpio_direction_output(14, 0);
 		gpio_set_value(14, 1);
-
-		PINMUX3 &= ~((1 << 20) | (1 << 19));
+		davinci_cfg_reg(DM355_GPIO14);
+		davinci_cfg_reg(DM355_GPIO15);
 	}
 
 	local_irq_restore(flags);
@@ -156,9 +154,11 @@ static void enable_i2c_pins(void)
 	local_irq_save(flags);
 
 	if (cpu_is_davinci_dm644x())
-		PINMUX1 |= (1 << 7);
-	else if (cpu_is_davinci_dm355())
-		PINMUX3 |= ((1 << 20) | (1 << 19));
+		davinci_cfg_reg(DM644X_I2C);
+	else if (cpu_is_davinci_dm355()) {
+		davinci_cfg_reg(DM355_I2C_SDA);
+		davinci_cfg_reg(DM355_I2C_SCL);
+	}
 
 	local_irq_restore(flags);
 }
Index: linux-2.6.10/mvl_patches/pro-1689.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1689.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1689);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

