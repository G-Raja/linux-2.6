#! /usr/bin/env bash
# Patch: -common_i2c_eeprom_allow_bigger_sizes
# Date: Tue Feb  6 08:14:19 2007
# Source: MontaVista Software, Inc.
# MR: 19269
# Type: Enhancement
# Disposition: needs submitting to lm-sensors
# Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
# Description:
#     Added support for eeproms with larger than 2K (256 x 8) size (AT24CXX series)
# 
# 

PATCHNUM=1048
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 19269
Type: Enhancement
Disposition: needs submitting to lm-sensors
Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
Description:
    Added support for eeproms with larger than 2K (256 x 8) size (AT24CXX series)


Index: linux-2.6.10/drivers/i2c/chips/eeprom.c
===================================================================
--- linux-2.6.10.orig/drivers/i2c/chips/eeprom.c
+++ linux-2.6.10/drivers/i2c/chips/eeprom.c
@@ -5,11 +5,15 @@
 			       Philip Edelbrock <phil@netroedge.com>
     Copyright (C) 2003 Greg Kroah-Hartman <greg@kroah.com>
     Copyright (C) 2003 IBM Corp.
+    Copyright (C) 2006 MontaVista Software, Inc.
 
     2004-01-16  Jean Delvare <khali@linux-fr.org>
     Divide the eeprom in 32-byte (arbitrary) slices. This significantly
     speeds sensors up, as well as various scripts using the eeprom
     module.
+    
+    2006-07-24  Vladimir A. Barinov <vbarinov@ru.mvista.com>
+    Added support for eeproms with larger than 2K (256 x 8) size (AT24CXX series)
 
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
@@ -65,9 +69,11 @@ struct eeprom_data {
 	struct i2c_client client;
 	struct semaphore update_lock;
 	u8 valid;			/* bitfield, bit!=0 if slice is valid */
-	unsigned long last_updated[8];	/* In jiffies, 8 slices */
-	u8 data[EEPROM_SIZE];		/* Register values */
+	unsigned long *last_updated;	/* In jiffies */
+	u8 *data;			/* Register values */
 	enum eeprom_nature nature;
+	u16 eeprom_size;		/* Size of EEPROM in bytes */
+	u8 cmdlen;			/* length of i2c command in bytes */
 };
 
 
@@ -87,10 +93,11 @@ static struct i2c_driver eeprom_driver =
 
 static int eeprom_id;
 
-static void eeprom_update_client(struct i2c_client *client, u8 slice)
+static void eeprom_update_client(struct i2c_client *client, u16 slice)
 {
 	struct eeprom_data *data = i2c_get_clientdata(client);
 	int i, j;
+	int ret;
 
 	down(&data->update_lock);
 
@@ -99,12 +106,16 @@ static void eeprom_update_client(struct 
 	    (jiffies < data->last_updated[slice])) {
 		dev_dbg(&client->dev, "Starting eeprom update, slice %u\n", slice);
 
-		if (i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {
+		if (i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_READ_I2C_BLOCK) && (data->cmdlen == 1)) {
 			for (i = slice << 5; i < (slice + 1) << 5; i += I2C_SMBUS_I2C_BLOCK_MAX)
 				if (i2c_smbus_read_i2c_block_data(client, i, data->data + i) != I2C_SMBUS_I2C_BLOCK_MAX)
 					goto exit;
 		} else {
-			if (i2c_smbus_write_byte(client, slice << 5)) {
+			if (data->cmdlen == 2)
+				ret = i2c_smbus_write_byte_data(client, (slice << 5) >> 8, (slice << 5) & 0xff);
+			else
+				ret = i2c_smbus_write_byte(client, slice << 5);
+			if (ret) {
 				dev_dbg(&client->dev, "eeprom read start has failed!\n");
 				goto exit;
 			}
@@ -126,12 +137,12 @@ static ssize_t eeprom_read(struct kobjec
 {
 	struct i2c_client *client = to_i2c_client(container_of(kobj, struct device, kobj));
 	struct eeprom_data *data = i2c_get_clientdata(client);
-	u8 slice;
+	u16 slice;
 
-	if (off > EEPROM_SIZE)
+	if (off > data->eeprom_size)
 		return 0;
-	if (off + count > EEPROM_SIZE)
-		count = EEPROM_SIZE - off;
+	if (off + count > data->eeprom_size)
+		count = data->eeprom_size - off;
 
 	/* Only refresh slices which contain requested bytes */
 	for (slice = off >> 5; slice <= (off + count - 1) >> 5; slice++)
@@ -156,7 +167,6 @@ static struct bin_attribute eeprom_attr 
 		.mode = S_IRUGO,
 		.owner = THIS_MODULE,
 	},
-	.size = EEPROM_SIZE,
 	.read = eeprom_read,
 };
 
@@ -195,7 +205,6 @@ int eeprom_detect(struct i2c_adapter *ad
 	memset(data, 0, sizeof(struct eeprom_data));
 
 	new_client = &data->client;
-	memset(data->data, 0xff, EEPROM_SIZE);
 	i2c_set_clientdata(new_client, data);
 	new_client->addr = address;
 	new_client->adapter = adapter;
@@ -237,11 +246,32 @@ int eeprom_detect(struct i2c_adapter *ad
 	if ((err = i2c_attach_client(new_client)))
 		goto exit_kfree;
 
+	data->eeprom_size = EEPROM_SIZE;
+	if (new_client->dev.platform_data)
+		data->eeprom_size = *(u16 *)new_client->dev.platform_data;
+
+	data->cmdlen = data->eeprom_size > 0x100 ? 2 : 1;
+
+	if (!(data->last_updated = kmalloc(sizeof(unsigned long) * (data->eeprom_size / (1<<5)), GFP_KERNEL))) {
+		err = -ENOMEM;
+		goto exit_detach1;
+	}
+
+	if (!(data->data = kmalloc(sizeof(u8) * data->eeprom_size, GFP_KERNEL))) {
+		err = -ENOMEM;
+		goto exit_detach2;
+	}
+	memset(data->data, 0xff, data->eeprom_size);
+
 	/* create the sysfs eeprom file */
 	sysfs_create_bin_file(&new_client->dev.kobj, &eeprom_attr);
 
 	return 0;
 
+exit_detach2:
+	kfree(data->last_updated);
+exit_detach1:
+	i2c_detach_client(new_client);
 exit_kfree:
 	kfree(data);
 exit:
@@ -258,6 +288,8 @@ static int eeprom_detach_client(struct i
 		return err;
 	}
 
+	kfree(((struct eeprom_data *)i2c_get_clientdata(client))->data);
+	kfree(((struct eeprom_data *)i2c_get_clientdata(client))->last_updated);
 	kfree(i2c_get_clientdata(client));
 
 	return 0;
Index: linux-2.6.10/mvl_patches/pro-1048.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1048.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1048);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

