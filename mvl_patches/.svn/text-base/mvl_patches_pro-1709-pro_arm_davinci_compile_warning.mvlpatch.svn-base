#! /usr/bin/env bash
# Patch: -pro_arm_davinci_compile_warning
# Date: Mon Jan 21 23:08:37 2008
# Source: MontaVista Software, Inc.
# MR: 26596
# Type: Enhancement
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#  Take care of compiler warnings introduced in DM355/DM6467 LSP.

PATCHNUM=1709
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 26596
Type: Enhancement
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
 Take care of compiler warnings introduced in DM355/DM6467 LSP.
Index: linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/mcbsp.c
+++ linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
@@ -583,20 +583,16 @@ static int __init davinci_mcbsp_init(voi
 {
 	int mcbsp_count = 0, i;
 	static const struct davinci_mcbsp_info *mcbsp_info;
-	struct clk *clkp;
 	struct clk *clkp0, *clkp1;
 
 	if (cpu_is_davinci_dm355()) {
 		/* enable EDMA event for MCBSP1 */
 		__REG(EDMA_EVTMUX) &= ~(0x3);
-
-		clkp0 = clk_get (NULL, "McBSPCLK0");
-	} else {
-		clkp = clk_get (NULL, "McBSPCLK0");
 	}
+	clkp0 = clk_get (NULL, "McBSPCLK0");
 
 	if (!cpu_is_davinci_dm355()) {
-		if (IS_ERR(clkp)) {
+		if (IS_ERR(clkp0)) {
 			return -1;
 		}
 	} else {
@@ -608,7 +604,7 @@ static int __init davinci_mcbsp_init(voi
 	}
 
 	if (!cpu_is_davinci_dm355()) {
-		mbspclk = clkp;
+		mbspclk = clkp0;
 		clk_use (mbspclk);
 		clk_enable (mbspclk);
 	} else {
Index: linux-2.6.10/drivers/media/video/davinci/ths8200_encoder.c
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/ths8200_encoder.c
+++ linux-2.6.10/drivers/media/video/davinci/ths8200_encoder.c
@@ -296,7 +296,7 @@ static int ths8200_initialize(struct vid
 		return -EINVAL;
 	}
 	ths8200_channel_info.i2c_dev.i2c_registration |= 1;
-	ths8200_channel_info.enc_device = (struct encoder_device *)enc;
+	ths8200_channel_info.enc_device = enc;
 
 	dev_dbg(ths8200_i2c_dev, "THS8200 driver registered\n");
 
Index: linux-2.6.10/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.10.orig/drivers/net/davinci_emac.c
+++ linux-2.6.10/drivers/net/davinci_emac.c
@@ -3218,7 +3218,7 @@ static u32 emac_get_link(struct net_devi
 	return ret;
 }
 
-static const struct ethtool_ops ethtool_ops = {
+struct ethtool_ops ethtool_ops = {
 	.get_drvinfo = emac_get_drvinfo,
 	.get_settings = emac_get_settings,
 	.set_settings = emac_set_settings,
Index: linux-2.6.10/drivers/i2c/busses/i2c-davinci.c
===================================================================
--- linux-2.6.10.orig/drivers/i2c/busses/i2c-davinci.c
+++ linux-2.6.10/drivers/i2c/busses/i2c-davinci.c
@@ -52,6 +52,7 @@
 #include <asm/arch/irqs.h>
 #include <asm/arch/cpu.h>
 #include <asm/arch/mux.h>
+#include <asm/arch/gpio.h>
 #include <asm/mach-types.h>
 #include "i2c-davinci.h"
 
@@ -108,11 +109,6 @@ static struct i2c_davinci_device i2c_dav
 
 static struct clk *i2c_clock;
 
-#define GPIO		__REG(0x01C67000)
-#define GPIO23_DIR	__REG(0x01C67038)
-#define GPIO23_SET	__REG(0x01C67040)
-#define GPIO23_CLR	__REG(0x01C67044)
-
 /*
  * Choose 12Mhz as the targeted I2C clock frequency after the prescaler.
 */
Index: linux-2.6.10/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.10/drivers/usb/musb/plat_uds.c
@@ -644,7 +644,7 @@ static irqreturn_t musb_stage0_irq(struc
 	pThis->vbuserr_retry--;
 
 	if (pThis->vbuserr_retry) {
-		musb_writeb (pThis->ctrl_base,
+		musb_writel (pThis->ctrl_base,
 			DAVINCI_USB_INT_SRC_CLR_REG, 0xffffffff);
 		devctl |= MGC_M_DEVCTL_HR;
 		devctl |= MGC_M_DEVCTL_SESSION;
Index: linux-2.6.10/drivers/spi/davinci_spi_master.c
===================================================================
--- linux-2.6.10.orig/drivers/spi/davinci_spi_master.c
+++ linux-2.6.10/drivers/spi/davinci_spi_master.c
@@ -820,7 +820,7 @@ static int davinci_spi_bufs_dma(struct s
 				   count + 1, DMA_TO_DEVICE);
 		if (dma_mapping_error(t->tx_dma)) {
 			printk(KERN_ERR
-			       "%s(): Couldn't DMA map a %d bytes TX ",
+			       "%s(): Couldn't DMA map a %d bytes TX "
 			       "tmp buffer\n", __FUNCTION__, count);
 			return -1;
 		}
Index: linux-2.6.10/drivers/media/video/davinci/dm355_af.c
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/dm355_af.c
+++ linux-2.6.10/drivers/media/video/davinci/dm355_af.c
@@ -671,10 +671,8 @@ static struct device_driver af_driver = 
 #define DRIVERNAME  "DM355AF"
 int __init af_init(void)
 {
-	int get_int;
 	int err;
 	int result = 0;
-	int interrupt_no;
 	unsigned int vpssclk;
 
 	/* Register the driver in the kernel */
Index: linux-2.6.10/drivers/media/video/davinci/dm355_ipipe.c
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/dm355_ipipe.c
+++ linux-2.6.10/drivers/media/video/davinci/dm355_ipipe.c
@@ -1268,7 +1268,6 @@ int ipipe_mmap(struct file *filp, struct
 int ipipe_ioctl(struct inode *inode, struct file *file,
 		unsigned int cmd, unsigned long arg)
 {
-	unsigned int dpath_reg;
 	struct ipipe_params params_t;
 	/* struct ipipe_reg_dump reg_addr; */
 	int ret = 0;
@@ -1364,8 +1363,6 @@ int ipipe_ioctl(struct inode *inode, str
 			up(&(device->sem));
 			return ret;
 		}
-		/* test for register write OK */
-		/*dpath_reg = regr_ip(IPIPE_DPATHS);*/
 		up(&(device->sem));
 		break;
 
@@ -1457,7 +1454,6 @@ static struct platform_device ipipe_pt_d
 };
 int __init ipipe_init(void)
 {
-	u32 utemp;
 	int result;
 
 	/* Register the driver in the kernel */
Index: linux-2.6.10/mvl_patches/pro-1709.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1709.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1709);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

