#! /usr/bin/env bash
# Patch: -pro_mips_tx3938_nand_fixup
# Date: Wed Oct  3 15:34:09 2007
# Source: MontaVista Software, Inc. 
# MR: 17392 
# Type: Defect Fix 
# Disposition: local
# Signed-off-by: Armin Kuster <AKuster@mvista.com>
# Description:
# Change register read/write to reg_*32/*64 instead of direct access.
# 

PATCHNUM=1361
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. 
MR: 17392 
Type: Defect Fix 
Disposition: local
Signed-off-by: Armin Kuster <AKuster@mvista.com>
Description:
Change register read/write to reg_*32/*64 instead of direct access.

Index: linux-2.6.10/drivers/mtd/nand/tx4938ndfmc.c
===================================================================
--- linux-2.6.10.orig/drivers/mtd/nand/tx4938ndfmc.c
+++ linux-2.6.10/drivers/mtd/nand/tx4938ndfmc.c
@@ -42,7 +42,7 @@ static struct mtd_info *tx4938ndfmc_mtd;
 /*
  * Define partitions for flash device
  */
-#define flush_wb()	(void)tx4938_ndfmcptr->mcr;
+#define flush_wb()	reg_rd32(&tx4938_ndfmcptr->mcr);
 
 #define NUM_PARTITIONS  	3
 #define NUMBER_OF_CIS_BLOCKS	24
@@ -98,57 +98,59 @@ static struct mtd_partition partition_in
 
 static void tx4938ndfmc_hwcontrol(struct mtd_info *mtd, int cmd)
 {
+	u32 s = reg_rd32(&tx4938_ndfmcptr->mcr);
 	switch (cmd) {
 		case NAND_CTL_SETCLE:
-			tx4938_ndfmcptr->mcr |= TX4938_NDFMCR_CLE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s | TX4938_NDFMCR_CLE);
 			break;
 		case NAND_CTL_CLRCLE:
-			tx4938_ndfmcptr->mcr &= ~TX4938_NDFMCR_CLE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s & ~TX4938_NDFMCR_CLE);
 			break;
 		case NAND_CTL_SETALE:
-			tx4938_ndfmcptr->mcr |= TX4938_NDFMCR_ALE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s | TX4938_NDFMCR_ALE);
 			break;
 		case NAND_CTL_CLRALE:
-			tx4938_ndfmcptr->mcr &= ~TX4938_NDFMCR_ALE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s & ~TX4938_NDFMCR_ALE);
 			break;
 		/* TX4938_NDFMCR_CE bit is 0:high 1:low */
 		case NAND_CTL_SETNCE:
-			tx4938_ndfmcptr->mcr |= TX4938_NDFMCR_CE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s | TX4938_NDFMCR_CE);
 			break;
 		case NAND_CTL_CLRNCE:
-			tx4938_ndfmcptr->mcr &= ~TX4938_NDFMCR_CE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s & ~TX4938_NDFMCR_CE);
 			break;
 		case NAND_CTL_SETWP:
-			tx4938_ndfmcptr->mcr |= TX4938_NDFMCR_WE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s | TX4938_NDFMCR_WE);
 			break;
 		case NAND_CTL_CLRWP:
-			tx4938_ndfmcptr->mcr &= ~TX4938_NDFMCR_WE;
+			reg_wr32(&tx4938_ndfmcptr->mcr, s & ~TX4938_NDFMCR_WE);
 			break;
 	}
 }
 static int tx4938ndfmc_dev_ready(struct mtd_info *mtd)
 {
 	flush_wb();
-	return !(tx4938_ndfmcptr->sr & TX4938_NDFSR_BUSY);
+	return !(reg_rd32(&tx4938_ndfmcptr->sr) & TX4938_NDFSR_BUSY);
 }
-static void tx4938ndfmc_calculate_ecc(struct mtd_info *mtd, const u_char *dat, u_char *ecc_code)
+static int tx4938ndfmc_calculate_ecc(struct mtd_info *mtd, const u_char *dat, u_char *ecc_code)
 {
-	u32 mcr = tx4938_ndfmcptr->mcr;
+	u32 mcr = reg_rd32(&tx4938_ndfmcptr->mcr);
 	mcr &= ~TX4938_NDFMCR_ECC_ALL;
-	tx4938_ndfmcptr->mcr = mcr | TX4938_NDFMCR_ECC_OFF;
-	tx4938_ndfmcptr->mcr = mcr | TX4938_NDFMCR_ECC_READ;
-	ecc_code[1] = tx4938_ndfmcptr->dtr;
-	ecc_code[0] = tx4938_ndfmcptr->dtr;
-	ecc_code[2] = tx4938_ndfmcptr->dtr;
-	tx4938_ndfmcptr->mcr = mcr | TX4938_NDFMCR_ECC_OFF;
+	reg_wr32(&tx4938_ndfmcptr->mcr, mcr | TX4938_NDFMCR_ECC_OFF);
+	reg_wr32(&tx4938_ndfmcptr->mcr, mcr | TX4938_NDFMCR_ECC_READ);
+	ecc_code[1] = (u_char) reg_rd32(&tx4938_ndfmcptr->dtr);
+	ecc_code[0] = (u_char) reg_rd32(&tx4938_ndfmcptr->dtr);
+	ecc_code[2] = (u_char) reg_rd32(&tx4938_ndfmcptr->dtr);
+	reg_wr32(&tx4938_ndfmcptr->mcr, mcr | TX4938_NDFMCR_ECC_OFF);
+	return 0;
 }
 static void tx4938ndfmc_enable_hwecc(struct mtd_info *mtd, int mode)
 {
-	u32 mcr = tx4938_ndfmcptr->mcr;
+	u32 mcr = reg_rd32(&tx4938_ndfmcptr->mcr);
 	mcr &= ~TX4938_NDFMCR_ECC_ALL;
-	tx4938_ndfmcptr->mcr = mcr | TX4938_NDFMCR_ECC_RESET;
-	tx4938_ndfmcptr->mcr = mcr | TX4938_NDFMCR_ECC_OFF;
-	tx4938_ndfmcptr->mcr = mcr | TX4938_NDFMCR_ECC_ON;
+	reg_wr32(&tx4938_ndfmcptr->mcr, mcr | TX4938_NDFMCR_ECC_RESET);
+	reg_wr32(&tx4938_ndfmcptr->mcr, mcr | TX4938_NDFMCR_ECC_OFF);
+	reg_wr32(&tx4938_ndfmcptr->mcr, mcr | TX4938_NDFMCR_ECC_ON);
 }
 
 static u_char tx4938ndfmc_nand_read_byte(struct mtd_info *mtd)
@@ -309,20 +311,19 @@ int __init tx4938ndfmc_init (void)
 	hold = 2;
 	spw = 9 - 1;	/* 8 GBUSCLK = 80ns (@ GBUSCLK 100MHz) */
 
-	if ((tx4938_ccfgptr->pcfg &
-	     (TX4938_PCFG_ATA_SEL|TX4938_PCFG_ISA_SEL|TX4938_PCFG_NDF_SEL))
-	    != TX4938_PCFG_NDF_SEL) {
+	if ((reg_rd64(&tx4938_ccfgptr->pcfg) &
+		(TX4938_PCFG_ATA_SEL|TX4938_PCFG_ISA_SEL|TX4938_PCFG_NDF_SEL))
+		 != TX4938_PCFG_NDF_SEL) {
 		printk("TX4938 NDFMC: disabled by PCFG.\n");
 		return -ENODEV;
 	}
 
 	/* reset NDFMC */
-	tx4938_ndfmcptr->rstr |= TX4938_NDFRSTR_RST;
-	while (tx4938_ndfmcptr->rstr & TX4938_NDFRSTR_RST)
-		;
+	reg_wr32(&tx4938_ndfmcptr->rstr, TX4938_NDFRSTR_RST);
+	while (reg_rd32(&tx4938_ndfmcptr->rstr))
 	/* setup BusSeparete, Hold Time, Strobe Pulse Width */
-	tx4938_ndfmcptr->mcr = bsprt ? TX4938_NDFMCR_BSPRT : 0;
-	tx4938_ndfmcptr->spr = hold << 4 | spw;
+	reg_wr32(&tx4938_ndfmcptr->mcr, bsprt ? TX4938_NDFMCR_BSPRT : 0);
+	reg_wr32(&tx4938_ndfmcptr->spr, hold << 4 | spw);
 
 	/* Allocate memory for MTD device structure and private data */
 	tx4938ndfmc_mtd = kmalloc (sizeof(struct mtd_info) + sizeof (struct nand_chip),
@@ -343,8 +344,8 @@ int __init tx4938ndfmc_init (void)
 	tx4938ndfmc_mtd->priv = this;
 
 	/* Set address of NAND IO lines */
-	this->IO_ADDR_R = (unsigned long)&tx4938_ndfmcptr->dtr;
-	this->IO_ADDR_W = (unsigned long)&tx4938_ndfmcptr->dtr;
+	this->IO_ADDR_R = &tx4938_ndfmcptr->dtr;
+	this->IO_ADDR_W = &tx4938_ndfmcptr->dtr;
 	this->hwcontrol = tx4938ndfmc_hwcontrol;
 	this->dev_ready = tx4938ndfmc_dev_ready;
 	this->calculate_ecc = tx4938ndfmc_calculate_ecc;
Index: linux-2.6.10/mvl_patches/pro-1361.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1361.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1361);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

