#! /usr/bin/env bash
# Patch: -common_Mobil_Pentium_4_HT_and_the_NMI
# Date: Fri Nov  3 21:26:41 2006
# MR: 20149
# [PATCH] Mobil Pentium 4 HT and the NMI
# 
# I'm trying to get the nmi working with my laptop (IBM ThinkPad G41) and after
# debugging it a while, I found that the nmi code doesn't want to set it up for
# this particular CPU.
# 
# Here I have:
# 
# $ cat /proc/cpuinfo
# processor       : 0
# vendor_id       : GenuineIntel
# cpu family      : 15
# model           : 4
# model name      : Mobile Intel(R) Pentium(R) 4 CPU 3.33GHz
# stepping        : 1
# cpu MHz         : 3320.084
# cache size      : 1024 KB
# physical id     : 0
# siblings        : 2
# core id         : 0
# cpu cores       : 1
# fdiv_bug        : no
# hlt_bug         : no
# f00f_bug        : no
# coma_bug        : no
# fpu             : yes
# fpu_exception   : yes
# cpuid level     : 3
# wp              : yes
# flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge
# mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe pni
# monitor ds_cpl est tm2 cid xtpr
# bogomips        : 6642.39
# 
# processor       : 1
# vendor_id       : GenuineIntel
# cpu family      : 15
# model           : 4
# model name      : Mobile Intel(R) Pentium(R) 4 CPU 3.33GHz
# stepping        : 1
# cpu MHz         : 3320.084
# cache size      : 1024 KB
# physical id     : 0
# siblings        : 2
# core id         : 0
# cpu cores       : 1
# fdiv_bug        : no
# hlt_bug         : no
# f00f_bug        : no
# coma_bug        : no
# fpu             : yes
# fpu_exception   : yes
# cpuid level     : 3
# wp              : yes
# flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge
# mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe pni
# monitor ds_cpl est tm2 cid xtpr
# bogomips        : 6637.46
# 
# And the following code shows:
# 
# $ cat linux-2.6.13-rc6/arch/i386/kernel/nmi.c
# 
# [...]
# 
# void setup_apic_nmi_watchdog (void)
# {
#         switch (boot_cpu_data.x86_vendor) {
#         case X86_VENDOR_AMD:
#                 if (boot_cpu_data.x86 != 6 && boot_cpu_data.x86 != 15)
#                         return;
#                 setup_k7_watchdog();
#                 break;
#         case X86_VENDOR_INTEL:
#                  switch (boot_cpu_data.x86) {
#                 case 6:
#                         if (boot_cpu_data.x86_model > 0xd)
#                                 return;
# 
#                         setup_p6_watchdog();
#                         break;
#                 case 15:
#                         if (boot_cpu_data.x86_model > 0x3)
#                                 return;
# 
# Here I get boot_cpu_data.x86_model == 0x4.  So I decided to change it and
# reboot.  I now seem to have a working NMI.  So, unless there's something know
# to be bad about this processor and the NMI.  I'm submitting the following
# patch.
# 
# Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
# Acked-by: Zwane Mwaikambo <zwane@arm.linux.org.uk>
# Acked-by: Mikael Pettersson <mikpe@csd.uu.se>
# Signed-off-by: Andrew Morton <akpm@osdl.org>
# Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 
# commit cd3716ab40c6049479d29a74b29107fd7e0e1153
# tree 1b9fa4be58fda88d16d014bf85e460ee6db048ee
# parent 008b150a3c4d971cd65d02d107b8fcc860bc959c
# author Steven Rostedt <rostedt@goodmis.org> Fri, 19 Aug 2005 17:57:46 -0700
# committer Linus Torvalds <torvalds@g5.osdl.org> Fri, 19 Aug 2005 18:44:56 -0700
# 
#  arch/i386/kernel/nmi.c |    4 ++--
#  1 files changed, 2 insertions(+), 2 deletions(-)
# 

PATCHNUM=958
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 20149
[PATCH] Mobil Pentium 4 HT and the NMI

I'm trying to get the nmi working with my laptop (IBM ThinkPad G41) and after
debugging it a while, I found that the nmi code doesn't want to set it up for
this particular CPU.

Here I have:

$ cat /proc/cpuinfo
processor       : 0
vendor_id       : GenuineIntel
cpu family      : 15
model           : 4
model name      : Mobile Intel(R) Pentium(R) 4 CPU 3.33GHz
stepping        : 1
cpu MHz         : 3320.084
cache size      : 1024 KB
physical id     : 0
siblings        : 2
core id         : 0
cpu cores       : 1
fdiv_bug        : no
hlt_bug         : no
f00f_bug        : no
coma_bug        : no
fpu             : yes
fpu_exception   : yes
cpuid level     : 3
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge
mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe pni
monitor ds_cpl est tm2 cid xtpr
bogomips        : 6642.39

processor       : 1
vendor_id       : GenuineIntel
cpu family      : 15
model           : 4
model name      : Mobile Intel(R) Pentium(R) 4 CPU 3.33GHz
stepping        : 1
cpu MHz         : 3320.084
cache size      : 1024 KB
physical id     : 0
siblings        : 2
core id         : 0
cpu cores       : 1
fdiv_bug        : no
hlt_bug         : no
f00f_bug        : no
coma_bug        : no
fpu             : yes
fpu_exception   : yes
cpuid level     : 3
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge
mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe pni
monitor ds_cpl est tm2 cid xtpr
bogomips        : 6637.46

And the following code shows:

$ cat linux-2.6.13-rc6/arch/i386/kernel/nmi.c

[...]

void setup_apic_nmi_watchdog (void)
{
        switch (boot_cpu_data.x86_vendor) {
        case X86_VENDOR_AMD:
                if (boot_cpu_data.x86 != 6 && boot_cpu_data.x86 != 15)
                        return;
                setup_k7_watchdog();
                break;
        case X86_VENDOR_INTEL:
                 switch (boot_cpu_data.x86) {
                case 6:
                        if (boot_cpu_data.x86_model > 0xd)
                                return;

                        setup_p6_watchdog();
                        break;
                case 15:
                        if (boot_cpu_data.x86_model > 0x3)
                                return;

Here I get boot_cpu_data.x86_model == 0x4.  So I decided to change it and
reboot.  I now seem to have a working NMI.  So, unless there's something know
to be bad about this processor and the NMI.  I'm submitting the following
patch.

Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
Acked-by: Zwane Mwaikambo <zwane@arm.linux.org.uk>
Acked-by: Mikael Pettersson <mikpe@csd.uu.se>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit cd3716ab40c6049479d29a74b29107fd7e0e1153
tree 1b9fa4be58fda88d16d014bf85e460ee6db048ee
parent 008b150a3c4d971cd65d02d107b8fcc860bc959c
author Steven Rostedt <rostedt@goodmis.org> Fri, 19 Aug 2005 17:57:46 -0700
committer Linus Torvalds <torvalds@g5.osdl.org> Fri, 19 Aug 2005 18:44:56 -0700

 arch/i386/kernel/nmi.c |    4 ++--
 mvl_patches/pro-0958.c |   16 ++++++++++++++++
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/arch/i386/kernel/nmi.c b/arch/i386/kernel/nmi.c
index da6c46d..8c242bb 100644

Index: linux-2.6.10/arch/i386/kernel/nmi.c
===================================================================
--- linux-2.6.10.orig/arch/i386/kernel/nmi.c
+++ linux-2.6.10/arch/i386/kernel/nmi.c
@@ -189,7 +189,7 @@ static void disable_lapic_nmi_watchdog(v
 			wrmsr(MSR_P6_EVNTSEL0, 0, 0);
 			break;
 		case 15:
-			if (boot_cpu_data.x86_model > 0x3)
+			if (boot_cpu_data.x86_model > 0x4)
 				break;
 
 			wrmsr(MSR_P4_IQ_CCCR0, 0, 0);
@@ -419,7 +419,7 @@ void setup_apic_nmi_watchdog (void)
 			setup_p6_watchdog();
 			break;
 		case 15:
-			if (boot_cpu_data.x86_model > 0x3)
+			if (boot_cpu_data.x86_model > 0x4)
 				return;
 
 			if (!setup_p4_watchdog())
Index: linux-2.6.10/mvl_patches/pro-0958.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0958.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(958);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

