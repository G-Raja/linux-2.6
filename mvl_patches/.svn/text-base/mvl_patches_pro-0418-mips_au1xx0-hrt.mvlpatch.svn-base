#! /usr/bin/env bash
# Patch: -mips_au1xx0-hrt
# Date: Wed Apr  5 15:05:47 2006
# Source: MontaVista Software, Inc.
# MR: 15591
# Type: Enhancement
# Disposition: local
# Signed-off-by: Konstantin Baydarov <kbaidarov@ru.mvista.com>
# Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
# Description:
# Add HRT support for AMD Au1xx0 SOCs.
# 

PATCHNUM=418
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 15591
Type: Enhancement
Disposition: local
Signed-off-by: Konstantin Baydarov <kbaidarov@ru.mvista.com>
Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Description:
Add HRT support for AMD Au1xx0 SOCs.

 arch/mips/Kconfig                     |    2 +-
 arch/mips/au1000/common/int-handler.S |    7 +++++++
 arch/mips/au1000/common/time.c        |   32 ++++++++++++++++++++++----------
 mvl_patches/pro-0418.c                |   16 ++++++++++++++++
 4 files changed, 46 insertions(+), 11 deletions(-)

Index: linux-2.6.10/arch/mips/au1000/common/time.c
===================================================================
--- linux-2.6.10.orig/arch/mips/au1000/common/time.c
+++ linux-2.6.10/arch/mips/au1000/common/time.c
@@ -50,18 +50,17 @@
 #include <linux/mc146818rtc.h>
 #include <linux/timex.h>
 
-extern void startup_match20_interrupt(void);
-extern void do_softirq(void);
-extern volatile unsigned long wall_jiffies;
-unsigned long missed_heart_beats = 0;
-
 static unsigned long r4k_offset; /* Amount to increment compare reg each time */
+#ifndef CONFIG_CPU_TIMER
 static unsigned long r4k_cur;    /* What counter should be at next timer irq */
+#endif
 int	no_au1xxx_32khz;
 void	(*au1k_wait_ptr)(void);
 
+#ifndef CONFIG_CPU_TIMER
 /* Cycle counter value at the previous timer interrupt.. */
 static unsigned int timerhi = 0, timerlo = 0;
+#endif
 
 #ifdef CONFIG_PM
 #define MATCH20_INC 328
@@ -69,8 +68,9 @@ extern void startup_match20_interrupt(vo
 static unsigned long last_pc0, last_match20;
 #endif
 
-static spinlock_t time_lock = SPIN_LOCK_UNLOCKED;
+static raw_spinlock_t time_lock = RAW_SPIN_LOCK_UNLOCKED;
 
+#ifndef CONFIG_CPU_TIMER
 static inline void ack_r4ktimer(unsigned long newval)
 {
 	write_c0_compare(newval);
@@ -115,6 +115,7 @@ void mips_timer_interrupt(struct pt_regs
 null:
 	ack_r4ktimer(0);
 }
+#endif /* CONFIG_CPU_TIMER */
 
 #ifdef CONFIG_PM
 void counter0_irq(int irq, void *dev_id, struct pt_regs *regs)
@@ -123,7 +124,7 @@ void counter0_irq(int irq, void *dev_id,
 	int time_elapsed;
 	static int jiffie_drift = 0;
 
-	kstat.irqs[0][irq]++;
+	kstat_this_cpu.irqs[irq]++;
 	if (au_readl(SYS_COUNTER_CNTRL) & SYS_CNTRL_M20) {
 		/* should never happen! */
 		printk(KERN_WARNING "counter 0 w status eror\n");
@@ -302,6 +303,8 @@ unsigned long cal_r4koff(void)
 	return (cpu_speed / HZ);
 }
 
+#ifndef CONFIG_CPU_TIMER
+
 /* This is for machines which generate the exact clock. */
 #define USECS_PER_JIFFY (1000000/HZ)
 #define USECS_PER_JIFFY_FRAC (0x100000000LL*1000000/HZ&0xffffffff)
@@ -364,6 +367,7 @@ static unsigned long do_fast_cp0_gettime
 
 	return res;
 }
+#endif /* CONFIG_CPU_TIMER */
 
 #ifdef CONFIG_PM
 static unsigned long do_fast_pm_gettimeoffset(void)
@@ -384,15 +388,16 @@ static unsigned long do_fast_pm_gettimeo
 }
 #endif
 
-void au1xxx_timer_setup(struct irqaction *irq)
+void __init au1xxx_timer_setup(struct irqaction *irq)
 {
-        unsigned int est_freq;
-	extern unsigned long (*do_gettimeoffset)(void);
+	unsigned int est_freq;
 	extern void au1k_wait(void);
 
+#ifndef CONFIG_CPU_TIMER
 	printk("calculating r4koff... ");
 	r4k_offset = cal_r4koff();
 	printk("%08lx(%d)\n", r4k_offset, (int) r4k_offset);
+#endif
 
 	//est_freq = 2*r4k_offset*HZ;	
 	est_freq = r4k_offset*HZ;	
@@ -403,6 +408,7 @@ void au1xxx_timer_setup(struct irqaction
  	set_au1x00_speed(est_freq);
  	set_au1x00_lcd_clock(); // program the LCD clock
 
+#ifndef CONFIG_CPU_TIMER
 	r4k_cur = (read_c0_count() + r4k_offset);
 	write_c0_compare(r4k_cur);
 
@@ -462,8 +468,14 @@ void au1xxx_timer_setup(struct irqaction
 	 */
 	do_gettimeoffset = do_fast_cp0_gettimeoffset;
 #endif
+#endif /* CONFIG_CPU_TIMER */
 }
 
 void __init au1xxx_time_init(void)
 {
+#ifdef CONFIG_CPU_TIMER
+	printk("calculating r4koff... ");
+	r4k_offset = cal_r4koff();
+	printk("%08lx(%d)\n", r4k_offset, (int) r4k_offset);
+#endif
 }
Index: linux-2.6.10/arch/mips/au1000/common/int-handler.S
===================================================================
--- linux-2.6.10.orig/arch/mips/au1000/common/int-handler.S
+++ linux-2.6.10/arch/mips/au1000/common/int-handler.S
@@ -33,8 +33,15 @@ NESTED(au1000_IRQ, PT_SIZE, sp)
 
 	andi	a0, t0, CAUSEF_IP7
 	beq	a0, zero, 1f
+
+#ifdef CONFIG_CPU_TIMER
+	li	a0, 63
+	move	a1, sp
+	jal	ll_timer_interrupt
+#else
 	move	a0, sp
 	jal	mips_timer_interrupt
+#endif
 	j	ret_from_irq
 
 1:
Index: linux-2.6.10/arch/mips/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/mips/Kconfig
+++ linux-2.6.10/arch/mips/Kconfig
@@ -1719,7 +1719,7 @@ config BINFMT_ELF32
 
 config PM
 	bool "Power Management support (EXPERIMENTAL)"
-	depends on EXPERIMENTAL && MACH_AU1X00
+	depends on EXPERIMENTAL && SOC_AU1X00 && !CPU_TIMER
 
 endmenu
 
Index: linux-2.6.10/mvl_patches/pro-0418.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0418.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(418);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

