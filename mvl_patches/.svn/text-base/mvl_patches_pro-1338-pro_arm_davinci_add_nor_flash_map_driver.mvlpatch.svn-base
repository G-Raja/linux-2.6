#! /usr/bin/env bash
# Patch: -pro_arm_davinci_add_nor_flash_map_driver
# Date: Wed Jun  6 17:27:10 2007
# Source: MontaVista Software, Inc.
# MR: 22860
# Type: Bugfix
# Disposition: backport
# Signed-off-by: Armin Kuster <akuster@mvista.com>
# Description:
# I updated the partition map to reflect the lateset in the davinci git tree
# changed some of the register API's to make it work in 2.6.10
# 
# based on work from the following patch set:
# 
# From nobody Mon Sep 17 00:00:00 2001
# From: Komal Shah <komal_shah802003@yahoo.com>
# Date: Thu, 17 Aug 2006 17:01:13 +0530
# Subject: [PATCH] ARM: DaVinci: Add NOR Flash map driver.
# 
# - Patch adds NOR Flash driver based on MTD map
#   driver for DaVinci based boards.
# 
# Signed-off-by: Komal Shah <komal_shah802003@yahoo.com>
# 
#  arch/arm/mach-davinci/board-evm.c       |   79 +++++++++++++
#  drivers/mtd/maps/Kconfig                |    9 +
#  drivers/mtd/maps/Makefile               |    1 
#  drivers/mtd/maps/davinci_nor.c          |  190 ++++++++++++++++++++++++++++++++
#  include/asm-arm/arch-davinci/hardware.h |    3 
#  5 files changed, 281 insertions(+), 1 deletion(-)
# 

PATCHNUM=1338
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 22860
Type: Bugfix
Disposition: backport
Signed-off-by: Armin Kuster <akuster@mvista.com>
Description:
I updated the partition map to reflect the lateset in the davinci git tree
changed some of the register API's to make it work in 2.6.10

based on work from the following patch set:

From nobody Mon Sep 17 00:00:00 2001
From: Komal Shah <komal_shah802003@yahoo.com>
Date: Thu, 17 Aug 2006 17:01:13 +0530
Subject: [PATCH] ARM: DaVinci: Add NOR Flash map driver.

- Patch adds NOR Flash driver based on MTD map
  driver for DaVinci based boards.

Signed-off-by: Komal Shah <komal_shah802003@yahoo.com>

 arch/arm/mach-davinci/board-evm.c       |   79 +++++++++++++
 drivers/mtd/maps/Kconfig                |    9 +
 drivers/mtd/maps/Makefile               |    1 
 drivers/mtd/maps/davinci_nor.c          |  190 ++++++++++++++++++++++++++++++++
 include/asm-arm/arch-davinci/hardware.h |    3 
 mvl_patches/pro-1338.c                  |   16 ++
 6 files changed, 297 insertions(+), 1 deletion(-)

Index: linux-2.6.10/drivers/mtd/maps/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/mtd/maps/Kconfig
+++ linux-2.6.10/drivers/mtd/maps/Kconfig
@@ -818,6 +818,15 @@ config MTD_PLATRAM
 
 	  This selection automatically selects the map_ram driver.
 
+config MTD_DAVINCI_NOR
+	tristate "TI DaVinci board mappings"
+	depends on MTD_CFI && ARCH_DAVINCI
+	help
+	  This enables access to the NOR flash chips on TI DaVinci-based
+	  boards defining flash platform devices and flash platform data.
+	  If you have such a board, say 'Y'.
+
+
 endmenu
 
 
Index: linux-2.6.10/drivers/mtd/maps/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/mtd/maps/Makefile
+++ linux-2.6.10/drivers/mtd/maps/Makefile
@@ -80,3 +80,4 @@ obj-$(CONFIG_MTD_TIGERWOOD2_FLASH)  += t
 obj-$(CONFIG_MTD_TX493x)	+= tx493x-flash.o
 obj-$(CONFIG_MTD_AVALANCHE)	+= avalanche-flash.o
 obj-$(CONFIG_MTD_INTEL_VR_NOR)	+= intel_vr_nor.o
+obj-$(CONFIG_MTD_DAVINCI_NOR)	+= davinci_nor.o
Index: linux-2.6.10/drivers/mtd/maps/davinci_nor.c
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/mtd/maps/davinci_nor.c
@@ -0,0 +1,190 @@
+/*
+ * Flash memory support for various TI DaVinci boards
+ *
+ * Copyright (C) 2006 Komal Shah <komal_shah802003@yahoo.com>
+ *
+ * Derived from OMAP NOR flash mapping driver.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
+ * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * You should have received a copy of the  GNU General Public License along
+ * with this program; if not, write  to the Free Software Foundation, Inc.,
+ * 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/ioport.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+
+#include <asm/io.h>
+#include <asm/hardware.h>
+#include <asm/mach/flash.h>
+
+#ifdef CONFIG_MTD_PARTITIONS
+static const char *part_probes[] = { /* "RedBoot", */ "cmdlinepart", NULL };
+#endif
+
+struct davinciflash_info {
+	struct mtd_info		*mtd;
+	struct map_info		map;
+	struct resource         *res;
+#ifdef CONFIG_MTD_PARTITIONS
+        struct mtd_partition    *parts;
+#endif
+
+};
+
+static int  davinciflash_probe(struct device *dev)
+{
+	int err;
+	struct davinciflash_info *info;
+	struct platform_device *pdev = to_platform_device(dev);
+	struct flash_platform_data *flash = pdev->dev.platform_data;
+	struct resource *res = pdev->resource;
+	unsigned long size = res->end - res->start + 1;
+
+	info = kzalloc(sizeof(struct davinciflash_info), GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	dev_set_drvdata(&pdev->dev, info);
+
+	info->res = request_mem_region(res->start, size, "flash");
+	if (info->res == NULL) {
+		err = -EBUSY;
+		goto out_free_info;
+	}
+
+	info->map.virt = ioremap(res->start, size);
+	if (!info->map.virt) {
+		err = -ENOMEM;
+		goto out_release_mem_region;
+	}
+	info->map.name		= pdev->dev.bus_id;
+	info->map.phys		= res->start;
+	info->map.size		= size;
+	info->map.bankwidth	= flash->width;
+
+	simple_map_init(&info->map);
+	info->mtd = do_map_probe(flash->map_name, &info->map);
+	if (!info->mtd) {
+		err = -EIO;
+		goto out_iounmap;
+	}
+	/* fixup mtd size to what is defined in plat struct
+ 	* do_map_probe overrides this in cfi_amdstd_setup()
+ 	* with what is actual size is, not what we define it
+ 	* as
+ 	*/
+	info->mtd->size = info->map.size;
+	info->mtd->owner = THIS_MODULE;
+
+#ifdef CONFIG_MTD_PARTITIONS
+	err = parse_mtd_partitions(info->mtd, part_probes, &info->parts, 0);
+	if (err > 0)
+		add_mtd_partitions(info->mtd, info->parts, err);
+	else if (flash->nr_parts)
+		add_mtd_partitions(info->mtd, flash->parts, flash->nr_parts);
+	else
+#endif
+	{
+		printk(KERN_NOTICE "TI Davinci flash: no partition info "
+			"available, registering whole flash\n");
+		add_mtd_device(info->mtd);
+	}
+
+	return 0;
+
+out_iounmap:
+	iounmap(info->map.virt);
+out_release_mem_region:
+	release_mem_region(res->start, size);
+out_free_info:
+	kfree(info);
+
+	return err;
+}
+
+static int  davinciflash_remove(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct davinciflash_info *info = dev_get_drvdata(&pdev->dev);
+  	struct flash_platform_data *flash = pdev->dev.platform_data;
+
+	if (info == NULL)
+		return 0;
+
+	dev_set_drvdata(&pdev->dev, NULL);
+
+	if (info) {
+#ifdef CONFIG_MTD_PARTITIONS
+		if (info->parts) {
+			del_mtd_partitions(info->mtd);
+			kfree(info->parts);
+		} else if (flash->nr_parts > 0)  {
+			del_mtd_partitions(info->mtd);
+		} else
+#endif
+		{
+			del_mtd_device(info->mtd);
+		}
+
+		map_destroy(info->mtd);
+	}
+
+	if (info->map.virt != NULL)
+		iounmap(info->map.virt);
+
+	if (info->res != NULL) {
+		release_resource(info->res);
+                kfree(info->res);
+	}
+
+	return 0;
+}
+
+static struct device_driver davinciflash_driver = {
+	.probe	= &davinciflash_probe,
+	.remove	= &davinciflash_remove,
+	.name	= "davinciflash",
+	.bus = &platform_bus_type,
+};
+
+static int __init davinciflash_init(void)
+{
+	return driver_register(&davinciflash_driver);
+}
+
+static void __exit davinciflash_exit(void)
+{
+	driver_unregister(&davinciflash_driver);
+}
+
+module_init(davinciflash_init);
+module_exit(davinciflash_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("MTD NOR map driver for TI DaVinci boards");
+
Index: linux-2.6.10/include/asm-arm/arch-davinci/hardware.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-davinci/hardware.h
+++ linux-2.6.10/include/asm-arm/arch-davinci/hardware.h
@@ -127,4 +127,7 @@
 #define DAVINCI_LPSC_GEM            39      // GEM LPSC
 #define DAVINCI_LPSC_IMCOP          40      // IMCOP LPSC
 
+/* NOR Flash base address set to CS0 by default */
+#define DAVINCI_CS0_PHYS	0x02000000
+
 #endif /* __ASM_ARCH_HARDWARE_H */
Index: linux-2.6.10/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-evm.c
@@ -138,6 +138,7 @@ static inline void setup_usb(void)
 }
 #endif  /* CONFIG_USB_MUSB_HDRC */
 
+#if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
 static struct mtd_partition nand_partitions[] = {
 	/* bootloader (U-Boot, etc) in first sector */
 	{
@@ -190,6 +191,73 @@ static struct platform_device nand_devic
 	.num_resources	= 1,
 	.resource	= &nand_resource,
 };
+#endif
+
+#if defined (CONFIG_MTD_DAVINCI_NOR) || defined(CONFIG_MTD_DAVINCI_NOR_MODULE)
+static struct mtd_partition davinci_evm_nor_partitions[] = {
+	/* bootloader (U-Boot, etc) in first 4 sectors */
+	{
+	.name             = "bootloader",
+	.offset           = 0,
+	.size             = 4 * SZ_64K,
+	.mask_flags       = MTD_WRITEABLE, /* force read-only */
+	},
+	/* bootloader params in the next 1 sector */
+	{
+	.name             = "params",
+	.offset           = MTDPART_OFS_APPEND,
+	.size             = SZ_64K,
+	.mask_flags	= MTD_WRITEABLE, /* force read-only */
+	},
+	/* kernel */
+	{
+	.name             = "kernel",
+	.offset           = MTDPART_OFS_APPEND,
+	.size             = SZ_2M,
+	.mask_flags       = 0
+	},
+	/* file system */
+	{
+	.name             = "filesystem",
+	.offset           = MTDPART_OFS_APPEND,
+	.size             = MTDPART_SIZ_FULL,
+	.mask_flags       = 0
+	}
+};
+
+static struct flash_platform_data davinci_evm_flash_data = {
+	.map_name       = "cfi_probe",
+	.width          = 2,
+	.parts          = davinci_evm_nor_partitions,
+	.nr_parts       = ARRAY_SIZE(davinci_evm_nor_partitions),
+	};
+
+static struct resource davinci_evm_flash_resource = {
+	.start          = DAVINCI_CS0_PHYS,
+	.end            = DAVINCI_CS0_PHYS + SZ_16M -1 ,
+	.flags          = IORESOURCE_MEM,
+};
+
+static struct platform_device davinci_evm_flash_device = {
+	.name           = "davinciflash",
+	.id             = 0,
+	.dev            = {
+		.platform_data  = &davinci_evm_flash_data,
+		},
+	.num_resources  = 1,
+	.resource       = &davinci_evm_flash_resource,
+};
+#endif
+
+static struct platform_device *davinci_evm_devices[] __initdata =
+{
+#if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
+	&nand_device,
+#endif
+#if defined (CONFIG_MTD_DAVINCI_NOR) || defined(CONFIG_MTD_DAVINCI_NOR_MODULE)
+	&davinci_evm_flash_device,
+#endif
+};
 
 static void board_init(void)
 {
@@ -225,9 +293,18 @@ davinci_map_io(void)
 	board_init ();
 }
 
+
 static __init void evm_init(void)
 {
-	platform_device_register(&nand_device);
+#if defined(CONFIG_BLK_DEV_DAVINCI) || defined(CONFIG_BLK_DEV_DAVINCI_MODULE)
+#if defined (CONFIG_MTD_DAVINCI_NOR) || defined(CONFIG_MTD_DAVINCI_NOR_MODULE)
+        printk(KERN_WARNING "WARNING: both IDE and NOR flash are enabled, "
+	               "but are pin-muxed.\n\t Disable IDE for NOR support.\n");
+#endif
+#endif
+	platform_add_devices(davinci_evm_devices,
+		ARRAY_SIZE(davinci_evm_devices));
+
         setup_usb();
 }
 
Index: linux-2.6.10/mvl_patches/pro-1338.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1338.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1338);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

