#! /usr/bin/env bash
# Patch: -common_mtd_nand_layouts_16bit_fix
# Date: Mon Jan  7 12:26:07 2008
# Source: MontaVista Software, Inc.
# MR: 17056
# Type: Fix
# Disposition: needs to be committed to linux-mtd CVS tree
# Signed-off-by: Vitaly Wool <vwool@ru.mvista.com>
# Description:
#    Fix for HW ECC overwrite
#    Also contains fixes for 16bit access
# 

PATCHNUM=1572
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 17056
Type: Fix
Disposition: needs to be committed to linux-mtd CVS tree
Signed-off-by: Vitaly Wool <vwool@ru.mvista.com>
Description:
   Fix for HW ECC overwrite
   Also contains fixes for 16bit access

Index: linux-2.6.10/drivers/mtd/nand/nand_base.c
===================================================================
--- linux-2.6.10.orig/drivers/mtd/nand/nand_base.c
+++ linux-2.6.10/drivers/mtd/nand/nand_base.c
@@ -1638,60 +1638,42 @@ static int nand_read_oob_hwecc (struct m
 					break;
 
 				case ITEM_TYPE_ECC:
-					DEBUG (MTD_DEBUG_LEVEL3, "%s: ecc bytes read\n", __FUNCTION__);
-					i = min_t(int, col, this->layout[j].length);
-					if (i) {
-						reallen += i;
-						if (this->options & NAND_BUSWIDTH_16) 
-							this->cmdfunc (mtd, NAND_CMD_READ0, reallen & ~1, page);
-						else
-							this->cmdfunc (mtd, NAND_CMD_READ0, reallen, page);
-					}
-					col -= i;
-					i = min_t(int, len - read, this->layout[j].length - i);
-					this->enable_hwecc(mtd, NAND_ECC_READSYN);
-					if (i) {
-						if (this->options & NAND_BUSWIDTH_16 && reallen & 1) {
-							oob_data[0] = cpu_to_le16(this->read_word(mtd)) >> 8;
-							oob_data++; i--; reallen++;
-						}
-							
-						this->read_buf(mtd, oob_data, i);
-						reallen += i;
-					}
-					if (oob_buf + len == oob_data + i) {
-						read += i;
-						goto out;
-					}
-					break;
 				case ITEM_TYPE_OOB:
-					DEBUG (MTD_DEBUG_LEVEL3, "%s: free oob bytes read\n", __FUNCTION__);
+					DEBUG (MTD_DEBUG_LEVEL3, "%s: %s bytes read\n", __FUNCTION__, this->layout[j].type == ITEM_TYPE_ECC ? "ecc" : "oob");
 					i = min_t(int, col, this->layout[j].length);
 					if (i) {
 						reallen += i;
-						if (this->options & NAND_BUSWIDTH_16) 
+						if (this->options & NAND_BUSWIDTH_16)
 							this->cmdfunc (mtd, NAND_CMD_READ0, reallen & ~1, page);
 						else
 							this->cmdfunc (mtd, NAND_CMD_READ0, reallen, page);
 					}
 					col -= i;
-					
-					this->enable_hwecc(mtd, NAND_ECC_READOOB);
+
+					if (this->layout[j].type == ITEM_TYPE_ECC)
+						this->enable_hwecc(mtd, NAND_ECC_READSYN);
+					else
+						this->enable_hwecc(mtd, NAND_ECC_READOOB);
 					i = min_t(int, len - read, this->layout[j].length - i);
 					if (i) {
-						if (this->options & NAND_BUSWIDTH_16 && reallen & 1) {
-							oob_data[0] = cpu_to_le16(this->read_word(mtd)) >> 8;
-							oob_data++; i--; reallen++;
-						}
-
-						this->read_buf(mtd, oob_data, i);
+						if (this->options & NAND_BUSWIDTH_16) {
+							if (reallen & 1) {
+								oob_data[0] = cpu_to_le16(this->read_word(mtd)) >> 8;
+								oob_data++; i--; reallen++;
+							}
+							if (i & 1)
+								this->read_buf(mtd, oob_data, i - 1);
+							else
+								this->read_buf(mtd, oob_data, i);
+ 						}
+						else
+							this->read_buf(mtd, oob_data, i);
 						reallen += i;
 					}
 					if (oob_buf + len == oob_data + i) {
 						read += i;
 						goto out;
-					}
-
+	 				}
 					break;
 				}
 				read += i;
@@ -2151,7 +2133,8 @@ out:
  */
 static int nand_write_oob_hwecc (struct mtd_info *mtd, loff_t to, size_t len, size_t * retlen, const u_char * oob_buf)
 {
-	int column, page, status, ret = -EIO, chipnr, eccsteps, fflen, ooblen;
+	int column, page, status, ret = -EIO, chipnr, eccsteps;
+	int fflen, old_fflen, ooblen;
 	struct nand_chip *this = mtd->priv;
 
 	DEBUG (MTD_DEBUG_LEVEL3, "%s: to = 0x%08x, len = %i\n", __FUNCTION__, (unsigned int) to, (int) len);
@@ -2198,35 +2181,92 @@ static int nand_write_oob_hwecc (struct 
 
 	eccsteps = this->eccsteps;
 		
-	for (fflen = 0, ooblen = 0; eccsteps; eccsteps--) {
+	for (fflen = 0, ooblen = 0, old_fflen = 0; eccsteps; eccsteps--) {
 		int i, j;
 		for (j = 0; this->layout[j].length; j++) {
 			switch (this->layout[j].type) {
 			case ITEM_TYPE_DATA:
-				this->enable_hwecc(mtd, NAND_ECC_WRITE);
-				this->write_buf(mtd, ffchars, this->layout[j].length);
-				fflen += this->layout[j].length;
+				if (this->options & NAND_COMPLEX_OOB_WRITE) {
+					this->enable_hwecc(mtd, NAND_ECC_WRITE);
+					this->write_buf(mtd, ffchars, this->layout[j].length);
+					fflen += this->layout[j].length;
+				} else {
+					if (old_fflen < fflen) {
+						this->cmdfunc (mtd, NAND_CMD_PAGEPROG, -1, -1);
+						status = this->waitfunc (mtd, this, FL_WRITING);
+						if (status & NAND_STATUS_FAIL) {
+							DEBUG (MTD_DEBUG_LEVEL0, "%s: Failed write, page 0x%08x\n", __FUNCTION__, page);
+							ret = -EIO;
+							goto out;
+						}
+					}
+					fflen += this->layout[j].length;
+					if (this->options & NAND_BUSWIDTH_16 && (fflen + ooblen) & 1)
+						this->cmdfunc (mtd, NAND_CMD_SEQIN, fflen + ooblen - 1, page & this->pagemask);
+					else
+						this->cmdfunc (mtd, NAND_CMD_SEQIN, fflen + ooblen, page & this->pagemask);
+					old_fflen = fflen;
+				}
 				break;
 
 			case ITEM_TYPE_ECC:
-				this->enable_hwecc(mtd, NAND_ECC_WRITESYN);
-				this->write_buf(mtd, ffchars, this->layout[j].length);
-				ooblen += this->layout[j].length;
-				break;
-
 			case ITEM_TYPE_OOB:
-				this->enable_hwecc(mtd, NAND_ECC_WRITEOOB);
+				if (this->layout[j].type == ITEM_TYPE_ECC)
+					this->enable_hwecc(mtd, NAND_ECC_WRITESYN);
+				else
+					this->enable_hwecc(mtd, NAND_ECC_WRITEOOB);
 				i = min_t(int, column, this->layout[j].length);
-				if (i)
-					this->write_buf(mtd, ffchars, i);
+				if (i) {
+					/*
+					 * if i is odd, then we're in the
+					 * situation when we either stopped at
+					 * i-1 or at 1
+					 */
+					if (this->options & NAND_BUSWIDTH_16 && i & 1)
+						i--;
+					/*
+					 * handle specific case: i was 1
+					 * i. e. write (0th, 1th) bytes
+					 */
+					if (i == 0) {
+						this->write_word(mtd, cpu_to_le16((oob_buf[0] << 8) | 0xff));
+						i++;
+						ooblen++;
+					} else
+						/* write i-1 (even number) */
+						this->write_buf(mtd, ffchars, i);
+				}
 				column -= i;
 				fflen += i;
+				/*
+				 * do we have anything else to write
+				 * for this layout item?
+				 */
 				i = min_t(int, len + column - ooblen, this->layout[j].length - i);
-				
-				if (i)
+				if (i) {
+					if (column) {
+						/*
+						 * we're here? this means that
+						 * column now equals to 1
+						 */
+						this->write_word(mtd, cpu_to_le16((oob_buf[0] << 8) | 0xff));
+						i--;
+						ooblen++;
+						column--;
+					}
+					if (i & 1)
+						i--;
 					this->write_buf(mtd, &oob_buf[ooblen], i);
+				}
 				ooblen += i;
-				if (ooblen == len) {
+				/*
+				 * do we have to write the 1-byte tail?
+				 */
+				if (ooblen == len - 1) {
+					this->write_word(mtd, cpu_to_le16(oob_buf[ooblen]) | 0xff00);
+					ooblen += 2;
+				}
+				if (ooblen >= len) {
 					if (NAND_MUST_PAD(this))
 						this->write_buf(mtd, ffchars, mtd->oobsize + mtd->oobblock - fflen - ooblen);
 					goto finish;
@@ -3113,7 +3153,7 @@ int nand_scan (struct mtd_info *mtd, int
 	memcpy(&mtd->oobinfo, this->autooob, sizeof(mtd->oobinfo));
 
 	mtd->owner = THIS_MODULE;
-	
+
 	/* Check, if we should skip the bad block table scan */
 	if (this->options & NAND_SKIP_BBTSCAN)
 		return 0;
Index: linux-2.6.10/include/linux/mtd/nand.h
===================================================================
--- linux-2.6.10.orig/include/linux/mtd/nand.h
+++ linux-2.6.10/include/linux/mtd/nand.h
@@ -241,6 +241,10 @@ struct page_layout_item {
 #define NAND_HWECC_SYNDROME	0x00020000
 /* This option skips the bbt scan during initialization. */
 #define NAND_SKIP_BBTSCAN	0x00040000
+/* This option specifies that a whole NAND page is to be written in
+ * nand_write_oob. This is needed for some HW ECC generators that need a
+ * whole page to be written to generate ECC properly */
+#define NAND_COMPLEX_OOB_WRITE	0x00080000
 
 /* Options set by nand scan */
 /* Nand scan has allocated oob_buf */
Index: linux-2.6.10/mvl_patches/pro-1572.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1572.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1572);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

