#! /usr/bin/env bash
# Patch: -common_ide_cs_suspend_resume
# Date: Thu Jun 29 13:33:08 2006
# Source: MontaVista Software, Inc.
# MR: 13370
# Type: Defect Fix
# Signed-off-by: Dmitry Antipov <antipov@ru.mvista.com>
# Disposition: needs submitting to linux-ide@vger.kernel.org
# Description:
#  - Suspend/resume CF device during suspend/resume for corresponding slot 
# 

PATCHNUM=671
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 13370
Type: Defect Fix
Signed-off-by: Dmitry Antipov <antipov@ru.mvista.com>
Disposition: needs submitting to linux-ide@vger.kernel.org
Description:
 - Suspend/resume CF device during suspend/resume for corresponding slot 

Index: linux-2.6.10/drivers/ide/ide.c
===================================================================
--- linux-2.6.10.orig/drivers/ide/ide.c
+++ linux-2.6.10/drivers/ide/ide.c
@@ -175,6 +175,8 @@ static int system_bus_speed;	/* holds wh
 static int initializing;	/* set while initializing built-in drivers */
 
 DECLARE_MUTEX(ide_cfg_sem);
+EXPORT_SYMBOL(ide_cfg_sem);
+
  __cacheline_aligned_in_smp DEFINE_SPINLOCK(ide_lock);
 
 #ifdef CONFIG_BLK_DEV_IDEPCI
Index: linux-2.6.10/drivers/ide/legacy/ide-cs.c
===================================================================
--- linux-2.6.10.orig/drivers/ide/legacy/ide-cs.c
+++ linux-2.6.10/drivers/ide/legacy/ide-cs.c
@@ -436,10 +436,31 @@ void ide_release(dev_link_t *link)
 int ide_event(event_t event, int priority,
 	      event_callback_args_t *args)
 {
+    ide_info_t *info;
+    ide_hwif_t *hwif;
+    struct device *dev;
+    int unit, ret;
+    ide_drive_t *drive = NULL;
     dev_link_t *link = args->client_data;
 
     DEBUG(1, "ide_event(0x%06x)\n", event);
     
+    /* Find an appropriate IDE drive */
+    info = link->priv;
+    down(&ide_cfg_sem);
+    spin_lock_irq(&ide_lock);
+    hwif = &ide_hwifs[info->hd];
+    if (hwif->present) {
+	for (unit = 0; unit < MAX_DRIVES; unit++) {
+	    drive = &hwif->drives[unit];
+	    /* Here we have only one drive per slot, so it's there */
+	    if (drive->present)
+		break;
+	}
+    }
+    spin_unlock_irq(&ide_lock);
+    up(&ide_cfg_sem);
+
     switch (event) {
     case CS_EVENT_CARD_REMOVAL:
 	link->state &= ~DEV_PRESENT;
@@ -452,6 +473,15 @@ int ide_event(event_t event, int priorit
 	break;
     case CS_EVENT_PM_SUSPEND:
 	link->state |= DEV_SUSPEND;
+	if (drive) {
+	    dev = &drive->gendev;
+	    ret = dev->bus->suspend(dev, PM_SUSPEND_STANDBY);
+	    if (ret)
+		printk(KERN_WARNING "ide-cs: can't suspend device %s, error %d\n", 
+		       drive->name, ret);
+	    else
+		disable_irq(hwif->irq);
+	}
 	/* Fall through... */
     case CS_EVENT_RESET_PHYSICAL:
 	if (link->state & DEV_CONFIG)
@@ -459,7 +489,25 @@ int ide_event(event_t event, int priorit
 	break;
     case CS_EVENT_PM_RESUME:
 	link->state &= ~DEV_SUSPEND;
-	/* Fall through... */
+	if (DEV_OK(link))
+	    pcmcia_request_configuration(link->handle, &link->conf);
+	/* Re-enable IDE drive */
+	if (drive) {
+	    dev = &drive->gendev;
+	    enable_irq(hwif->irq);
+	    /* This magic timeout value is taken from wait_hwif_ready() ... */
+	    ret = ide_wait_not_busy(hwif, 35000);
+	    if (ret)
+		printk(KERN_ERR "ide-cs: hardware isn't ready for device %s, error %d\n",
+		       drive->name, ret);
+	    else {
+		ret = dev->bus->resume(dev);
+		if (ret)
+		    printk(KERN_WARNING "ide-cs: can't resume device %s, error %d\n",
+			   drive->name, ret);
+	    }
+	}
+	break;
     case CS_EVENT_CARD_RESET:
 	if (DEV_OK(link))
 	    pcmcia_request_configuration(link->handle, &link->conf);
Index: linux-2.6.10/mvl_patches/pro-0671.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0671.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(671);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

