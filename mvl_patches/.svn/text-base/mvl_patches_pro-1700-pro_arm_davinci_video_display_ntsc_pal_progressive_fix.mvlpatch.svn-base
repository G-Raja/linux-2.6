#! /usr/bin/env bash
# Patch: -pro_arm_davinci_video_display_ntsc_pal_progressive_fix
# Date: Mon Jan 21 23:07:58 2008
# Source: Texas Instruments Inc.
# MR: 26587
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#  TI MR - 9715
# 	NTSC and PAL progressive modes are now supported by the display 
# 	drivers. The support is added by referring to LSP 1.10 code base.
# 

PATCHNUM=1700
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 26587
Type: Defect Fix
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
 TI MR - 9715
	NTSC and PAL progressive modes are now supported by the display 
	drivers. The support is added by referring to LSP 1.10 code base.

Index: linux-2.6.10/drivers/media/video/davinci/davinci_platform.c
===================================================================
--- linux-2.6.10.orig/drivers/media/video/davinci/davinci_platform.c
+++ linux-2.6.10/drivers/media/video/davinci/davinci_platform.c
@@ -68,8 +68,8 @@ char *davinci_modes[] = {
 	VID_ENC_STD_1080P_30,
 	VID_ENC_STD_1080P_50,
 	VID_ENC_STD_1080P_60,
-	VID_ENC_STD_480P_60,
-	VID_ENC_STD_576P_50,
+	VID_ENC_STD_525P_30,
+	VID_ENC_STD_625P_25,
 	VID_ENC_STD_640x480,
 	VID_ENC_STD_640x400,
 	VID_ENC_STD_640x350,
@@ -155,7 +155,7 @@ static void enableDigitalOutput(int bEna
 		dispc_reg_out(VENC_CVBS, 0);
 
 		if (!cpu_is_davinci_dm355()) {
-			dispc_reg_out(VPBE_PCR, 0);
+			davinci_writel(0, (DM644X_VPBE_REG_BASE + VPBE_PCR));
 		}
 		dispc_reg_out(VENC_LCDOUT, 0);
 		dispc_reg_out(VENC_HSPLS, 0);
@@ -172,6 +172,7 @@ static void enableDigitalOutput(int bEna
 	} else {
 		/* Initialize the VPSS Clock Control register */
 		davinci_writel(0x18, SYS_VPSS_CLKCTL);
+		davinci_writel(0, (DM644X_VPBE_REG_BASE + VPBE_PCR));
 
 		/* Set PINMUX0 reg to enable LCD (all other settings are kept
 		   per boot)
@@ -182,7 +183,7 @@ static void enableDigitalOutput(int bEna
 		}
 
 		/* disable VCLK output pin enable */
-		dispc_reg_out(VENC_VIDCTL, 0x1101);
+		dispc_reg_out(VENC_VIDCTL, 0x141);
 
 		/* Disable output sync pins */
 		dispc_reg_out(VENC_SYNCCTL, 0);
@@ -294,6 +295,81 @@ static void davinci_enc_set_pal(struct v
 }
 
 /*
+ * davinci_enc_ntsc_pal_rgb
+ */
+/* This function configures the video encoder to NTSC RGB setting.*/
+static void davinci_enc_set_ntsc_pal_rgb(struct vid_enc_mode_info *mode_info)
+{
+
+	enableDigitalOutput(0);
+
+	davinci_writel(mode_info->left_margin,
+		       (DM644X_OSD_REG_BASE + OSD_BASEPX));
+	davinci_writel(mode_info->upper_margin,
+		       (DM644X_OSD_REG_BASE + OSD_BASEPY));
+}
+
+/*
+ * davinci_enc_set_525p
+ */
+/* This function configures the video encoder to HDTV(525p) component setting.*/
+static void davinci_enc_set_525p(struct vid_enc_mode_info *mode_info)
+{
+	enableDigitalOutput(0);
+	davinci_writel(0x19, SYS_VPSS_CLKCTL);
+
+	davinci_writel(mode_info->left_margin,
+		       (DM644X_OSD_REG_BASE + OSD_BASEPX));
+	davinci_writel(mode_info->upper_margin,
+		       (DM644X_OSD_REG_BASE + OSD_BASEPY));
+
+	davinci_writel(VPBE_PCR_VENC_DIV, (DM644X_VPBE_REG_BASE + VPBE_PCR));
+	dispc_reg_out(VENC_OSDCLK0, 0);
+	dispc_reg_out(VENC_OSDCLK1, 1);
+
+	dispc_reg_merge(VENC_VDPRO, VENC_VDPRO_DAFRQ, VENC_VDPRO_DAFRQ);
+	dispc_reg_merge(VENC_VDPRO, VENC_VDPRO_DAUPS, VENC_VDPRO_DAUPS);
+
+	dispc_reg_merge(VENC_VMOD,
+			VENC_VMOD_VDMD_YCBCR8 <<
+			VENC_VMOD_VDMD_SHIFT, VENC_VMOD_VDMD);
+
+	/* Set REC656 Mode */
+	dispc_reg_out(VENC_YCCCTL, 0x1);
+	dispc_reg_merge(VENC_VMOD, VENC_VMOD_VENC, VENC_VMOD_VENC);
+}
+
+/*
+ *  davinci_enc_set_625p
+ */
+/* This function configures the video encoder to HDTV(625p) component setting.*/
+static void davinci_enc_set_625p(struct vid_enc_mode_info *mode_info)
+{
+	enableDigitalOutput(0);
+	davinci_writel(0x19, SYS_VPSS_CLKCTL);
+
+	davinci_writel(mode_info->left_margin,
+		       (DM644X_OSD_REG_BASE + OSD_BASEPX));
+	davinci_writel(mode_info->upper_margin,
+		       (DM644X_OSD_REG_BASE + OSD_BASEPY));
+
+	davinci_writel(VPBE_PCR_VENC_DIV, (DM644X_VPBE_REG_BASE + VPBE_PCR));
+	dispc_reg_out(VENC_OSDCLK0, 0);
+	dispc_reg_out(VENC_OSDCLK1, 1);
+
+	dispc_reg_merge(VENC_VDPRO, VENC_VDPRO_DAFRQ, VENC_VDPRO_DAFRQ);
+	dispc_reg_merge(VENC_VDPRO, VENC_VDPRO_DAUPS, VENC_VDPRO_DAUPS);
+
+	dispc_reg_merge(VENC_VMOD,
+			VENC_VMOD_VDMD_YCBCR8 <<
+			VENC_VMOD_VDMD_SHIFT, VENC_VMOD_VDMD);
+
+	/* Set REC656 Mode */
+	dispc_reg_out(VENC_YCCCTL, 0x1);
+	dispc_reg_merge(VENC_VMOD, VENC_VMOD_VENC, VENC_VMOD_VENC);
+}
+
+/*
  * davinci_enc_set_display_timing
  */
 /* This function sets the display timing from the fb_info structure*/
@@ -606,11 +682,15 @@ void davinci_enc_priv_setmode(struct vid
 	if (strcmp(mgr->current_mode.name, VID_ENC_STD_NTSC) == 0) {
 		davinci_enc_set_ntsc(&mgr->current_mode);
 	} else if (strcmp(mgr->current_mode.name, VID_ENC_STD_NTSC_RGB) == 0) {
-
+		davinci_enc_set_ntsc_pal_rgb(&mgr->current_mode);
 	} else if (strcmp(mgr->current_mode.name, VID_ENC_STD_PAL) == 0) {
 		davinci_enc_set_pal(&mgr->current_mode);
 	} else if (strcmp(mgr->current_mode.name, VID_ENC_STD_PAL_RGB) == 0) {
-		davinci_enc_set_pal(&mgr->current_mode);
+		davinci_enc_set_ntsc_pal_rgb(&mgr->current_mode);
+	} else if (strcmp(mgr->current_mode.name, VID_ENC_STD_525P_30) == 0) {
+		davinci_enc_set_525p(&mgr->current_mode);
+	} else if (strcmp(mgr->current_mode.name, VID_ENC_STD_625P_25) == 0) {
+		davinci_enc_set_625p(&mgr->current_mode);
 	} else if (strcmp(mgr->current_mode.name, VID_ENC_STD_640x480) == 0 ||
 		   strcmp(mgr->current_mode.name, VID_ENC_STD_640x400) == 0 ||
 		   strcmp(mgr->current_mode.name, VID_ENC_STD_640x350) == 0) {
Index: linux-2.6.10/include/media/davinci/vid_encoder_types.h
===================================================================
--- linux-2.6.10.orig/include/media/davinci/vid_encoder_types.h
+++ linux-2.6.10/include/media/davinci/vid_encoder_types.h
@@ -102,6 +102,8 @@ enum vid_enc_if_type {
 #define VID_ENC_STD_1080P_60     "1080P-60"
 #define VID_ENC_STD_480P_60      "480P-60"
 #define VID_ENC_STD_576P_50      "576P-50"
+#define VID_ENC_STD_525P_30      "525P-30"
+#define VID_ENC_STD_625P_25      "625P-25"
 #define VID_ENC_STD_640x480      "640x480"
 #define VID_ENC_STD_640x400      "640x400"
 #define VID_ENC_STD_640x350      "640x350"
Index: linux-2.6.10/mvl_patches/pro-1700.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1700.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1700);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

