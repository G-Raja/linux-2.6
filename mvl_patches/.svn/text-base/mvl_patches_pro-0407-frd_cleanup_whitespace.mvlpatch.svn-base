#! /usr/bin/env bash
# Patch: -frd_cleanup_whitespace
# Date: Tue Mar 21 08:30:56 2006
# Source: MontaVista Software, Inc.
# MR: 16702
# Type: Cleanup
# Disposition: MontaVista
# Signed-off-by: Sven Thorsten-Dietrich <sdietrich@mvista.com>
# Description:
#         This cleans up trailing whitespace that quilt complains about.
# 

PATCHNUM=407
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 16702
Type: Cleanup
Disposition: MontaVista
Signed-off-by: Sven Thorsten-Dietrich <sdietrich@mvista.com>
Description:
        This cleans up trailing whitespace that quilt complains about.

 include/linux/frd.h    |    2 -
 lib/frd.c              |   54 ++++++++++++++++++++++++-------------------------
 mvl_patches/pro-0407.c |   16 ++++++++++++++
 3 files changed, 44 insertions(+), 28 deletions(-)

Index: linux-2.6.10/include/linux/frd.h
===================================================================
--- linux-2.6.10.orig/include/linux/frd.h
+++ linux-2.6.10/include/linux/frd.h
@@ -34,7 +34,7 @@
 #define SLEEP_LATENCY_TYPE 	2
 #define EXEC_LATENCY_TYPE 	3
 #define ABS_LATENCY_TYPE 	4
-#define IRQ_LATENCY_TYPE 	5	
+#define IRQ_LATENCY_TYPE 	5
 #define LATENCY_TYPES 		6
 
 #ifdef CONFIG_FRD_BUCKET_SIZE
Index: linux-2.6.10/lib/frd.c
===================================================================
--- linux-2.6.10.orig/lib/frd.c
+++ linux-2.6.10/lib/frd.c
@@ -72,7 +72,7 @@ static struct timeval frd_now_time;		/* 
 static unsigned long frd_interrupts;		   /* count handler calls  */
 static unsigned long frd_test_iterations = CONFIG_FRD_TEST_ITERATIONS;
 static unsigned long frd_start_delay = CONFIG_FRD_DELAY;
-static unsigned long frd_start_delay_ticks;	   /* delay for kernel boot */  
+static unsigned long frd_start_delay_ticks;	   /* delay for kernel boot */
 
 static unsigned long frd_scheds[FRD_THREADS];	   /* count wake-ups 	    */
 static unsigned long frd_exec_count[FRD_THREADS];  /* count execute cycles  */
@@ -112,7 +112,7 @@ static frd_cpu_utils_t frd_cur_cpu_utils
 static cpu_util_percent_t cpu_utils_percent;
 
 /* This is the FRD Interrupt Handler. It should run as an S/A IRQ.
- * 
+ *
  * Check whether threads have completed their cycles.
  * Wake them up if they have completed, and record wakeup-time.
  * Otherwise, charge them either Did-Not-Start or Did-Not-Finish */
@@ -125,7 +125,7 @@ static void check_frd(void)
 
 	frd_interrupts++;
 
-	if (!frd_run) 
+	if (!frd_run)
 		return;
 	/* DELAY STARTUP */
 	if (frd_interrupts < frd_start_delay_ticks)
@@ -156,13 +156,13 @@ static void check_frd(void)
 			}
 		}
 
-		/* The thread has started and completed its 
-		 * cycle since the last IRQ. The thread is eligible to  
+		/* The thread has started and completed its
+		 * cycle since the last IRQ. The thread is eligible to
 		 * start again */
 		frd_exec_count_last[i] = frd_exec_count[i];
 
 		/* Save IRQ time stamp for this thread at wake up.
-		 * Threads can miss multiple deadlines without 
+		 * Threads can miss multiple deadlines without
 		 * losing the original interrupt time stamp */
 		irq_time[i] = wake_up;
 		ticks_at_irq[i] = ticks;
@@ -244,7 +244,7 @@ unsigned long diff_time(unsigned long lo
 }
 
 static inline long
-update_frd_stats(int id, 
+update_frd_stats(int id,
 		 unsigned long long start_t,
 		 unsigned long long end_t,
 		 int m_type)
@@ -274,12 +274,12 @@ update_frd_stats(int id, 
 
 	/* we do not want to rescale the a priori measurments,
 	 * since we asssume that LATCH returns microseconds */
-#ifndef FRD_TIMER_LATCH_ABS 
+#ifndef FRD_TIMER_LATCH_ABS
 	if (m_type != ABS_LATENCY_TYPE && m_type != IRQ_LATENCY_TYPE)
 #endif
 		latency = clock_to_usecs(latency);
 
-# ifdef FRD_SCALE_ABS_TICKS	
+# ifdef FRD_SCALE_ABS_TICKS
 	else /* we DO want to scale latency if it is the absolute type,
 		and we assume the default scaling function. */
 		latency = clock_to_usecs(latency);
@@ -288,22 +288,22 @@ update_frd_stats(int id, 
 	/* check <= to be sure we do not roll to 0 */
 	if (MAXULL - total_latency_time[id][m_type] <= latency) {
 		printk("FRD[%2d]:%8lu Overflow: %s %llu %lu\n",
-		       id, frd_exec_count[id], procnames[m_type], 
+		       id, frd_exec_count[id], procnames[m_type],
 			total_latency_time[id][m_type], (long) latency);
 		/* either exit - end of test, or reset all stats... */
 		return -1;
-	} 
+	}
 
 	total_latency_time[id][m_type] += latency;
-	/* 
-	 * alternative average calculation scheme: 
-	 * ((a_1 + ... + a_N)/N * N + a_(N+1))/N+1 
+	/*
+	 * alternative average calculation scheme:
+	 * ((a_1 + ... + a_N)/N * N + a_(N+1))/N+1
 	 */
 	avg_latency[id][m_type] = (unsigned long)
 			div_long_long_rem(total_latency_time[id][m_type],
 					     frd_exec_count[id] - 1,
 					     &remainder);
-	
+
 	frd_latency_log(id, m_type, latency);
 
 	return latency;
@@ -332,7 +332,7 @@ int frd_thread(void *tid)
 	calc_frd_thread_prio(id, &param);
 
 	if (sched_setscheduler(current, SCHED_FIFO, &param))
-		printk(KERN_WARNING "setscheduler: failure on frd tid %lu \n", 
+		printk(KERN_WARNING "setscheduler: failure on frd tid %lu \n",
 			frd_tid[id]);
 
 #ifdef CONFIG_FRD_DEBUG
@@ -418,12 +418,12 @@ int frd_thread(void *tid)
 		tick_count2 = FRD_TIMER_INIT;
 
 		/* calculate time between timer expire and task running
-		   == preemption latency  */
+		   == absolute latency  */
 		if (update_frd_stats(id, tick_count,tick_count2,
 					ABS_LATENCY_TYPE) < 0)
 			break;
 
-		tick_count = ticks_at_irq[id]; 
+		tick_count = ticks_at_irq[id];
 		tick_count2 = FRD_TIMER_INIT;
 
 		if (update_frd_stats(id, tick_count,tick_count2,
@@ -469,7 +469,7 @@ int frd_thread(void *tid)
 		if (max_latency[id][PREEMPT_LATENCY_TYPE] > last_latency) {
 #ifdef CONFIG_FRD_DEBUG
 			printk("FRD[%d] max latency %lu at iteration %lu \n",
-				id, max_latency[id][PREEMPT_LATENCY_TYPE], 
+				id, max_latency[id][PREEMPT_LATENCY_TYPE],
 				frd_exec_count[id]);
 #endif
 			max_p_latency_iteration[id] = frd_exec_count[id];
@@ -538,7 +538,7 @@ static int __init frd_init(void)
 
 	printk("Fast Real Time Domain (c) 2005 Montavista Software, Inc.\n");
 
-	if ((major = register_chrdev(0, "preempt_dev", &preempt_dev_fops)) < 0) 
+	if ((major = register_chrdev(0, "preempt_dev", &preempt_dev_fops)) < 0)
 		printk ("FRD: register_chrdev error '%s'\n", "preempt_dev");
 	else printk("FRD major device number is %d\n", major);
 
@@ -554,7 +554,7 @@ static int __init frd_init(void)
 	for (i = 0; i < FRD_THREADS; i++) {
 		init_waitqueue_head(&frd_thread_wait[i]);
 		frd_thread_param[i] = i;
-		frd_tid[i] = kernel_thread(frd_thread, 
+		frd_tid[i] = kernel_thread(frd_thread,
 					   (void *)frd_thread_param[i],
 					   CLONE_FS | CLONE_FILES | SIGCHLD);
 		while (!waitqueue_active(&frd_thread_wait[i]))
@@ -584,7 +584,7 @@ frd_read_procmem(char *buf, char **start
 
 	len += sprintf(buf,
 		       "FRD Irqs %lu T0 wakeups %lu max@exec T0:%lu T1:%lu T2:%lu\n",
-		       frd_interrupts - frd_start_delay_ticks + 1, 
+		       frd_interrupts - frd_start_delay_ticks + 1,
 		       frd_scheds[0],
 		       max_p_latency_iteration[0], max_p_latency_iteration[1],
 		       max_p_latency_iteration[2]);
@@ -592,9 +592,9 @@ frd_read_procmem(char *buf, char **start
 	len += sprintf(buf + len, "IRQ latency:%lu/%lu\n",
                        avg_latency[0][IRQ_LATENCY_TYPE],
                        max_latency[0][IRQ_LATENCY_TYPE]);
- 
+
 	len += sprintf(buf + len,
-		       "tid k-xec absolute    preempt     schedule     exec-time    sleep-time  DNF/DNS\n");
+		       "Id  Kcyc  absolute    preempt     schedule     exec-time    sleep-time  DNF/DNS\n");
 	len += sprintf(buf + len,
 		       "          avg / max   avg / max   avg / max    avg / max    avg / max\n");
 
@@ -779,7 +779,7 @@ static void *l_start(struct seq_file *m,
 			   "#Maximum preemption latency was %lu microseconds.\n"
 			   "#%lu preemptions greater than %lu microseconds. (%lu total samples)\n"
 			   "#usecs     preempts\n", MAX_USER_RT_PRIO - 1,
-			   frd_elapsed_time(), 
+			   frd_elapsed_time(),
 			   (unsigned long long)cpu_utils_percent.user.high, (unsigned long long)cpu_utils_percent.user.low,
 			   (unsigned long long)cpu_utils_percent.nice.high, (unsigned long long)cpu_utils_percent.nice.low,
 			   (unsigned long long)cpu_utils_percent.system.high, (unsigned long long)cpu_utils_percent.system.low,
@@ -930,12 +930,12 @@ static void __exit frd_exit(void)
 	int frd_id, len, latency_type;
 
 	printk("FRD Module Cleanup\n");
-	
+
 	check_frd_func_ptr = NULL;
 	frd_run = 0;
 
 	for (frd_id = 0; frd_id < FRD_THREADS; frd_id++) {
-		if (waitqueue_active(&frd_thread_wait[frd_id])) 
+		if (waitqueue_active(&frd_thread_wait[frd_id]))
 			wake_up_process(frd_task[frd_id]);
 
 		frd_dir = entry[frd_id][0]->parent;
Index: linux-2.6.10/mvl_patches/pro-0407.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0407.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(407);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

