#! /usr/bin/env bash
# Patch: -pro_arm_davinci_mv_1_0_wdt_driver_005
# Date: Mon Jan 21 23:02:58 2008
# Source: Texas Instruments Inc.
# MR: 23073
# Type: Enhancement 
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# 
# Comments from TI
#   This patch provides the support for Watchdog on DaVinci. 
# 

PATCHNUM=1640
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 23073
Type: Enhancement 
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:

Comments from TI
  This patch provides the support for Watchdog on DaVinci. 

Index: linux-2.6.10/drivers/char/watchdog/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/char/watchdog/Kconfig
+++ linux-2.6.10/drivers/char/watchdog/Kconfig
@@ -139,6 +139,17 @@ config SA1100_WATCHDOG
 	  To compile this driver as a module, choose M here: the
 	  module will be called sa1100_wdt.
 
+config DAVINCI_WATCHDOG
+        tristate "DaVinci watchdog"
+        depends on WATCHDOG && ARCH_DAVINCI
+        help
+          This will reboot your system when timeout is reached.
+
+          NOTE: once enabled, this timer cannot be disabled.
+
+          To compile this driver as a module, choose M here: the
+          module will be called davinci_wdt.
+
 # X86 (i386 + ia64 + x86_64) Architecture
 
 config ACQUIRE_WDT
Index: linux-2.6.10/drivers/char/watchdog/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/char/watchdog/Makefile
+++ linux-2.6.10/drivers/char/watchdog/Makefile
@@ -42,4 +42,5 @@ obj-$(CONFIG_8xx_WDT) += mpc8xx_wdt.o
 obj-$(CONFIG_OMAP16XX_WATCHDOG) += omap1610_wdt.o
 obj-$(CONFIG_MV64X60_WDT) += mv64x60_wdt.o
 obj-$(CONFIG_BOOKE_WDT) += booke_wdt.o
+obj-$(CONFIG_DAVINCI_WATCHDOG) += davinci_wdt.o
 obj-$(CONFIG_VR41XX_WDT) += vr41xxwdt.o
Index: linux-2.6.10/drivers/char/watchdog/davinci_wdt.c
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/char/watchdog/davinci_wdt.c
@@ -0,0 +1,184 @@
+/*
+ * linux/drivers/char/watchdog/davinci_wdt.c
+ *
+ * Watchdog driver for the TI DAVINCI
+ *
+ * Copyright (c) 2006 Texas Instruments.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/config.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/mm.h>
+#include <linux/miscdevice.h>
+#include <linux/watchdog.h>
+#include <linux/reboot.h>
+#include <linux/smp_lock.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <asm/io.h>
+#include <asm/uaccess.h>
+#include <asm/hardware.h>
+#include <asm/bitops.h>
+#include <asm/hardware/clock.h>
+#include <asm/arch/hardware.h>
+
+#include <linux/moduleparam.h>
+#include "davinci_wdt.h"
+
+/* Instance of the private WDT device structure */
+static struct wdt_davinci_device wdt_davinci_dev;
+
+static int timer_margin = TIMER_MARGIN_CFG_VAL;	/* in seconds */
+static int davinci_wdt_users;
+static struct miscdevice davinci_wdt_miscdev;	/* Forward declaration */
+
+static void davinci_wdt_ping(void)
+{
+	wdt_davinci_dev.regs->wdkey = 0xA5C6;
+	wdt_davinci_dev.regs->wdkey = 0xDA7E;
+	return;
+}
+
+static void davinci_wdt_enable(void)
+{
+	/* timer runs continuously */
+	wdt_davinci_dev.regs->tcr |= 0x80;
+	/* put watchdog in pre-active state */
+	wdt_davinci_dev.regs->wdkey = 0xA5C6;
+	/* put watchdog in active state */
+	wdt_davinci_dev.regs->wdkey = 0xDA7E;
+
+	return;
+}
+
+/*
+ *	Allow only one person to hold it open
+ */
+static int davinci_wdt_open(struct inode *inode, struct file *file)
+{
+	if (test_and_set_bit(1, (unsigned long *)&davinci_wdt_users))
+		return -EBUSY;
+
+	davinci_wdt_enable();
+
+	return 0;
+}
+
+static int davinci_wdt_release(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static loff_t davinci_wdt_llseek(struct file *file, loff_t offset, int whence)
+{
+	return -ESPIPE;		/* Not seekable */
+}
+
+static ssize_t
+davinci_wdt_write(struct file *file, const char *data, size_t len,
+		  loff_t * ppos)
+{
+	/*  Can't seek (pwrite) on this device  */
+	if (*ppos != file->f_pos)
+		return -ESPIPE;
+
+	/* Refresh LOAD_TIME. */
+	if (len) {
+		davinci_wdt_ping();
+		return 1;
+	}
+	return 0;
+}
+
+static int
+davinci_wdt_ioctl(struct inode *inode, struct file *file,
+		  unsigned int cmd, unsigned long arg)
+{
+	static struct watchdog_info ident = {
+		.identity = "DaVinci Watchdog",
+		.options = WDIOF_CARDRESET,
+		.firmware_version = 0,
+	};
+
+	switch (cmd) {
+	default:
+		return -ENOIOCTLCMD;
+	case WDIOC_GETSUPPORT:
+		return copy_to_user((struct watchdog_info *)arg, &ident,
+				    sizeof(ident));
+	case WDIOC_GETSTATUS:
+		return put_user(0, (int *)arg);
+	case WDIOC_KEEPALIVE:
+		davinci_wdt_ping();
+		return 0;
+	case WDIOC_GETTIMEOUT:
+		return put_user(timer_margin, (int *)arg);
+	}
+}
+
+static struct file_operations davinci_wdt_fops = {
+	.owner = THIS_MODULE,
+	.llseek = davinci_wdt_llseek,
+	.write = davinci_wdt_write,
+	.ioctl = davinci_wdt_ioctl,
+	.open = davinci_wdt_open,
+	.release = davinci_wdt_release,
+};
+
+static struct miscdevice davinci_wdt_miscdev = {
+	.minor = WATCHDOG_MINOR,
+	.name = "watchdog",
+	.fops = &davinci_wdt_fops
+};
+
+static int __init davinci_wdt_init(void)
+{
+	int ret;
+
+	ret = misc_register(&davinci_wdt_miscdev);
+
+	if (ret)
+		return ret;
+
+	wdt_davinci_dev.regs = (davinci_wdtregsovly) DAVINCI_WDT_BASE;
+
+	/* disable timer */
+	wdt_davinci_dev.regs->tcr = 0x0;
+	/* reset timer */
+	wdt_davinci_dev.regs->tgcr = 0x0;
+
+	/* configure timer2 as 64-bit */
+	wdt_davinci_dev.regs->tgcr = 0x8;
+	/* release timer from reset */
+	wdt_davinci_dev.regs->tgcr |= 0x3;
+	/* enable watchdog timer */
+	wdt_davinci_dev.regs->wdtcr |= 0x4000;
+
+	if (timer_margin < TIMER_MARGIN_MIN_VAL || 
+	    timer_margin > TIMER_MARGIN_MAX_VAL)
+		timer_margin = TIMER_MARGIN_DEF_VAL;
+
+	/* configure the period register */
+	wdt_davinci_dev.regs->prd12 = CLOCK_TICK_RATE * timer_margin;
+
+	printk(KERN_INFO "%s: TI DaVinci Watchdog Timer: timer margin %d sec\n",
+	       davinci_wdt_miscdev.name, timer_margin);
+
+	return 0;
+}
+
+static void __exit davinci_wdt_exit(void)
+{
+	misc_deregister(&davinci_wdt_miscdev);
+}
+
+module_init(davinci_wdt_init);
+module_exit(davinci_wdt_exit);
+
+MODULE_AUTHOR("Texas Instruments");
+MODULE_LICENSE("GPL");
+module_param(timer_margin, int, 0);
Index: linux-2.6.10/drivers/char/watchdog/davinci_wdt.h
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/char/watchdog/davinci_wdt.h
@@ -0,0 +1,67 @@
+/*
+ *  linux/drivers/char/watchdog/davinci_wdt.h
+ *
+ *  BRIEF MODULE DESCRIPTION
+ *      DaVinci Watchdog timer register definitions
+ *
+ *  Copyright (C) 2006 Texas Instruments.
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ *
+ *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR IMPLIED
+ *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
+ *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF
+ *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT
+ *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  You should have received a copy of the  GNU General Public License along
+ *  with this program; if not, write  to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#ifndef _DAVINCI_WATCHDOG_H
+#define _DAVINCI_WATCHDOG_H
+
+#define DAVINCI_WDT_BASE		IO_ADDRESS(0x01C21C00)
+
+/**************************************************************************\
+* Register Overlay Structure
+\**************************************************************************/
+typedef struct {
+	u32 pid12;
+	u16 emu_clk;
+	u8 rsvd0[10];
+	u32 tim12;
+	u32 tim34;
+	u32 prd12;
+	u32 prd34;
+	u32 tcr;
+	u16 tgcr;
+	u8 rsvd1[2];
+	u16 wdtcr;
+	u16 wdkey;
+} davinci_wdtregs;
+
+/**************************************************************************\
+* Overlay structure typedef definition
+\**************************************************************************/
+typedef volatile davinci_wdtregs *davinci_wdtregsovly;
+
+struct wdt_davinci_device {
+	davinci_wdtregsovly regs;
+};
+
+#define TIMER_MARGIN_MAX_VAL		159
+#define TIMER_MARGIN_CFG_VAL		64	/* user configurable value */
+#define TIMER_MARGIN_DEF_VAL		64	/* Default is 64 seconds */
+#define TIMER_MARGIN_MIN_VAL		1
+
+#endif				/* _DAVINCI_WATCHDOG_H */
Index: linux-2.6.10/mvl_patches/pro-1640.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1640.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1640);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

