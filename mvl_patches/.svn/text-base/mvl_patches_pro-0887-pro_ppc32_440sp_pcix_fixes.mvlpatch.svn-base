#! /usr/bin/env bash
# Patch: -pro_ppc32_440sp_pcix_fixes
# Date: Mon Aug 21 08:34:01 2006
# Source: MontaVista Software, Inc.
# MR: 17368
# Type: Defect Fix
# Disposition: submitted to linuxppc_embedded
# Signed-off-by: Wade Farnsworth <wfarnsworth@mvista.com>
# Description:
# 	PCIX fixes for AMCC 440SP Eval board.  This fixes PCIXn_IO_BASE for 
# 	bridges 1 & 2.  Also allows any PCIX bridge to function in host or 
# 	adapter mode, depending on SDR settings at boot.  Previously, PCIX0
# 	could only be in adapter mode, while PCIX1 & 2 only functioned in host
# 	mode.
# 

PATCHNUM=887
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 17368
Type: Defect Fix
Disposition: submitted to linuxppc_embedded
Signed-off-by: Wade Farnsworth <wfarnsworth@mvista.com>
Description:
	PCIX fixes for AMCC 440SP Eval board.  This fixes PCIXn_IO_BASE for 
	bridges 1 & 2.  Also allows any PCIX bridge to function in host or 
	adapter mode, depending on SDR settings at boot.  Previously, PCIX0
	could only be in adapter mode, while PCIX1 & 2 only functioned in host
	mode.

Index: linux-2.6.10/arch/ppc/platforms/4xx/luan.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/platforms/4xx/luan.c
+++ linux-2.6.10/arch/ppc/platforms/4xx/luan.c
@@ -103,9 +103,7 @@ luan_map_irq(struct pci_dev *dev, unsign
 {
 	struct pci_controller *hose = pci_bus_to_hose(dev->bus->number);
 
-	/* PCIX0 in adapter mode, no host interrupt routing */
-
-	/* PCIX1 */
+	/* PCIX0 */
 	if (hose->index == 0) {
 		static char pci_irq_table[][4] =
 		/*
@@ -113,6 +111,21 @@ luan_map_irq(struct pci_dev *dev, unsign
 		 *	  A   B   C   D
 		 */
 		{
+			{ 32, 32, 32, 32 },	/* IDSEL 1 - PCIX0 Slot 0 */
+			{ 32, 32, 32, 32 },	/* IDSEL 2 - PCIX0 Slot 1 */
+			{ 32, 32, 32, 32 },	/* IDSEL 3 - PCIX0 Slot 2 */
+			{ 32, 32, 32, 32 },	/* IDSEL 4 - PCIX0 Slot 3 */
+		};
+		const long min_idsel = 1, max_idsel = 4, irqs_per_slot = 4;
+		return PCI_IRQ_TABLE_LOOKUP;
+	/* PCIX1 */
+	} else if (hose->index == 1) {
+		static char pci_irq_table[][4] =
+		/*
+		 *	PCI IDSEL/INTPIN->INTLINE
+		 *	  A   B   C   D
+		 */
+		{
 			{ 49, 49, 49, 49 },	/* IDSEL 1 - PCIX1 Slot 0 */
 			{ 49, 49, 49, 49 },	/* IDSEL 2 - PCIX1 Slot 1 */
 			{ 49, 49, 49, 49 },	/* IDSEL 3 - PCIX1 Slot 2 */
@@ -121,7 +134,7 @@ luan_map_irq(struct pci_dev *dev, unsign
 		const long min_idsel = 1, max_idsel = 4, irqs_per_slot = 4;
 		return PCI_IRQ_TABLE_LOOKUP;
 	/* PCIX2 */
-	} else if (hose->index == 1) {
+	} else if (hose->index == 2) {
 		static char pci_irq_table[][4] =
 		/*
 		 *	PCI IDSEL/INTPIN->INTLINE
@@ -246,42 +259,70 @@ luan_setup_hose(struct pci_controller *h
 static void __init
 luan_setup_hoses(void)
 {
-	struct pci_controller *hose1, *hose2;
+	struct pci_controller *hose0, *hose1, *hose2;
+	int last_busno = -1;
 
 	/* Configure windows on the PCI-X host bridge */
 	luan_setup_pcix();
 
-	/* Allocate hoses for PCIX1 and PCIX2 */
-	hose1 = pcibios_alloc_controller();
-	hose2 = pcibios_alloc_controller();
-	if (!hose1 || !hose2)
-		return;
+	/* Setup PCIX0 */
+	if (SDR_READ(0x01c0) & 0x20000000) {
+		hose0 = pcibios_alloc_controller();
+		if (!hose0)
+			return;
+		hose0->first_busno = 0;
+		hose0->last_busno = 0xff;
+		hose0->index = 0;
+
+		luan_setup_hose(hose0,
+				LUAN_PCIX0_LOWER_MEM,
+				LUAN_PCIX0_UPPER_MEM,
+				PCIX0_CFGA,
+				PCIX0_CFGD,
+				PCIX0_IO_BASE);
 
-	/* Setup PCIX1 */
-	hose1->first_busno = 0;
-	hose1->last_busno = 0xff;
+		last_busno = hose0->last_busno =
+			     pciauto_bus_scan(hose0, hose0->first_busno);
+	}
 
-	luan_setup_hose(hose1,
-			LUAN_PCIX1_LOWER_MEM,
-			LUAN_PCIX1_UPPER_MEM,
-			PCIX1_CFGA,
-			PCIX1_CFGD,
-			PCIX1_IO_BASE);
+	/* Setup PCIX1 */
+	if (SDR_READ(0x01c3) & 0x20000000) {
+		hose1 = pcibios_alloc_controller();
+		if (!hose1)
+			return;
+		hose1->first_busno = last_busno + 1;
+		hose1->last_busno = 0xff;
+		hose1->index = 1;
+
+		luan_setup_hose(hose1,
+				LUAN_PCIX1_LOWER_MEM,
+				LUAN_PCIX1_UPPER_MEM,
+				PCIX1_CFGA,
+				PCIX1_CFGD,
+				PCIX1_IO_BASE);
 
-	hose1->last_busno = pciauto_bus_scan(hose1, hose1->first_busno);
+		last_busno = hose1->last_busno =
+			     pciauto_bus_scan(hose1, hose1->first_busno);
+	}
 
 	/* Setup PCIX2 */
-	hose2->first_busno = hose1->last_busno + 1;
-	hose2->last_busno = 0xff;
+	if (SDR_READ(0x01c6) & 0x20000000) {
+		hose2 = pcibios_alloc_controller();
+		if (!hose2)
+			return;
+		hose2->first_busno = last_busno + 1;
+		hose2->last_busno = 0xff;
+		hose2->index = 2;
+
+		luan_setup_hose(hose2,
+				LUAN_PCIX2_LOWER_MEM,
+				LUAN_PCIX2_UPPER_MEM,
+				PCIX2_CFGA,
+				PCIX2_CFGD,
+				PCIX2_IO_BASE);
 
-	luan_setup_hose(hose2,
-			LUAN_PCIX2_LOWER_MEM,
-			LUAN_PCIX2_UPPER_MEM,
-			PCIX2_CFGA,
-			PCIX2_CFGD,
-			PCIX2_IO_BASE);
-
-	hose2->last_busno = pciauto_bus_scan(hose2, hose2->first_busno);
+		hose2->last_busno = pciauto_bus_scan(hose2, hose2->first_busno);
+	}
 
 	ppc_md.pci_swizzle = common_swizzle;
 	ppc_md.pci_map_irq = luan_map_irq;
Index: linux-2.6.10/include/asm-ppc/ibm44x.h
===================================================================
--- linux-2.6.10.orig/include/asm-ppc/ibm44x.h
+++ linux-2.6.10/include/asm-ppc/ibm44x.h
@@ -511,8 +511,8 @@
 #define PCIX2_CFGD		0x2ec00004UL
 
 #define PCIX0_IO_BASE		0x0000000908000000ULL
-#define PCIX1_IO_BASE		0x0000000908000000ULL
-#define PCIX2_IO_BASE		0x0000000908000000ULL
+#define PCIX1_IO_BASE		0x0000000918000000ULL
+#define PCIX2_IO_BASE		0x0000000928000000ULL
 #define PCIX_IO_SIZE		0x00010000
 
 #ifdef CONFIG_440SP
Index: linux-2.6.10/mvl_patches/pro-0887.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0887.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(887);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

