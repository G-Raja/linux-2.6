#! /usr/bin/env bash
# Patch: -pro_ppc_xilinx_emac_fixes
# Date: Thu Jun 22 21:14:50 2006
# Source: MontaVista Software, Inc.
# MR: 18529
# Type: Defect Fix
# Disposition: needs submitting to linuxppc-embedded mailing list
# Signed-off-by: Andrei Konovalov <akonovalov@ru.mvista.com>
# Description:
#     Here are the fixes for the following problems found by code inspection
#     in Xilinx:
# 
#     1) misprint in adapter.h
#     2) misprint in adapter_sgdma.c:free_rx_skbs()
#     3) in adapter_fifo.c:xenet_start_xmit_fifo() a call to align_skb_data(skb)
#        was made in all cases (even if the skb data are already aligned)
#     4) in adapter_sgdma.c:sgdma_descriptor_init()
#        To support designs that have plb_emac in them, it would be
#        good if the buffer descriptor space was just always 8 byte aligned for
#        the buffer descriptors.
#     5) There is no jumbo frames support in the current driver.
#     Additionaly XEM_FLOW_CONTROL_OPTION option is enabled in xenet_open().
#     This could be a NOP if the hardware doesn't support flow control, but
#     otherwise may help in case of small FIFOs and no SGDMA.
# 

PATCHNUM=649
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 18529
Type: Defect Fix
Disposition: needs submitting to linuxppc-embedded mailing list
Signed-off-by: Andrei Konovalov <akonovalov@ru.mvista.com>
Description:
    Here are the fixes for the following problems found by code inspection
    in Xilinx:

    1) misprint in adapter.h
    2) misprint in adapter_sgdma.c:free_rx_skbs()
    3) in adapter_fifo.c:xenet_start_xmit_fifo() a call to align_skb_data(skb)
       was made in all cases (even if the skb data are already aligned)
    4) in adapter_sgdma.c:sgdma_descriptor_init()
       To support designs that have plb_emac in them, it would be
       good if the buffer descriptor space was just always 8 byte aligned for
       the buffer descriptors.
    5) There is no jumbo frames support in the current driver.
    Additionaly XEM_FLOW_CONTROL_OPTION option is enabled in xenet_open().
    This could be a NOP if the hardware doesn't support flow control, but
    otherwise may help in case of small FIFOs and no SGDMA.

Index: linux-2.6.10/drivers/net/xilinx_emac/adapter.c
===================================================================
--- linux-2.6.10.orig/drivers/net/xilinx_emac/adapter.c
+++ linux-2.6.10/drivers/net/xilinx_emac/adapter.c
@@ -394,16 +394,15 @@ static int xenet_open(struct net_device 
 			case FULL_DUPLEX: Options |=  XEM_FDUPLEX_OPTION; break;
 			case UNKNOWN_DUPLEX: break;
 			}
-			/*
-			 * The following function will return an error
-			 * if the EMAC is already started.  We know it
-			 * isn't started so we can safely ignore the
-			 * return value.  We cast it to void to make
-			 * that explicit.
-			 */
-			(void) XEmac_SetOptions(&lp->Emac, Options);
 		}
 	}
+	/*
+	 * The following function will return an error if the EMAC is already
+	 * started.  We know it isn't started so we can safely ignore the
+	 * return value.  We cast it to void to make that explicit.
+	 */
+	(void) XEmac_SetOptions(&lp->Emac, Options | XEM_FLOW_CONTROL_OPTION);
+
 
 	if (XEmac_Start(&lp->Emac) != XST_SUCCESS) {
 		printk(KERN_ERR "%s: Could not start device.\n", ndev->name);
@@ -1097,8 +1096,6 @@ static int xenet_probe(struct device *de
 	lp->Config.HasCounters = (pdata->device_flags & XEMAC_HAS_ERR_COUNT) ?
 					1 : 0;
 	lp->Config.HasMii = (pdata->device_flags & XEMAC_HAS_MII) ? 1 : 0;
-	lp->Config.HasCam = (pdata->device_flags & XEMAC_HAS_CAM) ? 1 : 0;
-	lp->Config.HasJumbo = (pdata->device_flags & XEMAC_HAS_JUMBO) ? 1 : 0;
 
 	/* The following line would not be needed if XEmac_Initialize took
 	 * ptr to XEmac_Config instead of DeviceId as the second arg.
Index: linux-2.6.10/drivers/net/xilinx_emac/adapter.h
===================================================================
--- linux-2.6.10.orig/drivers/net/xilinx_emac/adapter.h
+++ linux-2.6.10/drivers/net/xilinx_emac/adapter.h
@@ -110,7 +110,7 @@ struct net_local {
 extern inline int status_requires_reset(XStatus s)
 {
 	return (s == XST_DMA_ERROR || s == XST_FIFO_ERROR
-		|| s == XST_RESET_ERROR || XST_DMA_SG_LIST_EMPTY);
+		|| s == XST_RESET_ERROR || s == XST_DMA_SG_LIST_EMPTY);
 }
 
 /*
Index: linux-2.6.10/drivers/net/xilinx_emac/adapter_fifo.c
===================================================================
--- linux-2.6.10.orig/drivers/net/xilinx_emac/adapter_fifo.c
+++ linux-2.6.10/drivers/net/xilinx_emac/adapter_fifo.c
@@ -21,6 +21,9 @@ static struct sk_buff * align_skb_data(s
 	struct sk_buff *new_skb;
 	unsigned int len, align;
 
+	if (BUFFER_ALIGN(skb->data) == 0)
+		return skb;
+
 	len = skb->len;
 	/*
 	 * The packet FIFO requires the buffers to be 32 or 64 bit aligned.
@@ -44,6 +47,9 @@ static struct sk_buff * align_skb_data(s
 	skb_put(new_skb, len);
 	memcpy(new_skb->data, skb->data, len);
 
+	/* get rid of the original skb. */
+	dev_kfree_skb(skb);
+
 	return new_skb;
 }
 
@@ -84,8 +90,7 @@ int xenet_start_xmit_fifo(struct sk_buff
 
 	len = skb->len;
 
-	new_skb = align_skb_data(skb);
-	dev_kfree_skb(skb);	/* get rid of the original skb. */
+	new_skb = align_skb_data(skb); /* if new_skb != skb, skb is freed */
 
 	if (!new_skb) {
 		/* We couldn't get the new, "aligned" skb. */
Index: linux-2.6.10/drivers/net/xilinx_emac/adapter_sgdma.c
===================================================================
--- linux-2.6.10.orig/drivers/net/xilinx_emac/adapter_sgdma.c
+++ linux-2.6.10/drivers/net/xilinx_emac/adapter_sgdma.c
@@ -35,7 +35,7 @@ void free_rx_skbs(struct net_device *nde
 	int i;
 
 	bd_ptr = (XBufDescriptor*)lp->Emac.RecvChannel.VirtPtr;
-	for (i = 0; i < SGDMA_DEFAULT_RECV_DESC != 0; i++) {
+	for (i = 0; i < SGDMA_DEFAULT_RECV_DESC; i++) {
 		skb = (struct sk_buff*)XBufDescriptor_GetId(bd_ptr);
 		if (skb == NULL) {
 			/* one can get here if sgdma_descriptor_init() fails */
@@ -69,11 +69,21 @@ int sgdma_descriptor_init(struct net_dev
 {
 	struct net_local *lp = netdev_priv(ndev);
 	void *p_v, *p_bus;
+	u32 align;
 	int i;
 
-	/* Allocate memory for the buffer descriptors */
+	/*
+	 * Allocate memory for the buffer descriptors.
+	 * 8-byte descriptor alignment is needed for PLB EMAC.
+	 * "((sizeof (XBufDescriptor) % ALIGNMENT) == 0)" is assumed 
+	 * to be true (due to how dma driver works) and 
+	 * the "+ ALIGNMENT" is to allow for space to shift the records 
+	 * to make them aligned. If it is not the case, XDmaChannel_CreateSgList() 
+	 * called by XEmac_SetSg[Recv/Send]Space() would need reimplementing and
+	 * level 1 driver for SGDMA engine needs rewrite.
+	 */
 	lp->desc_space_size = (SGDMA_DEFAULT_RECV_DESC + SGDMA_DEFAULT_SEND_DESC) *
-		sizeof (XBufDescriptor);
+		sizeof (XBufDescriptor) + ALIGNMENT;
 	lp->desc_space_v = dma_alloc_coherent(NULL,
 		lp->desc_space_size, &lp->desc_space_handle, GFP_KERNEL);
 	if (lp->desc_space_v == NULL) {
@@ -92,15 +102,14 @@ int sgdma_descriptor_init(struct net_dev
 	atomic_set(&lp->tx_descs_avail, SGDMA_DEFAULT_SEND_DESC);
 
 	/* Add pointers to descriptor space to the driver */
-	p_v = lp->desc_space_v;
-	p_bus = (void *)lp->desc_space_handle;
+	align = BUFFER_ALIGN(lp->desc_space_handle);
+	p_v = (u8 *)(lp->desc_space_v) + align;
+	p_bus = (u8 *)(lp->desc_space_handle) + align;
 	XEmac_SetSgRecvSpace(&lp->Emac, p_v,
 			     SGDMA_DEFAULT_RECV_DESC * sizeof (XBufDescriptor),
 			     p_bus);
-	p_v = (void *) ((u32) lp->desc_space_v +
-		SGDMA_DEFAULT_RECV_DESC * sizeof (XBufDescriptor));
-	p_bus = (void *) ((u32) lp->desc_space_handle +
-		SGDMA_DEFAULT_RECV_DESC * sizeof (XBufDescriptor));
+	p_v = (u8 *)p_v + SGDMA_DEFAULT_RECV_DESC * sizeof (XBufDescriptor);
+	p_bus = (u8 *)p_bus + SGDMA_DEFAULT_RECV_DESC * sizeof (XBufDescriptor);
 	XEmac_SetSgSendSpace(&lp->Emac, p_v,
 			     SGDMA_DEFAULT_SEND_DESC * sizeof (XBufDescriptor),
 			     p_bus);
@@ -110,7 +119,7 @@ int sgdma_descriptor_init(struct net_dev
 		struct sk_buff *skb;
 		XBufDescriptor bd;
 		int result;
-		u32 skb_bus_addr, align;
+		u32 skb_bus_addr;
 
 		skb = dev_alloc_skb(XEM_MAX_FRAME_SIZE + SGDMA_ALIGNMENT);
 		if (skb == NULL)
Index: linux-2.6.10/mvl_patches/pro-0649.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0649.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(649);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

