#! /usr/bin/env bash
# Patch: -pro_arm_davinci_mv_1_0_audio_close_fix_028
# Date: Mon Jan 21 23:04:01 2008
# Source: Texas Instruments Inc.
# MR: 23073
# Type: Enhancement 
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
#  
# Comments from TI
#   Patch to fix the audio close issues.
# 

PATCHNUM=1654
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 23073
Type: Enhancement 
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
 
Comments from TI
  Patch to fix the audio close issues.

Index: linux-2.6.10/sound/oss/davinci-audio-aic33.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio-aic33.c
+++ linux-2.6.10/sound/oss/davinci-audio-aic33.c
@@ -91,7 +91,7 @@
 #define SET_TREBLE                    8
 #define SET_MICBIAS		      9
 
-#define DEFAULT_OUTPUT_VOLUME         50
+#define DEFAULT_OUTPUT_VOLUME         70
 #define DEFAULT_INPUT_VOLUME          20	/* 0 ==> mute line in */
 #define DEFAULT_INPUT_IGAIN	      20
 #define DEFAULT_INPUT_OGAIN	      100
@@ -135,8 +135,8 @@ static struct aic33_local_info {
 	u8 mic;
 	int recsrc;
 	u8 nochan;
-	u8 igain;
-	u8 ogain;
+	u16 igain;
+	u16 ogain;
 	u8 micbias;
 	u8 bass;
 	u8 treble;
@@ -263,14 +263,13 @@ static __inline__ void audio_aic33_write
 static int aic33_update(int flag, int val)
 {
 	u16 volume;
-	u16 gain;
-
-	/* Ignore separate left/right channel for now,
-	   even the codec does support it. */
-	val &= 0xff;
+	s16 left_gain, left_val, right_gain, right_val;
 
 	switch (flag) {
 	case SET_VOLUME:
+		/* Ignore separate left/right channel for now,
+	   	   even the codec does support it. */
+		val &= 0xff;
 
 		if (val < 0 || val > 100) {
 			DPRINTK("Trying a bad volume value(%d)!\n", val);
@@ -306,6 +305,9 @@ static int aic33_update(int flag, int va
 
 	case SET_LINE:
 	case SET_MIC:
+		/* Ignore separate left/right channel for now,
+	   	   even the codec does support it. */
+		val &= 0xff;
 
 		if (val < 0 || val > 100) {
 			DPRINTK("Trying a bad volume value(%d)!\n", val);
@@ -322,6 +324,10 @@ static int aic33_update(int flag, int va
 		break;
 
 	case SET_RECSRC:
+		/* Ignore separate left/right channel for now,
+	   	   even the codec does support it. */
+		val &= 0xff;
+
 		if (hweight32(val) > 1)
 			val &= ~aic33_local.recsrc;
 
@@ -353,44 +359,63 @@ static int aic33_update(int flag, int va
 		break;
 
 	case SET_IGAIN:
+		left_val = val & 0xFF;
+		right_val = val >> 8;
 
-		if (val < 0 || val > 100) {
-			DPRINTK("Trying a bad igain value(%d)!\n", val);
+		if (left_val < 0 || left_val > 100) {
+			DPRINTK("Trying a bad igain value(%d)!\n", left_val);
+			return -EPERM;
+		}
+		if (right_val < 0 || right_val > 100) {
+			DPRINTK("Trying a bad igain value(%d)!\n", right_val);
 			return -EPERM;
 		}
 
-		gain = ((val * INPUT_GAIN_RANGE) / 100) + INPUT_GAIN_MIN;
+		left_gain = ((left_val * INPUT_GAIN_RANGE) / 100) + INPUT_GAIN_MIN;
+		right_gain = ((right_val * INPUT_GAIN_RANGE) / 100) + INPUT_GAIN_MIN;
 
-		DPRINTK("gain reg val = 0x%x", gain << 1);
+		DPRINTK("left gain reg val = 0x%x", left_gain << 1);
+		DPRINTK("right gain reg val = 0x%x", left_gain << 1);
 
 		/* Left AGC control */
 		audio_aic33_write(26, 0x80);
-		audio_aic33_write(27, gain << 1);
+		audio_aic33_write(27, left_gain << 1);
 		audio_aic33_write(28, 0x0);
 
 		/* Right AGC control */
 		audio_aic33_write(29, 0x80);
-		audio_aic33_write(30, gain << 1);
+		audio_aic33_write(30, right_gain << 1);
 		audio_aic33_write(31, 0x0);
 
 		break;
 
 	case SET_OGAIN:
+		left_val = val & 0xFF;
+		right_val = val >> 8;
 
-		if (val < 0 || val > 100) {
-			DPRINTK("Trying a bad igain value(%d)!\n", val);
+		if (left_val < 0 || left_val > 100) {
+			DPRINTK("Trying a bad igain value(%d)!\n", left_val);
+			return -EPERM;
+		}
+		if (right_val < 0 || right_val > 100) {
+			DPRINTK("Trying a bad igain value(%d)!\n", right_val);
 			return -EPERM;
 		}
 
-		gain = ((val * OUTPUT_GAIN_RANGE) / 100) + OUTPUT_GAIN_MIN;
-		gain = OUTPUT_GAIN_MAX - gain;
+		left_gain = ((left_val * OUTPUT_GAIN_RANGE) / 100) + OUTPUT_GAIN_MIN;
+		left_gain = OUTPUT_GAIN_MAX - left_gain;
+		right_gain = ((right_val * OUTPUT_GAIN_RANGE) / 100) + OUTPUT_GAIN_MIN;
+		right_gain = OUTPUT_GAIN_MAX - right_gain;
 
 		/* Left/Right DAC digital volume gain */
-		audio_aic33_write(43, gain);
-		audio_aic33_write(44, gain);
+		audio_aic33_write(43, left_gain);
+		audio_aic33_write(44, right_gain);
 		break;
 
 	case SET_MICBIAS:
+		/* Ignore separate left/right channel for now,
+	   	   even the codec does support it. */
+		val &= 0xff;
 
 		if (val < 0 || val > 3) {
 			DPRINTK
@@ -969,8 +994,8 @@ static int davinci_aic33_probe(void)
 	aic33_local.volume = DEFAULT_OUTPUT_VOLUME;
 	aic33_local.line = DEFAULT_INPUT_VOLUME;
 	aic33_local.recsrc = SOUND_MASK_LINE;	/* either of SOUND_MASK_LINE/SOUND_MASK_MIC */
-	aic33_local.igain = DEFAULT_INPUT_IGAIN;
-	aic33_local.ogain = DEFAULT_INPUT_OGAIN;
+	aic33_local.igain = DEFAULT_INPUT_IGAIN | (DEFAULT_INPUT_IGAIN << 8);
+	aic33_local.ogain = DEFAULT_INPUT_OGAIN | (DEFAULT_INPUT_OGAIN << 8);
 	aic33_local.nochan = STEREO;
 	aic33_local.micbias = 1;
 	aic33_local.mod_cnt = 0;
Index: linux-2.6.10/sound/oss/davinci-audio-dma-intfc.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio-dma-intfc.c
+++ linux-2.6.10/sound/oss/davinci-audio-dma-intfc.c
@@ -120,6 +120,7 @@ struct audio_isr_work_item {
 
 static char work_item_running = 0;
 static struct audio_isr_work_item work1, work2;
+static int oss_mcbsp_counter = 0;
 
 /*********************** MODULE SPECIFIC FUNCTIONS PROTOTYPES ****************/
 
@@ -207,6 +208,7 @@ int audio_setup_buf(audio_stream_t * s)
 	s->usr_head = s->dma_head = s->dma_tail = 0;
 	AUDIO_QUEUE_INIT(s);
 	s->started = 0;
+	s->mcbsp_started = 0;
 
 	s->dma_started = 0;
 	s->bytecount = 0;
@@ -604,8 +606,17 @@ void audio_stop_dma(audio_stream_t * s)
 
 	local_irq_save(flags);
 
-	davinci_stop_dma(s->master_ch);
-	s->dma_started = 0;
+	if(s->mcbsp_started) {
+		s->mcbsp_started = 0;
+		oss_mcbsp_counter--;
+		DPRINTK( "MCBSP counter on stop %d\n",oss_mcbsp_counter);
+		if(oss_mcbsp_counter <= 0) {
+			DPRINTK("MCBSP STOP\n");
+			davinci_mcbsp_stop(0);
+			oss_mcbsp_counter = 0;
+		}
+	}
+	s->started = 0;
 
 	if (s->spin_idle) {
 #if 0
@@ -663,9 +674,6 @@ void audio_reset(audio_stream_t * s)
 	audio_buf_t *b;
 	FN_IN;
 	if (s->buffers) {
-
-		davinci_mcbsp_stop(0);
-		s->started = 0;
 		audio_stop_dma(s);
 		/* back up pointers to be ready to restart from the same spot */
 		while (s->dma_head != s->dma_tail) {
@@ -695,7 +703,10 @@ void audio_reset(audio_stream_t * s)
 	AUDIO_QUEUE_INIT(s);
 	s->active = 0;
 	s->stopped = 0;
+	s->started = 0;
+	s->dma_started = 0;
 
+	davinci_stop_dma(s->master_ch);
 	FN_OUT(0);
 	return;
 }
@@ -756,21 +767,33 @@ static int audio_set_dma_params_capture(
 
 static int audio_start_dma_chain(audio_stream_t * s)
 {
+	unsigned long flags;
 	int channel = s->lch[s->dma_q_head];
 	FN_IN;
 
-	if (!s->dma_started) {
+	if (!s->started) {
 		edmacc_paramentry_regs temp;
 		davinci_get_dma_params(channel, &temp);
 		davinci_set_dma_params(s->master_ch, &temp);
-
-		davinci_start_dma(s->master_ch);
-		s->dma_started = 1;
-	}
-	
-	if (!s->started) {
-		davinci_mcbsp_start(0);
 		s->started = 1;
+
+		if (!s->dma_started) {
+			davinci_start_dma(s->master_ch);
+			s->dma_started = 1;
+		}
+		local_irq_save(flags);
+		if(!s->mcbsp_started) {
+			s->mcbsp_started = 1;
+			oss_mcbsp_counter++;
+			DPRINTK("MCBSP counter on start %d\n",oss_mcbsp_counter);
+			if(oss_mcbsp_counter == 1) {
+				local_irq_restore(flags);
+				DPRINTK("MCBSP START\n");
+				davinci_mcbsp_start(0);
+			} else
+				local_irq_restore(flags);
+		} else
+			local_irq_restore(flags);
 	}
 
 	/* else the dma itself will progress forward with out our help */
Index: linux-2.6.10/sound/oss/davinci-audio.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio.c
+++ linux-2.6.10/sound/oss/davinci-audio.c
@@ -517,6 +517,7 @@ audio_write(struct file *file, const cha
 	audio_state_t *state = file->private_data;
 	audio_stream_t *s = state->output_stream;
 	int chunksize, ret = 0;
+	unsigned long flags;
 
 	DPRINTK("audio_write: count=%d\n", count);
 	if (*ppos != file->f_pos) {
@@ -541,6 +542,11 @@ audio_write(struct file *file, const cha
 			ret = -EAGAIN;
 			if (!s->wfc.done)
 				break;
+			else {
+				local_irq_save(flags);
+				s->wfc.done--;
+				local_irq_restore(flags);
+			}
 		} else {
 			ret = -ERESTARTSYS;
 			if (wait_for_completion_interruptible(&s->wfc))
@@ -568,13 +574,14 @@ audio_write(struct file *file, const cha
 		}
 
 		/* Update pointers and send current fragment to DMA */
+		local_irq_save(flags);
 		b->offset = 0;
 		if (++s->usr_head >= s->nbfrags)
 			s->usr_head = 0;
 		/* Add the num of frags pending */
 		s->pending_frags++;
 		s->active = 1;
-
+		local_irq_restore(flags);
 		audio_process_dma(s);
 	}
 
@@ -627,6 +634,11 @@ audio_read(struct file *file, char *buff
 			ret = -EAGAIN;
 			if (!s->wfc.done)
 				break;
+			else {
+                                local_irq_save(flags);
+                                s->wfc.done--;
+                                local_irq_restore(flags);
+                        }
 		} else {
 			ret = -ERESTARTSYS;
 			if (wait_for_completion_interruptible(&s->wfc))
Index: linux-2.6.10/sound/oss/davinci-audio.h
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio.h
+++ linux-2.6.10/sound/oss/davinci-audio.h
@@ -69,6 +69,7 @@ typedef struct {
 	int stopped:1;		/* might be active but stopped */
 	int spin_idle:1;	/* have DMA spin on zeros when idle */
 	int dma_started;	/* to store if DMA was started or not */
+	int mcbsp_started;
 } audio_stream_t;
 
 /*
Index: linux-2.6.10/mvl_patches/pro-1654.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1654.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1654);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

