#! /usr/bin/env bash
# Patch: -pro_ppc_xilinx_edk_new_uartlite
# Date: Thu Jun 22 21:15:25 2006
# Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
# MR: 19052
# Type: Integration
# Disposition: needs submitting to community
# Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
# Description:
#     Xilinx EDK drivers for UART Lite - The newer Xilinx drivers for ML40x 
#     board with the CfgInitialize() routine. Xilinx re-newed their drivers 
#     quite recently, so it's going as a different patch.
# 

PATCHNUM=655
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
MR: 19052
Type: Integration
Disposition: needs submitting to community
Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
Description:
    Xilinx EDK drivers for UART Lite - The newer Xilinx drivers for ML40x 
    board with the CfgInitialize() routine. Xilinx re-newed their drivers 
    quite recently, so it's going as a different patch.

Index: linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite.c
===================================================================
--- linux-2.6.10.orig/drivers/char/xilinx_uartlite/xuartlite.c
+++ linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite.c
@@ -27,7 +27,7 @@
 *     expressly prohibited.
 *
 *
-*     (c) Copyright 2002 Xilinx Inc.
+*     (c) Copyright 2002-2005 Xilinx Inc.
 *     All rights reserved.
 *
 *
@@ -52,6 +52,14 @@
 * 1.00a ecm  08/31/01 First release
 * 1.00b jhl  02/21/02 Repartitioned the driver for smaller files
 * 1.00b rmm  05/13/03 Fixed diab compiler warnings relating to asserts
+* 1.01a jvb  12/13/05 I changed Initialize() into CfgInitialize(), and made
+*                     CfgInitialize() take a pointer to a config structure
+*                     instead of a device id. I moved Initialize() into
+*                     xgpio_sinit.c, and had Initialize() call CfgInitialize()
+*                     after it retrieved the config structure using the device
+*                     id. I removed include of xparameters.h along with any
+*                     dependencies on xparameters.h and the _g.c config table.
+*
 * </pre>
 *
 *****************************************************************************/
@@ -60,7 +68,6 @@
 
 #include "xbasic_types.h"
 #include "xstatus.h"
-#include "xparameters.h"
 #include "xuartlite.h"
 #include "xuartlite_i.h"
 #include "xio.h"
@@ -87,42 +94,40 @@ static void StubHandler(void *CallBackRe
 * interrupt. The baudrate and format of the data are fixed in the hardware
 * at hardware build time.
 *
-* @param    InstancePtr is a pointer to the XUartLite instance to be worked on.
-* @param    DeviceId is the unique id of the device controlled by this
-*           XUartLite instance.  Passing in a device id associates the
-*           generic XUartLite instance to a specific device, as chosen by
-*           the caller or application developer.
+* @param InstancePtr is a pointer to the XUartLite instance to be worked on.
+* @param Config is a reference to a structure containing information about
+*        a specific UART Lite device. This function initializes an
+*        InstancePtr object for a specific device specified by the contents
+*        of Config. This function can initialize multiple instance objects
+*        with the use of multiple calls giving different Config information
+*        on each call.
+* @param EffectiveAddr is the device base address in the virtual memory address
+*        space. The caller is responsible for keeping the address mapping
+*        from EffectiveAddr to the device physical base address unchanged
+*        once this function is invoked. Unexpected errors may occur if the
+*        address mapping changes after this function is called. If address
+*        translation is not used, use Config->BaseAddress for this parameters,
+*        passing the physical address instead.
 *
 * @return
 *
 * - XST_SUCCESS if everything starts up as expected.
-* - XST_DEVICE_NOT_FOUND if the device is not found in the configuration table.
 *
 * @note
 *
-* None.
+* The Config pointer argument is not used by this function, but is provided
+* to keep the function signature consistent with other drivers.
 *
 *****************************************************************************/
-XStatus XUartLite_Initialize(XUartLite * InstancePtr, u16 DeviceId)
+XStatus XUartLite_CfgInitialize(XUartLite * InstancePtr,
+				XUartLite_Config * Config, u32 EffectiveAddr)
 {
-	XUartLite_Config *UartLiteConfigPtr;
-
 	/*
 	 * Assert validates the input arguments
 	 */
 	XASSERT_NONVOID(InstancePtr != NULL);
 
 	/*
-	 * Lookup the device configuration in the configuration table. Use this
-	 * configuration info when initializing this component.
-	 */
-	UartLiteConfigPtr = XUartLite_LookupConfig(DeviceId);
-
-	if (UartLiteConfigPtr == (XUartLite_Config *) NULL) {
-		return XST_DEVICE_NOT_FOUND;
-	}
-
-	/*
 	 * Set some default values, including setting the callback
 	 * handlers to stubs.
 	 */
@@ -136,7 +141,7 @@ XStatus XUartLite_Initialize(XUartLite *
 	InstancePtr->ReceiveBuffer.RequestedBytes = 0;
 
 	InstancePtr->IsReady = XCOMPONENT_IS_READY;
-	InstancePtr->RegBaseAddress = UartLiteConfigPtr->RegBaseAddr;
+	InstancePtr->RegBaseAddress = EffectiveAddr;
 	InstancePtr->RecvHandler = StubHandler;
 	InstancePtr->SendHandler = StubHandler;
 
@@ -424,39 +429,6 @@ static void StubHandler(void *CallBackRe
 	XASSERT_VOID_ALWAYS();
 }
 
-/****************************************************************************
-*
-* Looks up the device configuration based on the unique device ID.  The table
-* UartliteConfigTable contains the configuration info for each device in the
-* system.
-*
-* @param DeviceId is the unique device ID to match on.
-*
-* @return
-*
-* A pointer to the configuration data for the device, or NULL if no match
-* was found.
-*
-* @note
-*
-* None.
-*
-******************************************************************************/
-XUartLite_Config *XUartLite_LookupConfig(u16 DeviceId)
-{
-	XUartLite_Config *CfgPtr = NULL;
-	int i;
-
-	for (i = 0; i < XPAR_XUARTLITE_NUM_INSTANCES; i++) {
-		if (XUartLite_ConfigTable[i].DeviceId == DeviceId) {
-			CfgPtr = &XUartLite_ConfigTable[i];
-			break;
-		}
-	}
-
-	return CfgPtr;
-}
-
 /****************************************************************************/
 /**
 *
Index: linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite.h
===================================================================
--- linux-2.6.10.orig/drivers/char/xilinx_uartlite/xuartlite.h
+++ linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite.h
@@ -27,7 +27,7 @@
 *     expressly prohibited.
 *
 *
-*     (c) Copyright 2002 Xilinx Inc.
+*     (c) Copyright 2002-2005 Xilinx Inc.
 *     All rights reserved.
 *
 *
@@ -74,6 +74,25 @@
 * frame or overrun error. The driver provides statistics which allow visibility
 * into these errors.
 *
+* <b>Initialization & Configuration</b>
+*
+* The XUartLite_Config structure is used by the driver to configure itself. This
+* configuration structure is typically created by the tool-chain based on HW
+* build properties.
+*
+* To support multiple runtime loading and initialization strategies employed
+* by various operating systems, the driver instance can be initialized in one
+* of the following ways:
+*
+*   - XUartLite_Initialize(InstancePtr, DeviceId) - The driver looks up its own
+*     configuration structure created by the tool-chain based on an ID provided
+*     by the tool-chain.
+*
+*   - XUartLite_CfgInitialize(InstancePtr, CfgPtr, EffectiveAddr) - Uses a
+*     configuration structure provided by the caller. If running in a system
+*     with address translation, the provided virtual memory base address
+*     replaces the physical address present in the configuration structure.
+*
 * <b>RTOS Independence</b>
 *
 * This driver is intended to be RTOS and processor independent.  It works
@@ -93,6 +112,10 @@
 * ----- ---- -------- -----------------------------------------------
 * 1.00a ecm  08/31/01 First release
 * 1.00b jhl  02/21/02 Repartitioned the driver for smaller files
+* 1.01a jvb  12/14/05 I separated dependency on the static config table and
+*                     xparameters.h from the driver initialization by moving
+*                     _Initialize and _LookupConfig to _sinit.c. I also added
+*                     the new _CfgInitialize routine.
 * </pre>
 *
 *****************************************************************************/
@@ -100,6 +123,10 @@
 #ifndef XUARTLITE_H		/* prevent circular inclusions */
 #define XUARTLITE_H		/* by using protection macros */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /***************************** Include Files ********************************/
 
 #include "xbasic_types.h"
@@ -116,108 +143,132 @@
  * The second argument is the ByteCount which is the number of bytes that
  * actually moved from/to the buffer provided in the _Send/_Receive call.
  */
-typedef void (*XUartLite_Handler) (void *CallBackRef, unsigned int ByteCount);
+	typedef void (*XUartLite_Handler) (void *CallBackRef,
+					   unsigned int ByteCount);
 
 /**
  * Statistics for the XUartLite driver
  */
-typedef struct {
-	u32 TransmitInterrupts;	/**< Number of transmit interrupts */
-	u32 ReceiveInterrupts;	/**< Number of receive interrupts */
-	u32 CharactersTransmitted;
+	typedef struct {
+		u32 TransmitInterrupts;
+				/**< Number of transmit interrupts */
+		u32 ReceiveInterrupts;
+				/**< Number of receive interrupts */
+		u32 CharactersTransmitted;
 				/**< Number of characters transmitted */
-	u32 CharactersReceived;	/**< Number of characters received */
-	u32 ReceiveOverrunErrors;
+		u32 CharactersReceived;
+				/**< Number of characters received */
+		u32 ReceiveOverrunErrors;
 				/**< Number of receive overruns */
-	u32 ReceiveParityErrors;/**< Number of receive parity errors */
-	u32 ReceiveFramingErrors;
+		u32 ReceiveParityErrors;
+				/**< Number of receive parity errors */
+		u32 ReceiveFramingErrors;
 				/**< Number of receive framing errors */
-} XUartLite_Stats;
+	} XUartLite_Stats;
 
 /**
  * The following data type is used to manage the buffers that are handled
  * when sending and receiving data in the interrupt mode. It is intended
  * for internal use only.
  */
-typedef struct {
-	u8 *NextBytePtr;
-	unsigned int RequestedBytes;
-	unsigned int RemainingBytes;
-} XUartLite_Buffer;
+	typedef struct {
+		u8 *NextBytePtr;
+		unsigned int RequestedBytes;
+		unsigned int RemainingBytes;
+	} XUartLite_Buffer;
 
 /**
  * This typedef contains configuration information for the device.
  */
-typedef struct {
-	u16 DeviceId;	/**< Unique ID  of device */
-	u32 RegBaseAddr;/**< Register base address */
-	u32 BaudRate;	/**< Fixed baud rate */
-	u8 UseParity;	/**< Parity generator enabled when TRUE */
-	u8 ParityOdd;	/**< Parity generated is odd when TRUE, even when
+	typedef struct {
+		u16 DeviceId;
+			/**< Unique ID  of device */
+		u32 RegBaseAddr;
+			/**< Register base address */
+		u32 BaudRate;
+			/**< Fixed baud rate */
+		u8 UseParity;
+			/**< Parity generator enabled when TRUE */
+		u8 ParityOdd;
+			/**< Parity generated is odd when TRUE, even when
                                  FALSE */
-	u8 DataBits;	/**< Fixed data bits */
-} XUartLite_Config;
+		u8 DataBits;
+			/**< Fixed data bits */
+	} XUartLite_Config;
 
 /**
  * The XUartLite driver instance data. The user is required to allocate a
  * variable of this type for every UART Lite device in the system. A pointer
  * to a variable of this type is then passed to the driver API functions.
  */
-typedef struct {
-	XUartLite_Stats Stats;	/* Component Statistics */
-	u32 RegBaseAddress;	/* Base address of registers */
-	u32 IsReady;		/* Device is initialized and ready */
-
-	XUartLite_Buffer SendBuffer;
-	XUartLite_Buffer ReceiveBuffer;
-
-	XUartLite_Handler RecvHandler;
-	void *RecvCallBackRef;	/* Callback reference for recv handler */
-	XUartLite_Handler SendHandler;
-	void *SendCallBackRef;	/* Callback reference for send handler */
-} XUartLite;
+	typedef struct {
+		XUartLite_Stats Stats;	/* Component Statistics */
+		u32 RegBaseAddress;	/* Base address of registers */
+		u32 IsReady;	/* Device is initialized and ready */
+
+		XUartLite_Buffer SendBuffer;
+		XUartLite_Buffer ReceiveBuffer;
+
+		XUartLite_Handler RecvHandler;
+		void *RecvCallBackRef;	/* Callback reference for recv handler */
+		XUartLite_Handler SendHandler;
+		void *SendCallBackRef;	/* Callback reference for send handler */
+	} XUartLite;
 
 /***************** Macros (Inline Functions) Definitions ********************/
 
 /************************** Function Prototypes *****************************/
 
 /*
- * Required functions, in file xuart.c
+ * Initialization functions in xuartlite_sinit.c
  */
-XStatus XUartLite_Initialize(XUartLite * InstancePtr, u16 DeviceId);
-
-void XUartLite_ResetFifos(XUartLite * InstancePtr);
+	XStatus XUartLite_Initialize(XUartLite * InstancePtr, u16 DeviceId);
+	XUartLite_Config *XUartLite_LookupConfig(u16 DeviceId);
 
-unsigned int XUartLite_Send(XUartLite * InstancePtr, u8 * DataBufferPtr,
-			    unsigned int NumBytes);
-unsigned int XUartLite_Recv(XUartLite * InstancePtr, u8 * DataBufferPtr,
-			    unsigned int NumBytes);
+/*
+ * Required functions, in file xuart.c
+ */
+	XStatus XUartLite_CfgInitialize(XUartLite * InstancePtr,
+					XUartLite_Config * Config,
+					u32 EffectiveAddr);
+
+	void XUartLite_ResetFifos(XUartLite * InstancePtr);
+
+	unsigned int XUartLite_Send(XUartLite * InstancePtr, u8 * DataBufferPtr,
+				    unsigned int NumBytes);
+	unsigned int XUartLite_Recv(XUartLite * InstancePtr, u8 * DataBufferPtr,
+				    unsigned int NumBytes);
 
-u32 XUartLite_IsSending(XUartLite * InstancePtr);
-XUartLite_Config *XUartLite_LookupConfig(u16 DeviceId);
+	u32 XUartLite_IsSending(XUartLite * InstancePtr);
 
 /*
  * Functions for statistics, in file xuartlite_stats.c
  */
-void XUartLite_GetStats(XUartLite * InstancePtr, XUartLite_Stats * StatsPtr);
-void XUartLite_ClearStats(XUartLite * InstancePtr);
+	void XUartLite_GetStats(XUartLite * InstancePtr,
+				XUartLite_Stats * StatsPtr);
+	void XUartLite_ClearStats(XUartLite * InstancePtr);
 
 /*
  * Functions for self-test, in file xuartlite_selftest.c
  */
-XStatus XUartLite_SelfTest(XUartLite * InstancePtr);
+	XStatus XUartLite_SelfTest(XUartLite * InstancePtr);
 
 /*
  * Functions for interrupts, in file xuartlite_intr.c
  */
-void XUartLite_EnableInterrupt(XUartLite * InstancePtr);
-void XUartLite_DisableInterrupt(XUartLite * InstancePtr);
-
-void XUartLite_SetRecvHandler(XUartLite * InstancePtr,
-			      XUartLite_Handler FuncPtr, void *CallBackRef);
-void XUartLite_SetSendHandler(XUartLite * InstancePtr,
-			      XUartLite_Handler FuncPtr, void *CallBackRef);
-
-void XUartLite_InterruptHandler(XUartLite * InstancePtr);
+	void XUartLite_EnableInterrupt(XUartLite * InstancePtr);
+	void XUartLite_DisableInterrupt(XUartLite * InstancePtr);
 
+	void XUartLite_SetRecvHandler(XUartLite * InstancePtr,
+				      XUartLite_Handler FuncPtr,
+				      void *CallBackRef);
+	void XUartLite_SetSendHandler(XUartLite * InstancePtr,
+				      XUartLite_Handler FuncPtr,
+				      void *CallBackRef);
+
+	void XUartLite_InterruptHandler(XUartLite * InstancePtr);
+
+#ifdef __cplusplus
+}
+#endif
 #endif				/* end of protection macro */
Index: linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite_i.h
===================================================================
--- linux-2.6.10.orig/drivers/char/xilinx_uartlite/xuartlite_i.h
+++ linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite_i.h
@@ -60,6 +60,10 @@
 #ifndef XUARTLITE_I_H		/* prevent circular inclusions */
 #define XUARTLITE_I_H		/* by using protection macros */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /***************************** Include Files ********************************/
 
 #include "xuartlite.h"
@@ -134,11 +138,14 @@
 /************************** Variable Definitions ****************************/
 
 /* the configuration table */
-extern XUartLite_Config XUartLite_ConfigTable[];
+	extern XUartLite_Config XUartLite_ConfigTable[];
 
 /************************** Function Prototypes *****************************/
 
-unsigned int XUartLite_SendBuffer(XUartLite * InstancePtr);
-unsigned int XUartLite_ReceiveBuffer(XUartLite * InstancePtr);
+	unsigned int XUartLite_SendBuffer(XUartLite * InstancePtr);
+	unsigned int XUartLite_ReceiveBuffer(XUartLite * InstancePtr);
 
+#ifdef __cplusplus
+}
+#endif
 #endif				/* end of protection macro */
Index: linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite_l.h
===================================================================
--- linux-2.6.10.orig/drivers/char/xilinx_uartlite/xuartlite_l.h
+++ linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite_l.h
@@ -60,6 +60,10 @@
 #ifndef XUARTLITE_L_H		/* prevent circular inclusions */
 #define XUARTLITE_L_H		/* by using protection macros */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /***************************** Include Files ********************************/
 
 #include "xbasic_types.h"
@@ -249,7 +253,10 @@
 
 /************************** Function Prototypes *****************************/
 
-void XUartLite_SendByte(u32 BaseAddress, u8 Data);
-u8 XUartLite_RecvByte(u32 BaseAddress);
+	void XUartLite_SendByte(u32 BaseAddress, u8 Data);
+	u8 XUartLite_RecvByte(u32 BaseAddress);
 
+#ifdef __cplusplus
+}
+#endif
 #endif				/* end of protection macro */
Index: linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite_serial.c
===================================================================
--- linux-2.6.10.orig/drivers/char/xilinx_uartlite/xuartlite_serial.c
+++ linux-2.6.10/drivers/char/xilinx_uartlite/xuartlite_serial.c
@@ -715,7 +715,6 @@ static void xuli_flush_buffer(struct tty
 {
 	struct gs_port *port;
 	struct xs_port *pxs;
-	int pnum = FIND_PNUM(tty->driver_data);
 
 	func_enter();
 
@@ -893,8 +892,9 @@ static int __init xilinx_uartlite_init(v
 			++pxs->init_level;	/* init_level = 1 */
 
 			/* Initialize the UART */
-			if (XUartLite_Initialize(&pxs->x_uart_lite, i) !=
-			    XST_SUCCESS) {
+			if (XUartLite_CfgInitialize
+			    (&pxs->x_uart_lite, cfg,
+			     cfg->RegBaseAddr) != XST_SUCCESS) {
 				printk(KERN_ERR
 				       "%s%d: Could not initialize device.\n",
 				       DEVICE_NAME, i);
@@ -1065,8 +1065,8 @@ static __init int serial_console_setup(s
 			cfg->RegBaseAddr = pxs->saved_baseaddr;
 			return -1;
 		}
-		if (XUartLite_Initialize(&pxs->x_uart_lite, pnum) !=
-		    XST_SUCCESS) {
+		if (XUartLite_CfgInitialize
+		    (&pxs->x_uart_lite, cfg, cfg->RegBaseAddr) != XST_SUCCESS) {
 			iounmap((void *)cfg->RegBaseAddr);
 			cfg->RegBaseAddr = pxs->saved_baseaddr;
 			pxs->init_level = 0;
Index: linux-2.6.10/mvl_patches/pro-0655.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0655.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(655);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

