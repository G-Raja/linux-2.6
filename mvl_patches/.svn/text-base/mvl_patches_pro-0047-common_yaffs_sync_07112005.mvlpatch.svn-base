#! /usr/bin/env bash
# Patch: -common_yaffs_sync_07112005
# Date: Wed Dec 28 14:56:01 2005
# Source: http://www.aleph1.co.uk/yaffs/index.html
# MR: 13548
# Type: Integration
# Disposition: merged from http://www.aleph1.co.uk/yaffs/index.html
# Signed-off-by: Todd Poynor <tpoynor@mvista.com>
# Description:
#     Resync with YAFFS upstream CVS as of 07/11/2005.  Preserves or
#     updates all of Frank Rowand's fixes from common_yaffs_fix.patch
#     still needed.
# 

PATCHNUM=47
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: http://www.aleph1.co.uk/yaffs/index.html
MR: 13548
Type: Integration
Disposition: merged from http://www.aleph1.co.uk/yaffs/index.html
Signed-off-by: Todd Poynor <tpoynor@mvista.com>
Description:
    Resync with YAFFS upstream CVS as of 07/11/2005.  Preserves or
    updates all of Frank Rowand's fixes from common_yaffs_fix.patch
    still needed.

Index: linux-2.6.10/fs/Kconfig
===================================================================
--- linux-2.6.10.orig/fs/Kconfig
+++ linux-2.6.10/fs/Kconfig
@@ -1503,119 +1503,7 @@ config UFS_FS_WRITE
 	  Say Y here if you want to try writing to UFS partitions. This is
 	  experimental, so you should back up your UFS partitions beforehand.
 
-config YAFFS_FS
-	tristate "Yet Another Flash Filing System(YAFFS) file system support"
-	help
-	  YAFFS, for Yet Another Flash Filing System, is a filing system
-	  optimised for NAND Flash chips.
-
-	  To compile the YAFFS file system support as a module, choose M here:
-	  the module will be called yaffs.
-
-	  If unsure, say N.
-
-	  Further information on YAFFS is available at
-	  <http://www.aleph1.co.uk/yaffs/>.
-
-config YAFFS_MTD_ENABLED
-	bool "NAND mtd support"
-	depends on YAFFS_FS
-	help
-	  This adds the yaffs file system support for working with a NAND mtd.
-
-	  If unsure, say Y.
-
-config YAFFS_RAM_ENABLED
-	bool "yaffsram file system support"
-	depends on YAFFS_FS
-	help
-	  This adds the yaffsram file system support. Nice for testing on x86,
-	  but uses 2MB of RAM.  Don't enable for NAND-based targets.
-
-	  If unsure, say N.
-
-comment "WARNING: mtd and/or yaffsram support should be selected"
-	depends on YAFFS_FS && !YAFFS_MTD_ENABLED && !YAFFS_RAM_ENABLED
-
-config YAFFS_USE_OLD_MTD
-	bool "Old mtd support"
-	depends on YAFFS_FS && 0
-	help
-	  Enable this to use the old MTD stuff that did not have yaffs support.
-	  You can use this to get around compilation problems, but the best
-	  thing to do is to upgrade your MTD support. You will get better speed.
-
-	  If unsure, say N.
-
-config YAFFS_USE_NANDECC
-	bool "Use ECC functions of the generic MTD-NAND driver"
-	depends on YAFFS_FS
-	default y
-	help
-	  This enables the ECC functions of the generic MTD-NAND driver.
-	  This will not work if you are using the old mtd.
-
-	  NB Use NAND ECC does not work at present with yaffsram.
-
-	  If unsure, say Y.
-
-config YAFFS_ECC_WRONG_ORDER
-	bool "Use the same ecc byte order as Steven Hill's nand_ecc.c"
-	depends on YAFFS_FS
-	help
-	  This makes yaffs_ecc.c use the same ecc byte order as
-	  Steven Hill's nand_ecc.c. If not set, then you get the
-	  same ecc byte order as SmartMedia.
-
-	  If unsure, say N.
-
-config YAFFS_USE_HEADER_FILE_SIZE
-	bool "Use object header size"
-	depends on YAFFS_FS
-	help
-	  When the flash is scanned, two file sizes are constructed:
-	  * The size taken from the object header for the file.
-	  * The size figured out by scanning the data chunks.
-	  If this option is enabled, then the object header size is used,
-	  otherwise the scanned size is used.
-
-	  If unsure, say N.
-
-config YAFFS_DISABLE_CHUNK_ERASED_CHECK
-	bool "Turn off debug chunk erase check"
-	depends on YAFFS_FS
-	default y
-	help
-	  Enabling this turns off the test that chunks are erased in flash
-	  before writing to them.  This is safe, since the write verification
-	  will fail.  Suggest enabling the test (ie. say N)
-	  during development to help debug things.
-
-	  If unsure, say Y.
-
-#config YAFFS_DISABLE_WRITE_VERIFY
-#	bool "Disable write verify (DANGEROUS)"
-#	depends on YAFFS_FS && EXPERIMENTAL
-#	help
-#	  I am severely reluctant to provide this config. Disabling the
-#	  verification is not a good thing to do since NAND writes can
-#	  fail silently.  Disabling the write verification will cause your
-#	  teeth to rot, rats to eat your corn and give you split ends.
-#	  You have been warned. ie. Don't uncomment the following line.
-#
-#	  If unsure, say N.
-#
-
-config YAFFS_SHORT_NAMES_IN_RAM
-	bool "Cache short names in RAM"
-	depends on YAFFS_FS
-	default y
-	help
-	  If this config is set, then short names are stored with the
-	  yaffs_Object.  This costs an extra 16 bytes of RAM per object,
-	  but makes look-ups faster.
-
-	  If unsure, say Y.
+source "fs/yaffs/Kconfig"
 
 endmenu
 
Index: linux-2.6.10/fs/yaffs/Kconfig
===================================================================
--- /dev/null
+++ linux-2.6.10/fs/yaffs/Kconfig
@@ -0,0 +1,131 @@
+#
+# YAFFS file system configurations
+#
+config YAFFS_FS
+	tristate "Yet Another Flash Filing System(YAFFS) file system support"
+	help
+	  YAFFS, for Yet Another Flash Filing System, is a filing system
+	  optimised for NAND Flash chips.
+
+	  To compile the YAFFS file system support as a module, choose M here:
+	  the module will be called yaffs.
+
+	  If unsure, say N.
+
+	  Further information on YAFFS is available at
+	  <http://www.aleph1.co.uk/yaffs/>.
+
+config YAFFS_MTD_ENABLED
+	bool "NAND mtd support"
+	depends on YAFFS_FS
+	help
+	  This adds the yaffs file system support for working with a NAND mtd.
+
+	  If unsure, say Y.
+
+config YAFFS_RAM_ENABLED
+	bool "yaffsram file system support"
+	depends on YAFFS_FS
+	help
+	  This adds the yaffsram file system support. Nice for testing on x86,
+	  but uses 2MB of RAM.  Don't enable for NAND-based targets.
+
+	  If unsure, say N.
+
+comment "WARNING: mtd and/or yaffsram support should be selected"
+	depends on YAFFS_FS && !YAFFS_MTD_ENABLED && !YAFFS_RAM_ENABLED
+
+config YAFFS_USE_OLD_MTD
+	bool "Old mtd support"
+	depends on YAFFS_FS && 0
+	help
+	  Enable this to use the old MTD stuff that did not have yaffs support.
+	  You can use this to get around compilation problems, but the best
+	  thing to do is to upgrade your MTD support. You will get better speed.
+
+	  If unsure, say N.
+
+config YAFFS_USE_NANDECC
+	bool "Use ECC functions of the generic MTD-NAND driver"
+	depends on YAFFS_FS
+	default y
+	help
+	  This enables the ECC functions of the generic MTD-NAND driver.
+	  This will not work if you are using the old mtd.
+
+	  NB Use NAND ECC does not work at present with yaffsram.
+
+	  If unsure, say Y.
+
+config YAFFS_ECC_WRONG_ORDER
+	bool "Use the same ecc byte order as Steven Hill's nand_ecc.c"
+	depends on YAFFS_FS
+	help
+	  This makes yaffs_ecc.c use the same ecc byte order as
+	  Steven Hill's nand_ecc.c. If not set, then you get the
+	  same ecc byte order as SmartMedia.
+
+	  If unsure, say N.
+
+config YAFFS_USE_GENERIC_RW
+	bool "Use Linux file caching layer"
+	default y
+	depends on YAFFS_FS
+	help
+	  Use generic_read/generic_write for reading/writing files. This
+	  enables the use of the Linux file caching layer.
+
+	  If you disable this, then caching is disabled and file read/write
+	  is direct.
+
+	  If unsure, say Y.
+
+config YAFFS_USE_HEADER_FILE_SIZE
+	bool "Use object header size"
+	depends on YAFFS_FS
+	help
+	  When the flash is scanned, two file sizes are constructed:
+	  * The size taken from the object header for the file.
+	  * The size figured out by scanning the data chunks.
+	  If this option is enabled, then the object header size is used,
+	  otherwise the scanned size is used.
+
+	  If unsure, say N.
+
+config YAFFS_DISABLE_CHUNK_ERASED_CHECK
+	bool "Turn off debug chunk erase check"
+	depends on YAFFS_FS
+	default y
+	help
+	  Enabling this turns off the test that chunks are erased in flash
+	  before writing to them.  This is safe, since the write verification
+	  will fail.  Suggest enabling the test (ie. say N)
+	  during development to help debug things.
+
+	  If unsure, say Y.
+
+#config YAFFS_DISABLE_WRITE_VERIFY
+#	bool "Disable write verify (DANGEROUS)"
+#	depends on YAFFS_FS && EXPERIMENTAL
+#	help
+#	  I am severely reluctant to provide this config. Disabling the
+#	  verification is not a good thing to do since NAND writes can
+#	  fail silently.  Disabling the write verification will cause your
+#	  teeth to rot, rats to eat your corn and give you split ends.
+#	  You have been warned. ie. Don't uncomment the following line.
+#
+#	  If unsure, say N.
+#
+
+config YAFFS_SHORT_NAMES_IN_RAM
+	bool "Cache short names in RAM"
+	depends on YAFFS_FS
+	default y
+	help
+	  If this config is set, then short names are stored with the
+	  yaffs_Object.  This costs an extra 16 bytes of RAM per object,
+	  but makes look-ups faster.
+
+	  If unsure, say Y.
+
+ 
Index: linux-2.6.10/fs/yaffs/yaffs_fs.c
===================================================================
--- linux-2.6.10.orig/fs/yaffs/yaffs_fs.c
+++ linux-2.6.10/fs/yaffs/yaffs_fs.c
@@ -29,7 +29,7 @@
  */
 
 
-const char *yaffs_fs_c_version = "$Id: yaffs_fs.c,v 1.37 2005/01/06 23:28:34 charles Exp $";
+const char *yaffs_fs_c_version = "$Id: yaffs_fs.c,v 1.39 2005/04/24 08:54:36 charles Exp $";
 extern const char *yaffs_guts_c_version;
 
 
@@ -125,7 +125,9 @@ static void yaffs_put_super(struct super
  * -- Charles
  */
 
+#ifndef CONFIG_YAFFS_USE_GENERIC_RW
 #define CONFIG_YAFFS_USE_GENERIC_RW
+#endif
 
 #if !defined(CONFIG_YAFFS_USE_GENERIC_RW)
 static ssize_t yaffs_file_read(struct file *f, char *buf, size_t n, loff_t *pos);
@@ -676,7 +678,11 @@ static void yaffs_FillInodeFromObject(st
 		switch (obj->st_mode & S_IFMT) 
 		{
 			default: // fifo, device or socket
-				init_special_inode(inode, obj->st_mode,(dev_t)(obj->st_rdev));
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,5,0))
+                               init_special_inode(inode, obj->st_mode,old_decode_dev(obj->st_rdev));
+#else
+                                 init_special_inode(inode, obj->st_mode,(dev_t)(obj->st_rdev));
+#endif
 				break;
 			case S_IFREG:	// file		
 				inode->i_op = &yaffs_file_inode_operations;
@@ -942,7 +948,11 @@ static int yaffs_mknod(struct inode *dir
 		default:
 			// Special (socket, fifo, device...)
 			T(YAFFS_TRACE_OS,("yaffs_mknod: making special\n"));
-			obj = yaffs_MknodSpecial(parent,dentry->d_name.name,mode,current->uid, current->gid,rdev);
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,5,0))
+                        obj = yaffs_MknodSpecial(parent,dentry->d_name.name,mode,current->uid, current->gid,old_encode_dev(rdev));
+#else
+                        obj = yaffs_MknodSpecial(parent,dentry->d_name.name,mode,current->uid, current->gid,rdev);
+#endif
 			break;
 		case S_IFREG:	// file		
 			T(YAFFS_TRACE_OS,("yaffs_mknod: making file\n"));
@@ -1323,9 +1333,9 @@ static struct super_block *yaffs_interna
 		T(YAFFS_TRACE_OS,("yaffs: dev is %u.%u name is \"%s\"\n",
 		       MAJOR(sb->s_dev), MINOR(sb->s_dev),
 		       yaffs_devname(sb, bdevname_buf)));
-
 	
 
+
 #ifdef CONFIG_YAFFS_USE_CHUNK_SIZE
 	sb->s_blocksize = YAFFS_BYTES_PER_CHUNK;
 	sb->s_blocksize_bits = YAFFS_CHUNK_SIZE_SHIFT;
@@ -1363,11 +1373,12 @@ static struct super_block *yaffs_interna
 		dev->genericDevice = NULL; // Not used for RAM emulation.
 
 		nBlocks = YAFFS_RAM_EMULATION_SIZE / (YAFFS_CHUNKS_PER_BLOCK * YAFFS_BYTES_PER_CHUNK);
-		dev->startBlock = 1;  // Don't use block 0
+		dev->startBlock = 0;
 		dev->endBlock = nBlocks - 1;
 		dev->nChunksPerBlock = YAFFS_CHUNKS_PER_BLOCK;
 		dev->nBytesPerChunk = YAFFS_BYTES_PER_CHUNK;
 		dev->nReservedBlocks = 5;
+		dev->nShortOpCaches = 10; // Enable short op caching
 
 		dev->writeChunkToNAND = nandemul_WriteChunkToNAND;
 		dev->readChunkFromNAND = nandemul_ReadChunkFromNAND;
@@ -1389,8 +1400,7 @@ static struct super_block *yaffs_interna
 		struct mtd_info *mtd;
 		
 		T(YAFFS_TRACE_ALWAYS,( "yaffs: Attempting MTD mount on %u.%u, \"%s\"\n",
-		 MAJOR(sb->s_dev),MINOR(sb->s_dev),yaffs_devname(sb, bdevname_buf)));
-			
+		MAJOR(sb->s_dev),MINOR(sb->s_dev),yaffs_devname(sb, bdevname_buf)));			
 		// Check it's an mtd device.....
 		if(MAJOR(sb->s_dev) != MTD_BLOCK_MAJOR)
 		{
@@ -1466,7 +1476,7 @@ static struct super_block *yaffs_interna
 		// Set up the memory size parameters....
 		
 		nBlocks = mtd->size / (YAFFS_CHUNKS_PER_BLOCK * YAFFS_BYTES_PER_CHUNK);
-		dev->startBlock = 1;  // Don't use block 0
+		dev->startBlock = 0;
 		dev->endBlock = nBlocks - 1;
 		dev->nChunksPerBlock = YAFFS_CHUNKS_PER_BLOCK;
 		dev->nBytesPerChunk = YAFFS_BYTES_PER_CHUNK;
@@ -1563,8 +1573,6 @@ static struct file_system_type yaffs_fs_
 	.name		= "yaffs",
 	.get_sb		= yaffs_read_super,
 	.kill_sb	= kill_block_super,
-// using kill_litter_super() results in error on umount:
-//   VFS: Busy inodes after unmount. Self-destruct in 5 seconds.  Have a nice day...
 //	.kill_sb	= kill_litter_super,
 	.fs_flags	= FS_REQUIRES_DEV,
 };
@@ -1595,8 +1603,6 @@ static struct file_system_type yaffs_ram
 	.name		= "yaffsram",
 	.get_sb		= yaffs_ram_read_super,
 	.kill_sb	= kill_block_super,
-// using kill_litter_super() results in error on umount:
-//   VFS: Busy inodes after unmount. Self-destruct in 5 seconds.  Have a nice day...
 //	.kill_sb	= kill_litter_super,
 #if (LINUX_VERSION_CODE <= KERNEL_VERSION(2,5,0))
 	.fs_flags	= FS_SINGLE,
@@ -1648,6 +1654,7 @@ static char * yaffs_dump_dev(char *buf,y
 	buf +=sprintf(buf,"nUnlinkedFiles..... %d\n",dev->nUnlinkedFiles);
 	buf +=sprintf(buf,"nBackgroudDeletions %d\n",dev->nBackgroundDeletions);
 	buf +=sprintf(buf,"useNANDECC......... %d\n",dev->useNANDECC);
+	buf +=sprintf(buf,"nShortOpCaches..... %d\n",dev->nShortOpCaches);
 
 	
 	return buf;	
@@ -1780,3 +1787,4 @@ MODULE_DESCRIPTION("YAFFS - a NAND speci
 MODULE_AUTHOR("Charles Manning, Aleph One Ltd., 2002");
 MODULE_LICENSE("GPL");
 
+
Index: linux-2.6.10/fs/yaffs/yaffs_guts.c
===================================================================
--- linux-2.6.10.orig/fs/yaffs/yaffs_guts.c
+++ linux-2.6.10/fs/yaffs/yaffs_guts.c
@@ -14,30 +14,7 @@
  */
  //yaffs_guts.c
 
-const char *yaffs_guts_c_version="$Id: yaffs_guts.c,v 1.38 2005/01/06 23:28:34 charles Exp $";
-/*
- * This patch fixes:
- *
- * http://www.aleph1.co.uk/pipermail/yaffs/2005q1/000910.html
-
- From: Charles Manning <manningc2@actrix.gen.nz>
- Reply-To: manningc2@actrix.gen.nz
- To: bbosch@iphase.com
- Subject: Re: [YAFFS] re: Object (file) creation fix seems to have problems -->fixed
-
- To fix the original problem (over-zealous reuse of inode numbers causing 
- inconsistencies between VFS and YAFFS), I defered the deletion of the objects 
- in YAFFS until the VFS said that it had forgotten all out them. Part of this 
- also meant unhooking the yaffs objects from the VFS dentries and inodes so 
- that the objects would not be visible to the VFS. There are 4 "hooks" between 
- the VFS and YAFFS, but I'd only unhooked 3. This meant that the VFS was still 
- seeing a half-deleted object in some cases.
-
- To fix this, the fourth "unhook" has now been done.
-
- *
- *
- */
+const char *yaffs_guts_c_version="$Id: yaffs_guts.c,v 1.41 2005/04/24 08:54:36 charles Exp $";
 
 #include <linux/config.h>
 
@@ -92,7 +69,7 @@ static int yaffs_CountBits(__u8 x)
 
 
 // Local prototypes
-static void yaffs_CheckObjectHashSanity(yaffs_Device *dev);
+static int yaffs_CheckObjectHashSanity(yaffs_Device *dev);
 static void yaffs_LoadTagsIntoSpare(yaffs_Spare *sparePtr, yaffs_Tags *tagsPtr);
 static void yaffs_GetTagsFromSpare(yaffs_Device *dev, yaffs_Spare *sparePtr,yaffs_Tags *tagsPtr);
 static int yaffs_PutChunkIntoFile(yaffs_Object *in,int chunkInInode, int chunkInNAND, int inScan);
@@ -146,8 +123,9 @@ static void yaffs_InvalidateChunkCache(y
 
 #undef DEBUG_OBJECT_TEST
 #ifndef DEBUG_OBJECT_TEST
-static __inline__ void yaffs_CheckObjectHashSanity(yaffs_Device *dev)
+static __inline__ int yaffs_CheckObjectHashSanity(yaffs_Device *dev)
 {
+	return YAFFS_OK;
 }
 
 void __inline__ yaffs_ObjectTest(yaffs_Device *dev)
@@ -159,12 +137,12 @@ void __inline__ yaffs_ObjectTest(yaffs_D
 
 static __inline __u8 *yaffs_BlockBits(yaffs_Device *dev, int blk)
 {
-	if(blk < dev->startBlock || blk > dev->endBlock)
+	if(blk < dev->internalStartBlock || blk > dev->internalEndBlock)
 	{
 		T(YAFFS_TRACE_ERROR,(TSTR("**>> yaffs: BlockBits block %d is not valid" TENDSTR),blk));
 		YBUG();
 	}
-	return dev->chunkBits + (dev->chunkBitmapStride * (blk - dev->startBlock));
+	return dev->chunkBits + (dev->chunkBitmapStride * (blk - dev->internalStartBlock));
 }
 
 static __inline__ void yaffs_ClearChunkBits(yaffs_Device *dev,int blk)
@@ -209,12 +187,12 @@ static __inline__ int yaffs_StillSomeChu
 // Function to manipulate block info
 static  __inline__ yaffs_BlockInfo* yaffs_GetBlockInfo(yaffs_Device *dev, int blk)
 {
-	if(blk < dev->startBlock || blk > dev->endBlock)
+	if(blk < dev->internalStartBlock || blk > dev->internalEndBlock)
 	{
 		T(YAFFS_TRACE_ERROR,(TSTR("**>> yaffs: getBlockInfo block %d is not valid" TENDSTR),blk));
 		YBUG();
 	}
-	return &dev->blockInfo[blk - dev->startBlock];
+	return &dev->blockInfo[blk - dev->internalStartBlock];
 }
 
 
@@ -237,14 +215,14 @@ yaffs_Object *yaffs_LostNFound(yaffs_Dev
 
 static int yaffs_WriteChunkToNAND(struct yaffs_DeviceStruct *dev,int chunkInNAND, const __u8 *data, yaffs_Spare *spare)
 {
-	if(chunkInNAND < dev->startBlock * dev->nChunksPerBlock)
+	if(chunkInNAND < dev->internalStartBlock * dev->nChunksPerBlock)
 	{
 		T(YAFFS_TRACE_ERROR,(TSTR("**>> yaffs chunk %d is not valid" TENDSTR),chunkInNAND));
 		return YAFFS_FAIL;
 	}
 
 	dev->nPageWrites++;
-	return dev->writeChunkToNAND(dev,chunkInNAND,data,spare);
+	return dev->writeChunkToNAND(dev,chunkInNAND - dev->chunkOffset,data,spare);
 }
 
 
@@ -273,7 +251,7 @@ int yaffs_ReadChunkFromNAND(struct yaffs
 
 	if(!dev->useNANDECC)
 	{
-		retVal  = dev->readChunkFromNAND(dev,chunkInNAND,data,spare);
+		retVal  = dev->readChunkFromNAND(dev,chunkInNAND - dev->chunkOffset,data,spare);
 		if(data && doErrorCorrection)
 		{
 			// Do ECC correction
@@ -288,23 +266,23 @@ int yaffs_ReadChunkFromNAND(struct yaffs
 
 			if(eccResult1>0)
 			{
-				T(YAFFS_TRACE_ERROR, (TSTR("**>>ecc error fix performed on chunk %d:0" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR, (TSTR("**>>ecc error fix performed on chunk %d:0" TENDSTR),chunkInNAND - dev->chunkOffset));
 				dev->eccFixed++;
 			}
 			else if(eccResult1<0)
 			{
-				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:0" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:0" TENDSTR),chunkInNAND - dev->chunkOffset));
 				dev->eccUnfixed++;
 			}
 
 			if(eccResult2>0)
 			{
-				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error fix performed on chunk %d:1" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error fix performed on chunk %d:1" TENDSTR),chunkInNAND - dev->chunkOffset));
 				dev->eccFixed++;
 			}
 			else if(eccResult2<0)
 			{
-				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:1" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:1" TENDSTR),chunkInNAND - dev->chunkOffset));
 				dev->eccUnfixed++;
 			}
 
@@ -319,26 +297,26 @@ int yaffs_ReadChunkFromNAND(struct yaffs
 	{
         // Must allocate enough memory for spare+2*sizeof(int) for ecc results from device.
     	struct yaffs_NANDSpare nspare;
-		retVal  = dev->readChunkFromNAND(dev,chunkInNAND,data,(yaffs_Spare*)&nspare);
+		retVal  = dev->readChunkFromNAND(dev,chunkInNAND - dev->chunkOffset,data,(yaffs_Spare*)&nspare);
 		memcpy (spare, &nspare, sizeof(yaffs_Spare));
 		if(data && doErrorCorrection)
 		{
 			if(nspare.eccres1>0)
 			{
-				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error fix performed on chunk %d:0" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error fix performed on chunk %d:0" TENDSTR),chunkInNAND - dev->chunkOffset));
 			}
 			else if(nspare.eccres1<0)
 			{
-				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:0" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:0" TENDSTR),chunkInNAND - dev->chunkOffset));
 			}
 
 			if(nspare.eccres2>0)
 			{
-				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error fix performed on chunk %d:1" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error fix performed on chunk %d:1" TENDSTR),chunkInNAND - dev->chunkOffset));
 			}
 			else if(nspare.eccres2<0)
 			{
-				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:1" TENDSTR),chunkInNAND));
+				T(YAFFS_TRACE_ERROR,(TSTR("**>>ecc error unfixed on chunk %d:1" TENDSTR),chunkInNAND - dev->chunkOffset));
 			}
 
 			if(nspare.eccres1 || nspare.eccres2)
@@ -363,7 +341,7 @@ static int yaffs_CheckChunkErased(struct
     // Might as well always allocate the larger size for dev->useNANDECC == true;
 	static __u8 spare[sizeof(struct yaffs_NANDSpare)];	
 
-  	dev->readChunkFromNAND(dev,chunkInNAND,data,(yaffs_Spare *)spare);
+  	dev->readChunkFromNAND(dev,chunkInNAND - dev->chunkOffset,data,(yaffs_Spare *)spare);
 	
 	if(!init)
 	{
@@ -381,11 +359,10 @@ static int yaffs_CheckChunkErased(struct
 #endif
 
 
-
 int yaffs_EraseBlockInNAND(struct yaffs_DeviceStruct *dev,int blockInNAND)
 {
 	dev->nBlockErasures++;
-	return dev->eraseBlockInNAND(dev,blockInNAND);
+	return dev->eraseBlockInNAND(dev,blockInNAND - dev->blockOffset);
 }
 
 int yaffs_InitialiseNAND(struct yaffs_DeviceStruct *dev)
@@ -1868,7 +1845,7 @@ yaffs_Object *yaffs_MknodDirectory(yaffs
 
 yaffs_Object *yaffs_MknodSpecial(yaffs_Object *parent,const char *name, __u32 mode, __u32 uid, __u32 gid, __u32 rdev)
 {
-	return yaffs_MknodObject(YAFFS_OBJECT_TYPE_DIRECTORY,parent,name,mode,uid,gid,NULL,NULL,rdev);
+	return yaffs_MknodObject(YAFFS_OBJECT_TYPE_SPECIAL,parent,name,mode,uid,gid,NULL,NULL,rdev);
 }
 
 yaffs_Object *yaffs_MknodSymLink(yaffs_Object *parent,const char *name, __u32 mode, __u32 uid, __u32 gid,const char *alias)
@@ -1958,7 +1935,7 @@ int yaffs_RenameObject(yaffs_Object *old
 
 
 #ifdef DEBUG_OBJECT_TEST
-static void yaffs_CheckObjectHashSanity(yaffs_Device *dev)
+static int yaffs_CheckObjectHashSanity(yaffs_Device *dev)
 {
 	// Scan the buckets and check that the lists 
 	// have as many members as the count says there are
@@ -1982,6 +1959,8 @@ static void yaffs_CheckObjectHashSanity(
 			ok = YAFFS_FAIL;
 		}
 	}
+
+	return ok;
 }
 
 void yaffs_ObjectTest(yaffs_Device *dev)
@@ -2091,11 +2070,11 @@ static int yaffs_FindDirtiestBlock(yaffs
 	pagesInUse = (aggressive)? dev->nChunksPerBlock : YAFFS_PASSIVE_GC_CHUNKS + 1;
 	if(aggressive)
 	{
-		iterations = dev->endBlock - dev->startBlock + 1;
+		iterations = dev->internalEndBlock - dev->internalStartBlock + 1;
 	}
 	else
 	{
-		iterations = dev->endBlock - dev->startBlock + 1;
+		iterations = dev->internalEndBlock - dev->internalStartBlock + 1;
 		iterations = iterations / 16;
 		if(iterations > 200)
 		{
@@ -2106,12 +2085,12 @@ static int yaffs_FindDirtiestBlock(yaffs
 	for(i = 0; i <= iterations && pagesInUse > 0 ; i++)
 	{
 		b++;
-		if ( b < dev->startBlock || b > dev->endBlock)
+		if ( b < dev->internalStartBlock || b > dev->internalEndBlock)
 		{
-			b =  dev->startBlock;
+			b =  dev->internalStartBlock;
 		}
 
-		if(b < dev->startBlock || b > dev->endBlock)
+		if(b < dev->internalStartBlock || b > dev->internalEndBlock)
 		{
 			T(YAFFS_TRACE_ERROR,(TSTR("**>> Block %d is not valid" TENDSTR),b));
 			YBUG();
@@ -2188,12 +2167,12 @@ static int yaffs_FindBlockForAllocation(
 	
 	// Find an empty block.
 	
-	for(i = dev->startBlock; i <= dev->endBlock; i++)
+	for(i = dev->internalStartBlock; i <= dev->internalEndBlock; i++)
 	{
 		dev->allocationBlockFinder++;
-		if(dev->allocationBlockFinder <dev->startBlock || dev->allocationBlockFinder> dev->endBlock) 
+		if(dev->allocationBlockFinder <dev->internalStartBlock || dev->allocationBlockFinder> dev->internalEndBlock) 
 		{
-			dev->allocationBlockFinder = dev->startBlock;
+			dev->allocationBlockFinder = dev->internalStartBlock;
 		}
 		
 		bi = yaffs_GetBlockInfo(dev,dev->allocationBlockFinder);
@@ -3718,7 +3697,7 @@ int yaffs_ResizeFile(yaffs_Object *in, i
 			// using yaffs_DeleteChunk
 
 			chunkId = yaffs_FindAndDeleteChunkInFile(in,i,NULL);
-			if(chunkId < (dev->startBlock * 32) || chunkId >= ((dev->endBlock+1) * 32))
+			if(chunkId < (dev->internalStartBlock * 32) || chunkId >= ((dev->internalEndBlock+1) * 32))
 			{
 				//T(("Found daft chunkId %d for %d\n",chunkId,i));
 			}
@@ -4019,6 +3998,9 @@ static int yaffs_UnlinkWorker(yaffs_Obje
 			case YAFFS_OBJECT_TYPE_SYMLINK:
 				return yaffs_DeleteSymLink(obj);
 				break;
+			case YAFFS_OBJECT_TYPE_SPECIAL:
+				return yaffs_DoGenericObjectDeletion(obj);
+				break;
 			case YAFFS_OBJECT_TYPE_HARDLINK:
 			case YAFFS_OBJECT_TYPE_UNKNOWN:
 			default:
@@ -4109,7 +4091,7 @@ static int yaffs_Scan(yaffs_Device *dev)
 	
 	// Scan all the blocks...
 	
-	for(blk = dev->startBlock; blk <= dev->endBlock; blk++)
+	for(blk = dev->internalStartBlock; blk <= dev->internalEndBlock; blk++)
 	{
 		deleted = 0;
 		bi = yaffs_GetBlockInfo(dev,blk);
@@ -4741,13 +4723,13 @@ int yaffs_GutsInitialise(yaffs_Device *d
 	if(	dev->nBytesPerChunk != YAFFS_BYTES_PER_CHUNK ||	
 		dev->nChunksPerBlock < 2 ||
 		dev->nReservedBlocks < 2 ||
-		dev->startBlock <= 0 ||
+		dev->startBlock < 0 ||
 		dev->endBlock <= 0 ||
 		dev->endBlock <= (dev->startBlock + dev->nReservedBlocks)
 	  )
 	{
 		//these parameters must be set before stating yaffs
-		// Other parameters startBlock,
+		// Other parameters internalStartBlock,
 		return YAFFS_FAIL;
 	}
 
@@ -4766,8 +4748,8 @@ int yaffs_GutsInitialise(yaffs_Device *d
 	}
 
 	dev->isMounted = 1;
-	
-	if(dev->startBlock <= 0 ||
+
+	if(dev->startBlock < 0 ||
 	   (dev->endBlock - dev->startBlock) < 10)
 	{
 		T(YAFFS_TRACE_ALWAYS,(TSTR("startBlock %d or endBlock %d invalid\n" TENDSTR),
@@ -4775,15 +4757,32 @@ int yaffs_GutsInitialise(yaffs_Device *d
 		return YAFFS_FAIL;
 	}
 	
-	nBlocks = dev->endBlock - dev->startBlock + 1;
+	
+	// Do we need to add an offset to use block 0?
+	
+	dev->internalStartBlock = dev->startBlock;
+	dev->internalEndBlock = dev->endBlock;
+	dev->blockOffset = 0;
+	dev->chunkOffset = 0;
+	
+	if(dev->startBlock == 0)
+	{
+		dev->internalStartBlock++;
+		dev->internalEndBlock++;
+		dev->blockOffset++;
+		dev->chunkOffset = dev->nChunksPerBlock;		
+	}
+	
+	
+	nBlocks = dev->internalEndBlock - dev->internalStartBlock + 1;
 	
 
 		
 	// OK now calculate a few things for the device
 	// Calculate chunkGroupBits. 
-	// We need to find the next power of 2 > than endBlock
+	// We need to find the next power of 2 > than internalEndBlock
 	
-	x = dev->nChunksPerBlock * (dev->endBlock+1);
+	x = dev->nChunksPerBlock * (dev->internalEndBlock+1);
 	
 	for(bits = extraBits = 0; x > 1; bits++)
 	{
@@ -4833,6 +4832,7 @@ int yaffs_GutsInitialise(yaffs_Device *d
 	dev->eccUnfixed=0;
 	dev->tagsEccFixed=0;
 	dev->tagsEccUnfixed=0;
+	dev->nErasedBlocks=0;
 	
 	dev->localBuffer = YMALLOC(dev->nBytesPerChunk);
 	
@@ -4905,6 +4905,7 @@ void yaffs_Deinitialise(yaffs_Device *de
 		if(dev->nShortOpCaches > 0)
 			YFREE(dev->srCache);
 		YFREE(dev->localBuffer);
+		dev->isMounted = 0;
 	}
 	
 }
@@ -4953,7 +4954,7 @@ int  yaffs_GetNumberOfFreeChunks(yaffs_D
 	struct list_head *i;	
 	yaffs_Object *l;
 	
-	for(nFree = 0, b = dev->startBlock; b <= dev->endBlock; b++)
+	for(nFree = 0, b = dev->internalStartBlock; b <= dev->internalEndBlock; b++)
 	{
 		blk = yaffs_GetBlockInfo(dev,b);
 		
@@ -5060,3 +5061,4 @@ void yaffs_GutsTest(yaffs_Device *dev)
 
 
 
+
Index: linux-2.6.10/fs/yaffs/yaffs_guts.h
===================================================================
--- linux-2.6.10.orig/fs/yaffs/yaffs_guts.h
+++ linux-2.6.10/fs/yaffs/yaffs_guts.h
@@ -14,7 +14,7 @@
  *
  * Note: Only YAFFS headers are LGPL, YAFFS C code is covered by GPL.
  *
- * $Id: yaffs_guts.h,v 1.18 2004/10/20 20:12:43 charles Exp $
+ * $Id: yaffs_guts.h,v 1.19 2005/03/29 22:43:38 charles Exp $
  */
 
 #ifndef __YAFFS_GUTS_H__
@@ -162,8 +162,8 @@ typedef struct
 #ifndef CONFIG_YAFFS_NO_YAFFS2
 	__u32 sequenceNumber;	// block sequence number for yaffs2
 #endif
-	int   softDeletions:8;  // number of soft deleted pages
-    int   pagesInUse:8;		// number of pages in use
+	int   softDeletions:12; // number of soft deleted pages
+    int   pagesInUse:12;	// number of pages in use
     __u32 blockState:4; 	// One of the above block states
     __u32 needsRetiring:1;	// Data has failed on this block, need to get valid data off
     						// and retire the block.
@@ -188,7 +188,7 @@ typedef struct
 	yaffs_ObjectType type;
 
 	// Apply to everything	
-	__s32 parentObjectId;
+	__s32   parentObjectId;
 	__u16 sum__NoLongerUsed;	// checksum of name. Calc this off the name to prevent inconsistencies
 	char  name[YAFFS_MAX_NAME_LENGTH + 1];
 	char  pad[2];
@@ -399,7 +399,7 @@ struct yaffs_DeviceStruct
 {
 	// Entry parameters set up way early. Yaffs sets up the rest.
 	int   nBytesPerChunk; 	 // Should be a power of 2 >= 512
-	int	  nChunksPerBlock;	 // does not need to be a power of 2
+	int   nChunksPerBlock;	 // does not need to be a power of 2
 	int   startBlock;		 // Start block we're allowed to use
 	int   endBlock;			 // End block we're allowed to use
 	int   nReservedBlocks;	 // We want this tuneable so that we can reduce
@@ -421,6 +421,11 @@ struct yaffs_DeviceStruct
 	int (*initialiseNAND)(struct yaffs_DeviceStruct *dev);
 
 	// Runtime parameters. Set up by YAFFS.
+	int   internalStartBlock;		 // Internal version of startBlock
+	int   internalEndBlock;			 // End block we're allowed to use
+	int   blockOffset;
+	int   chunkOffset;
+	
 	
 	__u16 chunkGroupBits; // 0 for devices <= 32MB. else log2(nchunks) - 16
 	__u16 chunkGroupSize; // == 2^^chunkGroupBits
Index: linux-2.6.10/mvl_patches/pro-0047.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0047.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2005 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(47);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

