#! /usr/bin/env bash
# Patch: -kgdb_ppc64_smp_fixes
# Date: Tue Mar 21 08:31:09 2006
# Source: KGDB Upstream (http://sourceforge.net/projects/kgdb)
# MR: 14594
# Type: Defect Fix
# Disposition: backport from current KGDB CVS
# Signed-off-by: Tom Rini <trini@mvista.com>
# Description:
# 	This is a backport of the fixes from Geoff Levand to make SMP
# 	KGDB more stable on PPC64 (this includes making the
# 	ROUNDUP_DELAY much longer) along with changes from Mithlesh
# 	Thukral to use atomic_t for holding additional CPUs while in
# 	KGDB.
# 
#  arch/ppc64/kernel/kgdb.c |   13 +++++++------
#  kernel/kgdb.c            |   24 +++++++++++-------------
#  2 files changed, 18 insertions(+), 19 deletions(-)
# 

PATCHNUM=410
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: KGDB Upstream (http://sourceforge.net/projects/kgdb)
MR: 14594
Type: Defect Fix
Disposition: backport from current KGDB CVS
Signed-off-by: Tom Rini <trini@mvista.com>
Description:
	This is a backport of the fixes from Geoff Levand to make SMP
	KGDB more stable on PPC64 (this includes making the
	ROUNDUP_DELAY much longer) along with changes from Mithlesh
	Thukral to use atomic_t for holding additional CPUs while in
	KGDB.

 arch/ppc64/kernel/kgdb.c |   13 +++++++------
 kernel/kgdb.c            |   24 +++++++++++-------------
 mvl_patches/pro-0410.c   |   16 ++++++++++++++++
 3 files changed, 34 insertions(+), 19 deletions(-)

Index: linux-2.6.10/arch/ppc64/kernel/kgdb.c
===================================================================
--- linux-2.6.10.orig/arch/ppc64/kernel/kgdb.c
+++ linux-2.6.10/arch/ppc64/kernel/kgdb.c
@@ -80,17 +80,18 @@ static int computeSignal(unsigned int tt
 	return SIGHUP; /* default for things we don't know about */
 }
 
-void kgdb_call_nmi_hook(void *ignored)
+static int kgdb_call_nmi_hook(struct pt_regs *regs)
 {
-	kgdb_nmihook(smp_processor_id(), (void *)0);
+	kgdb_nmihook(smp_processor_id(), regs);
+	return 0;
 }
 
+#ifdef CONFIG_SMP
 void kgdb_roundup_cpus(unsigned long flags)
 {
-	local_irq_restore(flags);
-	smp_call_function(kgdb_call_nmi_hook, 0, 0, 0);
-	local_irq_save(flags);
+	smp_send_debugger_break(MSG_ALL_BUT_SELF);
 }
+#endif
 
 /* KGDB functions to use existing PowerPC64 hooks. */
 static int kgdb_debugger (struct pt_regs *regs)
@@ -395,7 +396,7 @@ int kgdb_arch_init (void)
 #error Both XMON and KGDB selected in .config.  Unselect one of them.
 #endif
 
-	__debugger_ipi = kgdb_not_implemented;
+	__debugger_ipi = kgdb_call_nmi_hook;
 	__debugger = kgdb_debugger;
 	__debugger_bpt = kgdb_breakpoint;
 	__debugger_sstep = kgdb_singlestep;
Index: linux-2.6.10/kernel/kgdb.c
===================================================================
--- linux-2.6.10.orig/kernel/kgdb.c
+++ linux-2.6.10/kernel/kgdb.c
@@ -63,7 +63,7 @@ extern int pid_max;
 extern int pidhash_init_done;
 
 /* How many times to count all of the waiting CPUs */
-#define ROUNDUP_WAIT		64000
+#define ROUNDUP_WAIT		1000000
 #define BUF_THREAD_ID_SIZE 16
 
 /*
@@ -90,7 +90,7 @@ struct kgdb_arch *kgdb_ops = &arch_kgdb_
 static const char hexchars[] = "0123456789abcdef";
 
 static raw_spinlock_t slavecpulocks[NR_CPUS];
-static volatile int procindebug[NR_CPUS];
+static atomic_t procindebug[NR_CPUS];
 atomic_t kgdb_setting_breakpoint;
 struct task_struct *kgdb_usethread, *kgdb_contthread;
 
@@ -691,18 +691,17 @@ static void kgdb_wait(struct pt_regs *re
 
 	local_irq_save(flags);
 	processor = smp_processor_id();
-	procindebug[processor] = 1;
 	kgdb_info[processor].debuggerinfo = regs;
 	kgdb_info[processor].task = current;
+ 	atomic_set(&procindebug[processor], 1);
 
 	/* Wait till master processor goes completely into the debugger.
 	 * FIXME: this looks racy */
-	while (!procindebug[atomic_read(&debugger_active) - 1]) {
+ 	while (!atomic_read(&procindebug[atomic_read(&debugger_active) - 1])) {
 		int i = 10;	/* an arbitrary number */
 
 		while (--i)
 			cpu_relax();
-		barrier();
 	}
 
 	/* Wait till master processor is done with debugging */
@@ -717,7 +716,7 @@ static void kgdb_wait(struct pt_regs *re
 	kgdb_info[processor].task = NULL;
 
 	/* Signal the master processor that we are done */
-	procindebug[processor] = 0;
+ 	atomic_set(&procindebug[processor], 0);
 	spin_unlock(&slavecpulocks[processor]);
 	local_irq_restore(flags);
 }
@@ -923,7 +922,7 @@ int kgdb_handle_exception(int exVector, 
 	unsigned long length, addr;
 	char *ptr;
 	unsigned long flags;
-	int i;
+	unsigned int i;
 	long threadid;
 	threadref thref;
 	struct task_struct *thread = NULL;
@@ -985,7 +984,7 @@ acquirelock:
 
 	/* spin_lock code is good enough as a barrier so we don't
 	 * need one here */
-	procindebug[smp_processor_id()] = 1;
+ 	atomic_set(&procindebug[processor], 1);
 
 	/* Wait a reasonable time for the other CPUs to be notified and
 	 * be waiting for us.  Very early on this could be imperfect
@@ -993,7 +992,7 @@ acquirelock:
 	for (i = 0; i < ROUNDUP_WAIT; i++) {
 		int cpu, num = 0;
 		for (cpu = 0; cpu < NR_CPUS; cpu++) {
-			if (procindebug[cpu])
+ 			if (atomic_read(&procindebug[cpu]))
 				num++;
 		}
 		if (num >= num_online_cpus()) {
@@ -1409,7 +1408,7 @@ acquirelock:
 
 	kgdb_info[processor].debuggerinfo = NULL;
 	kgdb_info[processor].task = NULL;
-	procindebug[smp_processor_id()] = 0;
+ 	atomic_set(&procindebug[processor], 0);
 
 	if (!debugger_step || !kgdb_contthread) {
 		for (i = 0; i < NR_CPUS; i++)
@@ -1418,12 +1417,11 @@ acquirelock:
                 * from the debugger.
 		*/
 		for (i = 0; i < NR_CPUS; i++) {
-                       while (procindebug[i]) {
+			while (atomic_read(&procindebug[i])) {
                                int j = 10;     /* an arbitrary number */
 
                                while (--j)
                                        cpu_relax();
-                               barrier();
                        }
                 }
         }
@@ -1467,7 +1465,7 @@ static struct notifier_block kgdb_module
 void kgdb_nmihook(int cpu, void *regs)
 {
 #ifdef CONFIG_SMP
-	if (!procindebug[cpu] && atomic_read(&debugger_active) != (cpu + 1))
+ 	if (!atomic_read(&procindebug[cpu]) && atomic_read(&debugger_active) != (cpu + 1))
 		kgdb_wait((struct pt_regs *)regs);
 #endif
 }
Index: linux-2.6.10/mvl_patches/pro-0410.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0410.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(410);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

