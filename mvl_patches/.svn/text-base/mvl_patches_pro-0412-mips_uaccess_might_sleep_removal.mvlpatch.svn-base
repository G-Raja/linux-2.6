#! /usr/bin/env bash
# Patch: -mips_uaccess_might_sleep_removal
# Date: Tue Mar 21 08:31:16 2006
# Source: MontaVista Software, Inc.
# MR: 16080
# Type: Integration
# Disposition: merged from linux-mips.org
# Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
# Signed-off-by: Manish Lachwani <mlachwani@mvista.com>
# Description:
# 	Remove might_sleep() from __get_user and __put_user macro since
# 	it produces BUG messages in PREEMPT_DESCTOP case.
# 	Also remove __get_user_inatomic to __get_user since it's not
# 	needed anymore.
# 
#  arch/mips/kernel/traps.c     |    4 ++--
#  arch/mips/kernel/unaligned.c |    2 +-
#  arch/mips/math-emu/dsemul.c  |    4 ++--
#  include/asm-mips/uaccess.h   |   25 -------------------------
#  4 files changed, 5 insertions(+), 30 deletions(-)
# 

PATCHNUM=412
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 16080
Type: Integration
Disposition: merged from linux-mips.org
Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
Signed-off-by: Manish Lachwani <mlachwani@mvista.com>
Description:
	Remove might_sleep() from __get_user and __put_user macro since
	it produces BUG messages in PREEMPT_DESCTOP case.
	Also remove __get_user_inatomic to __get_user since it's not
	needed anymore.

 arch/mips/kernel/traps.c     |    4 ++--
 arch/mips/kernel/unaligned.c |    2 +-
 arch/mips/math-emu/dsemul.c  |    4 ++--
 include/asm-mips/uaccess.h   |   25 -------------------------
 mvl_patches/pro-0412.c       |   16 ++++++++++++++++
 5 files changed, 21 insertions(+), 30 deletions(-)

Index: linux-2.6.10/include/asm-mips/uaccess.h
===================================================================
--- linux-2.6.10.orig/include/asm-mips/uaccess.h
+++ linux-2.6.10/include/asm-mips/uaccess.h
@@ -217,9 +217,6 @@ static inline int verify_area(int type, 
 #define __get_user(x,ptr) \
 	__get_user_nocheck((x),(ptr),sizeof(*(ptr)))
 
-#define __get_user_inatomic(x,ptr) \
-	__get_user_nocheck_inatomic((x),(ptr),sizeof(*(ptr)))
-
 struct __large_struct { unsigned long buf[100]; };
 #define __m(x) (*(struct __large_struct *)(x))
 
@@ -239,25 +236,6 @@ struct __large_struct { unsigned long bu
 	long __gu_addr;							\
 	long __gu_err = 0;						\
 									\
-	might_sleep();							\
-	__gu_addr = (long) (ptr);					\
-	switch (size) {							\
-	case 1: __get_user_asm("lb", __gu_err); break;			\
-	case 2: __get_user_asm("lh", __gu_err); break;			\
-	case 4: __get_user_asm("lw", __gu_err); break;			\
-	case 8: __GET_USER_DW(__gu_err); break;				\
-	default: __get_user_unknown(); break;				\
-	}								\
-	x = (__typeof__(*(ptr))) __gu_val;				\
-	__gu_err;							\
-})
-
-#define __get_user_nocheck_inatomic(x,ptr,size)				\
-({									\
-	__typeof(*(ptr)) __gu_val = 0;					\
-	long __gu_addr;							\
-	long __gu_err = 0;						\
-									\
 	__gu_addr = (long) (ptr);					\
 	switch (size) {							\
 	case 1: __get_user_asm("lb", __gu_err); break;			\
@@ -276,7 +254,6 @@ struct __large_struct { unsigned long bu
 	long __gu_addr;							\
 	long __gu_err;							\
 									\
-	might_sleep();							\
 	__gu_addr = (long) (ptr);					\
 	__gu_err = verify_area(VERIFY_READ, (void *) __gu_addr, size);	\
 									\
@@ -351,7 +328,6 @@ extern void __get_user_unknown(void);
 	long __pu_addr;							\
 	long __pu_err = 0;						\
 									\
-	might_sleep();							\
 	__pu_val = (x);							\
 	__pu_addr = (long) (ptr);					\
 	switch (size) {							\
@@ -370,7 +346,6 @@ extern void __get_user_unknown(void);
 	long __pu_addr;							\
 	long __pu_err;							\
 									\
-	might_sleep();							\
 	__pu_val = (x);							\
 	__pu_addr = (long) (ptr);					\
 	__pu_err = verify_area(VERIFY_WRITE, (void *) __pu_addr, size);	\
Index: linux-2.6.10/arch/mips/kernel/traps.c
===================================================================
--- linux-2.6.10.orig/arch/mips/kernel/traps.c
+++ linux-2.6.10/arch/mips/kernel/traps.c
@@ -117,7 +117,7 @@ void show_stack(struct task_struct *task
 			break;
 		}
 
-		if (__get_user_inatomic(stackdata, sp++)) {
+		if (__get_user(stackdata, sp++)) {
 			printk(" (Bad stack address)");
 			break;
 		}
@@ -174,7 +174,7 @@ void show_code(unsigned int *pc)
 
 	for(i = -3 ; i < 6 ; i++) {
 		unsigned int insn;
-		if (__get_user_inatomic(insn, pc + i)) {
+		if (__get_user(insn, pc + i)) {
 			printk(" (Bad address in epc)\n");
 			break;
 		}
Index: linux-2.6.10/arch/mips/kernel/unaligned.c
===================================================================
--- linux-2.6.10.orig/arch/mips/kernel/unaligned.c
+++ linux-2.6.10/arch/mips/kernel/unaligned.c
@@ -107,7 +107,7 @@ static inline int emulate_load_store_ins
 	/*
 	 * This load never faults.
 	 */
-	__get_user_inatomic(insn.word, (unsigned int *)pc);
+	__get_user(insn.word, (unsigned int *)pc);
 
 	switch (insn.i_format.opcode) {
 	/*
Index: linux-2.6.10/arch/mips/math-emu/dsemul.c
===================================================================
--- linux-2.6.10.orig/arch/mips/math-emu/dsemul.c
+++ linux-2.6.10/arch/mips/math-emu/dsemul.c
@@ -137,8 +137,8 @@ int do_dsemulret(struct pt_regs *xcp)
 	 *  - Is the instruction pointed to by the EPC an BADINST?
 	 *  - Is the following memory word the BD_COOKIE?
 	 */
-	err = __get_user_inatomic(insn, &fr->badinst);
-	err |= __get_user_inatomic(cookie, &fr->cookie);
+	err = __get_user(insn, &fr->badinst);
+	err |= __get_user(cookie, &fr->cookie);
 
 	if (unlikely(err || (insn != BADINST) || (cookie != BD_COOKIE))) {
 		fpuemuprivate.stats.errors++;
Index: linux-2.6.10/mvl_patches/pro-0412.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0412.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(412);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

