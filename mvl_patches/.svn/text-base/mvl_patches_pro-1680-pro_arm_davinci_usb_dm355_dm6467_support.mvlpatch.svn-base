#! /usr/bin/env bash
# Patch: -pro_arm_davinci_usb_dm355_dm6467_support
# Date: Mon Jan 21 23:06:20 2008
# Source: Texas Instruments Inc.
# MR: 26019
# Type: Enhancement
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# Add DM6467 and DM355 support for USB.  Also fix format issues
# introduced by pro_arm_davinci_mv_1_0_usb_generic_fixes_035.patch.
# 
# Patches updated
# pro_arm_davinci_4457-2-GPIO-support-user.patch
# 
# Patches obsoleted
# pro_arm_davinci_dm355-usb.patch
# pro_arm_davinci_dm355-usb-vbus-error-workaround.patch
# pro_arm_davinci_usb_hd_compile.patch
# pro_arm_davinci_usb-fixup.patch
# pro_arm_davinci_driver-usb-sync.patch
# usb_otg_update.patch
# 

PATCHNUM=1680
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 26019
Type: Enhancement
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
Add DM6467 and DM355 support for USB.  Also fix format issues
introduced by pro_arm_davinci_mv_1_0_usb_generic_fixes_035.patch.

Patches updated
pro_arm_davinci_4457-2-GPIO-support-user.patch

Patches obsoleted
pro_arm_davinci_dm355-usb.patch
pro_arm_davinci_dm355-usb-vbus-error-workaround.patch
pro_arm_davinci_usb_hd_compile.patch
pro_arm_davinci_usb-fixup.patch
pro_arm_davinci_driver-usb-sync.patch
usb_otg_update.patch

Index: linux-2.6.10/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-evm.c
@@ -39,6 +39,7 @@
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/partitions.h>
 #include <linux/serial.h>
+#include <linux/usb_musb.h>
 #include <linux/mtd/nand.h>
 #include <linux/serial_8250.h>
 #include <linux/davinci_mmc.h>
@@ -86,6 +87,51 @@ static struct platform_device serial_dev
 	},
 };
 
+static struct musb_hdrc_platform_data usb_data[] = {
+	{
+#if defined(CONFIG_USB_MUSB_OTG)
+		/* OTG requires a Mini-AB connector */
+		.mode		= MUSB_OTG,
+#elif defined(CONFIG_USB_MUSB_PERIPHERAL)
+		.mode		= MUSB_PERIPHERAL,
+#elif defined(CONFIG_USB_MUSB_HOST)
+		.mode		= MUSB_HOST,
+#endif
+		.set_vbus	= NULL,
+		/* irlml6401 switches 5V */
+		.power		= 255,           /* sustains 3.0+ Amps (!) */
+		.potpgt		= 4,            /* ~8 msec */
+		.multipoint	= 1,
+	},		/* Need Multipoint support */
+};
+
+static struct resource usb_resources[] = {
+	{
+		/* physical address */
+		.start		= DAVINCI_USB_OTG_BASE,
+		.end		= DAVINCI_USB_OTG_BASE + 0x5ff,
+		.flags		= IORESOURCE_MEM,
+	},
+	{
+		.start		= IRQ_USBINT,
+		.flags		= IORESOURCE_IRQ,
+	},
+};
+
+static u64 usb_dmamask = DMA_32BIT_MASK;
+
+static struct platform_device usb_dev = {
+	.name		= "musb_hdrc",
+	.id		= -1,
+	.dev		= {
+		.platform_data = usb_data,
+		.dma_mask = &usb_dmamask,
+		.coherent_dma_mask = DMA_32BIT_MASK,
+	},
+	.resource	= usb_resources,
+	.num_resources	= ARRAY_SIZE(usb_resources),
+};
+
 /**************************************************************************
  * Public Functions
  **************************************************************************/
@@ -274,6 +320,7 @@ static void setup_mmc(void)
 
 static struct platform_device *davinci_evm_devices[] __initdata = {
 	&serial_device,
+	&usb_dev,
 #if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
 	&nand_device,
 #endif
Index: linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-dm355-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
@@ -27,6 +27,7 @@
 #include <linux/mtd/nand.h>
 #include <linux/serial.h>
 #include <linux/serial_8250.h>
+#include <linux/usb_musb.h>
 #include <linux/davinci_mmc.h>
 #include <linux/nand_davinci.h>
 
@@ -89,6 +90,51 @@ static struct platform_device serial_dev
 		},
 };
 
+static struct musb_hdrc_platform_data usb_data[] = {
+	{
+#if defined(CONFIG_USB_MUSB_OTG)
+		/* OTG requires a Mini-AB connector */
+		.mode		= MUSB_OTG,
+#elif defined(CONFIG_USB_MUSB_PERIPHERAL)
+		.mode		= MUSB_PERIPHERAL,
+#elif defined(CONFIG_USB_MUSB_HOST)
+		.mode		= MUSB_HOST,
+#endif
+		.set_vbus	= NULL,
+		/* irlml6401 switches 5V */
+		.power		= 255,           /* sustains 3.0+ Amps (!) */
+		.potpgt		= 4,            /* ~8 msec */
+		.multipoint	= 1,
+	},		/* Need Multipoint support */
+};
+
+static struct resource usb_resources[] = {
+	{
+		/* physical address */
+		.start		= DAVINCI_USB_OTG_BASE,
+		.end		= DAVINCI_USB_OTG_BASE + 0x5ff,
+		.flags		= IORESOURCE_MEM,
+	},
+	{
+		.start		= IRQ_USBINT,
+		.flags		= IORESOURCE_IRQ,
+	},
+};
+
+static u64 usb_dmamask = DMA_32BIT_MASK;
+
+static struct platform_device usb_dev = {
+	.name	= "musb_hdrc",
+	.id	= -1,
+	.dev	= {
+		.platform_data = usb_data,
+		.dma_mask = &usb_dmamask,
+		.coherent_dma_mask = DMA_32BIT_MASK,
+	},
+	.resource = usb_resources,
+	.num_resources = ARRAY_SIZE(usb_resources),
+};
+
 /**************************************************************************
  * Public Functions
  **************************************************************************/
@@ -370,6 +416,7 @@ static void setup_mmc(void)
 static struct platform_device *dm355_evm_devices[] __initdata =
 {
 	&serial_device,
+	&usb_dev,
 #if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
 	&nand_device,
 #endif
Index: linux-2.6.10/arch/arm/mach-davinci/board-dm6467-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-dm6467-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm6467-evm.c
@@ -28,6 +28,7 @@
 #include <linux/serial.h>
 #include <linux/mtd/nand.h>
 #include <linux/serial_8250.h>
+#include <linux/usb_musb.h>
 #include <linux/nand_davinci.h>
 
 #include <asm/setup.h>
@@ -90,6 +91,55 @@ static struct platform_device serial_dev
 	},
 };
 
+static struct musb_hdrc_platform_data usb_data[] = {
+	{
+#if defined(CONFIG_USB_MUSB_OTG)
+		/* OTG requires a Mini-AB connector */
+		.mode		= MUSB_OTG,
+#elif defined(CONFIG_USB_MUSB_PERIPHERAL)
+		.mode		= MUSB_PERIPHERAL,
+#elif defined(CONFIG_USB_MUSB_HOST)
+		.mode		= MUSB_HOST,
+#endif
+		.set_vbus	= NULL,
+		/* irlml6401 switches 5V */
+		.power		= 255,           /* sustains 3.0+ Amps (!) */
+		.potpgt		= 4,            /* ~8 msec */
+		.multipoint	= 1,
+	},		/* Need Multipoint support */
+};
+
+static struct resource usb_resources[] = {
+	{
+		/* physical address */
+		.start		= DAVINCI_USB_OTG_BASE,
+		.end		= DAVINCI_USB_OTG_BASE + 0x5ff,
+		.flags		= IORESOURCE_MEM,
+	},
+	{
+		.start		= IRQ_DM646X_USBINT,
+		.flags		= IORESOURCE_IRQ,
+	},
+	{
+		.start		= IRQ_DM646X_USBDMAINT,
+		.flags		= IORESOURCE_IRQ,
+	},
+};
+
+static u64 usb_dmamask = DMA_32BIT_MASK;
+
+static struct platform_device usb_dev = {
+	.name		= "musb_hdrc",
+	.id		= -1,
+	.dev		= {
+		.platform_data = usb_data,
+		.dma_mask = &usb_dmamask,
+		.coherent_dma_mask = DMA_32BIT_MASK,
+	},
+	.resource	= usb_resources,
+	.num_resources	= ARRAY_SIZE(usb_resources),
+};
+
 /**************************************************************************
  * Public Functions
  **************************************************************************/
@@ -221,6 +271,7 @@ static struct platform_device davinci_ev
 
 static struct platform_device *davinci_evm_devices[] __initdata = {
 	&serial_device,
+	&usb_dev,
 #if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
 	&nand_device,
 #endif
Index: linux-2.6.10/drivers/usb/musb/davinci.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/davinci.c
+++ linux-2.6.10/drivers/usb/musb/davinci.c
@@ -35,20 +35,16 @@
 #include <asm/arch/hardware.h>
 #include <asm/arch/memory.h>
 #include <asm/mach-types.h>
+#include <asm/arch/gio.h>
+#include <asm/arch/cpu.h>
 #include <linux/usb.h>
 #include "../core/hcd.h"
 
 #include "musbdefs.h"
 #include "musb_host.h"
 
-#ifdef CONFIG_ARCH_DAVINCI
-
-#ifdef CONFIG_MACH_DAVINCI_EVM
 #include <asm/arch/i2c-client.h>
-#endif
-
 #include "davinci.h"
-#endif
 
 #ifdef CONFIG_USB_TI_CPPI_DMA
 #include "cppi_dma.h"
@@ -56,56 +52,20 @@
 /*
  * USB
  */
-
-static struct musb_hdrc_platform_data usb_data = {
-#if     defined(CONFIG_USB_MUSB_OTG)
-	/* OTG requires a Mini-AB connector */
-	.mode = MUSB_OTG,
-#elif   defined(CONFIG_USB_MUSB_PERIPHERAL)
-	.mode = MUSB_PERIPHERAL,
-#elif   defined(CONFIG_USB_MUSB_HOST)
-	.mode = MUSB_HOST,
-#endif
-	/* irlml6401 switches 5V */
-	.power = 255,           /* sustains 3.0+ Amps (!) */
-	.potpgt = 4,            /* ~8 msec */
-
-/* REVISIT multipoint is a _chip_ capability; not board specific */
-	.multipoint = 1,
-};
-
-static struct resource usb_resources[] = { {
-		/* physical address */
-		.start = DAVINCI_USB_OTG_BASE,
-		.end = DAVINCI_USB_OTG_BASE + 0x5ff,
-		.flags = IORESOURCE_MEM,
-	}, {
-		.start = IRQ_USBINT,
-		.flags = IORESOURCE_IRQ,
-	},
-};
-
-static u64 usb_dmamask = DMA_32BIT_MASK;
-
-struct platform_device usb_dev = {
-	.name = "musb_hdrc",
-	.id = -1,
-	.dev = {
-		.platform_data = &usb_data,
-		.dma_mask = &usb_dmamask,
-		.coherent_dma_mask = DMA_32BIT_MASK,
-	},
-	.resource = usb_resources,
-	.num_resources = ARRAY_SIZE(usb_resources),
-};
-
-
 static inline void phy_on(void)
 {
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined(CONFIG_ARCH_DAVINCI_DM355)
 	/* start the on-chip PHY and its PLL */
 	__raw_writel(USBPHY_SESNDEN | USBPHY_VBDTCTEN | USBPHY_PHYPLLON,
 		IO_ADDRESS(USBPHY_CTL_PADDR));
-
+#endif
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+	__raw_writel(USBPHY_SESNDEN | USBPHY_VBDTCTEN | USBPHY_PHYPLLON
+		| DM355_USBPHY_DATAPOL, IO_ADDRESS(USBPHY_CTL_PADDR));
+#endif
+#ifdef CONFIG_ARCH_DAVINCI_DM646x
+	__raw_writel(0, IO_ADDRESS(USBPHY_CTL_PADDR));
+#endif
 	while ((__raw_readl(IO_ADDRESS(USBPHY_CTL_PADDR))
 			& USBPHY_PHYCLKGD) == 0)
 		cpu_relax();
@@ -114,8 +74,13 @@ static inline void phy_on(void)
 static inline void phy_off(void)
 {
 	/* powerdown the on-chip PHY and its oscillator */
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined(CONFIG_ARCH_DAVINCI_DM355)
 	__raw_writel(USBPHY_OSCPDWN | USBPHY_PHYSPDWN,
-		     IO_ADDRESS(USBPHY_CTL_PADDR));
+		IO_ADDRESS(USBPHY_CTL_PADDR));
+#endif
+#ifdef CONFIG_ARCH_DAVINCI_DM646x
+	__raw_writel(USBPHY_PHYSPDWN, IO_ADDRESS(USBPHY_CTL_PADDR));
+#endif
 }
 
 void musb_platform_enable(struct musb *musb)
@@ -160,7 +125,7 @@ void musb_platform_disable(struct musb *
  * offchip DRVVBUS support and replacing MGC_OtgMachineInputs with
  * musb struct members (so e.g. vbus_state vanishes).
  */
-#if defined (CONFIG_MACH_DAVINCI_EVM)
+#if defined (CONFIG_MACH_DAVINCI_EVM) || (CONFIG_MACH_DAVINCI_HD_EVM)
 static int vbus_state = -1;
 
 /* I2C operations are always synchronous, and require a task context.
@@ -171,12 +136,18 @@ static void evm_deferred_drvvbus(void *_
 {
 	int is_on = vbus_state;
 
+#ifdef CONFIG_MACH_DAVINCI_EVM
 	davinci_i2c_expander_op(0x3a, USB_DRVVBUS, !is_on);
+#endif
+#ifdef CONFIG_MACH_DAVINCI_HD_EVM
+	davinci_i2c_expander_op(0x3a, USB_FB_DM646X, !is_on);
+#endif
+	vbus_state = is_on;
 }
 
 DECLARE_WORK(evm_vbus_work, evm_deferred_drvvbus, 0);
 
-
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
 /* VBUS SWITCHING IS BOARD-SPECIFIC */
 static void davinci_vbus_power(struct musb *musb, int is_on)
 {
@@ -190,8 +161,7 @@ static void davinci_vbus_power(struct mu
 	} else {
 		MUSB_DEV_MODE(musb);
 	}
-
-#ifdef CONFIG_MACH_DAVINCI_EVM
+#if defined (CONFIG_MACH_DAVINCI_EVM) || (CONFIG_MACH_DAVINCI_HD_EVM)
 	if (machine_is_davinci_evm()) {
 #ifdef CONFIG_USB_MUSB_OTG
 
@@ -212,6 +182,7 @@ static void davinci_vbus_power(struct mu
 #endif
 }
 #endif
+#endif
 
 static irqreturn_t davinci_interrupt(int irq, void *__hci, struct pt_regs *r)
 {
@@ -260,14 +231,17 @@ static irqreturn_t davinci_interrupt(int
 
 		/* NOTE:  this must complete poweron within 100 msec */
 		DBG(1, "drvvbus Interrupt\n");
+
+#ifndef CONFIG_ARCH_DAVINCI_DM355
 #ifdef CONFIG_USB_MUSB_OTG
 		davinci_vbus_power(musb, drvvbus);
 #elif defined(CONFIG_USB_MUSB_HDRC_HCD)
-		/* In host mode manipulate vbus based on core request but
-		 * keep the session on.
+		/* In host mode manipulate vbus based on core request
+		 * but keep the session on.
 		 */
 		davinci_vbus_power(musb, drvvbus);
 #endif
+#endif
 		drvvbus = 0;
 		retval = IRQ_HANDLED;
 	}
@@ -291,19 +265,49 @@ static irqreturn_t davinci_interrupt(int
 int __init musb_platform_init(struct musb *musb)
 {
 	void *__iomem tibase = musb->ctrl_base;
-	u32 revision;
-#ifdef CONFIG_ARCH_DAVINCI
+	u32 revision, phystatus;
+	u8 id;
+	struct platform_device *pdev = to_platform_device(musb->controller);
+	struct musb_hdrc_platform_data *plat;
 	struct clk *clkp;
+
+	if (pdev->id == -1)
+		id = 0;
+	else
+		id = pdev->id;
 	
-	clkp = clk_get (NULL, "USBCLK");
+	switch (id) {
+	case 0 :
+		clkp = clk_get (NULL, "USBCLK");
+		break;
+	default :
+		return -ENODEV;
+	}
 	if (IS_ERR(clkp))
 		return -ENODEV;
 
-	musb->clock = clkp;	
+	musb->clock = clkp;
 	clk_use (clkp);
-	if(clk_enable (clkp) != 0)
+	if (clk_enable (clkp) != 0)
 		return -ENODEV;
+
+	plat = musb->controller->platform_data;
+
+	/* overwrite the USB mode */
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
+	plat->mode = MUSB_HOST;
+
+#elif defined(CONFIG_USB_GADGET_MUSB_HDRC)
+	plat->mode = MUSB_PERIPHERAL;
+
+#elif defined(CONFIG_USB_MUSB_OTG)
+	plat->mode = MUSB_OTG;
+#else
+	dev_dbg(musb->controller, "incompatible Kconfig role setting");
+	return -EINVAL;
 #endif
+
+	musb->board_mode = plat->mode;
 	musb->pRegs += DAVINCI_BASE_OFFSET;
 
 	/* returns zero if e.g. not clocked */
@@ -314,7 +318,7 @@ int __init musb_platform_init(struct mus
 	/* note that transceiver issues make us want to charge
 	 * VBUS only when the PHY PLL is not active.
 	 */
-#ifdef CONFIG_MACH_DAVINCI_EVM
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined (CONFIG_MACH_DAVINCI_HD_EVM)
 #ifdef CONFIG_USB_MUSB_OTG
 	/* clear EMACEN to enble OTG GPIO 16 for VBus power control */
 	/* Set GPIO Direction */
@@ -323,6 +327,17 @@ int __init musb_platform_init(struct mus
 #endif
 	evm_vbus_work.data = musb;
 #endif
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+	gpio_set_direction(2, GIO_DIR_OUTPUT);
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
+	__gpio_set(2, 1);
+#else
+	__gpio_set(2, 0);
+#endif
+	 __raw_writel( __raw_readl (IO_ADDRESS(DM355_DEEPSLEEP_REG)) &
+		0xfffffff0, IO_ADDRESS (DM355_DEEPSLEEP_REG));
+#endif
+
 	/* reset the controller */
 	musb_writel(tibase, DAVINCI_USB_CTRL_REG, 0x1);
 
@@ -330,6 +345,17 @@ int __init musb_platform_init(struct mus
 	phy_on();
 
 	msleep(5);
+	phystatus = __raw_readl(IO_ADDRESS(USBPHY_CTL_PADDR));
+#ifdef CONFIG_ARCH_DAVINCI_DM646x
+#ifdef CONFIG_USB_MUSB_HDRC_HCD
+	__raw_writel(phystatus | DM646X_USBPHY_SESSION_VBUS |
+		DM646X_USBPHY_NDATAPOL, IO_ADDRESS(USBPHY_CTL_PADDR));
+#else
+	__raw_writel (phystatus | DM646X_USBPHY_SESSION_VBUS |
+		DM646X_USBPHY_NDATAPOL | DM646X_USBPHY_PERI_USBID,
+		IO_ADDRESS(USBPHY_CTL_PADDR));
+#endif
+#endif
 
 	/* NOTE:  irqs are in mixed mode, not bypass to pure-musb */
 	pr_debug("DaVinci OTG revision %08x phy %03x control %02x\n",
@@ -344,6 +370,7 @@ int __init musb_platform_init(struct mus
 int musb_platform_exit(struct musb *musb)
 {
 	phy_off();
+
 #ifdef CONFIG_MACH_DAVINCI_EVM
 #ifdef CONFIG_USB_MUSB_OTG
 	/* Set EMACEN to enable OTG GPIO 16 for Emac control */
@@ -352,9 +379,13 @@ int musb_platform_exit(struct musb *musb
 #endif
 #endif
 
+#if defined(CONFIG_MACH_DAVINCI_HD_EVM) && defined(CONFIG_USB_MUSB_HDRC_HCD)
 	davinci_vbus_power(musb, 0);
-	clk_disable (musb->clock);
-	clk_unuse (musb->clock);
+#endif
+	if (musb->clock) {
+		clk_disable (musb->clock);
+		clk_unuse (musb->clock);
+	}
 
 	return 0;
 }
Index: linux-2.6.10/drivers/usb/musb/davinci.h
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/davinci.h
+++ linux-2.6.10/drivers/usb/musb/davinci.h
@@ -15,17 +15,31 @@
  */
 
 /* Integrated highspeed/otg PHY */
-#define	USBPHY_CTL_PADDR	(DAVINCI_SYSTEM_MODULE_BASE + 0x34)
-#if defined(CONFIG_MACH_DAVINCI_EVM)
-#define	USBPHY_PHYCLKGD		(1 << 8)
-#define	USBPHY_SESNDEN		(1 << 7)	/* v(sess_end) comparator */
-#define	USBPHY_VBDTCTEN		(1 << 6)	/* v(bus) comparator */
-#define	USBPHY_PHYPLLON		(1 << 4)	/* override pll suspend */
-#define	USBPHY_CLK01SEL		(1 << 3)
-#define	USBPHY_OSCPDWN		(1 << 2)
-#define USBPHY_OTGPWDN		(1 << 1)
-#define	USBPHY_PHYSPDWN		(1 << 0)
+#define	USBPHY_CTL_PADDR		(DAVINCI_SYSTEM_MODULE_BASE + 0x34)
+#if defined(CONFIG_MACH_DAVINCI_EVM) || defined (CONFIG_ARCH_DAVINCI_DM355)
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+#define DM355_DEEPSLEEP_REG		(DAVINCI_SYSTEM_MODULE_BASE + 0x48)
+#define DM355_USBPHY_DATAPOL		(1 << 11)
 #endif
+#define	USBPHY_PHYCLKGD			(1 << 8)
+#define	USBPHY_SESNDEN			(1 << 7)   /* v(sess_end) comparator */
+#define	USBPHY_VBDTCTEN			(1 << 6)   /* v(bus) comparator */
+#define	USBPHY_PHYPLLON			(1 << 4)   /* override pll suspend */
+#define	USBPHY_CLK01SEL			(1 << 3)
+#define	USBPHY_OSCPDWN			(1 << 2)
+#define USBPHY_OTGPWDN			(1 << 1)
+#define	USBPHY_PHYSPDWN			(1 << 0)
+#endif
+
+#ifdef CONFIG_MACH_DAVINCI_HD_EVM
+#define DM646X_USBPHY_NDATAPOL		(1 << 18)
+#define DM646X_USBPHY_SESSION_VBUS	(1 << 17)
+#define DM646X_USBPHY_PERI_USBID	(1 << 16)
+#define USBPHY_PHYCLKGD			(1 << 8)
+#define USBPHY_PHYSPDWN			(1 << 0)
+
+#endif
+
 /* For now include usb OTG module registers here */
 #define DAVINCI_USB_VERSION_REG		0x00
 #define DAVINCI_USB_CTRL_REG		0x04
@@ -87,6 +101,7 @@
 #define DVEVM_GPIO45_DIR_OUT		0x00000040
 #define DAVINCI_VBUS_ON				0x00000040
 #define DAVINCI_VBUS_OFF			0x00000040
+#define MUSB_INSTANCE			1
 
 /* define structures of Rx/Tx stateRam entries */
 struct cppi_tx_stateram {
Index: linux-2.6.10/drivers/usb/musb/musb_host.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/musb_host.c
+++ linux-2.6.10/drivers/usb/musb/musb_host.c
@@ -1350,7 +1350,7 @@ irqreturn_t musb_h_ep0_irq(struct musb *
 			    MGC_M_CSR0_H_REQPKT : MGC_M_CSR0_TXPKTRDY;
 			DBG(5, "more ep0 DATA, csr %04x\n", wCsrVal);
 		} else {
-			if (usb_pipein(pUrb->pipe))	
+			if (usb_pipein(pUrb->pipe))
 				MGC_WriteCsr8(pBase, MGC_O_HDRC_NAKLIMIT0, 0,
 					      bInterval);
 
Index: linux-2.6.10/drivers/usb/musb/plat_uds.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/plat_uds.c
+++ linux-2.6.10/drivers/usb/musb/plat_uds.c
@@ -172,6 +172,10 @@ unsigned MGC_DebugLevel = MUSB_DEBUG;
 
 #define DRIVER_INFO DRIVER_DESC "v" MUSB_VERSION
 
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+#define VBUSERR_RETRY_COUNT 4
+#endif
+
 static const char longname[] = DRIVER_INFO;
 const char musb_driver_name[] = "musb_hdrc";
 
@@ -636,6 +640,17 @@ static irqreturn_t musb_stage0_irq(struc
 
 		DBG(1, "VBUS_ERROR (%02x)\n", devctl);
 
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+	pThis->vbuserr_retry--;
+
+	if (pThis->vbuserr_retry) {
+		musb_writeb (pThis->ctrl_base,
+			DAVINCI_USB_INT_SRC_CLR_REG, 0xffffffff);
+		devctl |= MGC_M_DEVCTL_HR;
+		devctl |= MGC_M_DEVCTL_SESSION;
+			musb_writeb(pBase, MGC_O_HDRC_DEVCTL, devctl);
+	}
+#endif
 /* HBG 21SEPT2006 removed as part of OTG improvements */
 //-----------------------------------------------------
 //              pThis->xceiv.state = OTG_STATE_A_IDLE;
@@ -648,6 +663,10 @@ static irqreturn_t musb_stage0_irq(struc
 
 		//musb_writeb(pBase, MGC_O_HDRC_DEVCTL, MGC_M_DEVCTL_SESSION);
 		return IRQ_HANDLED;
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+	} else {
+		pThis->vbuserr_retry = VBUSERR_RETRY_COUNT;
+#endif
 	}
 
 	if (bIntrUSB & MGC_M_INTR_CONNECT) {
@@ -1597,7 +1616,10 @@ irqreturn_t musb_interrupt(struct musb *
 	 */
 	if (musb->int_usb)
 		retval |= musb_stage0_irq(musb, musb->int_usb, devctl, power);
-
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+	else
+		musb->vbuserr_retry = VBUSERR_RETRY_COUNT;
+#endif
 	/* "stage 1" is handling endpoint irqs */
 
 	/* handle endpoint 0 first */
@@ -1727,6 +1749,9 @@ static struct musb *__init allocate_inst
 		/* busctl regs too? */
 		INIT_LIST_HEAD(&(ep->urb_list));
 		init_timer(&pThis->RootHub.Timer);
+#ifdef CONFIG_ARCH_DAVINCI_DM355
+		pThis->vbuserr_retry = VBUSERR_RETRY_COUNT;
+#endif
 #endif
 	}
 	return pThis;
@@ -1792,6 +1817,11 @@ musb_init_controller(struct device *dev,
 	int status;
 	struct musb *pThis;
 	struct musb_hdrc_platform_data *plat = dev->platform_data;
+#ifdef CONFIG_ARCH_DAVINCI_DM646x
+	struct platform_device *pdev = to_platform_device(dev);
+	int nIrq1 = platform_get_irq(pdev, 1);
+
+#endif
 
 	/* The driver might handle more features than the board; OK.
 	 * Fail when the board needs a feature that's not enabled.
@@ -1801,6 +1831,10 @@ musb_init_controller(struct device *dev,
 		dev_dbg(dev, "no platform_data?\n");
 		return -ENODEV;
 	}
+
+	/* DaVinci platforms sets the mode in musb_platform_init  */
+	/* so skip the check */
+#ifndef CONFIG_ARCH_DAVINCI
 	switch (plat->mode) {
 	case MUSB_HOST:
 #ifdef CONFIG_USB_MUSB_HDRC_HCD
@@ -1824,6 +1858,7 @@ musb_init_controller(struct device *dev,
 		dev_dbg(dev, "incompatible Kconfig role setting\n");
 		return -EINVAL;
 	}
+#endif
 
 	/* allocate */
 	pThis = allocate_instance(ctrl);
@@ -1842,6 +1877,7 @@ musb_init_controller(struct device *dev,
 	 * and activates clocks
 	 */
 	status = musb_platform_init(pThis);
+
 	if (status < 0)
 		goto fail;
 
@@ -1881,17 +1917,25 @@ musb_init_controller(struct device *dev,
 		goto fail;
 	}
 
+#ifdef CONFIG_ARCH_DAVINCI_DM646x
+	/* attach to the IRQ */
+	if (request_irq(nIrq1, pThis->isr, 0, dev->bus_id, pThis)) {
+		dev_err(dev, "request_irq %d failed!\n", nIrq1);
+		status = -ENODEV;
+		goto fail;
+	}
+#endif
 	pThis->nIrq = nIrq;
 
 	pr_info("%s: USB %s mode controller at %p using %s, IRQ %d\n",
 		musb_driver_name, ( {
-				char *s;
-				switch (pThis->board_mode) {
-				case MUSB_HOST:
-					s = "Host"; break; case MUSB_PERIPHERAL:
-					s = "Peripheral"; break; default:
-					s = "OTG"; break;}; s;}
-				), ctrl, (is_dma_capable() && pThis->pDmaController)
+			char *s;
+			switch (pThis->board_mode) {
+			case MUSB_HOST: s = "Host"; break;
+			case MUSB_PERIPHERAL: s = "Peripheral"; break;
+			default: s = "OTG"; break;
+			}; s; }
+			), ctrl, (is_dma_capable() && pThis->pDmaController)
 				? "DMA" : "PIO", pThis->nIrq) ;
 
 // FIXME:
@@ -2002,10 +2046,10 @@ musb_init_controller(struct device *dev,
 #endif
 
 		DBG(1, "%s mode, status %d, devctl %02x %c\n",
-                    "HOST", status,
-                    musb_readb(pThis->pRegs, MGC_O_HDRC_DEVCTL),
-                    (musb_readb(pThis->pRegs, MGC_O_HDRC_DEVCTL)
-                     & MGC_M_DEVCTL_BDEVICE ? 'B' : 'A'));
+			"HOST", status,
+			musb_readb(pThis->pRegs, MGC_O_HDRC_DEVCTL),
+			(musb_readb(pThis->pRegs, MGC_O_HDRC_DEVCTL)
+			& MGC_M_DEVCTL_BDEVICE ? 'B' : 'A'));
 
 #ifndef CONFIG_USB_MUSB_OTG
 		break;
@@ -2153,11 +2197,6 @@ static struct device_driver musb_driver 
 	.resume = musb_resume,
 };
 
-extern struct platform_device usb_dev;
-static void musb_release(struct device *dev)
-{
-}
-
 /*-------------------------------------------------------------------------*/
 
 static int __init musb_init(void)
@@ -2185,10 +2224,7 @@ static int __init musb_init(void)
 #elif defined(CONFIG_USB_MUSB_HDRC_HCD)
 		"[host]"
 #endif
-                " [debug=%d]\n", musb_driver_name, MGC_GetDebugLevel());
-
-	platform_device_register(&usb_dev);
-	usb_dev.dev.release = musb_release;
+		" [debug=%d]\n", musb_driver_name, MGC_GetDebugLevel());
 
 	return driver_register(&musb_driver);
 }
@@ -2206,7 +2242,6 @@ static void __exit musb_cleanup(void)
 #endif
 
 	driver_unregister(&musb_driver);
-	platform_device_unregister(&usb_dev);
 }
 module_exit(musb_cleanup);
 
@@ -2214,7 +2249,7 @@ module_exit(musb_cleanup);
 /* HBG Testing 15SEPT2006 */
 
 static int musb_app_inputs(struct file *file, const char __user * buffer,
-                           unsigned long count, void *data)
+			unsigned long count, void *data)
 {
 	u8 busReq;
 	struct musb *pThis = data;
Index: linux-2.6.10/drivers/usb/musb/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/Kconfig
+++ linux-2.6.10/drivers/usb/musb/Kconfig
@@ -81,7 +81,7 @@ config USB_MUSB_PERIPHERAL
 	  (With a "Mini-AB" connector, you should enable USB OTG.)
 
 config USB_MUSB_OTG
-	depends on USB && USB_GADGET && EXPERIMENTAL
+	depends on USB && USB_GADGET && EXPERIMENTAL && !ARCH_DAVINCI_DM646x
 	bool "Both host and peripheral:  USB OTG (On The Go) Device"
 	select USB_GADGET_MUSB_HDRC
 	select USB_OTG
Index: linux-2.6.10/drivers/usb/musb/g_ep0.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/g_ep0.c
+++ linux-2.6.10/drivers/usb/musb/g_ep0.c
@@ -263,41 +263,36 @@ __releases(pThis->Lock) __acquires(pThis
 				break;
 			case USB_RECIP_INTERFACE:
 				break;
-			case USB_RECIP_ENDPOINT:{
-					const u8 bEnd =
-					    le16_to_cpu(pControlRequest->
-							wIndex) & 0x0f;
-					struct musb_ep *pEnd;
-
-					if (bEnd == 0
-					    || bEnd >= MUSB_C_NUM_EPS
-					    || le16_to_cpu(pControlRequest->
-							   wValue)
-					    != USB_ENDPOINT_HALT)
-						break;
+			case USB_RECIP_ENDPOINT: {
+				const u8 bEnd =
+				   le16_to_cpu(pControlRequest->wIndex) & 0x0f;
+				struct musb_ep *pEnd;
+
+				if (bEnd == 0
+				    || bEnd >= MUSB_C_NUM_EPS
+				    || le16_to_cpu(pControlRequest->wValue)
+				    != USB_ENDPOINT_HALT)
+					break;
 
-					if (le16_to_cpu(pControlRequest->wIndex)
-					    & USB_DIR_IN)
-						pEnd =
-						    &pThis->aLocalEnd[bEnd * 2 -1].
-						    ep_in;
-					else
-						pEnd =
-						    &pThis->aLocalEnd[bEnd * 2].
-						    ep_out;
-					if (!pEnd->desc)
-						break;
+				if (le16_to_cpu(pControlRequest->wIndex)
+				    & USB_DIR_IN)
+					pEnd =
+					   &pThis->aLocalEnd[bEnd * 2 -1].ep_in;
+				else
+					pEnd =
+					    &pThis->aLocalEnd[bEnd * 2].ep_out;
+				if (!pEnd->desc)
+					break;
 
-					/* REVISIT do it directly, no locking games */
-					spin_unlock(&pThis->Lock);
-					musb_gadget_set_halt(&pEnd->end_point,
-							     0);
-					spin_lock(&pThis->Lock);
-
-					/* select ep0 again */
-					MGC_SelectEnd(pBase, 0);
-					handled = 1;
-				}
+				/* REVISIT do it directly, no locking games */
+				spin_unlock(&pThis->Lock);
+				musb_gadget_set_halt(&pEnd->end_point, 0);
+				spin_lock(&pThis->Lock);
+
+				/* select ep0 again */
+				MGC_SelectEnd(pBase, 0);
+				handled = 1;
+			}
 				break;
 			default:
 				/* class, vendor, etc ... delegate */
@@ -397,42 +392,37 @@ __releases(pThis->Lock) __acquires(pThis
 			case USB_RECIP_INTERFACE:
 				break;
 
-			case USB_RECIP_ENDPOINT:{
-					const u8 bEnd =
-					    (u8) le16_to_cpu(pControlRequest->
-							     wIndex) & 0x0f;
-					struct musb_ep *pEnd;
-
-					if (bEnd == 0
-					    || bEnd >= MUSB_C_NUM_EPS
-					    || le16_to_cpu(pControlRequest->
-							   wValue)
-					    != USB_ENDPOINT_HALT)
-						break;
+			case USB_RECIP_ENDPOINT: {
+				const u8 bEnd = (u8)
+				   le16_to_cpu(pControlRequest->wIndex) & 0x0f;
+				struct musb_ep *pEnd;
+
+				if (bEnd == 0
+				    || bEnd >= MUSB_C_NUM_EPS
+				    || le16_to_cpu(pControlRequest->wValue)
+				    != USB_ENDPOINT_HALT)
+					break;
 
-					if (le16_to_cpu(pControlRequest->wIndex)
+				if (le16_to_cpu(pControlRequest->wIndex)
 					    & USB_DIR_IN)
-						pEnd =
-						    &pThis->aLocalEnd[bEnd * 2 -1].
-						    ep_in;
-					else
-						pEnd =
-						    &pThis->aLocalEnd[bEnd * 2].
-						    ep_out;
-					if (!pEnd->desc)
-						break;
+					pEnd =
+					   &pThis->aLocalEnd[bEnd * 2 -1].ep_in;
+				else
+					pEnd =
+					   &pThis->aLocalEnd[bEnd * 2].ep_out;
+				if (!pEnd->desc)
+					break;
 
-					/* REVISIT do it directly, no locking games */
-					spin_unlock(&pThis->Lock);
-					musb_gadget_set_halt(&pEnd->end_point,
-							     1);
-					spin_lock(&pThis->Lock);
-
-					/* select ep0 again */
-					MGC_SelectEnd(pBase, 0);
-					handled = 1;
-				}
+				/* REVISIT do it directly, no locking games */
+				spin_unlock(&pThis->Lock);
+				musb_gadget_set_halt(&pEnd->end_point, 1);
+				spin_lock(&pThis->Lock);
+
+				/* select ep0 again */
+				MGC_SelectEnd(pBase, 0);
+				handled = 1;
 				break;
+			}
 			default:
 				/* class, vendor, etc ... delegate */
 				handled = 0;
Index: linux-2.6.10/drivers/usb/musb/musb_gadget.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/musb_gadget.c
+++ linux-2.6.10/drivers/usb/musb/musb_gadget.c
@@ -470,17 +470,25 @@ static void rxstate(struct musb *pThis, 
 
 	/* update the endpoint busy/free status */
 	pEnd->busy = 1;
+	if (wCsrVal & MGC_M_RXCSR_RXPKTRDY)
+		wCount = MGC_ReadCsr16(pBase, MGC_O_HDRC_RXCOUNT, bEnd);
 
 #ifdef  CONFIG_USB_TI_CPPI_DMA
 	if (req->dma) {
 		struct dma_controller *c = pThis->pDmaController;
 		struct dma_channel *channel = pEnd->dma;
 
-		/* NOTE:  CPPI won't actually stop advancing the DMA
-		 * queue after short packet transfers, so this is almost
-		 * always going to run as IRQ-per-packet DMA so that
-		 * faults will be handled correctly.
-		 */
+#ifdef CONFIG_ARCH_DAVINCI
+		if ((wCsrVal & MGC_M_RXCSR_RXPKTRDY) && (wCount == 0)) {
+			wCsrVal |= MGC_M_RXCSR_P_WZC_BITS;
+			wCsrVal &= ~(MGC_M_RXCSR_RXPKTRDY |
+					MGC_M_RXCSR_P_OVERRUN);
+			MGC_WriteCsr16(pBase, MGC_O_HDRC_RXCSR, bEnd, wCsrVal);
+			pRequest->actual = 0;
+			goto done;
+		}
+#endif
+
 		if (c->pfDmaProgramChannel(channel,
 					   pEnd->wPacketSize,
 					   !pRequest->short_not_ok,
@@ -492,8 +500,14 @@ static void rxstate(struct musb *pThis, 
 			 * the cppi engine will be ready to take it as soon
 			 * as DMA is enabled
 			 */
+#ifdef CONFIG_ARCH_DAVINCI
+			wCsrVal &=
+			    ~(MGC_M_RXCSR_AUTOCLEAR | MGC_M_RXCSR_DMAMODE
+				| MGC_M_RXCSR_P_OVERRUN);
+#else
 			wCsrVal &=
 			    ~(MGC_M_RXCSR_AUTOCLEAR | MGC_M_RXCSR_DMAMODE);
+#endif
 			wCsrVal |= MGC_M_RXCSR_DMAENAB | MGC_M_RXCSR_P_WZC_BITS;
 			MGC_WriteCsr16(pBase, MGC_O_HDRC_RXCSR, bEnd, wCsrVal);
 			return;
@@ -502,7 +516,6 @@ static void rxstate(struct musb *pThis, 
 #endif
 
 	if (wCsrVal & MGC_M_RXCSR_RXPKTRDY) {
-		wCount = MGC_ReadCsr16(pBase, MGC_O_HDRC_RXCOUNT, bEnd);
 		if (pRequest->actual < pRequest->length) {
 #ifdef CONFIG_USB_INVENTRA_DMA
 			if (is_dma_capable() && pEnd->dma) {
@@ -579,7 +592,7 @@ static void rxstate(struct musb *pThis, 
 			MGC_WriteCsr16(pBase, MGC_O_HDRC_RXCSR, bEnd, wCsrVal);
 		}
 	}
-
+done:
 	/* reach the end or short packet detected */
 	if (pRequest->actual == pRequest->length || wCount < pEnd->wPacketSize)
 		musb_g_giveback(pEnd, pRequest, 0);
@@ -642,6 +655,27 @@ void musb_g_rx(struct musb *pThis, u8 bE
 	}
 
 	if (dma_channel_status(dma) == MGC_DMA_STATUS_BUSY) {
+#ifdef CONFIG_ARCH_DAVINCI
+		u32 count;
+
+		/* Resolve DMA race in handling zero byte packet */
+		count = MGC_ReadCsr16(pBase, MGC_O_HDRC_RXCOUNT, bEnd);
+		if ((wCsrVal & MGC_M_RXCSR_RXPKTRDY) && (count == 0)) {
+			dma->bStatus = MGC_DMA_STATUS_CORE_ABORT;
+			pThis->pDmaController->pfDmaAbortChannel(dma);
+			pRequest->actual = 0;
+			musb_g_giveback(pEnd, pRequest, 0);
+			pRequest = next_request(pEnd);
+			if (!pRequest)
+				goto done;
+
+			/* don't start more i/o till the stall clears */
+			MGC_SelectEnd(pBase, bEnd);
+			wCsrVal = MGC_ReadCsr16(pBase, MGC_O_HDRC_RXCSR, bEnd);
+			if (!(wCsrVal & MGC_M_RXCSR_P_SENDSTALL))
+				rxstate(pThis, to_musb_request(pRequest));
+		}
+#endif
 		/* "should not happen"; likely RXPKTRDY pending for DMA */
 		DBG(4, "%s busy, csr %04x\n", pEnd->end_point.name, wCsrVal);
 		goto done;
@@ -874,7 +908,9 @@ static int musb_gadget_disable(struct us
 
 	/* abort all pending DMA and requests */
 	nuke(pEnd, -ESHUTDOWN);
+	spin_unlock (&(pThis->Lock));
 	musb_gadget_fifo_flush(ep);
+	spin_lock (&(pThis->Lock));
 
 	spin_unlock_irqrestore(&(pThis->Lock), flags);
 
Index: linux-2.6.10/drivers/usb/musb/cppi_dma.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/cppi_dma.c
+++ linux-2.6.10/drivers/usb/musb/cppi_dma.c
@@ -851,15 +851,15 @@ static int cppi_rx_scan(struct cppi *cpp
 
 	cppi_dump_rx(6, rx, "/K");
 
-	if (abort)
-	{
-		count = musb_readl(rx->pController->musb->ctrl_base, 
+	if (abort) {
+		count = musb_readl(rx->pController->musb->ctrl_base,
 				DAVINCI_RXCPPI_BUFCNT0_REG + (rx->chNo * 4));
 		safe2ack = musb_readl(CAST & state->completionPtr, 0);
 
 		if ((last == NULL) || (safe2ack == last->dma)) {
 			if (last == NULL)
 				last = rx->activeQueueHead;
+
 			goto free;
 		}
 	}
@@ -924,9 +924,9 @@ static int cppi_rx_scan(struct cppi *cpp
 		} while (!completed);
 	} while (musb_readl(CAST & state->completionPtr, 0) != safe2ack);
 
-	if (is_host_active(rx->pController->musb) && (!abort) 
-		&& (rx->autoReq == 0) && ((!completed) || 
-		(completed && (rx->reqcomplete == 0) && 
+	if (is_host_active(rx->pController->musb) && (!abort)
+		&& (rx->autoReq == 0) && ((!completed) ||
+		(completed && (rx->reqcomplete == 0) &&
 		(rx->actualLen != rx->transferSize)))) {
 
 		csr = MGC_ReadCsr16(rx->pController->pCoreBase,
@@ -938,7 +938,7 @@ static int cppi_rx_scan(struct cppi *cpp
 
 	rx->lastHwBDProcessed = last;
 	musb_writel(CAST & state->completionPtr, 0, safe2ack);
-free: 
+free:
 	if (completed || abort) {
 
 		/* Flush BD's not consumed */
Index: linux-2.6.10/drivers/usb/musb/musbdefs.h
===================================================================
--- linux-2.6.10.orig/drivers/usb/musb/musbdefs.h
+++ linux-2.6.10/drivers/usb/musb/musbdefs.h
@@ -509,7 +509,7 @@ struct musb {
 	struct usb_gadget_driver *pGadgetDriver;	/* its driver */
 #endif
 
-#ifdef CONFIG_ARCH_DAVINCI_DM355
+#ifdef CONFIG_ARCH_DAVINCI
 	u16	vbuserr_retry;
 #endif
 
Index: linux-2.6.10/mvl_patches/pro-1680.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1680.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1680);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

