#! /usr/bin/env bash
# Patch: -ppc_booke_wdt_namespace_cleanup.patch
# Date: Thu Apr 20 12:19:12 2006
# MR: 17471
# [PATCH] ppc32: Cleaned up global namespace of Book-E watchdog variables
#     
# Renamed global variables used to convey if the watchdog is enabled and
# periodicity of the timer and moved the declarations into a header for these
# variables
#     
# Signed-off-by: Matt McClintock <msm@freescale.com>
# Signed-off-by: Kumar Gala <kumar.gala@freescale.com>
# Signed-off-by: Andrew Morton <akpm@osdl.org>
# Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 
# commit b0531b9b3299f3066b1db78f1693edabbba08b5c
# tree 1f4d3cb62eca4c12b95b4896357514dfa854acb7
# parent 638861d54eec6b04a88d5d8df8b790d87de80b8d
# author Kumar Gala <galak@freescale.com> Sat, 03 Sep 2005 15:55:38 -0700
# committer Linus Torvalds <torvalds@evo.osdl.org> Mon, 05 Sep 2005 00:05:56 -0700
# 

PATCHNUM=453
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 17471
[PATCH] ppc32: Cleaned up global namespace of Book-E watchdog variables
    
Renamed global variables used to convey if the watchdog is enabled and
periodicity of the timer and moved the declarations into a header for these
variables
    
Signed-off-by: Matt McClintock <msm@freescale.com>
Signed-off-by: Kumar Gala <kumar.gala@freescale.com>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit b0531b9b3299f3066b1db78f1693edabbba08b5c
tree 1f4d3cb62eca4c12b95b4896357514dfa854acb7
parent 638861d54eec6b04a88d5d8df8b790d87de80b8d
author Kumar Gala <galak@freescale.com> Sat, 03 Sep 2005 15:55:38 -0700
committer Linus Torvalds <torvalds@evo.osdl.org> Mon, 05 Sep 2005 00:05:56 -0700

 arch/ppc/kernel/setup.c           |    8 ++------
 drivers/char/watchdog/Kconfig     |    3 +++
 drivers/char/watchdog/booke_wdt.c |   23 ++++++++++++-----------
 include/asm-ppc/system.h          |    4 ++++
 mvl_patches/pro-0453.c            |   16 ++++++++++++++++
 5 files changed, 37 insertions(+), 17 deletions(-)

Index: linux-2.6.10/arch/ppc/kernel/setup.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/kernel/setup.c
+++ linux-2.6.10/arch/ppc/kernel/setup.c
@@ -628,10 +628,8 @@ machine_init(unsigned long r3, unsigned 
 /* Checks wdt=x and wdt_period=xx command-line option */
 int __init early_parse_wdt(char *p)
 {
-	extern u32 wdt_enable;
-
 	if (p && strncmp(p, "0", 1) != 0)
-	       wdt_enable = 1;
+	       booke_wdt_enabled = 1;
 
 	return 0;
 }
@@ -639,10 +637,8 @@ early_param("wdt", early_parse_wdt);
 
 int __init early_parse_wdt_period (char *p)
 {
-	extern u32 wdt_period;
-
 	if (p)
-		wdt_period = simple_strtoul(p, NULL, 0);
+		booke_wdt_period = simple_strtoul(p, NULL, 0);
 
 	return 0;
 }
Index: linux-2.6.10/drivers/char/watchdog/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/char/watchdog/Kconfig
+++ linux-2.6.10/drivers/char/watchdog/Kconfig
@@ -349,6 +349,9 @@ config 8xx_WDT
 config BOOKE_WDT
 	tristate "PowerPC Book-E Watchdog Timer"
 	depends on WATCHDOG && (BOOKE || 4xx)
+	---help---
+	  Please see Documentation/watchdog/watchdog-api.txt for
+	  more information.
 
 # MIPS Architecture
 
Index: linux-2.6.10/drivers/char/watchdog/booke_wdt.c
===================================================================
--- linux-2.6.10.orig/drivers/char/watchdog/booke_wdt.c
+++ linux-2.6.10/drivers/char/watchdog/booke_wdt.c
@@ -23,6 +23,7 @@
 
 #include <asm/reg_booke.h>
 #include <asm/uaccess.h>
+#include <asm/system.h>
 
 /* If the kernel parameter wdt_enable=1, the watchdog will be enabled at boot.
  * Also, the wdt_period sets the watchdog timer period timeout.
@@ -38,8 +39,8 @@
 #define WDT_PERIOD_DEFAULT 4	/* Refer to the PPC40x and PPC4xx manuals */
 #endif				/* for timing information */
 
-u32 wdt_enable = 0;
-u32 wdt_period = WDT_PERIOD_DEFAULT;
+u32 booke_wdt_enabled = 0;
+u32 booke_wdt_period = WDT_PERIOD_DEFAULT;
 
 #ifdef	CONFIG_FSL_BOOKE
 #define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
@@ -55,7 +56,7 @@ static __inline__ void booke_wdt_enable(
 	u32 val;
 
 	val = mfspr(SPRN_TCR);
-	val |= (TCR_WIE|TCR_WRC(WRC_CHIP)|WDTP(wdt_period));
+	val |= (TCR_WIE|TCR_WRC(WRC_CHIP)|WDTP(booke_wdt_period));
 
 	mtspr(SPRN_TCR, val);
 }
@@ -108,12 +109,12 @@ static int booke_wdt_ioctl (struct inode
 		booke_wdt_ping();
 		return 0;
 	case WDIOC_SETTIMEOUT:
-		if (get_user(wdt_period, (u32 *) arg))
+		if (get_user(booke_wdt_period, (u32 *) arg))
 			return -EFAULT;
-		mtspr(SPRN_TCR, (mfspr(SPRN_TCR)&~WDTP(0))|WDTP(wdt_period));
+		mtspr(SPRN_TCR, (mfspr(SPRN_TCR)&~WDTP(0))|WDTP(booke_wdt_period));
 		return 0;
 	case WDIOC_GETTIMEOUT:
-		return put_user(wdt_period, (u32 *) arg);
+		return put_user(booke_wdt_period, (u32 *) arg);
 	case WDIOC_SETOPTIONS:
 		if (get_user(tmp, (u32 *) arg))
 			return -EINVAL;
@@ -134,11 +135,11 @@ static int booke_wdt_ioctl (struct inode
  */
 static int booke_wdt_open (struct inode *inode, struct file *file)
 {
-	if (wdt_enable == 0) {
-		wdt_enable = 1;
+	if (booke_wdt_enabled == 0) {
+		booke_wdt_enabled = 1;
 		booke_wdt_enable();
 		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",
-				wdt_period);
+				booke_wdt_period);
 	}
 
 	return 0;
@@ -180,9 +181,9 @@ static int __init booke_wdt_init(void)
 		return ret;
 	}
 
-	if (wdt_enable == 1) {
+	if (booke_wdt_enabled == 1) {
 		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",
-				wdt_period);
+				booke_wdt_period);
 		booke_wdt_enable();
 	}
 
Index: linux-2.6.10/include/asm-ppc/system.h
===================================================================
--- linux-2.6.10.orig/include/asm-ppc/system.h
+++ linux-2.6.10/include/asm-ppc/system.h
@@ -87,6 +87,10 @@ extern void *cacheable_memcpy(void *, co
 extern int do_page_fault(struct pt_regs *, unsigned long, unsigned long);
 extern void bad_page_fault(struct pt_regs *, unsigned long, int);
 extern void die(const char *, struct pt_regs *, long);
+#ifdef CONFIG_BOOKE_WDT
+extern u32 booke_wdt_enabled;
+extern u32 booke_wdt_period;
+#endif /* CONFIG_BOOKE_WDT */
 
 struct device_node;
 extern void note_scsi_host(struct device_node *, void *);
Index: linux-2.6.10/mvl_patches/pro-0453.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0453.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(453);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

