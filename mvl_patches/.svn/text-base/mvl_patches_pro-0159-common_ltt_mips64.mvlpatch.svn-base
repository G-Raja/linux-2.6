#! /usr/bin/env bash
# Patch: -common_ltt_mips64
# Date: Wed Dec 28 14:59:49 2005
# Source: MontaVista Software, Inc.
# MR: 14105
# Type: Enhancement
# Disposition: needs submitting to listserv.shafik.org/pipermail/ltt-dev
# Signed-off-by: Yuri Frolov <yfrolov@ru.mvista.com>
# Description:
# 	LTT port for MIPS64 architecture.
# 

PATCHNUM=159
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 14105
Type: Enhancement
Disposition: needs submitting to listserv.shafik.org/pipermail/ltt-dev
Signed-off-by: Yuri Frolov <yfrolov@ru.mvista.com>
Description:
	LTT port for MIPS64 architecture.

Index: linux-2.6.10/arch/mips/kernel/linux32.c
===================================================================
--- linux-2.6.10.orig/arch/mips/kernel/linux32.c
+++ linux-2.6.10/arch/mips/kernel/linux32.c
@@ -37,6 +37,7 @@
 #include <linux/security.h>
 #include <linux/compat.h>
 #include <linux/vfs.h>
+#include <linux/ltt-events.h>
 
 #include <net/sock.h>
 #include <net/scm.h>
@@ -1074,6 +1075,8 @@ sys32_ipc (u32 call, int first, int seco
 	version = call >> 16; /* hack for backward compatibility */
 	call &= 0xffff;
 
+	ltt_ev_ipc(LTT_EV_IPC_CALL, call, first);
+
 	switch (call) {
 	case SEMOP:
 		/* struct sembuf is the same on 32 and 64bit :)) */
Index: linux-2.6.10/arch/mips/kernel/scall64-64.S
===================================================================
--- linux-2.6.10.orig/arch/mips/kernel/scall64-64.S
+++ linux-2.6.10/arch/mips/kernel/scall64-64.S
@@ -52,6 +52,22 @@ NESTED(handle_sys64, PT_SIZE, sp)
 					# syscall routine
 
 	sd	a3, PT_R26(sp)		# save a3 for syscall restarting
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_entry_trace_active
+	bne	t0, t1, n64_no_syscall_entry_trace
+	sd	t2, PT_R1(sp)
+	move	a0, sp
+	jal	trace_real_syscall_entry
+	ld	t2, PT_R1(sp)
+	ld	a0, PT_R4(sp)           # Restore argument registers
+	ld	a1, PT_R5(sp)
+	ld	a2, PT_R6(sp)
+	ld	a3, PT_R7(sp)
+	ld	a4, PT_R8(sp)
+	ld	a5, PT_R9(sp)
+n64_no_syscall_entry_trace:
+#endif
 
 	li	t1, _TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT
 	LONG_L	t0, TI_FLAGS($28)	# syscall tracing enabled?
@@ -69,6 +85,13 @@ NESTED(handle_sys64, PT_SIZE, sp)
 	sd	v0, PT_R0(sp)		# set flag for syscall
 					# restarting
 1:	sd	v0, PT_R2(sp)		# result
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_exit_trace_active
+	bne	t0, t1, n64_no_syscall_exit_trace1
+	jal	trace_real_syscall_exit
+n64_no_syscall_exit_trace1:
+#endif
 
 n64_syscall_exit:
 	local_irq_disable		# make sure need_resched and
@@ -109,6 +132,13 @@ syscall_trace_entry:
 	dnegu	v0			# error
 	sd	v0, PT_R0(sp)		# set flag for syscall restarting
 1:	sd	v0, PT_R2(sp)		# result
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_exit_trace_active
+	bne	t0, t1, n64_no_syscall_exit_trace2
+	jal	trace_real_syscall_exit
+n64_no_syscall_exit_trace2:
+#endif
 
 	j	syscall_exit
 
Index: linux-2.6.10/arch/mips/kernel/scall64-n32.S
===================================================================
--- linux-2.6.10.orig/arch/mips/kernel/scall64-n32.S
+++ linux-2.6.10/arch/mips/kernel/scall64-n32.S
@@ -51,7 +51,22 @@ NESTED(handle_sysn32, PT_SIZE, sp)
 	ld	t2, (sysn32_call_table - (__NR_N32_Linux * 8))(t0)
 
 	sd	a3, PT_R26(sp)		# save a3 for syscall restarting
-
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_entry_trace_active
+	bne	t0, t1, n32_no_syscall_entry_trace
+	sd	t2, PT_R1(sp)
+	move	a0, sp
+	jal	trace_real_syscall32_entry
+	ld	t2, PT_R1(sp)
+	ld	a0, PT_R4(sp)           # Restore argument registers
+	ld	a1, PT_R5(sp)
+	ld	a2, PT_R6(sp)
+	ld	a3, PT_R7(sp)
+	ld	a4, PT_R8(sp)
+	ld	a5, PT_R9(sp)
+n32_no_syscall_entry_trace:
+#endif
 	li	t1, _TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT
 	LONG_L	t0, TI_FLAGS($28)	# syscall tracing enabled?
 	and	t0, t1, t0
@@ -67,6 +82,13 @@ NESTED(handle_sysn32, PT_SIZE, sp)
 	dnegu	v0			# error
 	sd	v0, PT_R0(sp)		# set flag for syscall restarting
 1:	sd	v0, PT_R2(sp)		# result
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_exit_trace_active
+	bne	t0, t1, n32_no_syscall_exit_trace1
+	jal	trace_real_syscall_exit
+n32_no_syscall_exit_trace1:
+#endif
 
 	local_irq_disable		# make sure need_resched and
 					# signals dont change between
@@ -106,6 +128,13 @@ n32_syscall_trace_entry:
 	dnegu	v0			# error
 	sd	v0, PT_R0(sp)		# set flag for syscall restarting
 1:	sd	v0, PT_R2(sp)		# result
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_exit_trace_active
+	bne	t0, t1, n32_no_syscall_exit_trace2
+	jal	trace_real_syscall_exit
+n32_no_syscall_exit_trace2:
+#endif
 
 	j	syscall_exit
 
Index: linux-2.6.10/arch/mips/kernel/scall64-o32.S
===================================================================
--- linux-2.6.10.orig/arch/mips/kernel/scall64-o32.S
+++ linux-2.6.10/arch/mips/kernel/scall64-o32.S
@@ -80,6 +80,29 @@ NESTED(handle_sys, PT_SIZE, sp)
 	PTR	4b, bad_stack
 	.previous
 
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_entry_trace_active
+	bne	t0, t1, o32_no_syscall_entry_trace
+	sd	a4, PT_R8(sp)           # Save argument registers
+	sd	a5, PT_R9(sp)
+	sd	a6, PT_R10(sp)
+	sd	a7, PT_R11(sp)          # For indirect syscalls
+	sd	t2, PT_R1(sp)
+	move	a0, sp
+	jal	trace_real_syscall32_entry
+	ld	t2, PT_R1(sp)
+	ld	a0, PT_R4(sp)           # Restore argument registers
+	ld	a1, PT_R5(sp)
+	ld	a2, PT_R6(sp)
+	ld	a3, PT_R7(sp)
+	ld	a4, PT_R8(sp)
+	ld	a5, PT_R9(sp)
+	ld	a6, PT_R10(sp)
+	ld	a7, PT_R11(sp)          # For indirect syscalls
+o32_no_syscall_entry_trace:
+#endif
+
 	li	t1, _TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT
 	LONG_L	t0, TI_FLAGS($28)	# syscall tracing enabled?
 	and	t0, t1, t0
@@ -95,6 +118,13 @@ NESTED(handle_sys, PT_SIZE, sp)
 	dnegu	v0			# error
 	sd	v0, PT_R0(sp)		# flag for syscall restarting
 1:	sd	v0, PT_R2(sp)		# result
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_exit_trace_active
+	bne	t0, t1, o32_no_syscall_exit_trace1
+	jal	trace_real_syscall_exit
+o32_no_syscall_exit_trace1:
+#endif
 
 o32_syscall_exit:
 	local_irq_disable		# make need_resched and
@@ -142,6 +172,13 @@ trace_a_syscall:
 	dnegu	v0			# error
 	sd	v0, PT_R0(sp)		# set flag for syscall restarting
 1:	sd	v0, PT_R2(sp)		# result
+#ifdef CONFIG_LTT
+	li	t1, 1
+	lwu	t0, syscall_exit_trace_active
+	bne	t0, t1, o32_no_syscall_exit_trace2
+	jal	trace_real_syscall_exit
+o32_no_syscall_exit_trace2:
+#endif
 
 	j	syscall_exit
 
Index: linux-2.6.10/arch/mips/kernel/traps.c
===================================================================
--- linux-2.6.10.orig/arch/mips/kernel/traps.c
+++ linux-2.6.10/arch/mips/kernel/traps.c
@@ -1110,70 +1110,133 @@ void __init trap_init(void)
 	flush_icache_range(CAC_BASE, CAC_BASE + 0x400);
 }
 
-#if (CONFIG_LTT)
-asmlinkage void trace_real_syscall_entry(struct pt_regs * regs)
+#ifdef CONFIG_LTT
+
+#if defined(CONFIG_MIPS32_O32) || defined(CONFIG_MIPS32_N32)
+asmlinkage void trace_real_syscall32_entry(struct pt_regs *regs)
 {
-	unsigned long       addr;
-	int                 depth = 0;
-	unsigned long       end_code;
-	unsigned long       lower_bound;
-	int                 seek_depth;
-	unsigned long       *stack;
-	unsigned long       start_code;
-	unsigned long       *start_stack;
-	ltt_syscall_entry trace_syscall_event;
-	unsigned long       upper_bound;
-	int                 use_bounds;
-	int                 use_depth;
+	int			use_depth, use_bounds, seek_depth, depth;
+	unsigned int		*stack, *start_stack, addr32;
+	unsigned long		addr, lower_bound, upper_bound;
+	ltt_syscall_entry	trace_syscall_event;
+
+	/* Set the syscall ID */
+	trace_syscall_event.syscall_id = (uint16_t)regs->regs[2];
+
+	/* Set the address in any case */
+	trace_syscall_event.address = regs->cp0_epc;
+
+	/* Get the trace configuration */
+	if(ltt_get_trace_config(&use_depth,
+				&use_bounds,
+				&seek_depth,
+				(void*) &lower_bound,
+				(void*) &upper_bound) < 0)
+		goto trace_syscall_end;
+
+	if (!(use_depth == 1 || use_bounds == 1))
+		goto trace_syscall_end;
 
 	/*
-	 * With the 16-bit syscall_id, all three 64-bit kernel ABIs can at last
-	 * be correctly traced (this also enables tracing syscalls for other OS
-	 * like SVR4, IRIX5, BSD43)
+	 * Start at the top of the stack (bottom address since stacks
+	 * grow downward)
 	 */
-	trace_syscall_event.syscall_id = regs->regs[2];
+	stack = (unsigned int *)regs->regs[29];
+	start_stack = (unsigned int *)current->mm->start_stack;
 
-	trace_syscall_event.address  = regs->cp0_epc;
+	/*
+	 * Keep on going until we reach the end of the process' stack
+	 * limit (wherever it may be)
+	 */
+	depth = 0;
+	while (stack <= start_stack && !get_user(addr32, stack)) {
+		addr = addr32;
+		/* Does this LOOK LIKE an address in the program */
+		if ((addr > current->mm->start_code) &&
+		    (addr < current->mm->end_code)) {
+			/* Does this address fit the description */
+			if (((use_depth == 1) && (depth == seek_depth)) ||
+		            ((use_bounds == 1) && (addr > lower_bound) &&
+			    (addr < upper_bound))) {
+				/* Set the address */
+				trace_syscall_event.address = addr;
+				/* We're done */
+				goto trace_syscall_end;
+			} else
+				/* We're one depth more */
+				depth++;
+		}
+		/* Go on to the next address */
+		stack++;
+	}
+
+trace_syscall_end:
+	/* Trace the event */
+	ltt_log_event(LTT_EV_SYSCALL_ENTRY, &trace_syscall_event);
+}
+#endif /* CONFIG_MIPS32_O32 || CONFIG_MIPS32_N32 */
+
+asmlinkage void trace_real_syscall_entry(struct pt_regs *regs)
+{
+	int			use_depth, use_bounds, seek_depth, depth;
+	unsigned long		addr, lower_bound, upper_bound;
+	unsigned long		*stack, *start_stack;
+	ltt_syscall_entry	trace_syscall_event;
+
+	/* Set the syscall ID */
+	trace_syscall_event.syscall_id = (uint16_t)regs->regs[2];
+
+	/* Set the address in any case */
+	trace_syscall_event.address = regs->cp0_epc;
 
 	if (!user_mode(regs))
 		goto trace_syscall_end;
 
-	if (ltt_get_trace_config(&use_depth,
-				 &use_bounds,
-				 &seek_depth,
-				 (void*)&lower_bound,
-				 (void*)&upper_bound) < 0)
+	/* Get the trace configuration */
+	if(ltt_get_trace_config(&use_depth,
+				&use_bounds,
+				&seek_depth,
+				(void*) &lower_bound,
+				(void*) &upper_bound) < 0)
+		goto trace_syscall_end;
+
+	if (!(use_depth == 1 || use_bounds == 1))
 		goto trace_syscall_end;
 
-	/* Heuristic that might work:
-	 * (BUT DOESN'T WORK for any of the cases I tested...) zzz
-	 * Search through stack until a value is found that is within the
-	 * range start_code .. end_code.  (This is looking for a return
-	 * pointer to where a shared library was called from.)  If a stack
-	 * variable contains a valid code address then an incorrect
-	 * result will be generated.
+	/*
+	 * Start at the top of the stack (bottom address since stacks
+	 * grow downward)
 	 */
-	if ((use_depth == 1) || (use_bounds == 1)) {
-		stack       = (unsigned long*) regs->regs[29];
-		end_code    = current->mm->end_code;
-		start_code  = current->mm->start_code;
-		start_stack = (unsigned long *)current->mm->start_stack;
-
-		while ((stack <= start_stack) && (!__get_user(addr, stack))) {
-			if ((addr > start_code) && (addr < end_code)) {
-				if (((use_depth  == 1) && (depth == seek_depth)) ||
-				    ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {
-					trace_syscall_event.address = addr;
-					goto trace_syscall_end;
-				} else {
-					depth++;
-				}
-			}
-		stack++;
+	stack = (unsigned long *)regs->regs[29];
+	start_stack = (unsigned long *)current->mm->start_stack;
+
+	/*
+	 * Keep on going until we reach the end of the process' stack
+	 * limit (wherever it may be)
+	 */
+	depth = 0;
+	while (stack <= start_stack &&  !get_user(addr, stack)) {
+		/* Does this LOOK LIKE an address in the program */
+		if ((addr > current->mm->start_code) &&
+		    (addr < current->mm->end_code)) {
+			/* Does this address fit the description */
+			if (((use_depth == 1) && (depth == seek_depth)) ||
+		            ((use_bounds == 1) && (addr > lower_bound) &&
+			    (addr < upper_bound))) {
+				/* Set the address */
+				trace_syscall_event.address = addr;
+				/* We're done */
+				goto trace_syscall_end;
+			} else
+				/* We're one depth more */
+				depth++;
 		}
+		/* Go on to the next address */
+		stack++;
 	}
 
 trace_syscall_end:
+	/* Trace the event */
 	ltt_log_event(LTT_EV_SYSCALL_ENTRY, &trace_syscall_event);
 }
 
@@ -1182,4 +1245,4 @@ asmlinkage void trace_real_syscall_exit(
         ltt_log_event(LTT_EV_SYSCALL_EXIT, NULL);
 }
 
-#endif /* (CONFIG_LTT) */
+#endif /* CONFIG_LTT */
Index: linux-2.6.10/include/asm-mips/ltt.h
===================================================================
--- linux-2.6.10.orig/include/asm-mips/ltt.h
+++ linux-2.6.10/include/asm-mips/ltt.h
@@ -6,10 +6,19 @@
  * MIPS definitions for tracing system
  */
 
+#include <linux/config.h>
 #include <linux/ltt-events.h>
 
+#ifdef CONFIG_MIPS64
+/* Current arch type */
+#define LTT_ARCH_TYPE LTT_ARCH_TYPE_MIPS64
+
+/* Current variant type */
+#define LTT_ARCH_VARIANT LTT_ARCH_VARIANT_NONE
+#else
 /* Current arch type */
 #define LTT_ARCH_TYPE LTT_ARCH_TYPE_MIPS
 
 /* Current variant type */
 #define LTT_ARCH_VARIANT LTT_ARCH_VARIANT_NONE
+#endif /* CONFIG_MIPS64 */
Index: linux-2.6.10/include/linux/ltt-core.h
===================================================================
--- linux-2.6.10.orig/include/linux/ltt-core.h
+++ linux-2.6.10/include/linux/ltt-core.h
@@ -75,6 +75,7 @@
 #define LTT_ARCH_TYPE_ARM		6
 /* #define LTT_ARCH_TYPE_X8664		7 - not implemented yet */
 #define LTT_ARCH_TYPE_PPC64		8
+#define LTT_ARCH_TYPE_MIPS64		9
 
 /* Standard definitions for variants */
 #define LTT_ARCH_VARIANT_NONE		0 /* Main architecture implementation */
Index: linux-2.6.10/mvl_patches/pro-0159.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0159.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2005 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(159);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

