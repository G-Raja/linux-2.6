#! /usr/bin/env bash
# Patch: -USB_Storage_allow_disconnect_to_complete_faster
# Date: Thu Jan 17 11:06:47 2008
# MR: 24467
# 
# From db265e3e3906ea9913dd5401d7df9b516f4414c6 Mon Sep 17 00:00:00 2001
# From: Matthew Dharm <mdharm-usb@one-eyed-alien.net>
# Date: Wed, 23 Mar 2005 23:13:36 -0800
# Subject: [PATCH] [PATCH] USB Storage: allow disconnect to complete faster
# 
# This patch started life as as476 from Alan Stern.  It has been rediffed
# against the tip, tho that was a few days ago.
# 
# This patch makes the disconnect() routine not wait for the control and
# scanning threads to exit.  This may not seem important now, but it will
# become important later: We would end up with a deadlock if disconnect()
# (which is called with the device locked) was waiting for the control
# thread to exit, while the control thread was waiting to lock the device so
# it could do an autosuspend.
# 
# It's necessary to make sure that the host and us_data structures aren't
# deallocated before the control and scanning threads are through with them.
# This is done by calling scsi_host_get and scsi_host_put at the start and
# end of each thread, before signalling that the threads are running.  Since
# the probe() and disconnect() routines cannot run concurrently (guaranteed
# to us by the USB core), this method will guarantee the structures are not
# deallocated too soon.
# 
# While there's nothing wrong with leaving the threads alive after
# disconnect() returns, there would be a real problem if the threads were
# still alive when usb_stor_exit returned!  So now usb_stor_exit has to wait
# to make sure all the threads have died.  Apparently the only safe way for
# one thread to signal another while exiting is to use complete_and_exit,
# which we've been doing.  So the patch adds a new driver-wide struct
# completion, named threads_gone, and each thread signals it while exiting.
# usb_stor_exit must call wait_for_completion the appropriate number of
# times, and that number is stored in a new counter named total_threads.
# 
# 
# Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
# Signed-off-by: Matthew Dharm <mdharm-usb@one-eyed-alien.net>
# Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
# 

PATCHNUM=1583
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 24467

From db265e3e3906ea9913dd5401d7df9b516f4414c6 Mon Sep 17 00:00:00 2001
From: Matthew Dharm <mdharm-usb@one-eyed-alien.net>
Date: Wed, 23 Mar 2005 23:13:36 -0800
Subject: [PATCH] [PATCH] USB Storage: allow disconnect to complete faster

This patch started life as as476 from Alan Stern.  It has been rediffed
against the tip, tho that was a few days ago.

This patch makes the disconnect() routine not wait for the control and
scanning threads to exit.  This may not seem important now, but it will
become important later: We would end up with a deadlock if disconnect()
(which is called with the device locked) was waiting for the control
thread to exit, while the control thread was waiting to lock the device so
it could do an autosuspend.

It's necessary to make sure that the host and us_data structures aren't
deallocated before the control and scanning threads are through with them.
This is done by calling scsi_host_get and scsi_host_put at the start and
end of each thread, before signalling that the threads are running.  Since
the probe() and disconnect() routines cannot run concurrently (guaranteed
to us by the USB core), this method will guarantee the structures are not
deallocated too soon.

While there's nothing wrong with leaving the threads alive after
disconnect() returns, there would be a real problem if the threads were
still alive when usb_stor_exit returned!  So now usb_stor_exit has to wait
to make sure all the threads have died.  Apparently the only safe way for
one thread to signal another while exiting is to use complete_and_exit,
which we've been doing.  So the patch adds a new driver-wide struct
completion, named threads_gone, and each thread signals it while exiting.
usb_stor_exit must call wait_for_completion the appropriate number of
times, and that number is stored in a new counter named total_threads.


Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
Signed-off-by: Matthew Dharm <mdharm-usb@one-eyed-alien.net>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Index: linux-2.6.10/drivers/usb/storage/usb.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/storage/usb.c
+++ linux-2.6.10/drivers/usb/storage/usb.c
@@ -102,6 +102,13 @@ module_param(delay_use, uint, S_IRUGO | 
 MODULE_PARM_DESC(delay_use, "seconds to delay before using a new device");
 
 
+/* These are used to make sure the module doesn't unload before all the
+ * threads have exited.
+ */
+static atomic_t total_threads = ATOMIC_INIT(0);
+static DECLARE_COMPLETION(threads_gone);
+
+
 static int storage_probe(struct usb_interface *iface,
 			 const struct usb_device_id *id);
 
@@ -289,11 +296,13 @@ static int usb_stor_control_thread(void 
 	 * so get rid of all our resources.
 	 */
 	daemonize("usb-storage");
-
 	current->flags |= PF_NOFREEZE;
-
 	unlock_kernel();
 
+	/* acquire a reference to the host, so it won't be deallocated
+	 * until we're ready to exit */
+	scsi_host_get(host);
+
 	/* signal that we've started the thread */
 	complete(&(us->notify));
 
@@ -397,6 +406,8 @@ SkipForAbort:
 		up(&(us->dev_semaphore));
 	} /* for (;;) */
 
+	scsi_host_put(host);
+
 	/* notify the exit routine that we're actually exiting now 
 	 *
 	 * complete()/wait_for_completion() is similar to up()/down(),
@@ -411,7 +422,7 @@ SkipForAbort:
 	 * This is important in preemption kernels, which transfer the flow
 	 * of execution immediately upon a complete().
 	 */
-	complete_and_exit(&(us->notify), 0);
+	complete_and_exit(&threads_gone, 0);
 }	
 
 /***********************************************************************
@@ -783,6 +794,7 @@ static int usb_stor_acquire_resources(st
 		return p;
 	}
 	us->pid = p;
+	atomic_inc(&total_threads);
 
 	/* Wait for the thread to start */
 	wait_for_completion(&(us->notify));
@@ -843,6 +855,13 @@ static int usb_stor_scan_thread(void * _
 	daemonize("usb-stor-scan");
 	unlock_kernel();
 
+	/* Acquire a reference to the host, so it won't be deallocated
+	 * until we're ready to exit */
+	scsi_host_get(us_to_host(us));
+
+	/* Signal that we've started the thread */
+	complete(&(us->notify));
+
 	printk(KERN_DEBUG
 		"usb-storage: device found at %d\n", us->pusb_dev->devnum);
 
@@ -864,9 +883,12 @@ retry:
 	if (!test_bit(US_FLIDX_DISCONNECTING, &us->flags)) {
 		scsi_scan_host(us_to_host(us));
 		printk(KERN_DEBUG "usb-storage: device scan complete\n");
+
+		/* Should we unbind if no devices were detected? */
 	}
 
-	complete_and_exit(&us->scsi_scan_done, 0);
+	scsi_host_put(us_to_host(us));
+	complete_and_exit(&threads_gone, 0);
 }
 
 
@@ -967,6 +989,10 @@ static int storage_probe(struct usb_inte
 		scsi_remove_host(host);
 		goto BadDevice;
 	}
+	atomic_inc(&total_threads);
+
+	/* Wait for the thread to start */
+	wait_for_completion(&(us->notify));
 
 	return 0;
 
@@ -993,10 +1019,8 @@ static void storage_disconnect(struct us
 	usb_stor_stop_transport(us);
 	wake_up(&us->dev_reset_wait);
 
-	/* Interrupt the SCSI-device-scanning thread's time delay, and
-	 * wait for the thread to finish */
+	/* Interrupt the SCSI-device-scanning thread's time delay */
 	wake_up(&us->scsi_scan_wait);
-	wait_for_completion(&us->scsi_scan_done);
 
 	/* Wait for the current command to finish, then remove the host */
 	down(&us->dev_semaphore);
@@ -1039,6 +1063,16 @@ static void __exit usb_stor_exit(void)
 	 */
 	US_DEBUGP("-- calling usb_deregister()\n");
 	usb_deregister(&usb_storage_driver) ;
+
+	/* Don't return until all of our control and scanning threads
+	 * have exited.  Since each thread signals threads_gone as its
+	 * last act, we have to call wait_for_completion the right number
+	 * of times.
+	 */
+	while (atomic_read(&total_threads) > 0) {
+		wait_for_completion(&threads_gone);
+		atomic_dec(&total_threads);
+	}
 }
 
 module_init(usb_stor_init);
Index: linux-2.6.10/mvl_patches/pro-1583.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1583.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1583);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

