#! /usr/bin/env bash
# Patch: -common_i386_x86_64_Fix_SMP_NMI_watchdog_race
# Date: Fri Nov  3 21:26:48 2006
# MR: 20149
# [PATCH] i386/x86-64: Fix SMP NMI watchdog race
# 
# Fix SMP race in NMI watchdog on i386/x86-64
# 
# Fix a long standing SMP Setup race in the NMI watchdog.  The watchdog would
# tick from very early and check if all CPUs increase their timer interrupts.
# For that it would check the cpu_online_map.  Now if a CPU took too long to
# boot the watchdog would trigger prematurely because the CPU didn't increase
# its timer count yet.
# 
# Fix is to check cpu_callin_map instead of cpu_online_map because the first is
# only set when a CPU started its timer interrupt.
# 
# I fixed it on i386 and x86-64.
# 
# Description of the problem from Manpreet Singh. Thanks.
# 
# Cc: <manpreet@fabric7.com>
# Signed-off-by: Andrew Morton <akpm@osdl.org>
# Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 
# commit 2a66bc5adb9d2b72b07307aa7b927db6d4cd6369
# tree e561548e83859389449ea96045d26b0971f7b051
# parent 421f4e4ae3a5c0d430ebb3580c086ce8f87a6161
# author Andi Kleen <ak@suse.de> Thu, 20 Jan 2005 15:59:10 -0800
# committer Linus Torvalds <torvalds@ppc970.osdl.org> Thu, 20 Jan 2005 15:59:10 -0800
# 
#  arch/i386/kernel/nmi.c       |    6 +++++-
#  arch/i386/kernel/smpboot.c   |    2 +-
#  arch/x86_64/kernel/nmi.c     |    6 +++++-
#  arch/x86_64/kernel/smpboot.c |    2 +-
#  include/asm-i386/smp.h       |    1 +
#  include/asm-x86_64/smp.h     |    1 +
#  6 files changed, 14 insertions(+), 4 deletions(-)
# 

PATCHNUM=959
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 20149
[PATCH] i386/x86-64: Fix SMP NMI watchdog race

Fix SMP race in NMI watchdog on i386/x86-64

Fix a long standing SMP Setup race in the NMI watchdog.  The watchdog would
tick from very early and check if all CPUs increase their timer interrupts.
For that it would check the cpu_online_map.  Now if a CPU took too long to
boot the watchdog would trigger prematurely because the CPU didn't increase
its timer count yet.

Fix is to check cpu_callin_map instead of cpu_online_map because the first is
only set when a CPU started its timer interrupt.

I fixed it on i386 and x86-64.

Description of the problem from Manpreet Singh. Thanks.

Cc: <manpreet@fabric7.com>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 2a66bc5adb9d2b72b07307aa7b927db6d4cd6369
tree e561548e83859389449ea96045d26b0971f7b051
parent 421f4e4ae3a5c0d430ebb3580c086ce8f87a6161
author Andi Kleen <ak@suse.de> Thu, 20 Jan 2005 15:59:10 -0800
committer Linus Torvalds <torvalds@ppc970.osdl.org> Thu, 20 Jan 2005 15:59:10 -0800

 arch/i386/kernel/nmi.c       |    6 +++++-
 arch/i386/kernel/smpboot.c   |    2 +-
 arch/x86_64/kernel/nmi.c     |    6 +++++-
 arch/x86_64/kernel/smpboot.c |    2 +-
 include/asm-i386/smp.h       |    1 +
 include/asm-x86_64/smp.h     |    1 +
 mvl_patches/pro-0959.c       |   16 ++++++++++++++++
 7 files changed, 30 insertions(+), 4 deletions(-)

diff --git a/arch/i386/kernel/nmi.c b/arch/i386/kernel/nmi.c
index c9dcd1f..0d2d59e 100644

Index: linux-2.6.10/arch/i386/kernel/nmi.c
===================================================================
--- linux-2.6.10.orig/arch/i386/kernel/nmi.c
+++ linux-2.6.10/arch/i386/kernel/nmi.c
@@ -117,8 +117,12 @@ int __init check_nmi_watchdog (void)
 	/* FIXME: Only boot CPU is online at this stage.  Check CPUs
            as they come up. */
 	for (cpu = 0; cpu < NR_CPUS; cpu++) {
-		if (!cpu_online(cpu))
+#ifdef CONFIG_SMP
+		/* Check cpu_callin_map here because that is set
+		   after the timer is started. */
+		if (!cpu_isset(cpu, cpu_callin_map))
 			continue;
+#endif
 		if (nmi_count(cpu) - prev_nmi_count[cpu] <= 5) {
 			printk("CPU#%d: NMI appears to be stuck!\n", cpu);
 			nmi_active = 0;
Index: linux-2.6.10/arch/i386/kernel/smpboot.c
===================================================================
--- linux-2.6.10.orig/arch/i386/kernel/smpboot.c
+++ linux-2.6.10/arch/i386/kernel/smpboot.c
@@ -66,7 +66,7 @@ int phys_proc_id[NR_CPUS]; /* Package ID
 /* bitmap of online cpus */
 cpumask_t cpu_online_map;
 
-static cpumask_t cpu_callin_map;
+cpumask_t cpu_callin_map;
 cpumask_t cpu_callout_map;
 static cpumask_t smp_commenced_mask;
 
Index: linux-2.6.10/arch/x86_64/kernel/nmi.c
===================================================================
--- linux-2.6.10.orig/arch/x86_64/kernel/nmi.c
+++ linux-2.6.10/arch/x86_64/kernel/nmi.c
@@ -130,8 +130,12 @@ int __init check_nmi_watchdog (void)
 	mdelay((10*1000)/nmi_hz); // wait 10 ticks
 
 	for (cpu = 0; cpu < NR_CPUS; cpu++) {
-		if (!cpu_online(cpu))
+#ifdef CONFIG_SMP
+		/* Check cpu_callin_map here because that is set
+		   after the timer is started. */
+		if (!cpu_isset(cpu, cpu_callin_map))
 			continue;
+#endif
 		if (cpu_pda[cpu].__nmi_count - counts[cpu] <= 5) {
 			printk("CPU#%d: NMI appears to be stuck (%d)!\n", 
 			       cpu,
Index: linux-2.6.10/arch/x86_64/kernel/smpboot.c
===================================================================
--- linux-2.6.10.orig/arch/x86_64/kernel/smpboot.c
+++ linux-2.6.10/arch/x86_64/kernel/smpboot.c
@@ -62,7 +62,7 @@ u8 phys_proc_id[NR_CPUS] = { [0 ... NR_C
 /* Bitmask of currently online CPUs */
 cpumask_t cpu_online_map;
 
-static cpumask_t cpu_callin_map;
+cpumask_t cpu_callin_map;
 cpumask_t cpu_callout_map;
 static cpumask_t smp_commenced_mask;
 
Index: linux-2.6.10/include/asm-i386/smp.h
===================================================================
--- linux-2.6.10.orig/include/asm-i386/smp.h
+++ linux-2.6.10/include/asm-i386/smp.h
@@ -53,6 +53,7 @@ extern u8 x86_cpu_to_apicid[];
 #define __smp_processor_id() (current_thread_info()->cpu)
 
 extern cpumask_t cpu_callout_map;
+extern cpumask_t cpu_callin_map;
 #define cpu_possible_map cpu_callout_map
 
 /* We don't mark CPUs online until __cpu_up(), so we need another measure */
Index: linux-2.6.10/include/asm-x86_64/smp.h
===================================================================
--- linux-2.6.10.orig/include/asm-x86_64/smp.h
+++ linux-2.6.10/include/asm-x86_64/smp.h
@@ -59,6 +59,7 @@ extern u8 phys_proc_id[NR_CPUS];
  */
 
 extern cpumask_t cpu_callout_map;
+extern cpumask_t cpu_callin_map;
 #define cpu_possible_map cpu_callout_map
 
 static inline int num_booting_cpus(void)
Index: linux-2.6.10/mvl_patches/pro-0959.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0959.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(959);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

