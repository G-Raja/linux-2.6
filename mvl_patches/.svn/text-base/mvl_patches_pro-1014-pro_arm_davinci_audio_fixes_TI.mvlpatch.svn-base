#! /usr/bin/env bash
# Patch: -pro_arm_davinci_audio_fixes_TI
# Date: Wed Jan  3 19:10:06 2007
# Source: Texas Instruments, Inc.
# MR: 20444
# Type: Defect Fix
# Disposition: submitted to DaVinci git
# Signed-off-by: Kevin Hilman <khilman@mvista.com>
# Description:
# 
# This patch sent by TI addresses the following issues
# 
# 1. Throttling EDMA instead of McBSP when there is no data transfer.
# 2. Correct sampling rate setting to overcome lip sync issues.
# 3. SNDCTL_GET_OPSACE/SNDCTL_GET_ISPACE fixes.
# 4. Setting the pop reduction register to reduce the pop sound during device 
# open.
# 

PATCHNUM=1014
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments, Inc.
MR: 20444
Type: Defect Fix
Disposition: submitted to DaVinci git
Signed-off-by: Kevin Hilman <khilman@mvista.com>
Description:

This patch sent by TI addresses the following issues

1. Throttling EDMA instead of McBSP when there is no data transfer.
2. Correct sampling rate setting to overcome lip sync issues.
3. SNDCTL_GET_OPSACE/SNDCTL_GET_ISPACE fixes.
4. Setting the pop reduction register to reduce the pop sound during device 
open.

Index: linux-2.6.10/arch/arm/mach-davinci/dma.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/dma.c
+++ linux-2.6.10/arch/arm/mach-davinci/dma.c
@@ -87,7 +87,7 @@ static unsigned long edma_channels_arm[]
   availability  on arm side events
 */
 static unsigned char qdma_channels_arm[] = {
-	0xff
+	0x00
 };
 
 /*
@@ -95,7 +95,7 @@ static unsigned char qdma_channels_arm[]
    availibility on arm side events
 */
 static unsigned long param_entry_arm[] = {
-	0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
+	0xffffffff, 0xffffffff, 0x0000ffff, 0xffffffff,
 	0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
 	0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
 	0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff
Index: linux-2.6.10/sound/oss/davinci-audio-aic33.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio-aic33.c
+++ linux-2.6.10/sound/oss/davinci-audio-aic33.c
@@ -322,6 +322,9 @@ static int aic33_update(int flag, int va
 		break;
 
 	case SET_RECSRC:
+		if (hweight32(val) > 1)
+			val &= ~aic33_local.recsrc;
+
 		if (val == SOUND_MASK_MIC) {
 			/* enable the mic input*/
 			DPRINTK("Enabling mic\n");
@@ -484,9 +487,6 @@ mixer_ioctl(struct inode *inode, struct 
 			break;
 
 		case SOUND_MIXER_RECSRC:
-			if (hweight32(val) > 1)
-				ret = -EINVAL;
-
 			if ((val & SOUND_MASK_LINE) ||
 			    (val & SOUND_MASK_MIC)) {
 				if (aic33_local.recsrc != val) {
@@ -654,7 +654,6 @@ int davinci_set_samplerate(long sample_r
 		audio_aic33_write(4, 0x14);	/* J-value */
 		audio_aic33_write(5, 0x7D);	/* D-value 8-MSB's */
 		audio_aic33_write(6, 0x04);	/* D-value 6-LSB's */
-		//audio_aic33_write (11, 0x01); /* R-value, Default is 0x01 */
 
 	}
 
@@ -670,37 +669,34 @@ int davinci_set_samplerate(long sample_r
 		audio_aic33_write(4, 0x14);	/* J-value */
 		audio_aic33_write(5, 0x34);	/* D-value 8-MSB's */
 		audio_aic33_write(6, 0x14);	/* D-value 6-LSB's */
-		//audio_aic33_write(11, 0x01); /* R-value, Default is 0x01 */
 	}
 #elif(MCLK==22)
 
 	if ((reg_info[count].Fsref == 96000) | (reg_info[count].Fsref == 48000)) {
-		/* For MCLK = 22.5 MHz and to get Fsref = 48kHz
+		/* For MCLK = 22.5792 MHz and to get Fsref = 48kHz
 		   Fsref = (MCLK * k * R)/(2048 * p);
-		   Select P = 2, R= 1, K = 8.7381, which results in J = 8, D = 7381 */
+		   Select P = 2, R= 1, K = 8.7075, which results in J = 8, D = 7075 */
 
 		/*Enable the PLL | Q-value | P-value */
 		audio_aic33_write(3, PLL_ENABLE | 0x10 | 0x02);
 		audio_aic33_write(4, (8 << 2));	/* J-value */
-		audio_aic33_write(5, (unsigned char)(7381 >> 6));	/* D-value 8-MSB's */
-		audio_aic33_write(6, (unsigned char)(7381 << 2));	/* D-value 6-LSB's */
-		//audio_aic33_write (11, 0x01); /* R-value, Default is 0x01 */
+		audio_aic33_write(5, (unsigned char)(7075 >> 6));	/* D-value 8-MSB's */
+		audio_aic33_write(6, (unsigned char)(7075 << 2));	/* D-value 6-LSB's */
 
 	}
 
 	else if ((reg_info[count].Fsref == 88200) | (reg_info[count].Fsref ==
 						     44100)) {
 
-		/* MCLK = 22.5 MHz and to get Fsref = 44.1kHz
+		/* MCLK = 22.5792 MHz and to get Fsref = 44.1kHz
 		   Fsref = (MCLK * k * R)/(2048 * p);
-		   Select P = 2, R =1, K = 8.0281, which results in J = 8, D = 0281 */
+		   Select P = 2, R =1, K = 8.0000, which results in J = 8, D = 0000 */
 
 		/*Enable the PLL | Q-value | P-value */
 		audio_aic33_write(3, PLL_ENABLE | 0x10 | 0x02);
 		audio_aic33_write(4, (8 << 2));	/* J-value */
-		audio_aic33_write(5, (unsigned char)(281 >> 6));	/* D-value 8-MSB's */
-		audio_aic33_write(6, (unsigned char)(281 << 2));	/* D-value 6-LSB's */
-		//audio_aic33_write(11, 0x01); /* R-value, Default is 0x01*/
+		audio_aic33_write(5, 0x00);	/* D-value 8-MSB's */
+		audio_aic33_write(6, 0x00);	/* D-value 6-LSB's */
 	}
 #else
 #error "unknown audio codec frequency"
@@ -796,9 +792,8 @@ static void davinci_set_mono_stereo(int 
 		/* MONO_LOP/M Output level control register */
 		audio_aic33_write(79, 0x99);
 #else
-		/* HPLOUT/HPROUT output level control */
-		audio_aic33_write(51, 0x99);
-		audio_aic33_write(65, 0x99);
+		/* Driver power ON pop control */
+		audio_aic33_write(42, 0x6C);
 
 		/* LEFT_LOP/M, RIGHT_LOP/M output level control */
 		audio_aic33_write(86, 0x99);
@@ -807,6 +802,8 @@ static void davinci_set_mono_stereo(int 
 		/* Left DAC power up, Right DAC power down */
 		audio_aic33_write(37, 0xa0);
 	} else if (mode == STEREO) {
+		/* Driver power ON pop control */
+		audio_aic33_write(42, 0x6C);
 
 		/* HPLOUT/HPROUT output level control */
 		audio_aic33_write(51, 0x99);
@@ -861,9 +858,6 @@ static void davinci_aic33_initialize(voi
 	/* if configured, then stop mcbsp */
 	davinci_mcbsp_stop(AUDIO_MCBSP);
 
-	/* configure aic33 with default params */
-	aic33_configure();
-
 	/* set initial (default) sample rate */
 	davinci_set_samplerate(audio_samplerate);
 
@@ -1038,11 +1032,15 @@ static int __init audio_aic33_init(void)
 		DPRINTK("codec driver register success\n");
 	}
 
+	/* configure aic33 with default params */
+	aic33_configure();
+
 	return err;
 }
 
 static void __exit audio_aic33_exit(void)
 {
+	davinci_aic33_shutdown(NULL);
 	(void)audio_unregister_codec(&aic33_state);
 	return;
 }
@@ -1051,9 +1049,7 @@ static void __exit audio_aic33_exit(void
 static int codec_start(char *buf, char **start, off_t offset, int count,
 		       int *eof, void *data)
 {
-	void *foo = NULL;
-
-	davinci_aic33_initialize(foo);
+	davinci_aic33_initialize(NULL);
 
 	DPRINTK("AIC33 codec initialization done.\n");
 	return 0;
@@ -1062,9 +1058,7 @@ static int codec_start(char *buf, char *
 static int codec_stop(char *buf, char **start, off_t offset, int count,
 		      int *eof, void *data)
 {
-	void *foo = NULL;
-
-	davinci_aic33_shutdown(foo);
+	davinci_aic33_shutdown(NULL);
 
 	DPRINTK("AIC33 codec shutdown.\n");
 	return 0;
Index: linux-2.6.10/sound/oss/davinci-audio-dma-intfc.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio-dma-intfc.c
+++ linux-2.6.10/sound/oss/davinci-audio-dma-intfc.c
@@ -50,6 +50,7 @@
 #include <linux/interrupt.h>
 #include <linux/dma-mapping.h>
 #include <linux/completion.h>
+#include <linux/delay.h>
 
 #include <asm/uaccess.h>
 #include <asm/io.h>
@@ -533,6 +534,7 @@ int audio_sync(struct file *file)
 	 * a full sample count.
 	 */
 	b = &s->buffers[s->usr_head];
+	mdelay(20);
 	if (b->offset &= ~3) {
 		/*wait for a buffer to become free */
 		if (wait_for_completion_interruptible(&s->wfc))
@@ -602,8 +604,8 @@ void audio_stop_dma(audio_stream_t * s)
 
 	local_irq_save(flags);
 
-	davinci_mcbsp_stop(0);
-	s->started = 0;
+	davinci_stop_dma(s->master_ch);
+	s->dma_started = 0;
 
 	if (s->spin_idle) {
 #if 0
@@ -662,6 +664,8 @@ void audio_reset(audio_stream_t * s)
 	FN_IN;
 	if (s->buffers) {
 
+		davinci_mcbsp_stop(0);
+		s->started = 0;
 		audio_stop_dma(s);
 		/* back up pointers to be ready to restart from the same spot */
 		while (s->dma_head != s->dma_tail) {
@@ -691,10 +695,7 @@ void audio_reset(audio_stream_t * s)
 	AUDIO_QUEUE_INIT(s);
 	s->active = 0;
 	s->stopped = 0;
-	s->started = 0;
-	s->dma_started = 0;
 
-	davinci_stop_dma(s->master_ch);
 	FN_OUT(0);
 	return;
 }
@@ -758,17 +759,18 @@ static int audio_start_dma_chain(audio_s
 	int channel = s->lch[s->dma_q_head];
 	FN_IN;
 
-	if (!s->started) {
+	if (!s->dma_started) {
 		edmacc_paramentry_regs temp;
 		davinci_get_dma_params(channel, &temp);
 		davinci_set_dma_params(s->master_ch, &temp);
-		s->started = 1;
 
-		if (!s->dma_started) {
-			davinci_start_dma(s->master_ch);
-			s->dma_started = 1;
-		}
+		davinci_start_dma(s->master_ch);
+		s->dma_started = 1;
+	}
+	
+	if (!s->started) {
 		davinci_mcbsp_start(0);
+		s->started = 1;
 	}
 
 	/* else the dma itself will progress forward with out our help */
Index: linux-2.6.10/sound/oss/davinci-audio.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio.c
+++ linux-2.6.10/sound/oss/davinci-audio.c
@@ -962,7 +962,7 @@ audio_ioctl(struct inode *inode, struct 
 			audio_buf_info inf = { 0, };
 			audio_stream_t *s =
 			    (cmd == SNDCTL_DSP_GETOSPACE) ? os : is;
-			audio_buf_t *b = &s->buffers[s->usr_head];
+			audio_buf_t *b = NULL;
 
 			if ((s == is && !(file->f_mode & FMODE_READ)) ||
 			    (s == os && !(file->f_mode & FMODE_WRITE))) {
@@ -973,6 +973,7 @@ audio_ioctl(struct inode *inode, struct 
 				FN_OUT(19);
 				return -ENOMEM;
 			}
+			b = &s->buffers[s->usr_head];
 			inf.bytes = s->wfc.done * s->fragsize;
 			inf.bytes -= b->offset;
 			if(inf.bytes < 0)
@@ -1164,11 +1165,6 @@ static int audio_release(struct inode *i
 		state->wr_ref = 0;
 	}
 
-	if (!AUDIO_ACTIVE(state)) {
-		if (state->hw_shutdown)
-			state->hw_shutdown(state->data);
-	}
-
 	up(&state->sem);
 
 	module_put(state->owner);
Index: linux-2.6.10/mvl_patches/pro-1014.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1014.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1014);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

