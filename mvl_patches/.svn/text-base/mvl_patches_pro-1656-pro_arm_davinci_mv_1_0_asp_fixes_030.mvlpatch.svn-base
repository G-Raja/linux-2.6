#! /usr/bin/env bash
# Patch: -pro_arm_davinci_mv_1_0_asp_fixes_030
# Date: Mon Jan 21 23:04:12 2008
# Source: Texas Instruments Inc.
# MR: 23073
# Type: Enhancement 
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# 
# Comments from TI
#   This patch separates the start/stop functionality of McBSP transmitter 
#   and receiver.
# 

PATCHNUM=1656
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Texas Instruments Inc.
MR: 23073
Type: Enhancement 
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:

Comments from TI
  This patch separates the start/stop functionality of McBSP transmitter 
  and receiver.

Index: linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/mcbsp.c
+++ linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
@@ -238,11 +238,10 @@ void davinci_mcbsp_free(unsigned int id)
 }
 
 /*
- * Here we start the McBSP, by enabling the sample
- * generator, both transmitter and receivers,
- * and the frame sync.
+ * Here we start the McBSP transmitter, by enabling the sample
+ * generator, both transmitter and receivers, and the frame sync.
  */
-void davinci_mcbsp_start(unsigned int id)
+void davinci_mcbsp_start_tx(unsigned int id)
 {
 	u32 io_base;
 	u16 w;
@@ -252,8 +251,6 @@ void davinci_mcbsp_start(unsigned int id
 
 	io_base = mcbsp[id].io_base;
 
-	mcbsp[id].rx_word_length =
-	    ((DAVINCI_MCBSP_READ(io_base, RCR1) >> 5) & 0x7);
 	mcbsp[id].tx_word_length =
 	    ((DAVINCI_MCBSP_READ(io_base, XCR1) >> 5) & 0x7);
 
@@ -261,10 +258,41 @@ void davinci_mcbsp_start(unsigned int id
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | (1 << 6));
 
-	/* Enable transmitter and receiver */
+	/* Enable transmitter */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | 1);
 
+	udelay(100);
+
+	/* Start frame sync */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | (1 << 7));
+
+	return;
+}
+
+/*
+ * Here we start the McBSP receiver, by enabling the sample
+ * generator, both transmitter and receivers, and the frame sync.
+ */
+void davinci_mcbsp_start_rx(unsigned int id)
+{
+	u32 io_base;
+	u16 w;
+
+	if (davinci_mcbsp_check(id) < 0)
+		return;
+
+	io_base = mcbsp[id].io_base;
+
+	mcbsp[id].rx_word_length =
+	    ((DAVINCI_MCBSP_READ(io_base, RCR1) >> 5) & 0x7);
+
+	/* Start the sample generator */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w | (1 << 6));
+
+	/* Enable receiver */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR1);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR1, w | 1);
 
@@ -277,7 +305,7 @@ void davinci_mcbsp_start(unsigned int id
 	return;
 }
 
-void davinci_mcbsp_stop(unsigned int id)
+void davinci_mcbsp_stop_tx(unsigned int id)
 {
 	u32 io_base;
 	u16 w;
@@ -291,6 +319,27 @@ void davinci_mcbsp_stop(unsigned int id)
 	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1));
 
+	/* Reset the sample rate generator */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1 << 6));
+
+	/* Reset the frame sync generator */
+	w = DAVINCI_MCBSP_READ(io_base, SPCR2);
+	DAVINCI_MCBSP_WRITE(io_base, SPCR2, w & ~(1 << 7));
+
+	return;
+}
+
+void davinci_mcbsp_stop_rx(unsigned int id)
+{
+	u32 io_base;
+	u16 w;
+
+	if (davinci_mcbsp_check(id) < 0)
+		return;
+
+	io_base = mcbsp[id].io_base;
+
 	/* Reset receiver */
 	w = DAVINCI_MCBSP_READ(io_base, SPCR1);
 	DAVINCI_MCBSP_WRITE(io_base, SPCR1, w & ~(1));
@@ -519,8 +568,10 @@ module_exit(davinci_mcbsp_exit);
 EXPORT_SYMBOL(davinci_mcbsp_config);
 EXPORT_SYMBOL(davinci_mcbsp_request);
 EXPORT_SYMBOL(davinci_mcbsp_free);
-EXPORT_SYMBOL(davinci_mcbsp_start);
-EXPORT_SYMBOL(davinci_mcbsp_stop);
+EXPORT_SYMBOL(davinci_mcbsp_start_tx);
+EXPORT_SYMBOL(davinci_mcbsp_start_rx);
+EXPORT_SYMBOL(davinci_mcbsp_stop_tx);
+EXPORT_SYMBOL(davinci_mcbsp_stop_rx);
 EXPORT_SYMBOL(davinci_mcbsp_xmit_word);
 EXPORT_SYMBOL(davinci_mcbsp_recv_word);
 EXPORT_SYMBOL(davinci_mcbsp_xmit_buffer);
Index: linux-2.6.10/include/asm-arm/arch-davinci/mcbsp.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-davinci/mcbsp.h
+++ linux-2.6.10/include/asm-arm/arch-davinci/mcbsp.h
@@ -238,8 +238,10 @@ void davinci_mcbsp_config(unsigned int i
 			  const struct davinci_mcbsp_reg_cfg *config);
 int davinci_mcbsp_request(unsigned int id);
 void davinci_mcbsp_free(unsigned int id);
-void davinci_mcbsp_start(unsigned int id);
-void davinci_mcbsp_stop(unsigned int id);
+void davinci_mcbsp_start_tx(unsigned int id);
+void davinci_mcbsp_start_rx(unsigned int id);
+void davinci_mcbsp_stop_tx(unsigned int id);
+void davinci_mcbsp_stop_rx(unsigned int id);
 void davinci_mcbsp_xmit_word(unsigned int id, u32 word);
 u32 davinci_mcbsp_recv_word(unsigned int id);
 
Index: linux-2.6.10/sound/oss/davinci-audio-aic33.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio-aic33.c
+++ linux-2.6.10/sound/oss/davinci-audio-aic33.c
@@ -781,7 +781,8 @@ int davinci_set_samplerate(long sample_r
 		initial_config.srgr2 =
 		    (CLKSM | FSGM | FPER(DEFAULT_BITPERSAMPLE * 2 - 1));
 
-		davinci_mcbsp_stop(AUDIO_MCBSP);
+		davinci_mcbsp_stop_tx(AUDIO_MCBSP);
+		davinci_mcbsp_stop_rx(AUDIO_MCBSP);
 		davinci_mcbsp_config(AUDIO_MCBSP, &initial_config);
 	}
 #endif				/* AIC33_MASTER */
@@ -802,7 +803,8 @@ static void davinci_aic33_shutdown(void 
 	set_current_state(TASK_INTERRUPTIBLE);
 	schedule_timeout(2);
 
-	davinci_mcbsp_stop(AUDIO_MCBSP);
+	davinci_mcbsp_stop_tx(AUDIO_MCBSP);
+	davinci_mcbsp_stop_rx(AUDIO_MCBSP);
 	davinci_mcbsp_free(AUDIO_MCBSP);
 
 	/* Self clearing aic33 software reset */
@@ -881,7 +883,8 @@ static void davinci_aic33_initialize(voi
 	}
 
 	/* if configured, then stop mcbsp */
-	davinci_mcbsp_stop(AUDIO_MCBSP);
+	davinci_mcbsp_stop_tx(AUDIO_MCBSP);
+	davinci_mcbsp_stop_rx(AUDIO_MCBSP);
 
 	/* set initial (default) sample rate */
 	davinci_set_samplerate(audio_samplerate);
Index: linux-2.6.10/sound/oss/davinci-audio-dma-intfc.c
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio-dma-intfc.c
+++ linux-2.6.10/sound/oss/davinci-audio-dma-intfc.c
@@ -120,7 +120,6 @@ struct audio_isr_work_item {
 
 static char work_item_running = 0;
 static struct audio_isr_work_item work1, work2;
-static int oss_mcbsp_counter = 0;
 
 /*********************** MODULE SPECIFIC FUNCTIONS PROTOTYPES ****************/
 
@@ -208,7 +207,8 @@ int audio_setup_buf(audio_stream_t * s)
 	s->usr_head = s->dma_head = s->dma_tail = 0;
 	AUDIO_QUEUE_INIT(s);
 	s->started = 0;
-	s->mcbsp_started = 0;
+	s->mcbsp_tx_started = 0;
+	s->mcbsp_rx_started = 0;
 
 	s->dma_started = 0;
 	s->bytecount = 0;
@@ -606,14 +606,13 @@ void audio_stop_dma(audio_stream_t * s)
 
 	local_irq_save(flags);
 
-	if(s->mcbsp_started) {
-		s->mcbsp_started = 0;
-		oss_mcbsp_counter--;
-		DPRINTK( "MCBSP counter on stop %d\n",oss_mcbsp_counter);
-		if(oss_mcbsp_counter <= 0) {
-			DPRINTK("MCBSP STOP\n");
-			davinci_mcbsp_stop(0);
-			oss_mcbsp_counter = 0;
+	if(s->mcbsp_tx_started || s->mcbsp_rx_started) {
+		if (s->input_or_output == FMODE_WRITE) {
+			davinci_mcbsp_stop_tx(0);
+			s->mcbsp_tx_started = 0;
+		} else {
+			davinci_mcbsp_stop_rx(0);
+			s->mcbsp_rx_started = 0;
 		}
 	}
 	s->started = 0;
@@ -782,16 +781,16 @@ static int audio_start_dma_chain(audio_s
 			s->dma_started = 1;
 		}
 		local_irq_save(flags);
-		if(!s->mcbsp_started) {
-			s->mcbsp_started = 1;
-			oss_mcbsp_counter++;
-			DPRINTK("MCBSP counter on start %d\n",oss_mcbsp_counter);
-			if(oss_mcbsp_counter == 1) {
-				local_irq_restore(flags);
-				DPRINTK("MCBSP START\n");
-				davinci_mcbsp_start(0);
-			} else
-				local_irq_restore(flags);
+		if(!s->mcbsp_tx_started || !s->mcbsp_rx_started) {
+			local_irq_restore(flags);
+			if (s->input_or_output == FMODE_WRITE) {
+				davinci_mcbsp_start_tx(0);
+				s->mcbsp_tx_started = 1;
+			} else {
+				davinci_mcbsp_start_rx(0);
+				s->mcbsp_rx_started = 1;
+			}
+			local_irq_restore(flags);
 		} else
 			local_irq_restore(flags);
 	}
Index: linux-2.6.10/sound/oss/davinci-audio.h
===================================================================
--- linux-2.6.10.orig/sound/oss/davinci-audio.h
+++ linux-2.6.10/sound/oss/davinci-audio.h
@@ -69,7 +69,8 @@ typedef struct {
 	int stopped:1;		/* might be active but stopped */
 	int spin_idle:1;	/* have DMA spin on zeros when idle */
 	int dma_started;	/* to store if DMA was started or not */
-	int mcbsp_started;
+	int mcbsp_tx_started;
+	int mcbsp_rx_started;
 } audio_stream_t;
 
 /*
Index: linux-2.6.10/mvl_patches/pro-1656.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1656.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1656);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

