#! /usr/bin/env bash
# Patch: -pro_arm_davinci_udma5_update
# Date: Mon Jan 21 23:01:40 2008
# MR: 23536
# Summary: Add UDMA5 support for Davinci HD (DM6467)
# Source: MontaVista Software, Inc.
# Type: Enhancement
# Disposition: MontaVista
# Description:
# Select the maximum based on the CPU type.  For DaVinci HD (DM6467),
# the transfer speed can be up to UDMA5.  However, for other DaVinci
# variations such as DM6443 and DM350, they are defaulted to UDMA4.
# 
# Signed-off-by: schen@mvista.com
# 

PATCHNUM=1622
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 23536
Summary: Add UDMA5 support for Davinci HD (DM6467)
Source: MontaVista Software, Inc.
Type: Enhancement
Disposition: MontaVista
Description:
Select the maximum based on the CPU type.  For DaVinci HD (DM6467),
the transfer speed can be up to UDMA5.  However, for other DaVinci
variations such as DM6443 and DM350, they are defaulted to UDMA4.

Signed-off-by: schen@mvista.com

Index: linux-2.6.10/drivers/ide/davinci/palm_bk3710.c
===================================================================
--- linux-2.6.10.orig/drivers/ide/davinci/palm_bk3710.c
+++ linux-2.6.10/drivers/ide/davinci/palm_bk3710.c
@@ -41,6 +41,7 @@
 #include <asm/arch/irqs.h>
 #include <asm/arch/i2c-client.h>
 #include <asm/hardware/clock.h>
+#include <asm/arch/cpu.h>
 #include "palm_bk3710.h"
 #include "../ide-timing.h"
 
@@ -294,13 +295,24 @@ int palm_bk3710_setpiomode(palm_bk3710_i
 static int palm_bk3710_hostdma(ide_drive_t * drive, u8 xferspeed)
 {
 	ide_hwif_t *hwif = HWIF(drive);
-	u8 speed = (XFER_UDMA_4 < xferspeed) ? XFER_UDMA_4 : xferspeed;
+	u8 max_speed;
+	u8 speed;
 	int is_slave = (&hwif->drives[1] == drive);
 	char ide_cycle;
 	struct hd_driveid *id = drive->id;
 	int nspeed = -1;
 
+	if (cpu_is_davinci_dm6467())
+		max_speed = XFER_UDMA_5;
+	else
+		max_speed = XFER_UDMA_4;
+
+	speed = (max_speed < xferspeed) ? max_speed : xferspeed;
+
 	switch (speed) {
+	case XFER_UDMA_5:
+		nspeed = 1;
+		break;
 	case XFER_UDMA_4:
 		nspeed = 2;
 		break;
@@ -332,7 +344,7 @@ static int palm_bk3710_hostdma(ide_drive
 	if (nspeed != -1) {
 		ide_cycle = (ide_timing[nspeed].cycle < id->eide_dma_min) ?
 		    id->eide_dma_min : ide_timing[nspeed].cycle;
-		if ((speed <= XFER_UDMA_4) && (speed >= XFER_UDMA_0)) {
+		if ((speed <= max_speed) && (speed >= XFER_UDMA_0)) {
 			palm_bk3710_setudmamode(NULL, is_slave, 6 - nspeed);
 		} else {
 			palm_bk3710_setdmamode(NULL, is_slave, ide_cycle,
@@ -356,7 +368,12 @@ static int palm_bk3710_hostdma(ide_drive
 
 static inline int palm_bk3710_drivedma(ide_drive_t * pDrive)
 {
-	u8 speed = ide_dma_speed(pDrive, 2);	/* We have a 76.5 MHz clock hence only UDMA66 is possible */
+	u8 speed;
+
+	if (cpu_is_davinci_dm6467())
+		speed = ide_dma_speed(pDrive, 3);  /* HD handles up to UDMA5 */
+	else    /* We have a 76.5 MHz clock hence only UDMA66 is possible */
+		speed = ide_dma_speed(pDrive, 2);	
 
 	/* If no DMA/single word DMA was available or the chipset has DMA bugs
 	   then disable DMA and use PIO */
@@ -514,8 +531,11 @@ int palm_bk3710_init(void)
 		/* Setup up the memory map base for this instance of hwif */
 		palm_bk3710_hwif->mmio = 0;
 		palm_bk3710_hwif->ide_dma_check = palm_bk3710_checkdma;
-		palm_bk3710_hwif->ultra_mask = 0x1f;	/* Ultra DMA Mode 4 Max
-						 (input clk 99MHz) */
+		if(cpu_is_davinci_dm6467())
+			palm_bk3710_hwif->ultra_mask = 0x3f;  /* UDMA Mode 5 */
+		else
+			palm_bk3710_hwif->ultra_mask = 0x1f;  /* UDMA Mode 4 */
+						    /* Max (input clk 99MHz) */
 		palm_bk3710_hwif->mwdma_mask = 0x7;
 		palm_bk3710_hwif->swdma_mask = 0;
 		palm_bk3710_hwif->dma_command =
Index: linux-2.6.10/mvl_patches/pro-1622.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1622.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1622);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

