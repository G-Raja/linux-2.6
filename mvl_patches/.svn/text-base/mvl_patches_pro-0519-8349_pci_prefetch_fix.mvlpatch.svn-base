#! /usr/bin/env bash
# Patch: -8349_pci_prefetch_fix
# Date: Fri Apr 28 12:35:29 2006
# Source: MontaVista Software, Inc.
# MR: 
# Type: Defect Fix
# Disposition: needs submitting to Kumar Gala
# Signed-off-by: Randy Vinson <rvinson@mvista.com>
# Description:
# Fix 8349 PCI pre-fetch problem.
# 
# The 8349 PCI data path (specifically, the I/O Sequencer) contains a number of
# buffers. When PCI pre-fetch is in use, these buffers can be pre-filled with
# data as a result of the PCI pre-fetch mechanism. If the contents of main memory
# are changed after the PCI pre-fetch has filled the buffers with data, they are
# now stale. To prevent this, processor writes to memory must be performed with
# "coherency required" (i.e. the M-bit must be set in PTEs and DBATs). This
# causes the I/O Sequencer to snoop its internal buffers and discard the stale
# pre-fetch data.
# 
# This condition has also been seen with 74[45]x processors when used with an
# MPC107 host bridge (for the same basic reason). The 74[45]x case has already
# been solved. This patch adds the 83xx processors to the list needing this
# change.
# 

PATCHNUM=519
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 
Type: Defect Fix
Disposition: needs submitting to Kumar Gala
Signed-off-by: Randy Vinson <rvinson@mvista.com>
Description:
Fix 8349 PCI pre-fetch problem.

The 8349 PCI data path (specifically, the I/O Sequencer) contains a number of
buffers. When PCI pre-fetch is in use, these buffers can be pre-filled with
data as a result of the PCI pre-fetch mechanism. If the contents of main memory
are changed after the PCI pre-fetch has filled the buffers with data, they are
now stale. To prevent this, processor writes to memory must be performed with
"coherency required" (i.e. the M-bit must be set in PTEs and DBATs). This
causes the I/O Sequencer to snoop its internal buffers and discard the stale
pre-fetch data.

This condition has also been seen with 74[45]x processors when used with an
MPC107 host bridge (for the same basic reason). The 74[45]x case has already
been solved. This patch adds the 83xx processors to the list needing this
change.

 arch/ppc/kernel/cputable.c      |   14 +++++++++-----
 arch/ppc/syslib/ppc83xx_setup.c |    4 ++--
 mvl_patches/pro-0519.c          |   16 ++++++++++++++++
 3 files changed, 27 insertions(+), 7 deletions(-)

Index: linux-2.6.10/arch/ppc/kernel/cputable.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/kernel/cputable.c
+++ linux-2.6.10/arch/ppc/kernel/cputable.c
@@ -63,9 +63,12 @@ extern void __setup_cpu_generic(unsigned
 #endif
 
 /* We need to mark all pages as being coherent if we're SMP or we
- * have a 74[45]x and an MPC107 host bridge.
+ * have a 74[45]x and an MPC107 host bridge or an 83xx processor.
+ * (The buffers in the I/O Sequencer act as a type of cache. When PCI pre-fetch
+ * is in use, these buffers can get stale with respect to system memory unless
+ * system memory coherency is enforced.)
  */
-#if defined(CONFIG_SMP) || defined(CONFIG_MPC10X_BRIDGE)
+#if defined(CONFIG_SMP) || defined(CONFIG_MPC10X_BRIDGE) || defined(CONFIG_83xx)
 #define CPU_FTR_COMMON                  CPU_FTR_NEED_COHERENT
 #else
 #define CPU_FTR_COMMON                  0
@@ -564,9 +567,10 @@ struct cpu_spec	cpu_specs[] = {
 		.pvr_mask		= 0x7fff0000,
 		.pvr_value		= 0x00830000,
 		.cpu_name		= "e300",
-		.cpu_features		= CPU_FTR_SPLIT_ID_CACHE |
-			CPU_FTR_MAYBE_CAN_DOZE | CPU_FTR_USE_TB |
-			CPU_FTR_MAYBE_CAN_NAP | CPU_FTR_HAS_HIGH_BATS,
+		.cpu_features		= CPU_FTR_COMMON |
+			CPU_FTR_SPLIT_ID_CACHE | CPU_FTR_MAYBE_CAN_DOZE |
+			CPU_FTR_USE_TB | CPU_FTR_MAYBE_CAN_NAP |
+			CPU_FTR_HAS_HIGH_BATS,
 		.cpu_user_features	= COMMON_PPC,
 		.icache_bsize		= 32,
 		.dcache_bsize		= 32,
Index: linux-2.6.10/arch/ppc/syslib/ppc83xx_setup.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/syslib/ppc83xx_setup.c
+++ linux-2.6.10/arch/ppc/syslib/ppc83xx_setup.c
@@ -196,7 +196,7 @@ mpc83xx_setup_pci1(struct pci_controller
 	pci_ctrl->pitar1 = 0x0;
 	pci_ctrl->pibar1 = 0x0;
 	pci_ctrl->piebar1 = 0x0;
-	pci_ctrl->piwar1 = PIWAR_EN | PIWAR_RTT_SNOOP | PIWAR_WTT_SNOOP | PIWAR_IWS_2G;
+	pci_ctrl->piwar1 = PIWAR_EN | PIWAR_PF | PIWAR_RTT_SNOOP | PIWAR_WTT_SNOOP | PIWAR_IWS_2G;
 
 	/*
 	 * Release PCI RST signal
@@ -254,7 +254,7 @@ mpc83xx_setup_pci2(struct pci_controller
 	pci_ctrl->pitar1 = 0x0;
 	pci_ctrl->pibar1 = 0x0;
 	pci_ctrl->piebar1 = 0x0;
-	pci_ctrl->piwar1 = PIWAR_EN | PIWAR_RTT_SNOOP | PIWAR_WTT_SNOOP | PIWAR_IWS_2G;
+	pci_ctrl->piwar1 = PIWAR_EN | PIWAR_PF | PIWAR_RTT_SNOOP | PIWAR_WTT_SNOOP | PIWAR_IWS_2G;
 
 	/*
 	 * Release PCI RST signal
Index: linux-2.6.10/mvl_patches/pro-0519.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0519.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(519);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

