#! /usr/bin/env bash
# Patch: -touch_watchdogs
# Date: Fri May  5 13:56:43 2006
# Source: MontaVista Software, Inc.
# MR: 17853
# Type: Defect Fix
# Disposition: MontaVista
# Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
# Description:
#     This patch adds the touch_watchdogs function placed in lib.
#     The function should be used to touch all the watchdogs
#     while the system is being in a "poll" state.
#     Also a touch_watchdog notifier callback has been added
#     to the booke watchdog. This way all the other watchdog drivers
#     should register their touch-me callback functions to prevent
#     them from trigger inside polling loops with interrupts disabled.
# 

PATCHNUM=533
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 17853
Type: Defect Fix
Disposition: MontaVista
Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
Description:
    This patch adds the touch_watchdogs function placed in lib.
    The function should be used to touch all the watchdogs
    while the system is being in a "poll" state.
    Also a touch_watchdog notifier callback has been added
    to the booke watchdog. This way all the other watchdog drivers
    should register their touch-me callback functions to prevent
    them from trigger inside polling loops with interrupts disabled.

 drivers/char/watchdog/booke_wdt.c |   13 +++++++++++++
 include/linux/touch_watchdogs.h   |   33 +++++++++++++++++++++++++++++++++
 lib/Kconfig                       |    5 +++++
 lib/Makefile                      |    2 ++
 lib/touch_watchdogs.c             |   38 ++++++++++++++++++++++++++++++++++++++
 mvl_patches/pro-0533.c            |   16 ++++++++++++++++
 6 files changed, 107 insertions(+)

Index: linux-2.6.10/drivers/char/watchdog/booke_wdt.c
===================================================================
--- linux-2.6.10.orig/drivers/char/watchdog/booke_wdt.c
+++ linux-2.6.10/drivers/char/watchdog/booke_wdt.c
@@ -20,6 +20,7 @@
 #include <linux/miscdevice.h>
 #include <linux/notifier.h>
 #include <linux/watchdog.h>
+#include <linux/touch_watchdogs.h>
 
 #include <asm/reg_booke.h>
 #include <asm/uaccess.h>
@@ -165,8 +166,19 @@ static struct miscdevice booke_wdt_miscd
   .fops = &booke_wdt_fops,
 };
 
+static int booke_wdt_touch(struct notifier_block *this, unsigned long ign1, void *ign2)
+{
+	booke_wdt_ping();
+	return 0;
+}
+
+static struct notifier_block booke_wdt_block = {
+	.notifier_call = booke_wdt_touch,
+};
+
 static void __exit booke_wdt_exit(void)
 {
+	notifier_chain_unregister(&watchdog_list, &booke_wdt_block);
 	misc_deregister(&booke_wdt_miscdev);
 }
 
@@ -190,6 +202,7 @@ static int __init booke_wdt_init(void)
 	if (booke_wdt_enabled == 1) {
 		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",
 				booke_wdt_period);
+		notifier_chain_register(&watchdog_list, &booke_wdt_block);
 		booke_wdt_enable();
 	}
 
Index: linux-2.6.10/include/linux/touch_watchdogs.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/linux/touch_watchdogs.h
@@ -0,0 +1,33 @@
+/*
+ * include/linux/touch_watchdogs.h
+ *
+ * The code is used to touch all the watchdogs.
+ * This is needed when the system goes into a poll state
+ * for too long (polling the network in kgdb or saving a crash dump)
+ * to prevent the watchdogs from rebooting it.
+ * The watchdog_list should be used by the watchdog drivers
+ * to register a touch-me callback function.
+ *
+ * Author: Valentine Barshak <vbarshak@ru.mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#ifndef _LINUX_TOUCH_WATCHDOGS_H
+#define _LINUX_TOUCH_WATCHDOGS_H
+
+#ifdef CONFIG_TOUCH_WATCHDOGS
+#include <linux/notifier.h>
+
+extern struct notifier_block *watchdog_list;
+
+extern void touch_watchdogs(void);
+#else
+#define touch_watchdogs()
+#endif
+
+#endif
+
Index: linux-2.6.10/lib/Kconfig
===================================================================
--- linux-2.6.10.orig/lib/Kconfig
+++ linux-2.6.10/lib/Kconfig
@@ -57,6 +57,11 @@ config REED_SOLOMON_ENC16
 config REED_SOLOMON_DEC16
 	boolean
 
+config TOUCH_WATCHDOGS
+	boolean
+	depends on X86_LOCAL_APIC || WATCHDOG
+	default y if X86_LOCAL_APIC || WATCHDOG
+
 source "lib/Kconfig.FRD"
 endmenu
 
Index: linux-2.6.10/lib/Makefile
===================================================================
--- linux-2.6.10.orig/lib/Makefile
+++ linux-2.6.10/lib/Makefile
@@ -7,6 +7,8 @@ lib-y := errno.o ctype.o string.o vsprin
 	 kobject.o kref.o idr.o div64.o parser.o int_sqrt.o \
 	 bitmap.o extable.o kobject_uevent.o
 
+lib-$(CONFIG_TOUCH_WATCHDOGS) += touch_watchdogs.o
+
 ifeq ($(CONFIG_DEBUG_KOBJECT),y)
 CFLAGS_kobject.o += -DDEBUG
 CFLAGS_kobject_uevent.o += -DDEBUG
Index: linux-2.6.10/lib/touch_watchdogs.c
===================================================================
--- /dev/null
+++ linux-2.6.10/lib/touch_watchdogs.c
@@ -0,0 +1,38 @@
+/*
+ * lib/touch_watchdogs.c
+ *
+ * The code is used to touch all the watchdogs.
+ * This is needed when the system goes into a poll state
+ * for too long (polling the network in kgdb or saving a crash dump)
+ * to prevent the watchdogs from rebooting it.
+ * The watchdog_list should be used by the watchdog drivers
+ * to register a touch-me callback function.
+ *
+ * Author: Valentine Barshak <vbarshak@ru.mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/touch_watchdogs.h>
+
+#ifdef CONFIG_X86_LOCAL_APIC
+#include <linux/nmi_watchdog.h>
+#endif
+
+struct notifier_block *watchdog_list;
+
+void touch_watchdogs(void)
+{
+#ifdef CONFIG_X86_LOCAL_APIC
+	touch_nmi_watchdog();
+#endif
+	notifier_call_chain(&watchdog_list, 0, NULL);
+}
+
+EXPORT_SYMBOL(watchdog_list);
+EXPORT_SYMBOL(touch_watchdogs);
+
Index: linux-2.6.10/mvl_patches/pro-0533.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0533.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(533);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

