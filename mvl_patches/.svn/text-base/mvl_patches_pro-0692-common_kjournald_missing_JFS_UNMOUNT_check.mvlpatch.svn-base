#! /usr/bin/env bash
# Patch: -common_kjournald_missing_JFS_UNMOUNT_check
# Date: Thu Jun 29 13:41:06 2006
# MR: 17090
# Commit: cbf0d27a131639f4f3e4faa94373c5c6f89f8f07
# Author: Mark Fasheh <mark.fasheh@oracle.com>
# Date:   Tue Sep 6 15:19:08 2005 -0700
# 
#     [PATCH] kjournald: missing JFS_UNMOUNT check
#     
#     It seems that kjournald() may be missing a check of the JFS_UNMOUNT flag
#     before calling schedule().  This showed up in testing of OCFS2 recovery
#     where our recovery thread would hang in journal_kill_thread() called from
#     journal_destroy() because kjournald never got a chance to read the flag to
#     shut down before the schedule().
#     
#     Zach pointed out the missing check which led me to hack up this trivial
#     patch.  It's been tested many times now and I have yet to reproduce the
#     hang, which was happening very regularly before.
#     
#     <mild rant>
#     I'm guessing that we could really use some wait_event() calls with helper
#     functions in, well, most of jbd these days which would make a ton of the
#     wait code there vastly cleaner.
#     </mild rant>
#     
#     As for why this doesn't happen in ext3 (or OCFS2 during normal
#     mount/unmount of the local nodes journal), I think it may that the specific
#     timing of events in the ocfs2 recovery thread exposes a race there.
#     Because ocfs2_replay_journal() is only interested in playing back the
#     journal, initialization and shutdown happen very quicky with no other
#     metadata put into that specific journal.
#     
#     Acked-by: "Stephen C. Tweedie" <sct@redhat.com>
#     Signed-off-by: Andrew Morton <akpm@osdl.org>
#     Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 

PATCHNUM=692
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 17090
Commit: cbf0d27a131639f4f3e4faa94373c5c6f89f8f07
Author: Mark Fasheh <mark.fasheh@oracle.com>
Date:   Tue Sep 6 15:19:08 2005 -0700

    [PATCH] kjournald: missing JFS_UNMOUNT check
    
    It seems that kjournald() may be missing a check of the JFS_UNMOUNT flag
    before calling schedule().  This showed up in testing of OCFS2 recovery
    where our recovery thread would hang in journal_kill_thread() called from
    journal_destroy() because kjournald never got a chance to read the flag to
    shut down before the schedule().
    
    Zach pointed out the missing check which led me to hack up this trivial
    patch.  It's been tested many times now and I have yet to reproduce the
    hang, which was happening very regularly before.
    
    <mild rant>
    I'm guessing that we could really use some wait_event() calls with helper
    functions in, well, most of jbd these days which would make a ton of the
    wait code there vastly cleaner.
    </mild rant>
    
    As for why this doesn't happen in ext3 (or OCFS2 during normal
    mount/unmount of the local nodes journal), I think it may that the specific
    timing of events in the ocfs2 recovery thread exposes a race there.
    Because ocfs2_replay_journal() is only interested in playing back the
    journal, initialization and shutdown happen very quicky with no other
    metadata put into that specific journal.
    
    Acked-by: "Stephen C. Tweedie" <sct@redhat.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/fs/jbd/journal.c b/fs/jbd/journal.c
index 71cfe25..334f4cf 100644
Index: linux-2.6.10/fs/jbd/journal.c
===================================================================
--- linux-2.6.10.orig/fs/jbd/journal.c
+++ linux-2.6.10/fs/jbd/journal.c
@@ -193,6 +193,8 @@ loop:
 		if (transaction && time_after_eq(jiffies,
 						transaction->t_expires))
 			should_sleep = 0;
+		if (journal->j_flags & JFS_UNMOUNT)
+ 			should_sleep = 0;
 		if (should_sleep) {
 			spin_unlock(&journal->j_state_lock);
 			schedule();
Index: linux-2.6.10/mvl_patches/pro-0692.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0692.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(692);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

