#! /usr/bin/env bash
# Patch: -common_ext3_fix_journal_unmap_buffer_race
# Date: Thu Jun 29 13:39:28 2006
# MR: 17090
# Commit: b489072eefdaaf41fb6a25cb940c40d2410bb3f1
# Author: Stephen C. Tweedie <sct@redhat.com>
# Date:   Mon Mar 28 04:24:26 2005 -0800
# 
#     [PATCH] ext3: fix journal_unmap_buffer race
#     
#     There is a race condition in jbd between journal_unmap_buffer() and
#     journal_commit_transaction().  This is leading to corruption of buffers on the
#     transaction's t_locked_list, leading to a variety of symptoms usually
#     involving an oops in kjournald.
#     
#     The problem is that various special-case exit paths in journal_unmap_buffer()
#     call journal_put_journal_head without any locking.  This is racing against a
#     refiling of the same journal_head in journal_commit_transaction():
#     
#     			__journal_unfile_buffer(jh);
#     			__journal_file_buffer(jh, commit_transaction,
#     						BJ_Locked);
#     
#     The way these functions work, this leaves the jh temporarily with
#     b_transaction==NULL; and if journal_unmap_buffer()'s call to
#     journal_put_journal_head() hits this window, it sees the NULL transaction and
#     frees the journal_head which is just about to get refiled on the locked list.
#     
#     The main exit path on journal_unmap_buffer() performs its
#     journal_put_journal_head() before dropping the j_list_lock, so is not
#     vulnerable to this race.  The fix is to move the other similar calls on
#     special-case exit branches in that function so that they also release the
#     journal_head before dropping that lock.
#     
#     This is low-risk since the new order has already been tested as the normal
#     exit path from this function.  The change has had extensive testing and has
#     been shown to fix the problem with no regressions found.
#     
#     Signed-off-by: Peter Keilty <Peter.Keilty@hp.com>
#     Signed-off-by: Nicholas Dokos <nicholas.dokos@hp.com>
#     Signed-off-by: Stephen Tweedie <sct@redhat.com>
#     Signed-off-by: Andrew Morton <akpm@osdl.org>
#     Signed-off-by: Linus Torvalds <torvalds@osdl.org>
# 

PATCHNUM=688
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
MR: 17090
Commit: b489072eefdaaf41fb6a25cb940c40d2410bb3f1
Author: Stephen C. Tweedie <sct@redhat.com>
Date:   Mon Mar 28 04:24:26 2005 -0800

    [PATCH] ext3: fix journal_unmap_buffer race
    
    There is a race condition in jbd between journal_unmap_buffer() and
    journal_commit_transaction().  This is leading to corruption of buffers on the
    transaction's t_locked_list, leading to a variety of symptoms usually
    involving an oops in kjournald.
    
    The problem is that various special-case exit paths in journal_unmap_buffer()
    call journal_put_journal_head without any locking.  This is racing against a
    refiling of the same journal_head in journal_commit_transaction():
    
    			__journal_unfile_buffer(jh);
    			__journal_file_buffer(jh, commit_transaction,
    						BJ_Locked);
    
    The way these functions work, this leaves the jh temporarily with
    b_transaction==NULL; and if journal_unmap_buffer()'s call to
    journal_put_journal_head() hits this window, it sees the NULL transaction and
    frees the journal_head which is just about to get refiled on the locked list.
    
    The main exit path on journal_unmap_buffer() performs its
    journal_put_journal_head() before dropping the j_list_lock, so is not
    vulnerable to this race.  The fix is to move the other similar calls on
    special-case exit branches in that function so that they also release the
    journal_head before dropping that lock.
    
    This is low-risk since the new order has already been tested as the normal
    exit path from this function.  The change has had extensive testing and has
    been shown to fix the problem with no regressions found.
    
    Signed-off-by: Peter Keilty <Peter.Keilty@hp.com>
    Signed-off-by: Nicholas Dokos <nicholas.dokos@hp.com>
    Signed-off-by: Stephen Tweedie <sct@redhat.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/fs/jbd/transaction.c b/fs/jbd/transaction.c
index c64b8c0..932e7c1 100644
Index: linux-2.6.10/fs/jbd/transaction.c
===================================================================
--- linux-2.6.10.orig/fs/jbd/transaction.c
+++ linux-2.6.10/fs/jbd/transaction.c
@@ -1784,10 +1784,10 @@ static int journal_unmap_buffer(journal_
 			JBUFFER_TRACE(jh, "checkpointed: add to BJ_Forget");
 			ret = __dispose_buffer(jh,
 					journal->j_running_transaction);
+			journal_put_journal_head(jh);
 			spin_unlock(&journal->j_list_lock);
 			jbd_unlock_bh_state(bh);
 			spin_unlock(&journal->j_state_lock);
-			journal_put_journal_head(jh);
 			return ret;
 		} else {
 			/* There is no currently-running transaction. So the
@@ -1798,10 +1798,10 @@ static int journal_unmap_buffer(journal_
 				JBUFFER_TRACE(jh, "give to committing trans");
 				ret = __dispose_buffer(jh,
 					journal->j_committing_transaction);
+				journal_put_journal_head(jh);
 				spin_unlock(&journal->j_list_lock);
 				jbd_unlock_bh_state(bh);
 				spin_unlock(&journal->j_state_lock);
-				journal_put_journal_head(jh);
 				return ret;
 			} else {
 				/* The orphan record's transaction has
@@ -1822,10 +1822,10 @@ static int journal_unmap_buffer(journal_
 					journal->j_running_transaction);
 			jh->b_next_transaction = NULL;
 		}
+		journal_put_journal_head(jh);
 		spin_unlock(&journal->j_list_lock);
 		jbd_unlock_bh_state(bh);
 		spin_unlock(&journal->j_state_lock);
-		journal_put_journal_head(jh);
 		return 0;
 	} else {
 		/* Good, the buffer belongs to the running transaction.
Index: linux-2.6.10/mvl_patches/pro-0688.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0688.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(688);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

