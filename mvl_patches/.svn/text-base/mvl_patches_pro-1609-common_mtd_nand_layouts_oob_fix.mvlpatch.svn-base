#! /usr/bin/env bash
# Patch: -common_mtd_nand_layouts_oob_fix
# Date: Mon Jan 21 23:00:26 2008
# Source: MontaVista Software, Inc.
# MR: 26074 
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Andy Lowe <alowe@mvista.com>
# Description:
# 	The NAND core in the MVL 4.0 kernel contains a local 'page_layout_item'
# 	enhancement for supporting hardware ECC with unusual NAND page layouts.
# 	Specifically, the page_layout_item enhancement is required to support
# 	NAND controllers with HW ECC that either generate more than 32 bytes of ECC
# 	per NAND page or that have a page layout where the ECC and spare data are
# 	distributed throughout the NAND page instead of being grouped together at
# 	the end of the page.  The NAND core in the 2.6.18 and later linux kernels
# 	has a different scheme for dealing with these cases, so the page_layout_item
# 	is a local enhancement only in MVL 4 kernels.
# 
# 	The page_layout_item support adds two new functions, nand_read_oob_hwecc()
# 	and nand_write_oob_hwecc() that are only used with NAND map drivers that
# 	explicitly use the page_layout_item feature.  During testing of the DaVinci
# 	DM355 NAND driver it was discovered that these functions did not work
# 	correctly.  This patch fixes these routines so that they work as intended.
# 	Note that these routines are only used with NAND map drivers that explicitly
# 	use the page_layout_item feature, so this has no effect on most NAND map
# 	drivers.  The only board in any MVL 4 edition that used the page_layout_item
# 	feature at the time of this writing was the pnx4008 board.
# 
# 

PATCHNUM=1609
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 26074 
Type: Defect Fix
Disposition: local
Signed-off-by: Andy Lowe <alowe@mvista.com>
Description:
	The NAND core in the MVL 4.0 kernel contains a local 'page_layout_item'
	enhancement for supporting hardware ECC with unusual NAND page layouts.
	Specifically, the page_layout_item enhancement is required to support
	NAND controllers with HW ECC that either generate more than 32 bytes of ECC
	per NAND page or that have a page layout where the ECC and spare data are
	distributed throughout the NAND page instead of being grouped together at
	the end of the page.  The NAND core in the 2.6.18 and later linux kernels
	has a different scheme for dealing with these cases, so the page_layout_item
	is a local enhancement only in MVL 4 kernels.

	The page_layout_item support adds two new functions, nand_read_oob_hwecc()
	and nand_write_oob_hwecc() that are only used with NAND map drivers that
	explicitly use the page_layout_item feature.  During testing of the DaVinci
	DM355 NAND driver it was discovered that these functions did not work
	correctly.  This patch fixes these routines so that they work as intended.
	Note that these routines are only used with NAND map drivers that explicitly
	use the page_layout_item feature, so this has no effect on most NAND map
	drivers.  The only board in any MVL 4 edition that used the page_layout_item
	feature at the time of this writing was the pnx4008 board.


Index: linux-2.6.10/drivers/mtd/nand/nand_base.c
===================================================================
--- linux-2.6.10.orig/drivers/mtd/nand/nand_base.c
+++ linux-2.6.10/drivers/mtd/nand/nand_base.c
@@ -1649,150 +1649,140 @@ static int nand_read_oob (struct mtd_inf
  */
 static int nand_read_oob_hwecc (struct mtd_info *mtd, loff_t from, size_t len, size_t * retlen, u_char * oob_buf)
 {
-
-	int i, j, col, realpage, page, end, ecc, chipnr, sndcmd = 1, reallen = 0;
-	int read = 0;
+	int i, col, page, chipnr, nleft;
 	struct nand_chip *this = mtd->priv;
-	u_char *oob_data = oob_buf;
-        int 	eccsteps;
-	int	blockcheck = (1 << (this->phys_erase_shift - this->page_shift)) - 1;
 
+	DEBUG (MTD_DEBUG_LEVEL3, "%s: from = 0x%08x, len = %i\n", __FUNCTION__,
+		(unsigned int) from, (int) len);
+
+	/* Shift to get page */
+	page = (int)(from >> this->page_shift);
+	chipnr = (int)(from >> this->chip_shift);
+
+	/* Mask to get column */
+	col = from & (mtd->oobsize - 1);
 
-	DEBUG (MTD_DEBUG_LEVEL3, "%s: from = 0x%08x, len = %i\n", __FUNCTION__, (unsigned int) from, (int) len);
+	/* Initialize return length value */
+	*retlen = 0;
 
 	/* Do not allow reads past end of device */
 	if ((from + len) > mtd->size) {
+		DEBUG (MTD_DEBUG_LEVEL0, "%s: Attempt read beyond end of device\n",
+			__FUNCTION__);
 		*retlen = 0;
 		return -EINVAL;
 	}
 
 	/* Grab the lock and see if the device is available */
-	nand_get_device (this, mtd, FL_READING);
+	nand_get_device (this, mtd , FL_READING);
 
 	/* Select the NAND device */
-	chipnr = (int)(from >> this->chip_shift);
 	this->select_chip(mtd, chipnr);
 
-	/* First we calculate the starting page */
-	realpage = (int) (from >> this->page_shift);
-	page = realpage & this->pagemask;
-
-	/* Get raw starting column */
-	col = from & (mtd->oobblock - 1);
-
-	end = mtd->oobblock;
-	ecc = this->eccsize;
-	
-	/* Loop until all data read */
-	while (read < len) {
-		/* Check, if we must send the read command */
-		if (sndcmd) {
-			this->cmdfunc (mtd, NAND_CMD_READ0, 0x00, page);
-			sndcmd = 0;
-		}	
+	/*
+	 * Read the data, if we read more than one page
+	 * oob data, let the device transfer the data !
+	 */
+	i = 0;
+	nleft = len;
+	while (i < len) {
+		int ooboff, pageoff, eccsteps;
 
 		eccsteps = this->eccsteps;
-		
-		for (; eccsteps; eccsteps--) {
+		for (ooboff = 0, pageoff = 0; eccsteps; eccsteps--) {
+			int j, first, last, thislen;
+			/*
+			 * In the following we assume that each item (data, ECC,
+			 * and OOB) in the layout has an even length such as
+			 * would be required for a 16-bit-wide NAND.  This
+			 * assumption allows us to handle 16-bit-wide chips with
+			 * no special cases versus 8-bit-wide chips.
+			 */
 			for (j = 0; this->layout[j].length; j++) {
-				i = 0;
+				thislen = this->layout[j].length;
+				/* are we done yet? */
+				if (i == len)
+					goto finished;
 				switch (this->layout[j].type) {
 				case ITEM_TYPE_DATA:
-					DEBUG (MTD_DEBUG_LEVEL3, "%s: dummy data read\n", __FUNCTION__);
-					reallen += this->layout[j].length;
-					if (this->options & NAND_BUSWIDTH_16) 
-						this->cmdfunc (mtd, NAND_CMD_READ0, reallen & ~1, page);
-					else
-						this->cmdfunc (mtd, NAND_CMD_READ0, reallen, page);
-					break;
-
+					pageoff += thislen;
+					continue;
 				case ITEM_TYPE_ECC:
 				case ITEM_TYPE_OOB:
-					DEBUG (MTD_DEBUG_LEVEL3, "%s: %s bytes read\n", __FUNCTION__, this->layout[j].type == ITEM_TYPE_ECC ? "ecc" : "oob");
-					i = min_t(int, col, this->layout[j].length);
-					if (i) {
-						reallen += i;
-						if (this->options & NAND_BUSWIDTH_16)
-							this->cmdfunc (mtd, NAND_CMD_READ0, reallen & ~1, page);
-						else
-							this->cmdfunc (mtd, NAND_CMD_READ0, reallen, page);
+					/*
+					 * Calculate the intersection of the oob
+					 * data with this layout item.
+					 */
+					first = max(ooboff, col);
+					last = min(ooboff + thislen,
+						   col + nleft);
+					if (first >= last) {
+						/* no intersection */
+						break;
 					}
-					col -= i;
-
-					if (this->layout[j].type == ITEM_TYPE_ECC)
-						this->enable_hwecc(mtd, NAND_ECC_READSYN);
-					else
-						this->enable_hwecc(mtd, NAND_ECC_READOOB);
-					i = min_t(int, len - read, this->layout[j].length - i);
-					if (i) {
-						if (this->options & NAND_BUSWIDTH_16) {
-							if (reallen & 1) {
-								oob_data[0] = cpu_to_le16(this->read_word(mtd)) >> 8;
-								oob_data++; i--; reallen++;
-							}
-							if (i & 1)
-								this->read_buf(mtd, oob_data, i - 1);
-							else
-								this->read_buf(mtd, oob_data, i);
- 						}
-						else
-							this->read_buf(mtd, oob_data, i);
-						reallen += i;
+					this->cmdfunc(mtd, NAND_CMD_READ0,
+						pageoff +
+							((first - ooboff) & ~1),
+						page & this->pagemask);
+					/* handle an odd offset */
+					if (first & 1) {
+						oob_buf[i++] = cpu_to_le16(
+							this->read_word(mtd))
+							 >> 8;
+						++first;
+					}
+					if (last - first > 1) {
+						int n = ((last - first) & ~1);
+						/* read an even number of oob bytes */
+						this->read_buf(mtd, oob_buf + i, n);
+						i += n;
+						first += n;
+					}
+					/* handle an odd length */
+					if (last - first == 1) {
+						oob_buf[i++] = cpu_to_le16(
+							this->read_word(mtd))
+							 & 0xff;
+						++first;
 					}
-					if (oob_buf + len == oob_data + i) {
-						read += i;
-						goto out;
-	 				}
 					break;
 				}
-				read += i;
-				oob_data += i;
-
+				pageoff += thislen;
+				ooboff += thislen;
 			}
-		}		
-out:
+		}
 
-		/* Apply delay or wait for ready/busy pin 
-		 * Do this before the AUTOINCR check, so no problems
-		 * arise if a chip which does auto increment
-		 * is marked as NOAUTOINCR by the board driver.
-		*/
+		/*
+		 * Apply delay or wait for ready/busy pin in case the chip is
+		 * auto-incrementing to the next page.
+		 */
 		if (!this->dev_ready) 
 			udelay (this->chip_delay);
 		else
 			nand_wait_ready(mtd);
-			
-		if (read == len)
-			break;	
 
-		/* For subsequent reads align to page boundary. */
-		reallen = col = 0;
-		/* Increment page address */
-		realpage++;
+		/* Read more ? */
+		if (i < len) {
+			page++;
+			col = 0;
+			nleft = len - i;
 
-		page = realpage & this->pagemask;
-		/* Check, if we cross a chip boundary */
-		if (!page) {
-			chipnr++;
-			this->select_chip(mtd, -1);
-			this->select_chip(mtd, chipnr);
+			/* Check, if we cross a chip boundary */
+			if (!(page & this->pagemask)) {
+				chipnr++;
+				this->select_chip(mtd, -1);
+				this->select_chip(mtd, chipnr);
+			}
 		}
-		/* Check, if the chip supports auto page increment 
-		 * or if we have hit a block boundary. 
-		*/ 
-		if (!NAND_CANAUTOINCR(this) || !(page & blockcheck))
-			sndcmd = 1;				
 	}
-	
+
+finished:
 	/* Deselect and wake up anyone waiting on the device */
 	nand_release_device(mtd);
 
-	*retlen = read;
-	/*
-	 * Return success
-	 */
+	/* Return happy */
+	*retlen = len;
 	return 0;
-
 }
 
 
@@ -2203,7 +2193,7 @@ out:
 static int nand_write_oob_hwecc (struct mtd_info *mtd, loff_t to, size_t len, size_t * retlen, const u_char * oob_buf)
 {
 	int column, page, status, ret = -EIO, chipnr, eccsteps;
-	int fflen, old_fflen, ooblen;
+	int ooblen, oc;
 	struct nand_chip *this = mtd->priv;
 
 	DEBUG (MTD_DEBUG_LEVEL3, "%s: to = 0x%08x, len = %i\n", __FUNCTION__, (unsigned int) to, (int) len);
@@ -2249,101 +2239,77 @@ static int nand_write_oob_hwecc (struct 
 	this->cmdfunc (mtd, NAND_CMD_SEQIN, 0, page & this->pagemask);
 
 	eccsteps = this->eccsteps;
-		
-	for (fflen = 0, ooblen = 0, old_fflen = 0; eccsteps; eccsteps--) {
-		int i, j;
+
+	for (ooblen = 0, oc = 0; eccsteps; eccsteps--) {
+		int j, first, last, thislen;
+		/*
+		 * In the following we assume that each item (data, ECC,
+		 * and OOB) in the layout has an even length such as would be
+		 * required for a 16-bit-wide NAND.  This assumption allows us
+		 * to handle 16-bit-wide chips with no special cases versus
+		 * 8-bit-wide chips.
+		 */
 		for (j = 0; this->layout[j].length; j++) {
+			/* are we done yet? */
+			if ((oc == len) && !NAND_MUST_PAD(this))
+				goto finish;
+			thislen = this->layout[j].length;
 			switch (this->layout[j].type) {
 			case ITEM_TYPE_DATA:
-				if (this->options & NAND_COMPLEX_OOB_WRITE) {
-					this->enable_hwecc(mtd, NAND_ECC_WRITE);
-					this->write_buf(mtd, ffchars, this->layout[j].length);
-					fflen += this->layout[j].length;
-				} else {
-					if (old_fflen < fflen) {
-						this->cmdfunc (mtd, NAND_CMD_PAGEPROG, -1, -1);
-						status = this->waitfunc (mtd, this, FL_WRITING);
-						if (status & NAND_STATUS_FAIL) {
-							DEBUG (MTD_DEBUG_LEVEL0, "%s: Failed write, page 0x%08x\n", __FUNCTION__, page);
-							ret = -EIO;
-							goto out;
-						}
-					}
-					fflen += this->layout[j].length;
-					if (this->options & NAND_BUSWIDTH_16 && (fflen + ooblen) & 1)
-						this->cmdfunc (mtd, NAND_CMD_SEQIN, fflen + ooblen - 1, page & this->pagemask);
-					else
-						this->cmdfunc (mtd, NAND_CMD_SEQIN, fflen + ooblen, page & this->pagemask);
-					old_fflen = fflen;
-				}
-				break;
-
+				this->write_buf(mtd, ffchars, thislen);
+				continue;
 			case ITEM_TYPE_ECC:
 			case ITEM_TYPE_OOB:
-				if (this->layout[j].type == ITEM_TYPE_ECC)
-					this->enable_hwecc(mtd, NAND_ECC_WRITESYN);
-				else
-					this->enable_hwecc(mtd, NAND_ECC_WRITEOOB);
-				i = min_t(int, column, this->layout[j].length);
-				if (i) {
-					/*
-					 * if i is odd, then we're in the
-					 * situation when we either stopped at
-					 * i-1 or at 1
-					 */
-					if (this->options & NAND_BUSWIDTH_16 && i & 1)
-						i--;
-					/*
-					 * handle specific case: i was 1
-					 * i. e. write (0th, 1th) bytes
-					 */
-					if (i == 0) {
-						this->write_word(mtd, cpu_to_le16((oob_buf[0] << 8) | 0xff));
-						i++;
-						ooblen++;
-					} else
-						/* write i-1 (even number) */
-						this->write_buf(mtd, ffchars, i);
-				}
-				column -= i;
-				fflen += i;
 				/*
-				 * do we have anything else to write
-				 * for this layout item?
+				 * Calculate the intersection of the oob data
+				 * with this layout item.
 				 */
-				i = min_t(int, len + column - ooblen, this->layout[j].length - i);
-				if (i) {
-					if (column) {
-						/*
-						 * we're here? this means that
-						 * column now equals to 1
-						 */
-						this->write_word(mtd, cpu_to_le16((oob_buf[0] << 8) | 0xff));
-						i--;
-						ooblen++;
-						column--;
-					}
-					if (i & 1)
-						i--;
-					this->write_buf(mtd, &oob_buf[ooblen], i);
+				first = max(ooblen, column);
+				last = min(ooblen + thislen, column + (int)len);
+				if (first >= last) {
+					/* no intersection */
+					this->write_buf(mtd, ffchars, thislen);
+					break;
 				}
-				ooblen += i;
-				/*
-				 * do we have to write the 1-byte tail?
-				 */
-				if (ooblen == len - 1) {
-					this->write_word(mtd, cpu_to_le16(oob_buf[ooblen]) | 0xff00);
-					ooblen += 2;
+				/* pre-pad */
+				if (first > ooblen + 1) {
+					/* write an even number of FFs */
+					this->write_buf(mtd, ffchars,
+						((first - ooblen) & ~1));
+				}
+				/* handle an odd offset */
+				if (first & 1) {
+					this->write_word(mtd,
+						cpu_to_le16((oob_buf[oc++] << 8)
+							    | 0xff));
+					++first;
+				}
+				if (last - first > 1) {
+					int n = ((last - first) & ~1);
+					/* write an even number of oob bytes */
+					this->write_buf(mtd, oob_buf + oc, n);
+					oc += n;
+					first += n;
+				}
+				/* handle an odd length */
+				if (last - first == 1) {
+					this->write_word(mtd,
+						cpu_to_le16(0xff00
+							    | oob_buf[oc++]));
+					++first;
 				}
-				if (ooblen >= len) {
-					if (NAND_MUST_PAD(this))
-						this->write_buf(mtd, ffchars, mtd->oobsize + mtd->oobblock - fflen - ooblen);
-					goto finish;
+				/* post-pad */
+				if (((last + 1) & ~1) < ooblen + thislen) {
+					this->write_buf(mtd, ffchars,
+						ooblen + thislen
+						- ((last + 1) & ~1));
 				}
 				break;
 			}
+			ooblen += thislen;
 		}
 	}
+
 finish:
 	/* Send command to program the OOB data */
 	this->cmdfunc (mtd, NAND_CMD_PAGEPROG, -1, -1);
@@ -2359,10 +2325,8 @@ finish:
 	/* Return happy */
 	*retlen = len;
 
-#ifdef CONFIG_MTD_NAND_VERIFY_WRITE
-#warning "Verify for OOB data in HW ECC case is NOT YET implemented"
-#endif
 	ret = 0;
+
 out:
 	/* Deselect and wake up anyone waiting on the device */
 	nand_release_device(mtd);
Index: linux-2.6.10/mvl_patches/pro-1609.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1609.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1609);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

