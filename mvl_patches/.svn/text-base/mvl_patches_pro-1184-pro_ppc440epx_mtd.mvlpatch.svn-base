#! /usr/bin/env bash
# Patch: -pro_ppc440epx_mtd
# Date: Tue Mar  6 16:11:54 2007
# Source: AMCC
# MR: 21052
# Type: Enhancement
# Disposition: backport of http://www.amcc.com/Embedded/Downloads/440EPx
# Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
# Description:
#     The patch adds MTD flash devices support
#     found on the PPC440EPx/PPC440GRx board.
# 

PATCHNUM=1184
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: AMCC
MR: 21052
Type: Enhancement
Disposition: backport of http://www.amcc.com/Embedded/Downloads/440EPx
Signed-off-by: Valentine Barshak <vbarshak@ru.mvista.com>
Description:
    The patch adds MTD flash devices support
    found on the PPC440EPx/PPC440GRx board.

Index: linux-2.6.10/drivers/mtd/maps/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/mtd/maps/Kconfig
+++ linux-2.6.10/drivers/mtd/maps/Kconfig
@@ -485,6 +485,14 @@ config MTD_BAMBOO
 	  Bamboo board.  If you have one of these boards and would like to
 	  use the flash chips on it, say 'Y'.
 
+config MTD_SEQUOIA
+	tristate "Flash devices mapped on AMCC 440EPX/440GRX Sequoia"
+	depends on MTD_CFI && PPC32 && 44x && (SEQUOIA || RAINIER)
+	help
+	  This enables access routined for the flash chips on the AMCC 440EPX
+	  or 440GRX Sequoia board.  If you have one of these boards and would like to
+	  use the flash chips on it, say 'Y'.
+
 config MTD_LUAN
 	tristate "Flash devices mapped on IBM 440SP Luan"
 	depends on MTD_CFI && LUAN
Index: linux-2.6.10/drivers/mtd/maps/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/mtd/maps/Makefile
+++ linux-2.6.10/drivers/mtd/maps/Makefile
@@ -60,6 +60,7 @@ obj-$(CONFIG_MTD_SCB2_FLASH)	+= scb2_fla
 obj-$(CONFIG_MTD_EBONY)		+= ebony.o
 obj-$(CONFIG_MTD_OCOTEA)	+= ocotea.o
 obj-$(CONFIG_MTD_BAMBOO)	+= bamboo.o
+obj-$(CONFIG_MTD_SEQUOIA)	+= sequoia.o
 obj-$(CONFIG_MTD_LUAN)		+= luan.o
 obj-$(CONFIG_MTD_BEECH)		+= beech-mtd.o
 obj-$(CONFIG_MTD_ARCTIC)	+= arctic-mtd.o
Index: linux-2.6.10/drivers/mtd/maps/sequoia.c
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/mtd/maps/sequoia.c
@@ -0,0 +1,129 @@
+/*
+ * Mapping for Sequoia (440EPX) and Rainier (440GRX) flash
+ *
+ * Copyright 2006 MontaVista Software Inc.
+ *
+ * Copyright (c) 2005 DENX Software Engineering
+ * Stefan Roese <sr@denx.de>
+ *
+ * Based on original work by
+ *      Matt Porter <mporter@kernel.crashing.org>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/config.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+
+#include <asm/io.h>
+
+#define WINDOW_ADDR 0x1fc000000ull
+#define WINDOW_SIZE 0x04000000
+
+static struct mtd_partition sequoia_partitions[] = {
+	{
+		.name = "kernel",	/* linux kernel */
+		.size = 0x180000,
+	},
+	{
+		.name = "ramdisk",	/* ramdisk */
+		.size = 0x200000,
+	},
+	{
+		.name = "file system",	/* jffs2 file system */
+	},
+	{
+		.name = "kozio",	/* diagnostics */
+		.size = 0x140000,
+	},
+	{
+		.name = "env",		/* u-boot environment */
+		.size = 0x40000,
+	},
+	{
+		.name = "u-boot",	/* boot loader */
+		.size = 0x60000,
+	}
+};
+#define NUM_PARTITIONS (sizeof(sequoia_partitions)/sizeof(sequoia_partitions[0]))
+
+struct map_info sequoia_flash_map = {
+	.name = "AMCC440-flash",
+	.size = WINDOW_SIZE,
+	.bankwidth = 2,
+};
+
+static struct mtd_info *sequoia_mtd;
+
+int __init init_sequoia_flash(void)
+{
+	printk(KERN_NOTICE "sequoia: flash mapping: %x at %llx\n",
+	       WINDOW_SIZE, WINDOW_ADDR);
+
+	sequoia_flash_map.virt = ioremap64(WINDOW_ADDR, WINDOW_SIZE);
+
+	if (!sequoia_flash_map.virt) {
+		printk("init_sequoia_flash: failed to ioremap\n");
+		return  -EIO;
+	}
+	simple_map_init(&sequoia_flash_map);
+
+	sequoia_mtd = do_map_probe("cfi_probe", &sequoia_flash_map);
+
+	if (sequoia_mtd) {
+		unsigned offset, u, size = sequoia_mtd->size;
+		/* subtract partition sizes from total space */
+		for (u=0; u<NUM_PARTITIONS; u++) {
+			size -= sequoia_partitions[u].size;
+		}
+		/* set user size to any unused space */
+		if (size < sequoia_mtd->size) {
+			for (u=0; u<NUM_PARTITIONS; u++) {
+				if (!sequoia_partitions[u].size) {
+					sequoia_partitions[u].size = size;
+					break;
+				}
+			}
+		}
+		/* set offsets for all partitions */
+		for (u=offset=0; u<NUM_PARTITIONS; u++) {
+			sequoia_partitions[u].offset = offset;
+			offset += sequoia_partitions[u].size;
+		}
+
+		sequoia_mtd->owner = THIS_MODULE;
+		return  add_mtd_partitions(sequoia_mtd,
+					   sequoia_partitions,
+					   NUM_PARTITIONS);
+	}
+
+	return  -ENXIO;
+}
+
+static void __exit cleanup_sequoia_flash(void)
+{
+	if (sequoia_mtd) {
+		del_mtd_partitions(sequoia_mtd);
+		/* moved iounmap after map_destroy - armin */
+		map_destroy(sequoia_mtd);
+		iounmap((void *)sequoia_flash_map.virt);
+	}
+}
+
+module_init(init_sequoia_flash);
+module_exit(cleanup_sequoia_flash);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Stefan Roese <sr@denx.de>");
+MODULE_DESCRIPTION("MTD map and partitions for AMCC 440EPx/GRx boards");
+
Index: linux-2.6.10/drivers/mtd/nand/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/mtd/nand/Kconfig
+++ linux-2.6.10/drivers/mtd/nand/Kconfig
@@ -163,6 +163,13 @@ config MTD_NAND_BAMBOO
 	  This enables the NAND flash driver on the IBM/AMCC 440EP Eval Board
 	  (Bamboo).
 
+config MTD_NAND_SEQUOIA
+	tristate "NAND flash support on AMCC 440EPX/440GRX Eval Board (Sequoia)"
+	depends on  MTD_NAND && (SEQUOIA || RAINIER)
+	help
+	  This enables the NAND flash driver on the AMCC 440EPX/440GRX Eval Board
+	  (Sequoia).
+
 config MTD_NAND_PNX8550
 	tristate "NAND Flash support for PNX8550"
 	depends on PNX8550 && MTD_NAND
Index: linux-2.6.10/drivers/mtd/nand/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/mtd/nand/Makefile
+++ linux-2.6.10/drivers/mtd/nand/Makefile
@@ -17,6 +17,7 @@ obj-$(CONFIG_MTD_NAND_AU1550)		+= au1550
 obj-$(CONFIG_MTD_NAND_PPCHAMELEONEVB)	+= ppchameleonevb.o
 obj-$(CONFIG_MTD_NAND_S3C2410)		+= s3c2410.o
 obj-$(CONFIG_MTD_NAND_BAMBOO)		+= bamboo_nand.o
+obj-$(CONFIG_MTD_NAND_SEQUOIA)		+= sequoia_nand.o
 obj-$(CONFIG_MTD_NAND_DISKONCHIP)	+= diskonchip.o
 obj-$(CONFIG_MTD_NAND_H1900)		+= h1910.o
 obj-$(CONFIG_MTD_NAND_RTC_FROM4)	+= rtc_from4.o
Index: linux-2.6.10/drivers/mtd/nand/sequoia_nand.c
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/mtd/nand/sequoia_nand.c
@@ -0,0 +1,354 @@
+/*
+ *  drivers/mtd/nand/sequoia_nand.c
+ *
+ *  Overview:
+ *   This is a device driver for the NAND flash devices found on the
+ *   IBM 440EPx and 440GRx Evaluation Boards (Sequoia/Rainier).
+ *
+ *  Author: Wade Farnsworth <wfarnsworth@mvista.com>
+ *
+ *  Copyright 2005 MontaVista Software Inc.
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/mtd/nand_ecc.h>
+#include <linux/mtd/partitions.h>
+#include <linux/config.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <asm/io.h>
+#include <asm/ibm44x.h>
+#include <platforms/4xx/sequoia.h>
+
+struct ppc440ep_ndfc_regs {
+	uint cmd;
+	uint addr;
+	uint data;
+	uint reserved1;
+	uint ecc0;
+	uint ecc1;
+	uint ecc2;
+	uint ecc3;
+	uint ecc4;
+	uint ecc5;
+	uint ecc6;
+	uint ecc7;
+	uint b0cr;
+	uint b1cr;
+	uint b2cr;
+	uint b3cr;
+	uint cr;
+	uint sr;
+	uint hwctl;
+	uint reserved2;
+	uint revid;
+};
+
+static u8 nand_cs;			/* chip select 0 if boot from nand else 3 */
+static struct mtd_info *sequoia_nand0_mtd;
+static u8 hwctl;
+static struct ppc440ep_ndfc_regs *sequoia_ndfc;
+
+#define UBOOT_SIZE		0x0080000	/* reserve 512k for u-boot */
+#define KERNEL_SIZE		0x0180000	/* reserve 1.5m for kernel */
+#define NAND_SIZE		0x2000000	/* 32mb device */
+
+static struct mtd_partition nand0_partition_info[] = {
+	{
+		.name   = "u-boot-nand",
+		.offset = 0,
+		.size   = UBOOT_SIZE,
+	},
+	{
+		.name   = "kernel-nand",
+		.offset = UBOOT_SIZE,
+		.size   = KERNEL_SIZE,
+	},
+	{
+	 	.name   = "filesystem",
+	 	.offset = UBOOT_SIZE+KERNEL_SIZE,
+	 	.size   = NAND_SIZE-UBOOT_SIZE-KERNEL_SIZE,
+	 },
+};
+
+
+/*
+ * The 440EPx has a NAND Flash Controller (NDFC) that handles all accesses to
+ * the NAND devices.  The NDFC has command, address and data registers that
+ * when accessed will set up the NAND flash pins appropriately.  We'll use the
+ * hwcontrol function to save the configuration in a global variable.
+ * We can then use this information in the read and write functions to
+ * determine which NDFC register to access. For the NCE commands, we'll just
+ * set or clear the Bank Enable bit in the NDFC Bank Config registers.
+ *
+ * There is 1 NAND devices on the board, a Samsung K9F5608U0B (32 MB).
+ */
+static void
+sequoia_hwcontrol(struct mtd_info *mtd, int cmd)
+{
+	switch (cmd) {
+	case NAND_CTL_SETCLE:
+		hwctl |= 0x1;
+		break;
+	case NAND_CTL_CLRCLE:
+		hwctl &= ~0x1;
+		break;
+	case NAND_CTL_SETALE:
+		hwctl |= 0x2;
+		break;
+	case NAND_CTL_CLRALE:
+		hwctl &= ~0x2;
+		break;
+	}
+}
+
+static void
+sequoia_nand0_hwcontrol(struct mtd_info *mtd, int cmd)
+{
+	switch(cmd) {
+	case NAND_CTL_SETNCE:
+		if (nand_cs == 0)
+		    sequoia_ndfc->b0cr |= 0x80000000;
+		else
+		    sequoia_ndfc->b3cr |= 0x80000000;
+		break;
+	case NAND_CTL_CLRNCE:
+		if (nand_cs == 0)
+		    sequoia_ndfc->b0cr &= ~0x80000000;
+		else
+		    sequoia_ndfc->b3cr &= ~0x80000000;
+		break;
+	default:
+		sequoia_hwcontrol(mtd, cmd);
+	}
+}
+
+static void
+sequoia_nand0_enable(void)
+{
+	sequoia_ndfc->cr = nand_cs << 24;  /* nand chip select is 0 or 3 */
+}
+
+static void
+sequoia_write_byte(struct mtd_info *mtd, u_char byte)
+{
+	if (hwctl & 0x1)
+		writeb(byte, &(sequoia_ndfc->cmd));
+	else if (hwctl & 0x2)
+		writeb(byte, &(sequoia_ndfc->addr));
+	else
+		writeb(byte, &(sequoia_ndfc->data));
+}
+
+static void
+sequoia_nand0_write_byte(struct mtd_info *mtd, u_char byte)
+{
+	sequoia_nand0_enable();
+	sequoia_write_byte(mtd, byte);
+}
+
+static u_char
+sequoia_read_byte(struct mtd_info *mtd)
+{
+	u_char retval;
+
+	if (hwctl & 0x1)
+		retval = readb(&(sequoia_ndfc->cmd));
+	else if (hwctl & 0x2)
+		retval = readb(&(sequoia_ndfc->addr));
+	else
+		retval = readb( &sequoia_ndfc->data );
+
+	return retval;
+}
+
+static u_char
+sequoia_nand0_read_byte(struct mtd_info *mtd)
+{
+	sequoia_nand0_enable();
+	return sequoia_read_byte(mtd);
+}
+
+static void
+sequoia_nand_write_buf(struct mtd_info *mtd, const u_char * buf, int len)
+{
+	int i;
+	for (i = 0; i < len; i++) {
+		if (hwctl & 0x1)
+			writeb(buf[i], &(sequoia_ndfc->cmd));
+		else if (hwctl & 0x2)
+			writeb(buf[i], &(sequoia_ndfc->addr));
+		else
+			writeb(buf[i], &(sequoia_ndfc->data));
+	}
+}
+
+static void
+sequoia_nand0_write_buf(struct mtd_info *mtd, const u_char * buf, int len)
+{
+	sequoia_nand0_enable();
+	sequoia_nand_write_buf(mtd, buf, len);
+}
+
+static void
+sequoia_nand_read_buf(struct mtd_info *mtd, u_char * buf, int len)
+{
+	int i;
+
+	for (i = 0; i < len; i++) {
+		if (hwctl & 0x1)
+			buf[i] = readb(&(sequoia_ndfc->cmd));
+		else if (hwctl & 0x2)
+			buf[i] = readb(&(sequoia_ndfc->addr));
+		else
+			buf[i] = readb(&(sequoia_ndfc->data));
+	}
+}
+
+static void
+sequoia_nand0_read_buf(struct mtd_info *mtd, u_char * buf, int len)
+{
+	sequoia_nand0_enable();
+	sequoia_nand_read_buf(mtd, buf, len);
+}
+
+static int
+sequoia_nand_verify_buf(struct mtd_info *mtd, const u_char * buf, int len)
+{
+	int i;
+
+	for (i = 0; i < len; i++) {
+		if (hwctl & 0x1) {
+			if (buf[i] != readb(&(sequoia_ndfc->cmd)))
+				return i;
+		} else if (hwctl & 0x2) {
+			if (buf[i] != readb(&(sequoia_ndfc->addr)))
+				return i;
+		} else {
+			if (buf[i] != readb(&(sequoia_ndfc->data)))
+				return i;
+		}
+
+	}
+
+	return 0;
+}
+
+static int
+sequoia_nand0_verify_buf(struct mtd_info *mtd, const u_char * buf, int len)
+{
+	sequoia_nand0_enable();
+	return sequoia_nand_verify_buf(mtd, buf, len);
+}
+
+static int
+sequoia_dev_ready(struct mtd_info *mtd)
+{
+	return ((sequoia_ndfc->sr) & 0x01000000) ? 1 : 0;
+}
+
+int __init
+sequoia_init(void)
+{
+	int err = 0;
+	struct nand_chip *this;
+	unsigned sdr0_sdstp1, rl;
+
+	mtdcr( SDR0_CFGADDR, SDR0_SDSTP1 ); /* serial device strap register 1 */
+	sdr0_sdstp1 = mfdcr( SDR0_CFGDATA );
+	rl = sdr0_sdstp1 >> 11  &  3;	/* ROM location is 0 if EBC, 2 if NAND */
+
+	nand_cs = rl == 2 ? 0 : 3;	/* chip select 0 if NAND boot, else 3 */
+
+	hwctl = 0;
+
+	sequoia_nand0_mtd = kmalloc(sizeof(struct mtd_info) +
+				   sizeof(struct nand_chip),
+				   GFP_KERNEL);
+
+	sequoia_ndfc = ioremap64(SEQUOIA_NAND_FLASH_REG_ADDR,
+			        SEQUOIA_NAND_FLASH_REG_SIZE);
+	if (!sequoia_ndfc) {
+		printk("Ioremap to access NDFC Registers failed \n");
+		err = -EIO;
+		goto out;
+	}
+
+	/* Initialize structures */
+	memset((char *) sequoia_nand0_mtd, 0,
+	       sizeof (struct mtd_info) + sizeof (struct nand_chip));
+
+	/* Get pointer to private data */
+	this = (struct nand_chip *) (&sequoia_nand0_mtd[1]);
+	/* Link the private data with the MTD structure */
+	sequoia_nand0_mtd->priv = this;
+
+	/* Set address of NAND IO lines (Using Linear Data Access Region) */
+	this->IO_ADDR_R = (void __iomem *) ((ulong) sequoia_ndfc + 0x1000);
+	this->IO_ADDR_W = (void __iomem *) ((ulong) sequoia_ndfc + 0x1000);
+	/* Reference hardware control function */
+	this->hwcontrol  = sequoia_nand0_hwcontrol;
+	/* Set command delay time */
+	this->chip_delay = 12;
+	this->eccmode    = NAND_ECC_SOFT;
+	this->write_byte = sequoia_nand0_write_byte;
+	this->read_byte  = sequoia_nand0_read_byte;
+	this->write_buf  = sequoia_nand0_write_buf;
+	this->read_buf   = sequoia_nand0_read_buf;
+	this->verify_buf = sequoia_nand0_verify_buf;
+	this->dev_ready  = sequoia_dev_ready;
+
+	/* Scan to find existance of the device */
+	if (nand_scan(sequoia_nand0_mtd, 1)) {
+		err = -ENXIO;
+		goto out_ior;
+	}
+
+	add_mtd_partitions(sequoia_nand0_mtd, nand0_partition_info,
+			sizeof nand0_partition_info/sizeof nand0_partition_info[0]);
+
+	goto out;
+
+out_ior:
+	iounmap((void *)sequoia_ndfc);
+
+	kfree(sequoia_nand0_mtd);
+out:
+	return err;
+}
+
+static void __exit
+sequoia_cleanup(void)
+{
+	/* Unregister partitions */
+	del_mtd_partitions(sequoia_nand0_mtd);
+
+	/* Release resources, unregister device */
+	del_mtd_device(sequoia_nand0_mtd);
+
+	/* unmap physical address */
+	iounmap((void *) sequoia_ndfc);
+
+	/* Free the MTD device structure */
+	kfree(sequoia_nand0_mtd);
+}
+
+module_init(sequoia_init);
+module_exit(sequoia_cleanup);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Wade Farnsworth <wfarnsworth@mvista.com>");
+MODULE_DESCRIPTION
+    ("Board-specific glue layer for NAND flash on IBM 440EPx/440GRx eval board");
+
Index: linux-2.6.10/mvl_patches/pro-1184.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1184.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1184);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

