#! /usr/bin/env bash
# Patch: -pro_arm_davinci_nand_move_bbt_to_platform_data
# Date: Mon Jan 21 23:05:39 2008
# Source: MontaVista Software, Inc.
# MR: 25797
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Andy Lowe <alowe@mvista.com>
# Description:
# 		Move the NAND BBT code to the platform data directory/file.
# 

PATCHNUM=1672
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 25797
Type: Defect Fix
Disposition: local
Signed-off-by: Andy Lowe <alowe@mvista.com>
Description:
		Move the NAND BBT code to the platform data directory/file.

Index: linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-dm355-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
@@ -143,12 +143,39 @@ static struct mtd_partition nand_partiti
 	}
 };
 
+/* flash bbt decriptors */
+static uint8_t nand_davinci_bbt_pattern[] = { 'B', 'b', 't', '0' };
+static uint8_t nand_davinci_mirror_pattern[] = { '1', 't', 'b', 'B' };
+
+static struct nand_bbt_descr nand_davinci_bbt_main_descr = {
+	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
+	| NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+	.offs = 2,
+	.len = 4,
+	.veroffs = 16,
+	.maxblocks = 4,
+	.pattern = nand_davinci_bbt_pattern
+};
+
+static struct nand_bbt_descr nand_davinci_bbt_mirror_descr = {
+	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
+	| NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+	.offs = 2,
+	.len = 4,
+	.veroffs = 16,
+	.maxblocks = 4,
+	.pattern = nand_davinci_mirror_pattern
+};
+
+
 
 static struct nand_davinci_platform_data nand_data = {
 	.options	= 0,
 	.eccmode	= NAND_ECC_HW10_512,
 	.cle_mask	= 0x10,
 	.ale_mask	= 0x08,
+	.bbt_td         = &nand_davinci_bbt_main_descr,
+	.bbt_md         = &nand_davinci_bbt_mirror_descr,
 	.parts		= nand_partitions,
 	.nr_parts	= ARRAY_SIZE(nand_partitions),
   };
Index: linux-2.6.10/arch/arm/mach-davinci/board-evm.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/board-evm.c
+++ linux-2.6.10/arch/arm/mach-davinci/board-evm.c
@@ -180,6 +180,8 @@ static struct nand_davinci_platform_data
 	.eccmode	= NAND_ECC_HW3_512,
 	.cle_mask	= 0x10,
 	.ale_mask	= 0x08,
+	.bbt_td		= NULL,
+	.bbt_md		= NULL,
 	.parts		= nand_partitions,
 	.nr_parts	= ARRAY_SIZE(nand_partitions),
 };
Index: linux-2.6.10/drivers/mtd/nand/nand_davinci.c
===================================================================
--- linux-2.6.10.orig/drivers/mtd/nand/nand_davinci.c
+++ linux-2.6.10/drivers/mtd/nand/nand_davinci.c
@@ -183,30 +183,6 @@ struct nand_davinci_info {
 #define ECC_STATE_ERR_CORR_COMP_N	0x3
 #define ECC_MAX_CORRECTABLE_ERRORS	0x4
 
-/* flash bbt decriptors */
-static uint8_t nand_davinci_bbt_pattern[] = { 'B', 'b', 't', '0' };
-static uint8_t nand_davinci_mirror_pattern[] = { '1', 't', 'b', 'B' };
-
-static struct nand_bbt_descr nand_davinci_bbt_main_descr = {
-	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
-	    | NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
-	.offs = 2,
-	.len = 4,
-	.veroffs = 16,
-	.maxblocks = 4,
-	.pattern = nand_davinci_bbt_pattern
-};
-
-static struct nand_bbt_descr nand_davinci_bbt_mirror_descr = {
-	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
-	    | NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
-	.offs = 2,
-	.len = 4,
-	.veroffs = 16,
-	.maxblocks = 4,
-	.pattern = nand_davinci_mirror_pattern
-};
-
 /*
  * nand_davinci_select_chip
  * Select a chip in a multi-chip device
@@ -907,8 +883,8 @@ static int __devinit nand_davinci_probe(
 	this->hwcontrol = nand_davinci_hwcontrol;
 	this->options = pdata->options;
 	this->eccmode = pdata->eccmode;
-	this->bbt_td = &nand_davinci_bbt_main_descr;
-	this->bbt_md = &nand_davinci_bbt_mirror_descr;
+	this->bbt_td = pdata->bbt_td;
+	this->bbt_md = pdata->bbt_md;
 
 	info->cle_mask = pdata->cle_mask;
 	info->ale_mask = pdata->ale_mask;
Index: linux-2.6.10/include/linux/nand_davinci.h
===================================================================
--- linux-2.6.10.orig/include/linux/nand_davinci.h
+++ linux-2.6.10/include/linux/nand_davinci.h
@@ -10,6 +10,8 @@
 #ifndef DAVINCI_NAND_PLAT_H
 #define DAVINCI_NAND_PLAT_H
 
+#include <linux/mtd/nand.h>
+
 /**
  * struct nand_davinci_platform_data - platform data describing NAND flash banks
  * @options:	bitmask for nand_chip.options
@@ -18,8 +20,10 @@
  *		(command latch enable)
  * @ale_mask:	bitmask with address bit to set to activate ALE
  *		(address latch enable)
+ * @bbt_td:	pointer to nand_bbt_descr for primary bad block table
+ * @bbt_md:	pointer to nand_bbt_descr for mirror bad block table
  * @parts:	optional array of mtd_partitions for static partitioning
- * @nr_parts:	number of mtd_partitions for static partitoning
+ * @nr_parts:	number of mtd_partitions for static partitioning
  * @
  */
 struct nand_davinci_platform_data {
@@ -27,6 +31,8 @@ struct nand_davinci_platform_data {
 	int eccmode;
 	unsigned int cle_mask;
 	unsigned int ale_mask;
+	struct nand_bbt_descr *bbt_td;
+	struct nand_bbt_descr *bbt_md;
 	struct mtd_partition *parts;
 	unsigned int nr_parts;
 };
Index: linux-2.6.10/mvl_patches/pro-1672.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1672.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1672);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

