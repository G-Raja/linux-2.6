#! /usr/bin/env bash
# Patch: -pro_ppc32_82xx_pci_fix
# Date: Wed Dec 28 15:04:11 2005
# Source: MontaVista Software, Inc.
# MR: 
# Type: Defect Fix
# Disposition: needs submitting to akpm@osdl.org
# Signed-off-by: Vitaly Bordug <vbordug@ru.mvista.com>
# Description:
#     Protected by spinlock some vital parts of PCI IRQ demux stuff, and made demux itself 
# run with raw spinlock on, hence to be in __do_IRQ with disabled interrupts. Also fixed incorrect timeout detection.
# 

PATCHNUM=284
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 
Type: Defect Fix
Disposition: needs submitting to akpm@osdl.org
Signed-off-by: Vitaly Bordug <vbordug@ru.mvista.com>
Description:
    Protected by spinlock some vital parts of PCI IRQ demux stuff, and made demux itself 
run with raw spinlock on, hence to be in __do_IRQ with disabled interrupts. Also fixed incorrect timeout detection.

Index: linux-2.6.10/arch/ppc/syslib/m82xx_pci.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/syslib/m82xx_pci.c
+++ linux-2.6.10/arch/ppc/syslib/m82xx_pci.c
@@ -47,6 +47,8 @@
 
 #include "m82xx_pci.h"
 
+static DEFINE_RAW_SPINLOCK(pq2pci_lock);
+
 /*
  * Interrupt routing
  */
@@ -72,39 +74,50 @@ pq2pci_map_irq(struct pci_dev *dev, unsi
 static void
 pq2pci_mask_irq(unsigned int irq)
 {
+	unsigned long flags;
 	int bit = irq - NR_CPM_INTS;
 
+	spin_lock_irqsave(&pq2pci_lock, flags);
+
+
 	*(volatile unsigned long *) PCI_INT_MASK_REG |= (1 << (31 - bit));
-	return;
+	spin_unlock_irqrestore(&pq2pci_lock, flags);
 }
 
 static void
 pq2pci_unmask_irq(unsigned int irq)
 {
+	unsigned long flags;
 	int bit = irq - NR_CPM_INTS;
 
+	spin_lock_irqsave(&pq2pci_lock, flags);
+
+
 	*(volatile unsigned long *) PCI_INT_MASK_REG &= ~(1 << (31 - bit));
-	return;
+	spin_unlock_irqrestore(&pq2pci_lock, flags);
 }
 
 static void
 pq2pci_mask_and_ack(unsigned int irq)
 {
+	unsigned long flags;
 	int bit = irq - NR_CPM_INTS;
 
+	spin_lock_irqsave(&pq2pci_lock, flags);
+
 	*(volatile unsigned long *) PCI_INT_MASK_REG |= (1 << (31 - bit));
-	return;
+	spin_unlock_irqrestore(&pq2pci_lock, flags);
 }
 
 static void
 pq2pci_end_irq(unsigned int irq)
 {
-	int bit = irq - NR_CPM_INTS;
-
-	*(volatile unsigned long *) PCI_INT_MASK_REG &= ~(1 << (31 - bit));
-	return;
+	if (!(irq_desc[irq].status & (IRQ_DISABLED|IRQ_INPROGRESS))
+	    && irq_desc[irq].action)
+		pq2pci_unmask_irq(irq);
 }
 
+
 struct hw_interrupt_type pq2pci_ic = {
 	"PQ2 PCI",
 	NULL,
@@ -119,9 +132,10 @@ struct hw_interrupt_type pq2pci_ic = {
 static irqreturn_t
 pq2pci_irq_demux(int irq, void *dev_id, struct pt_regs *regs)
 {
-	unsigned long stat, mask, pend;
+	unsigned long stat, mask, pend, flags;
 	int bit;
 
+	spin_lock_irqsave(&pq2pci_lock,flags);
 	for(;;) {
 		stat = *(volatile unsigned long *) PCI_INT_STAT_REG;
 		mask = *(volatile unsigned long *) PCI_INT_MASK_REG;
@@ -130,10 +144,13 @@ pq2pci_irq_demux(int irq, void *dev_id, 
 			break;
 		for (bit = 0; pend != 0; ++bit, pend <<= 1) {
 			if (pend & 0x80000000)
+			{
 				__do_IRQ(NR_CPM_INTS + bit, regs);
+			}
 		}
 	}
 
+	spin_unlock_irqrestore(&pq2pci_lock, flags);
 	return IRQ_HANDLED;
 }
 
@@ -248,7 +265,7 @@ pq2ads_setup_pci(struct pci_controller *
 	pci_div = ( (sccr & SCCR_PCI_MODCK) ? 2 : 1) *
 			( ( (sccr & SCCR_PCIDF_MSK) >> SCCR_PCIDF_SHIFT) + 1);
 	freq = (uint)((2*binfo->bi_cpmfreq)/(pci_div));
-	time = (int)666666/freq;
+	time = (int)66666666/freq;
 	/* due to PCI Local Bus spec, some devices needs to wait such a long
 	time after RST 	deassertion. More specifically, 0.508s for 66MHz & twice more for 33 */
 	printk("%s: The PCI bus is %d Mhz.\nWaiting %s after deasserting RST...\n",__FILE__,freq,
Index: linux-2.6.10/mvl_patches/pro-0284.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0284.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2005 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(284);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

