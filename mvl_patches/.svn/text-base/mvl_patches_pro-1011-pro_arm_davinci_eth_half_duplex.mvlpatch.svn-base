#! /usr/bin/env bash
# Patch: -pro_arm_davinci_eth_half_duplex
# Date: Wed Jan  3 19:09:09 2007
# Source: Paul Bartholomew <davinci_email@paulbhome.com>
# MR: 21203
# Type: Defect Fix
# Disposition: merged from DaVinci git tree
# Signed-off-by: Kevin Hilman <khilman@mvista.com>
# Description:
# 
# This patch fixes the half duplex problem with ethernet on the DaVinci
# platform (problems when plugging DVEVM into a hub).
# 
# In addition:
# 
# - Added #defines for "PHY_DUPLEX_AUTO/_FULL/_HALF/_UNKNOWN", and
# changed the code to use these names instead of hard-coded "2", "3",
# etc.  (makes it easier to follow the code)
# 
# - Fixed a bug in "emac_control()" (EMAC_IOCTL_READ_PHY_REG handler was
# calling "emac_mdio_read()" with the arguments swapped.
# 
# 

PATCHNUM=1011
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Paul Bartholomew <davinci_email@paulbhome.com>
MR: 21203
Type: Defect Fix
Disposition: merged from DaVinci git tree
Signed-off-by: Kevin Hilman <khilman@mvista.com>
Description:

This patch fixes the half duplex problem with ethernet on the DaVinci
platform (problems when plugging DVEVM into a hub).

In addition:

- Added #defines for "PHY_DUPLEX_AUTO/_FULL/_HALF/_UNKNOWN", and
changed the code to use these names instead of hard-coded "2", "3",
etc.  (makes it easier to follow the code)

- Fixed a bug in "emac_control()" (EMAC_IOCTL_READ_PHY_REG handler was
calling "emac_mdio_read()" with the arguments swapped.


Index: linux-2.6.10/drivers/net/davinci_emac.c
===================================================================
--- linux-2.6.10.orig/drivers/net/davinci_emac.c
+++ linux-2.6.10/drivers/net/davinci_emac.c
@@ -25,6 +25,11 @@
       2.0 Suraj Iyer, Sharath Kumar, Ajay Singh - Completed for TI BCG
       3.0 Anant Gole - Modified and ported for DaVinci
       4.0 Kevin Hilman, Anant Gole - Linuxification of the driver
+      4.? Paul Bartholomew - Use PHY_DUPLEX_* constants instead
+                             of hard-coded numbers.  Also, fixed
+                             EMAC_IOCTL_READ_PHY_REG in emac_control() -
+                             the phy_num and reg_addr args were swapped
+                             in call to emac_mdio_read().
  */
 
 /*
@@ -80,6 +85,8 @@
 #include <asm/arch/memory.h>
 #include <asm/arch/hardware.h>
 
+#include "davinci_emac_phy.h"
+
 /* ---------------------------------------------------------------
  * linux module options
  * --------------------------------------------------------------- */
@@ -1219,7 +1226,7 @@ typedef struct {
 	u32 hw_status;
 	u32 hw_err_info;
 	u32 phy_linked;		/* link status: 1=linked, 0=no link */
-	u32 phy_duplex;		/* duplex status: 1=full duplex, 0=half duplex */
+	u32 phy_duplex;		/* duplex status: 3=full duplex, 2=half duplex */
 
 	u32 phy_speed;		/* link speed = 10, 100, 1000 */
 	u32 phy_num;		/* phy number - useful if phy number is discovered */
@@ -1967,7 +1974,8 @@ static int emac_control_cb(emac_dev_t * 
 				    ((status->
 				      phy_speed == 100) ? 100000000 : 10000000);
 				dev->link_mode =
-				    ((status->phy_duplex == 3) ? 3 : 2);
+				    ((status->phy_duplex == PHY_DUPLEX_FULL) ?
+					PHY_DUPLEX_FULL : PHY_DUPLEX_HALF);
 
 				/* reactivate the transmit queue if it
 				 * is stopped */
@@ -1996,7 +2004,7 @@ static int emac_control_cb(emac_dev_t * 
 				DBG("%s, PhyNum %d,  %s, %s, %s\n",
 				    ((struct net_device *)dev->owner)->name,
 				    status->phy_num,
-				    ((status->phy_duplex == 3) ?
+				    ((status->phy_duplex == PHY_DUPLEX_FULL) ?
 				     "Full Duplex" : "Half Duplex"),
 				    ((status->phy_speed == 100) ?
 				     "100 Mbps" : "10 Mbps"),
@@ -2198,26 +2206,26 @@ static int emac_net_get_config(emac_dev_
 	if (speed == CONFIG_EMAC_NOPHY) {
 		i_cfg->phy_mode = SNWAY_NOPHY;
 	} else {
-		if ((speed == 0) && (duplex == 0)) {
+		if ((speed == 0) && (duplex == PHY_DUPLEX_AUTO)) {
 			i_cfg->phy_mode = SNWAY_AUTOALL;
 		} else if (speed == 10) {
-			if (duplex == 2) {
+			if (duplex == PHY_DUPLEX_HALF) {
 				i_cfg->phy_mode = SNWAY_HD10;
-			} else if (duplex == 3) {
+			} else if (duplex == PHY_DUPLEX_FULL) {
 				i_cfg->phy_mode = SNWAY_FD10;
 			} else {
 				i_cfg->phy_mode = SNWAY_HD10 | SNWAY_FD10;
 			}
 		} else if (speed == 100) {
-			if (duplex == 2) {
+			if (duplex == PHY_DUPLEX_HALF) {
 				i_cfg->phy_mode = SNWAY_HD100;
-			} else if (duplex == 3) {
+			} else if (duplex == PHY_DUPLEX_FULL) {
 				i_cfg->phy_mode = SNWAY_FD100;
 			} else {
 				i_cfg->phy_mode = SNWAY_HD100 | SNWAY_FD100;
 			}
 		} else {
-			if (duplex == 3) {
+			if (duplex == PHY_DUPLEX_FULL) {
 				i_cfg->phy_mode = SNWAY_FD10 | SNWAY_FD100;
 			} else {
 				i_cfg->phy_mode = SNWAY_HD10 | SNWAY_HD100;
@@ -3773,7 +3781,8 @@ static int emac_ioctl(struct net_device 
 
 				local_params.eth_duplex_status =
 				    ((dev->link_mode ==
-				      3) ? MIB2_FULL_DUPLEX : MIB2_HALF_DUPLEX);
+				      PHY_DUPLEX_FULL) ?
+					MIB2_FULL_DUPLEX : MIB2_HALF_DUPLEX);
 
 				/* now copy the counters to the user data */
 				if (copy_to_user
@@ -3972,7 +3981,7 @@ static int emac_update_phy_status(emac_d
 		/*  no phy condition, always linked */
 		dev->status.phy_linked = 1;
 		dev->status.phy_speed = 100;
-		dev->status.phy_duplex = 1;
+		dev->status.phy_duplex = PHY_DUPLEX_FULL;
 		dev->status.phy_num = 0xFFFFFFFF;	/* no phy */
 		dev->mac_control |= (1 << EMAC_MACCONTROL_FULLDUPLEXEN_SHIFT);
 
@@ -3995,7 +4004,7 @@ static int emac_update_phy_status(emac_d
 	if (dev->status.phy_linked) {
 		/*  retreive duplex and speed and the phy number  */
 		if (set_phy_mode & SNWAY_LPBK) {
-			dev->status.phy_duplex = 1;
+			dev->status.phy_duplex = PHY_DUPLEX_FULL;
 		} else {
 			dev->status.phy_duplex = emac_mdio_get_duplex();
 		}
@@ -4003,7 +4012,7 @@ static int emac_update_phy_status(emac_d
 		dev->status.phy_num = emac_mdio_get_phy_num();
 
 		/* set the duplex bit in maccontrol */
-		if (dev->status.phy_duplex) {
+		if (dev->status.phy_duplex == PHY_DUPLEX_FULL) {
 			dev->mac_control |=
 			    (1 << EMAC_MACCONTROL_FULLDUPLEXEN_SHIFT);
 		} else {
@@ -4021,7 +4030,7 @@ static int emac_update_phy_status(emac_d
 	       "MacControl=%08X, Status: Phy=%d, Speed=%s, Duplex=%s",
 	       dev->mac_control, dev->status.phy_num,
 	       (dev->status.phy_speed == 100) ? "100" : "10",
-	       (dev->status.phy_duplex == 3) ? "Full" : "Half");
+	       (dev->status.phy_duplex == PHY_DUPLEX_FULL) ? "Full" : "Half");
 	LOGMSG(EMAC_DEBUG_BUSY_FUNCTION_EXIT, "");
 
 	return (EMAC_SUCCESS);
@@ -4667,8 +4676,8 @@ static int emac_control(emac_dev_t * _de
 			emac_phy_params *phy_params =
 			    (emac_phy_params *) cmd_arg;
 
-			phy_params->data = emac_mdio_read(phy_params->reg_addr,
-							  phy_params->phy_num);
+			phy_params->data = emac_mdio_read(phy_params->phy_num,
+							  phy_params->reg_addr);
 		}
 		break;
 
Index: linux-2.6.10/drivers/net/davinci_emac_phy.c
===================================================================
--- linux-2.6.10.orig/drivers/net/davinci_emac_phy.c
+++ linux-2.6.10/drivers/net/davinci_emac_phy.c
@@ -24,8 +24,10 @@
  Modifications:
  *  HISTORY:
  *  Date      	Modifier         		Notes
- *  2001/02 	Denis, Bill, Michael    Original
- *  14Feb2006	Anant Gole 				Re-written for linux
+ *  2001/02 	Denis, Bill, Michael		Original
+ *  14Feb2006	Anant Gole 			Re-written for linux
+ *  07Dec2006	Paul Bartholomew		Fix half-duplex,
+ *           					use PHY_DUPLEX_* constants
  */
 #include <linux/kernel.h>
 
@@ -184,7 +186,7 @@ int emac_mdio_init(unsigned int mdio_bas
 	emac_phy->state = PHY_INIT;
 	emac_phy->debug_mode = verbose;
 	emac_phy->speed = 10;
-	emac_phy->duplex = 2;	/* Half duplex */
+	emac_phy->duplex = PHY_DUPLEX_HALF;	/* Half duplex */
 
 	if (mdio_clock_freq & mdio_bus_freq) {
 		clk_div = ((mdio_bus_freq / mdio_clock_freq) - 1);
@@ -574,7 +576,8 @@ void emac_mdio_nwaywait_state(void)
 		emac_phy->speed =
 		    (neg_mode & (MII_NWAY_FD100 | MII_NWAY_HD100)) ? 100 : 10;
 		emac_phy->duplex =
-		    (neg_mode & (MII_NWAY_FD100 | MII_NWAY_FD10)) ? 3 : 2;
+		    (neg_mode & (MII_NWAY_FD100 | MII_NWAY_FD10)) ?
+				PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 
 	} else {
 
Index: linux-2.6.10/drivers/net/davinci_emac_phy.h
===================================================================
--- linux-2.6.10.orig/drivers/net/davinci_emac_phy.h
+++ linux-2.6.10/drivers/net/davinci_emac_phy.h
@@ -25,8 +25,10 @@
  * Modifications:
  *  HISTORY:
  *  Date      Modifier         Ver    Notes
+ *  01Jan01 Denis, Bill             Original
  *  27Mar02 Michael Hanrahan Original (modified from emacmdio.h)
- *  04Apr02 Michael Hanrahan Added Interrupt Support *  01Jan01 Denis, Bill             Original
+ *  04Apr02 Michael Hanrahan Added Interrupt Support
+ *  07Dec06 Paul Bartholomew Added PHY_DUPLEX_* defines
  */
 #ifndef _DAVINCI_EMAC_PHY_H_
 #define _DAVINCI_EMAC_PHY_H_
@@ -43,6 +45,12 @@
 #define NWAY_HD10           (1<<5)
 #define NWAY_AUTO           (1<<0)
 
+/* phy duplex values */
+#define	PHY_DUPLEX_AUTO		0	/* Auto Negotiate */
+#define	PHY_DUPLEX_UNKNOWN	1	/* Unknown */
+#define	PHY_DUPLEX_HALF		2	/* Half Duplex */
+#define	PHY_DUPLEX_FULL		3	/* Full Duplex */
+
 /*
  *    Tic() return values
  */
Index: linux-2.6.10/mvl_patches/pro-1011.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1011.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1011);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

