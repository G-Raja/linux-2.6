#! /usr/bin/env bash
# Patch: -pro_arm_davinci_dm355_dm644x_pwm_fixups
# Date: Mon Jan 21 23:04:39 2008
# Source: MontaVista Software, Inc.
# MR: 25683
# Type: Enhancement
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# Add support for DM6467 and DM355 to the PWM driver.
# 

PATCHNUM=1662
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 25683
Type: Enhancement
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
Add support for DM6467 and DM355 to the PWM driver.

Index: linux-2.6.10/drivers/char/davinci_pwm.c
===================================================================
--- linux-2.6.10.orig/drivers/char/davinci_pwm.c
+++ linux-2.6.10/drivers/char/davinci_pwm.c
@@ -34,6 +34,7 @@
 #include <linux/devfs_fs_kernel.h>	/* for devfs */
 #include <asm/hardware/clock.h>
 #include <asm/arch/davinci_pwm.h>
+#include <asm/arch/cpu.h>
 #include <asm/semaphore.h>
 
 #define	DRIVER_NAME		"PWM"
@@ -49,15 +50,18 @@ struct pwm_davinci_device {
 	struct clk *pwm_clk;
 };
 
-char *name[] = { "PWM0_CLK", "PWM1_CLK", "PWM2_CLK" };
+char *dm644x_name[] = { "PWM0_CLK", "PWM1_CLK", "PWM2_CLK" };
+char *dm646x_name[] = { "PWM0_CLK", "PWM1_CLK" };
+char *dm355_name[] = { "PWM0_CLK", "PWM1_CLK", "PWM2_CLK", "PWM3_CLK"};
 
 /* Instance of the private WDT device structure */
-static struct pwm_davinci_device *pwm_dev_array[PWM_MINORS];
+static struct pwm_davinci_device *pwm_dev_array[DAVINCI_PWM_MINORS];
 static DEFINE_SPINLOCK(pwm_dev_array_lock);
 
 static unsigned int pwm_major = 0;
 static unsigned int pwm_minor_start = 0;
-static unsigned int pwm_minor_count = 3;
+static unsigned int pwm_minor_count = DM644X_PWM_MINORS;
+
 static unsigned int pwm_device_count = 1;
 
 /* For registeration of charatcer device*/
@@ -265,36 +269,56 @@ static struct file_operations pwm_fops =
 static struct class_simple *pwm_class = NULL;
 
 static struct platform_device pwm_device[] = {
-	[0] = {.name = "davinci_pwm0",
-	       .id = 0,
-	       .dev = {
-		       .release = pwm_platform_release,
-		       }
-	       },
-	[1] = {.name = "davinci_pwm1",
-	       .id = 1,
-	       .dev = {
-		       .release = pwm_platform_release,
-		       }
-	       },
-	[2] = {.name = "davinci_pwm2",
-	       .id = 2,
-	       .dev = {
-		       .release = pwm_platform_release,
-		       }
-	       },
+	[0] = {
+		.name = "davinci_pwm0",
+		.id = 0,
+		.dev = {
+			.release = pwm_platform_release,
+		}
+	},
+	[1] = {
+		.name = "davinci_pwm1",
+		.id = 1,
+		.dev = {
+			.release = pwm_platform_release,
+		}
+	},
+	[2] = {
+		.name = "davinci_pwm2",
+		.id = 2,
+		.dev = {
+			.release = pwm_platform_release,
+		}
+	},
+	[3] = {.name = "davinci_pwm3",
+	       .id = 3,
+	       .dev =  {
+			.release = pwm_platform_release,
+		}
+	}
 };
 
 static struct device_driver pwm_driver[] = {
-	[0] = {.name = "davinci_pwm0",
-	       .bus = &platform_bus_type,
-	       .remove = pwm_remove},
-	[1] = {.name = "davinci_pwm1",
-	       .bus = &platform_bus_type,
-	       .remove = pwm_remove},
-	[2] = {.name = "davinci_pwm2",
-	       .bus = &platform_bus_type,
-	       .remove = pwm_remove},
+	[0] = {
+		.name = "davinci_pwm0",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
+	[1] = {
+		.name = "davinci_pwm1",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
+	[2] = {
+		.name = "davinci_pwm2",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
+	[3] = {
+		.name = "davinci_pwm3",
+		.bus = &platform_bus_type,
+		.remove = pwm_remove
+	},
 };
 
 /*
@@ -322,6 +346,21 @@ static int __init pwm_init(void)
 	int result;
 	dev_t devno;
 	unsigned int size, i, j;
+	char *name[DAVINCI_PWM_MINORS];
+
+	if (cpu_is_davinci_dm6467()) {
+		pwm_minor_count = DM646X_PWM_MINORS;
+		for (i = 0; i < pwm_minor_count; i++)
+			name[i] = dm646x_name[i];
+	} else if (cpu_is_davinci_dm355()) {
+		pwm_minor_count = DM355_PWM_MINORS;
+		for (i = 0; i < pwm_minor_count; i++)
+			name[i] = dm355_name[i];
+	} else {
+		pwm_minor_count = DM644X_PWM_MINORS;
+		for (i = 0; i < pwm_minor_count; i++)
+			name[i] = dm644x_name[i];
+	}
 
 	size = pwm_device_count * pwm_minor_count;
 	/* Register the driver in the kernel */
@@ -339,7 +378,7 @@ static int __init pwm_init(void)
 	c_dev.ops = &pwm_fops;
 
 	/* addding character device */
-	result = cdev_add(&c_dev, devno, 3);
+	result = cdev_add(&c_dev, devno, pwm_minor_count);
 	if (result) {
 		printk("DaVinciPWM:Error adding DavinciPWM\n");
 		unregister_chrdev_region(devno, size);
@@ -353,7 +392,7 @@ static int __init pwm_init(void)
 	}
 
 	for (i = 0; i < pwm_device_count; i++) {
-		for (j = 0; j < PWM_MINORS; j++) {
+		for (j = 0; j < pwm_minor_count; j++) {
 			pwm_dev_array[j] =
 			    kmalloc(sizeof(struct pwm_davinci_device),
 				    GFP_KERNEL);
@@ -384,10 +423,20 @@ static int __init pwm_init(void)
 			class_simple_device_add(pwm_class, devno, NULL,
 						"davinci_pwm%d", j);
 
-			result =
-			    request_irq(IRQ_PWMINT0 + j, pwm_isr, SA_INTERRUPT,
-					pwm_dev_array[j]->name,
-					pwm_dev_array[j]);
+			/*
+			 * DM355 has PWM3 IRQ at #28
+			 */
+			if (j == 3) {
+				result = request_irq(28, pwm_isr, SA_INTERRUPT,
+						pwm_dev_array[j]->name,
+						pwm_dev_array[j]);
+			} else {
+				result = request_irq(IRQ_PWMINT0 + j,
+						pwm_isr, SA_INTERRUPT,
+						pwm_dev_array[j]->name,
+						pwm_dev_array[j]);
+			}
+
 			if (result < 0) {
 				printk("Cannot initialize IRQ \n");
 				platform_device_unregister(&pwm_device[j]);
Index: linux-2.6.10/include/asm-arm/arch-davinci/davinci_pwm.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-davinci/davinci_pwm.h
+++ linux-2.6.10/include/asm-arm/arch-davinci/davinci_pwm.h
@@ -48,7 +48,11 @@ typedef struct {
 \**************************************************************************/
 typedef volatile davinci_pwmregs *davinci_pwmregsovly;
 
-#define	PWM_MINORS	3
+#define PWM_MINORS		3
+#define DM646X_PWM_MINORS	2
+#define DM644X_PWM_MINORS	3
+#define DM355_PWM_MINORS	4
+#define DAVINCI_PWM_MINORS	DM355_PWM_MINORS /* MAX of all PWM_MINORS */
 
 #define	PWMIOC_SET_MODE			0x01
 #define	PWMIOC_SET_PERIOD		0x02
Index: linux-2.6.10/mvl_patches/pro-1662.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1662.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1662);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

