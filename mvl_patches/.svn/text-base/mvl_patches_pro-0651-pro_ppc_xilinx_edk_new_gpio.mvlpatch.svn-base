#! /usr/bin/env bash
# Patch: -pro_ppc_xilinx_edk_new_gpio
# Date: Thu Jun 22 21:15:04 2006
# Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
# MR: 19052
# Type: Integration
# Disposition: needs submitting to community
# Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
# Description:
#     Xilinx EDK drivers for GPIO - The newer Xilinx drivers for ML40x board 
#     with the CfgInitialize() routine. Xilinx re-newed their drivers quite 
#     recently, so it's going as a different patch.
# 

PATCHNUM=651
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. Sergey Podstavin <spodstavin@ru.mvista.com>
MR: 19052
Type: Integration
Disposition: needs submitting to community
Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
Description:
    Xilinx EDK drivers for GPIO - The newer Xilinx drivers for ML40x board 
    with the CfgInitialize() routine. Xilinx re-newed their drivers quite 
    recently, so it's going as a different patch.

Index: linux-2.6.10/drivers/char/xilinx_gpio/adapter.c
===================================================================
--- linux-2.6.10.orig/drivers/char/xilinx_gpio/adapter.c
+++ linux-2.6.10/drivers/char/xilinx_gpio/adapter.c
@@ -51,7 +51,7 @@ struct xgpio_instance {
 	 * data as an opaque object in this file (meaning that we never
 	 * reference any of the fields inside of the structure).
 	 */
-	XGpio		gpio;
+	XGpio gpio;
 };
 
 /* SAATODO: This function will be moved into the Xilinx code. */
@@ -73,7 +73,8 @@ u32 XGpio_GetDataDirection(XGpio * Insta
 	XASSERT_NONVOID(InstancePtr != NULL);
 	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
 	return XGpio_mReadReg(InstancePtr->BaseAddress,
-			(Channel - 1) * XGPIO_CHAN_OFFSET + XGPIO_TRI_OFFSET);
+			      (Channel - 1) * XGPIO_CHAN_OFFSET +
+			      XGPIO_TRI_OFFSET);
 }
 
 inline int XGpio_IsReady(XGpio * InstancePtr)
@@ -112,7 +113,7 @@ static int ioctl_setup(unsigned long arg
 	struct xgpio_instance *inst;
 	int dev_id, chan;
 
-	if (copy_from_user(ioctl_data, (void *) arg, sizeof (*ioctl_data)))
+	if (copy_from_user(ioctl_data, (void *)arg, sizeof(*ioctl_data)))
 		return -EFAULT;
 
 	dev_id = ioctl_data->device / 2;
@@ -160,12 +161,13 @@ static int xgpio_ioctl(struct inode *ino
 		 * GPIOs to be inputs.
 		 */
 		r = XGpio_GetDataDirection(&inst->gpio, status);
-		XGpio_SetDataDirection(&inst->gpio, status, r | ioctl_data.mask);
+		XGpio_SetDataDirection(&inst->gpio, status,
+				       r | ioctl_data.mask);
 
 		ioctl_data.data = (XGpio_DiscreteRead(&inst->gpio, status)
 				   & ioctl_data.mask);
-		if (copy_to_user((struct xgpio_ioctl_data *) arg,
-				 &ioctl_data, sizeof (ioctl_data))) {
+		if (copy_to_user((struct xgpio_ioctl_data *)arg,
+				 &ioctl_data, sizeof(ioctl_data))) {
 			return -EFAULT;
 		}
 		break;
@@ -235,16 +237,16 @@ static int xgpio_ioctl(struct inode *ino
  */
 
 static struct file_operations xgpio_fops = {
-	owner:THIS_MODULE,
-	ioctl:xgpio_ioctl,
-	open:xgpio_open,
-	release:xgpio_release
+      owner:THIS_MODULE,
+      ioctl:xgpio_ioctl,
+      open:xgpio_open,
+      release:xgpio_release
 };
 
 static struct miscdevice miscdev = {
-	minor:XGPIO_MINOR,
-	name:"xgpio",
-	fops:&xgpio_fops
+      minor:XGPIO_MINOR,
+      name:"xgpio",
+      fops:&xgpio_fops
 };
 
 /******************************
@@ -287,11 +289,11 @@ static int xgpio_probe(struct device *de
 	if (!request_mem_region(regs_res->start, xgpio_inst->remap_size,
 				DRIVER_NAME)) {
 		printk(KERN_ERR "Couldn't lock memory region at 0x%08lX\n",
-			regs_res->start);
+		       regs_res->start);
 		retval = -EBUSY;
 		goto failed2;
 	}
-	
+
 	v_addr = ioremap(regs_res->start, xgpio_inst->remap_size);
 	if (!v_addr) {
 		printk(KERN_ERR "Couldn't ioremap memory at 0x%08lX\n",
@@ -304,11 +306,12 @@ static int xgpio_probe(struct device *de
 	/* The 1st GPIO channel uses */
 	xgpio_inst->device_id = pdev->id;
 	xgpio_config.DeviceId = pdev->id;
-	xgpio_config.IsDual = ((unsigned)(dev->platform_data) & XGPIO_IS_DUAL) ? 1 : 0;
+	xgpio_config.IsDual =
+	    ((unsigned)(dev->platform_data) & XGPIO_IS_DUAL) ? 1 : 0;
 
 	/* Tell the Xilinx code to bring this GPIO interface up. */
 	if (XGpio_CfgInitialize(&xgpio_inst->gpio, &xgpio_config,
-			        (u32) v_addr) != XST_SUCCESS) {
+				(u32) v_addr) != XST_SUCCESS) {
 		printk(KERN_ERR "%s #%d: Could not initialize instance.\n",
 		       miscdev.name, pdev->id);
 		retval = -ENODEV;
@@ -322,7 +325,7 @@ static int xgpio_probe(struct device *de
 		if (retval != 0) {
 			up_write(&inst_list_sem);
 			printk(KERN_ERR "%s #%d: Could not register miscdev.\n",
-			miscdev.name, pdev->id);
+			       miscdev.name, pdev->id);
 			goto failed3;
 		}
 	}
@@ -333,15 +336,15 @@ static int xgpio_probe(struct device *de
 	       miscdev.name, xgpio_inst->device_id,
 	       xgpio_inst->base_phys, xgpio_inst->gpio.BaseAddress);
 
-	return 0; /* success */
+	return 0;		/* success */
 
-failed3:
-	iounmap((void *) (xgpio_config.BaseAddress));
+      failed3:
+	iounmap((void *)(xgpio_config.BaseAddress));
 
-failed2:
+      failed2:
 	release_mem_region(regs_res->start, xgpio_inst->remap_size);
 
-failed1:
+      failed1:
 	kfree(xgpio_inst);
 
 	return retval;
@@ -361,7 +364,7 @@ static int xgpio_remove(struct device *d
 	down_read(&inst_list_sem);
 	list_for_each(entry, &inst_list) {
 		xgpio_inst = list_entry(entry, struct xgpio_instance, link);
-		if(pdev->id == xgpio_inst->device_id) {
+		if (pdev->id == xgpio_inst->device_id) {
 			break;
 		} else {
 			xgpio_inst = NULL;
@@ -369,33 +372,32 @@ static int xgpio_remove(struct device *d
 	}
 	up_read(&inst_list_sem);
 
-	if(xgpio_inst == NULL)
+	if (xgpio_inst == NULL)
 		return -ENODEV;
 
 	/* Remove the private data from the list */
 	down_write(&inst_list_sem);
 	list_del(&xgpio_inst->link);
-	if(list_empty(&inst_list)) {
+	if (list_empty(&inst_list)) {
 		misc_deregister(&miscdev);
 	}
 	up_write(&inst_list_sem);
 
-	iounmap((void *) (xgpio_inst->gpio.BaseAddress));
+	iounmap((void *)(xgpio_inst->gpio.BaseAddress));
 
 	release_mem_region(xgpio_inst->base_phys, xgpio_inst->remap_size);
 
 	kfree(xgpio_inst);
 
-	return 0;	/* success */
+	return 0;		/* success */
 }
 
-
 static struct device_driver xgpio_driver = {
-	.name		= DRIVER_NAME,
-	.bus		= &platform_bus_type,
+	.name = DRIVER_NAME,
+	.bus = &platform_bus_type,
 
-	.probe		= xgpio_probe,
-	.remove		= xgpio_remove
+	.probe = xgpio_probe,
+	.remove = xgpio_remove
 };
 
 static int __init xgpio_init(void)
Index: linux-2.6.10/mvl_patches/pro-0651.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0651.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(651);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

