#! /usr/bin/env bash
# Patch: -common_ppc32_mv64x60_uart_sdma_fix
# Date: Tue Aug  8 20:57:09 2006
# Source: MontaVista Software, Inc.
# MR: 16366
# Type: Defect Fix
# Disposition: needs submitting to lkml
# Signed-off-by: Brian Pomerantz <bapper@mvista.com>
# Description:
# 
#     When pasting text into the terminal at the boot wrapper command line prompt,
#     every other character would be lost.  This was because the buffer size in
#     the receive ring descriptor was being set to 2 and only one byte was being
#     used when the dma transfered more than one character.  Changes made to
#     address this include:
# 
#        * increased the number of ring buffers to 16
#        * changed the buffer size initialization to the size of the buffers
#          (currently set to 32 bytes)
#        * added a receive buffer index value to keep track of where in the
#          current buffer to get the next character from.  When the buffer is
#          exhausted, the index is set to zero and the next buffer is used.
# 
#     Another change made was to the endianness of the DMA transfer.  The DMA was
#     set to swap bytes to little endian even though the processor was in big
#     endian mode causing the need to grab the first byte from byte seven offset
#     in the buffer.
# 

PATCHNUM=846
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 16366
Type: Defect Fix
Disposition: needs submitting to lkml
Signed-off-by: Brian Pomerantz <bapper@mvista.com>
Description:

    When pasting text into the terminal at the boot wrapper command line prompt,
    every other character would be lost.  This was because the buffer size in
    the receive ring descriptor was being set to 2 and only one byte was being
    used when the dma transfered more than one character.  Changes made to
    address this include:

       * increased the number of ring buffers to 16
       * changed the buffer size initialization to the size of the buffers
         (currently set to 32 bytes)
       * added a receive buffer index value to keep track of where in the
         current buffer to get the next character from.  When the buffer is
         exhausted, the index is set to zero and the next buffer is used.

    Another change made was to the endianness of the DMA transfer.  The DMA was
    set to swap bytes to little endian even though the processor was in big
    endian mode causing the need to grab the first byte from byte seven offset
    in the buffer.

Index: linux-2.6.10/arch/ppc/boot/simple/mv64x60_tty.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/boot/simple/mv64x60_tty.c
+++ linux-2.6.10/arch/ppc/boot/simple/mv64x60_tty.c
@@ -76,8 +76,8 @@ struct mv64x60_tx_desc {
 #define	MAX_RESET_WAIT	10000
 #define	MAX_TX_WAIT	10000
 
-#define	RX_NUM_DESC	2
-#define	TX_NUM_DESC	2
+#define	RX_NUM_DESC	16
+#define	TX_NUM_DESC	16
 
 #define	RX_BUF_SIZE	32
 #define	TX_BUF_SIZE	32
@@ -91,11 +91,13 @@ static char tx_buf[2][TX_NUM_DESC * TX_B
 static int cur_rd[2] = { 0, 0 };
 static int cur_td[2] = { 0, 0 };
 
+static int rcv_index[2] = { 0, 0 };
+
 static char chan_initialized[2] = { 0, 0 };
 
 
 #define	RX_INIT_RDP(rdp) {			\
-	(rdp)->bufsize = 2;			\
+	(rdp)->bufsize = RX_BUF_SIZE;		\
 	(rdp)->bytecnt = 0;			\
 	(rdp)->cmd_stat = SDMA_DESC_CMDSTAT_L | SDMA_DESC_CMDSTAT_F |	\
 		SDMA_DESC_CMDSTAT_O;	\
@@ -214,8 +216,7 @@ serial_init(int chan, void *ignored)
 		(int)&td[chan][TX_NUM_DESC - 1]);
 
 	out_le32(mv64x60_base + SDMA_SDC + sdma_base,
-		SDMA_SDC_RFT | SDMA_SDC_SFM | SDMA_SDC_BLMR | SDMA_SDC_BLMT |
-		(3 << 12));
+		SDMA_SDC_RFT | SDMA_SDC_SFM | (3 << 12));
 
 	cdv = ((mv64x60_mpsc_clk_freq/(32*mv64x60_console_baud))-1);
 	out_le32(mv64x60_base + brg_bcr,
@@ -294,7 +295,7 @@ serial_putc(unsigned long com_port, unsi
 	if (++cur_td[com_port] >= TX_NUM_DESC)
 		cur_td[com_port] = 0;
 
-	*(unchar *)(tdp->buffer ^ 7) = c;
+	*(unchar *)(tdp->buffer) = c;
 	tdp->bytecnt = 1;
 	tdp->shadow = 1;
 	tdp->cmd_stat = SDMA_DESC_CMDSTAT_L | SDMA_DESC_CMDSTAT_F |
@@ -307,6 +308,7 @@ serial_putc(unsigned long com_port, unsi
 			SDMA_SDCM_TXD);
 }
 
+
 unsigned char
 serial_getc(unsigned long com_port)
 {
@@ -316,10 +318,15 @@ serial_getc(unsigned long com_port)
 	rdp = &rd[com_port][cur_rd[com_port]];
 
 	if ((rdp->cmd_stat & (SDMA_DESC_CMDSTAT_O|SDMA_DESC_CMDSTAT_ES)) == 0) {
-		c = *(unchar *)(rdp->buffer ^ 7);
-		RX_INIT_RDP(rdp);
-		if (++cur_rd[com_port] >= RX_NUM_DESC)
-			cur_rd[com_port] = 0;
+		c = *(unchar *)(rdp->buffer+rcv_index[com_port]);
+		rcv_index[com_port]++;
+		rdp->bytecnt--;
+		if (!rdp->bytecnt) {
+			RX_INIT_RDP(rdp);
+			if (++cur_rd[com_port] >= RX_NUM_DESC)
+				cur_rd[com_port] = 0;
+			rcv_index[com_port] = 0;
+		}
 	}
 
 	return c;
@@ -332,6 +339,11 @@ serial_tstc(unsigned long com_port)
 	int			loop_count = 0;
 	int			rc = 0;
 
+	/* Is there still some in the current buffer? */
+	if (rcv_index[com_port]) {
+		return 1;
+	}
+
 	rdp = &rd[com_port][cur_rd[com_port]];
 
 	/* Go thru rcv desc's until empty looking for one with data (no error)*/
@@ -344,6 +356,7 @@ serial_tstc(unsigned long com_port)
 			if (++cur_rd[com_port] >= RX_NUM_DESC)
 				cur_rd[com_port] = 0;
 			rdp = (struct mv64x60_rx_desc *)rdp->next_desc_ptr;
+			rcv_index[com_port] = 0;
 		} else {
 			rc = 1;
 			break;
Index: linux-2.6.10/mvl_patches/pro-0846.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0846.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(846);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

