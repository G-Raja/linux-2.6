#! /usr/bin/env bash
# Patch: -ppc_xilinx_platform_stub
# Date: Mon Mar  6 15:02:00 2006
# Source: MontaVista Software, Inc.
# MR: 15265
# Type: Enhancement
# Disposition: needs submitting to linuxppc-embedded mailing list
# Signed-off-by: Andrei Konovalov <akonovalov@ru.mvista.com>
# Description:
#     The stub to fill in the platform data and to register the relevant
#     devices on the platform bus.
#     In longer term should be replaced with the flattened device tree
#     parsing and allocating the 'struct platform_device' et al dynamically.
# 

PATCHNUM=327
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 15265
Type: Enhancement
Disposition: needs submitting to linuxppc-embedded mailing list
Signed-off-by: Andrei Konovalov <akonovalov@ru.mvista.com>
Description:
    The stub to fill in the platform data and to register the relevant
    devices on the platform bus.
    In longer term should be replaced with the flattened device tree
    parsing and allocating the 'struct platform_device' et al dynamically.

 arch/ppc/platforms/4xx/virtex.c |  382 +++++++++++++++++++++++++++++++++++++++-
 include/linux/xilinx_devices.h  |   66 ++++++
 mvl_patches/pro-0327.c          |   16 +
 3 files changed, 463 insertions(+), 1 deletion(-)

Index: linux-2.6.10/arch/ppc/platforms/4xx/virtex.c
===================================================================
--- linux-2.6.10.orig/arch/ppc/platforms/4xx/virtex.c
+++ linux-2.6.10/arch/ppc/platforms/4xx/virtex.c
@@ -4,13 +4,15 @@
  * Author: MontaVista Software, Inc.
  *         source@mvista.com
  *
- * 2002-2004 (c) MontaVista Software, Inc.  This file is licensed under the
+ * 2002-2005 (c) MontaVista Software, Inc.  This file is licensed under the
  * terms of the GNU General Public License version 2.  This program is licensed
  * "as is" without any warranty of any kind, whether express or implied.
  */
 
 #include <linux/config.h>
 #include <linux/init.h>
+#include <linux/resource.h>
+#include <linux/xilinx_devices.h>
 #include <asm/ocp.h>
 #include <platforms/4xx/virtex.h>
 
@@ -58,3 +60,381 @@ struct ocp_def core_ocp[] = {
 	{ .vendor	= OCP_VENDOR_INVALID
 	}
 };
+
+/* Xilinx Virtex-II Pro device descriptions */
+
+#ifdef XPAR_EMAC_0_BASEADDR
+
+static struct xemac_platform_data xemac_0_pdata = {
+	.device_flags = (XPAR_EMAC_0_ERR_COUNT_EXIST ? XEMAC_HAS_ERR_COUNT : 0) |
+		(XPAR_EMAC_0_MII_EXIST ? XEMAC_HAS_MII : 0) |
+		(XPAR_EMAC_0_CAM_EXIST ? XEMAC_HAS_CAM : 0) |
+		(XPAR_EMAC_0_JUMBO_EXIST ? XEMAC_HAS_JUMBO : 0),
+	.dma_mode = XPAR_EMAC_0_DMA_PRESENT
+};
+
+static struct platform_device xilinx_emac_0_device = {
+	.name = "xilinx_emac",
+	.id = XPAR_EMAC_0_DEVICE_ID,
+	.dev.platform_data = &xemac_0_pdata,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_EMAC_0_BASEADDR,
+			.end	= XPAR_EMAC_0_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_EMAC_0_VEC_ID,
+			.end	= XPAR_INTC_0_EMAC_0_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_EMAC_0_BASEADDR */
+
+#ifdef XPAR_EMAC_1_BASEADDR
+
+static struct xemac_platform_data xemac_1_pdata = {
+	.device_flags = (XPAR_EMAC_1_ERR_COUNT_EXIST ? XEMAC_HAS_ERR_COUNT : 0) |
+		(XPAR_EMAC_1_MII_EXIST ? XEMAC_HAS_MII : 0) |
+		(XPAR_EMAC_1_CAM_EXIST ? XEMAC_HAS_CAM : 0) |
+		(XPAR_EMAC_1_JUMBO_EXIST ? XEMAC_HAS_JUMBO : 0),
+	.dma_mode = XPAR_EMAC_1_DMA_PRESENT
+};
+
+static struct platform_device xilinx_emac_1_device = {
+	.name = "xilinx_emac",
+	.id = XPAR_EMAC_1_DEVICE_ID,
+	.dev.platform_data = &xemac_1_pdata,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_EMAC_1_BASEADDR,
+			.end	= XPAR_EMAC_1_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_EMAC_1_VEC_ID,
+			.end	= XPAR_INTC_0_EMAC_1_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_EMAC_1_BASEADDR */
+
+#ifdef XPAR_TEMAC_0_BASEADDR
+
+static struct xtemac_platform_data xtemac_0_pdata = {
+	.dma_mode = XPAR_TEMAC_0_DMA_TYPE,
+	.rx_pkt_fifo_depth = XPAR_TEMAC_0_IPIF_RDFIFO_DEPTH,
+	.tx_pkt_fifo_depth = XPAR_TEMAC_0_IPIF_WRFIFO_DEPTH,
+	.mac_fifo_depth = XPAR_TEMAC_0_MAC_FIFO_DEPTH,
+	.dcr_host = XPAR_TEMAC_0_TEMAC_DCR_HOST,
+	.dre = XPAR_TEMAC_0_INCLUDE_DRE
+};
+
+static struct platform_device xilinx_temac_0_device = {
+	.name = "xilinx_temac",
+	.id = XPAR_TEMAC_0_DEVICE_ID,
+	.dev.platform_data = &xtemac_0_pdata,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_TEMAC_0_BASEADDR,
+			.end	= XPAR_TEMAC_0_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_TEMAC_0_VEC_ID,
+			.end	= XPAR_INTC_0_TEMAC_0_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_TEMAC_0_BASEADDR */
+
+#ifdef XPAR_TEMAC_1_BASEADDR
+
+static struct xtemac_platform_data xtemac_1_pdata = {
+	.dma_mode = XPAR_TEMAC_1_DMA_TYPE,
+	.rx_pkt_fifo_depth = XPAR_TEMAC_1_IPIF_RDFIFO_DEPTH,
+	.tx_pkt_fifo_depth = XPAR_TEMAC_1_IPIF_WRFIFO_DEPTH,
+	.mac_fifo_depth = XPAR_TEMAC_1_MAC_FIFO_DEPTH,
+	.dcr_host = XPAR_TEMAC_1_TEMAC_DCR_HOST,
+	.dre = XPAR_TEMAC_1_INCLUDE_DRE
+};
+
+static struct platform_device xilinx_temac_1_device = {
+	.name = "xilinx_temac",
+	.id = XPAR_TEMAC_1_DEVICE_ID,
+	.dev.platform_data = &xtemac_1_pdata,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_TEMAC_1_BASEADDR,
+			.end	= XPAR_TEMAC_1_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_TEMAC_1_VEC_ID,
+			.end	= XPAR_INTC_0_TEMAC_1_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_TEMAC_1_BASEADDR */
+
+#ifdef XPAR_PS2_0_BASEADDR
+
+static struct platform_device xilinx_ps2_0_device = {
+	.name = "xilinx_ps2",
+	.id = 0,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_PS2_0_BASEADDR,
+			.end	= XPAR_PS2_0_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_PS2_0_VEC_ID,
+			.end	= XPAR_INTC_0_PS2_0_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_PS2_0_BASEADDR */
+
+#ifdef XPAR_PS2_1_BASEADDR
+
+static struct platform_device xilinx_ps2_1_device = {
+	.name = "xilinx_ps2",
+	.id = 1,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_PS2_1_BASEADDR,
+			.end	= XPAR_PS2_1_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_PS2_1_VEC_ID,
+			.end	= XPAR_INTC_0_PS2_1_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_PS2_1_BASEADDR */
+
+#ifdef XPAR_TFT_0_BASEADDR
+
+static struct resource xilinx_lcd_0_resource = {
+	.start = XPAR_TFT_0_BASEADDR,
+	.end = XPAR_TFT_0_BASEADDR+7,
+	.flags = IORESOURCE_MEM
+};
+
+static struct platform_device xilinx_lcd_0_device = {
+	.name = "xilinx_fb",
+	.id = 0,
+	.num_resources = 1,
+	.resource = &xilinx_lcd_0_resource
+};
+
+#endif /* XPAR_TFT_0_BASEADDR */
+
+#ifdef XPAR_SYSACE_0_BASEADDR
+
+static struct platform_device xilinx_sysace_0_device = {
+	.name = "xilinx_sysace",
+	.id = 0,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_SYSACE_0_BASEADDR,
+			.end	= XPAR_SYSACE_0_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_SYSACE_0_VEC_ID,
+			.end	= XPAR_INTC_0_SYSACE_0_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_SYSACE_0_BASEADDR */
+
+#ifdef XPAR_IIC_0_BASEADDR
+
+static struct platform_device xilinx_iic_0_device = {
+	.name = "xilinx_iic",
+	.id = 0,
+	.num_resources = 2,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_IIC_0_BASEADDR,
+			.end	= XPAR_IIC_0_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		},
+		{
+			.start	= XPAR_INTC_0_IIC_0_VEC_ID,
+			.end	= XPAR_INTC_0_IIC_0_VEC_ID,
+			.flags	= IORESOURCE_IRQ
+		}
+	}
+};
+
+#endif /* XPAR_IIC_0_BASEADDR */
+
+#ifdef XPAR_GPIO_0_BASEADDR
+
+static struct platform_device xilinx_gpio_0_device = {
+	.name = "xilinx_gpio",
+	.id = 0,
+	.num_resources = 1,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_GPIO_0_BASEADDR,
+			.end	= XPAR_GPIO_0_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		}
+	}
+};
+
+#endif /* XPAR_GPIO_0_BASEADDR */
+
+#ifdef XPAR_GPIO_1_BASEADDR
+
+static struct platform_device xilinx_gpio_1_device = {
+	.name = "xilinx_gpio",
+	.id = 1,
+	.num_resources = 1,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_GPIO_1_BASEADDR,
+			.end	= XPAR_GPIO_1_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		}
+	}
+};
+
+#endif /* XPAR_GPIO_1_BASEADDR */
+
+#ifdef XPAR_GPIO_2_BASEADDR
+
+static struct platform_device xilinx_gpio_2_device = {
+	.name = "xilinx_gpio",
+	.id = 2,
+	.num_resources = 1,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_GPIO_2_BASEADDR,
+			.end	= XPAR_GPIO_2_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		}
+	}
+};
+
+#endif /* XPAR_GPIO_2_BASEADDR */
+
+#ifdef XPAR_GPIO_3_BASEADDR
+
+static struct platform_device xilinx_gpio_3_device = {
+	.name = "xilinx_gpio",
+	.id = 3,
+	.num_resources = 1,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_GPIO_3_BASEADDR,
+			.end	= XPAR_GPIO_3_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		}
+	}
+};
+
+#endif /* XPAR_GPIO_3_BASEADDR */
+
+#ifdef XPAR_GPIO_4_BASEADDR
+
+static struct platform_device xilinx_gpio_4_device = {
+	.name = "xilinx_gpio",
+	.id = 4,
+	.num_resources = 1,
+	.resource = (struct resource[]) {
+		{
+			.start	= XPAR_GPIO_4_BASEADDR,
+			.end	= XPAR_GPIO_4_HIGHADDR,
+			.flags	= IORESOURCE_MEM
+		}
+	}
+};
+
+#endif /* XPAR_GPIO_4_BASEADDR */
+
+static int __init xilinx_platform_init(void)
+{
+#ifdef XPAR_EMAC_0_BASEADDR
+	memcpy(xemac_0_pdata.mac_addr, __res.bi_enetaddr, 6);
+	platform_device_register(&xilinx_emac_0_device);
+#endif /* XPAR_EMAC_0_BASEADDR */
+#ifdef XPAR_EMAC_1_BASEADDR
+	memcpy(xemac_1_pdata.mac_addr, __res.bi_enetaddr, 6);
+	platform_device_register(&xilinx_emac_1_device);
+#endif /* XPAR_EMAC_1_BASEADDR */
+
+#ifdef XPAR_TEMAC_0_BASEADDR
+	memcpy(xtemac_0_pdata.mac_addr, __res.bi_enetaddr, 6);
+	platform_device_register(&xilinx_temac_0_device);
+#endif /* XPAR_TEMAC_0_BASEADDR */
+#ifdef XPAR_TEMAC_1_BASEADDR
+	memcpy(xtemac_1_pdata.mac_addr, __res.bi_enetaddr, 6);
+	platform_device_register(&xilinx_temac_1_device);
+#endif /* XPAR_TEMAC_1_BASEADDR */
+
+#ifdef XPAR_TFT_0_BASEADDR
+	platform_device_register(&xilinx_lcd_0_device);
+#endif /* XPAR_TFT_0_BASEADDR */
+
+#ifdef XPAR_SYSACE_0_BASEADDR
+	platform_device_register(&xilinx_sysace_0_device);
+#endif /* XPAR_SYSACE_0_BASEADDR */
+
+#ifdef XPAR_IIC_0_BASEADDR
+	platform_device_register(&xilinx_iic_0_device);
+#endif /* XPAR_IIC_0_BASEADDR */
+
+#ifdef XPAR_GPIO_0_BASEADDR
+	platform_device_register(&xilinx_gpio_0_device);
+#endif /* XPAR_GPIO_0_BASEADDR */
+#ifdef XPAR_GPIO_1_BASEADDR
+	platform_device_register(&xilinx_gpio_1_device);
+#endif /* XPAR_GPIO_1_BASEADDR */
+#ifdef XPAR_GPIO_2_BASEADDR
+	platform_device_register(&xilinx_gpio_2_device);
+#endif /* XPAR_GPIO_2_BASEADDR */
+#ifdef XPAR_GPIO_3_BASEADDR
+	platform_device_register(&xilinx_gpio_3_device);
+#endif /* XPAR_GPIO_3_BASEADDR */
+#ifdef XPAR_GPIO_4_BASEADDR
+	platform_device_register(&xilinx_gpio_4_device);
+#endif /* XPAR_GPIO_4_BASEADDR */
+
+#ifdef XPAR_PS2_0_BASEADDR
+	platform_device_register(&xilinx_ps2_0_device);
+#endif /* XPAR_PS2_0_BASEADDR */
+#ifdef XPAR_PS2_1_BASEADDR
+	platform_device_register(&xilinx_ps2_1_device);
+#endif /* XPAR_PS2_1_BASEADDR */
+
+	return 0;
+}
+
+subsys_initcall(xilinx_platform_init);
Index: linux-2.6.10/include/linux/xilinx_devices.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/linux/xilinx_devices.h
@@ -0,0 +1,66 @@
+/*
+ * include/linux/xilinx_devices.h
+ *
+ * Definitions for any platform device related flags or structures for
+ * Xilinx EDK IPs
+ *
+ * Author: MontaVista Software, Inc.
+ *         source@mvista.com
+ *
+ * 2002-2005 (c) MontaVista Software, Inc.  This file is licensed under the
+ * terms of the GNU General Public License version 2.  This program is licensed
+ * "as is" without any warranty of any kind, whether express or implied.
+ */
+
+#ifdef __KERNEL__
+#ifndef _XILINX_DEVICE_H_
+#define _XILINX_DEVICE_H_
+
+#include <linux/types.h>
+#include <linux/version.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,15)
+#include <linux/device.h>
+#else
+#include <linux/platform_device.h>
+#endif
+
+/*- 10/100 Mb Ethernet Controller IP (XEMAC) -*/
+
+struct xemac_platform_data {
+	u32 device_flags;
+	u32 dma_mode;
+
+	u8 mac_addr[6];
+};
+
+/* Flags related to XEMAC device features */
+#define XEMAC_HAS_ERR_COUNT	0x00000001
+#define XEMAC_HAS_MII		0x00000002
+#define XEMAC_HAS_CAM		0x00000004
+#define XEMAC_HAS_JUMBO		0x00000008
+
+/* Possible DMA modes supported by XEMAC */
+#define XEMAC_DMA_NONE		1
+#define XEMAC_DMA_SIMPLE	2	/* simple 2 channel DMA */
+#define XEMAC_DMA_SGDMA		3	/* scatter gather DMA */
+
+/*- 10/100/1000 Mb Ethernet Controller IP (XTEMAC) -*/
+
+struct xtemac_platform_data {
+	u8 dma_mode;
+	u32 rx_pkt_fifo_depth;
+	u32 tx_pkt_fifo_depth;
+	u16 mac_fifo_depth;
+	u8 dcr_host;
+	u8 dre;
+
+	u8 mac_addr[6];
+};
+
+/* Possible DMA modes supported by XTEMAC */
+#define XTEMAC_DMA_NONE		1
+#define XTEMAC_DMA_SIMPLE	2	/* simple 2 channel DMA */
+#define XTEMAC_DMA_SGDMA	3	/* scatter gather DMA */
+
+#endif /* _XILINX_DEVICE_H_ */
+#endif /* __KERNEL__ */
Index: linux-2.6.10/mvl_patches/pro-0327.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0327.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(327);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

