#! /usr/bin/env bash
# Patch: -common_frd_report_correct_runtime
# Date: Wed Dec 28 14:57:53 2005
# Source: MontaVista Software, Inc. RT Group <rt-dev@mvista.com>
# MR: 12190
# Type: Patch
# Disposition: local
# Signed-off-by: Sven-Thorsten Dietrich <sven@mvista.com>
# Description:
# The execution time and cpu utilization lookups are performed
# by the frd /proc reporting functions.
# These functions continue to execute after FRD threads have stopped,
# and the final data never freezes, even after FRD threads have exited
# at the end of a measurement run.
# 
# This patch moves the cpu utilization and time of day lookups into frd 
# context, such that the elapsed time and cput utilization data are 
# frozen when FRD threads exit.
# 
# 
# 

PATCHNUM=102
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc. RT Group <rt-dev@mvista.com>
MR: 12190
Type: Patch
Disposition: local
Signed-off-by: Sven-Thorsten Dietrich <sven@mvista.com>
Description:
The execution time and cpu utilization lookups are performed
by the frd /proc reporting functions.
These functions continue to execute after FRD threads have stopped,
and the final data never freezes, even after FRD threads have exited
at the end of a measurement run.

This patch moves the cpu utilization and time of day lookups into frd 
context, such that the elapsed time and cput utilization data are 
frozen when FRD threads exit.



Index: linux-2.6.10/lib/frd.c
===================================================================
--- linux-2.6.10.orig/lib/frd.c
+++ linux-2.6.10/lib/frd.c
@@ -47,6 +47,8 @@ static char *max_procnames[] = {
 	"max_irq_time"
 };
 
+static void frd_get_cpu_utils(frd_cpu_utils_t * frd_cpu_utils);
+
 static int frd_run;    /* Kill Switch */
 
 /* RT Task Pointers and Parameters */
@@ -63,7 +65,8 @@ static wait_queue_head_t timer_dev_wait;
 static int frd_pacing = CONFIG_FRD_PACING;
 #endif
 
-static struct timeval frd_start_time; 		   /* Wall Time */
+static struct timeval frd_start_time;		/* wall time at start */
+static struct timeval frd_now_time;		/* current wall time */
 
 /* Statistics */
 static unsigned long frd_interrupts;		   /* count handler calls  */
@@ -208,6 +211,12 @@ static struct irqaction frd_timer_irq = 
 #endif
 
 
+static inline unsigned long frd_elapsed_time(void) 
+{
+	return (frd_now_time.tv_sec - frd_start_time.tv_sec);
+}
+
+
 /* this function accepts two time stamps at native timer frequencies 
  * and returns the difference between the two. */
 unsigned long diff_time(unsigned long long t_first, unsigned long long t_second)
@@ -394,6 +403,11 @@ int frd_thread(void *tid)
 			/* initial cycle to sync up with the tick */
 			last_time[id] = sched_time;
 			last_sched[id] = sched_time;
+			if (id == 0) 
+			{
+				do_gettimeofday(&frd_start_time);
+				frd_get_cpu_utils(&frd_start_cpu_utils);
+			}
 			continue;
 		}
 
@@ -466,9 +480,15 @@ int frd_thread(void *tid)
 #endif
 			max_p_latency_iteration[id] = frd_exec_count[id];
 		}
-		if (id == (FRD_THREADS - 1) && frd_latcnt >= FRD_LATSIZE)
-			if (waitqueue_active(&timer_dev_wait))
-				wake_up(&timer_dev_wait);
+
+		if (id == (FRD_THREADS - 1)) 
+		{
+			do_gettimeofday(&frd_now_time); /* for elapsed time */
+			frd_get_cpu_utils(&frd_cur_cpu_utils);
+			if ( (frd_latcnt >= FRD_LATSIZE) &&
+				(waitqueue_active(&timer_dev_wait)) )
+                                wake_up(&timer_dev_wait);
+		}
 	}
 
 	/* Reducing the thread-ready count suspends wake_ups. */
@@ -610,7 +630,7 @@ static inline u64 u64_div(u64 x, u64 y)
 	return x;
 }
 
-static inline void frd_get_cpu_utils(frd_cpu_utils_t * frd_cpu_utils)
+static void frd_get_cpu_utils(frd_cpu_utils_t * frd_cpu_utils)
 {
 	int i;
 	frd_cpu_utils->user = 0;
@@ -765,10 +785,8 @@ static struct proc_dir_entry *entry[FRD_
 
 static void *l_start(struct seq_file *m, loff_t * pos)
 {
-	struct timeval frd_cur_time;
 	loff_t *index_ptr = kmalloc(sizeof(loff_t), GFP_KERNEL);
 	loff_t index = *pos;
-	int runtime = 0;
 	frd_param_t *frd_param = (frd_param_t *) m->private;
 	int frd_id = frd_param->frd_id;
 	int m_type = frd_param->latency_type;
@@ -778,9 +796,6 @@ static void *l_start(struct seq_file *m,
 	}
 
 	if (index == 0) {
-		do_gettimeofday(&frd_cur_time);
-		runtime = frd_cur_time.tv_sec - frd_start_time.tv_sec;
-		frd_get_cpu_utils(&frd_cur_cpu_utils);
 		calc_cpu_utils(&frd_start_cpu_utils, &frd_cur_cpu_utils,
 			       &cpu_utils_percent);
 
@@ -792,7 +807,7 @@ static void *l_start(struct seq_file *m,
 			   "#Maximum preemption latency was %lu microseconds.\n"
 			   "#%lu preemptions greater than %lu microseconds. (%lu total samples)\n"
 			   "#usecs     preempts\n", MAX_USER_RT_PRIO - 1,
-			   runtime, 
+			   frd_elapsed_time(), 
 			   (unsigned long long)cpu_utils_percent.user.high, (unsigned long long)cpu_utils_percent.user.low,
 			   (unsigned long long)cpu_utils_percent.nice.high, (unsigned long long)cpu_utils_percent.nice.low,
 			   (unsigned long long)cpu_utils_percent.system.high, (unsigned long long)cpu_utils_percent.system.low,
@@ -931,8 +946,6 @@ void frd_latency_init(void)
 			entry[frd_id][i]->data = (void *)&frd_params[frd_id][i];
 			entry[frd_id][i]->proc_fops = &frd_seq_fops;
 		}
-		frd_get_cpu_utils(&frd_start_cpu_utils);
-		do_gettimeofday(&frd_start_time);
 	}
 }
 
Index: linux-2.6.10/mvl_patches/pro-0102.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0102.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2005 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(102);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

