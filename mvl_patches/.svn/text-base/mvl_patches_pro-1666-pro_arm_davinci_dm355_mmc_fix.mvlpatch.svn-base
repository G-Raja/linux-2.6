#! /usr/bin/env bash
# Patch: -pro_arm_davinci_dm355_mmc_fix
# Date: Mon Jan 21 23:04:57 2008
# Source: MontaVista Software, Inc.
# MR: 25677
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Jerry Alexander <jalexander@mvista.com>
# Description:
# 
# 		MMC code modified to enable multiple devices 
# 		to work with the MMC driver.
# 
# 

PATCHNUM=1666
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 25677
Type: Defect Fix
Disposition: local
Signed-off-by: Jerry Alexander <jalexander@mvista.com>
Description:

		MMC code modified to enable multiple devices 
		to work with the MMC driver.


Index: linux-2.6.10/drivers/mmc/davinci_mmc.c
===================================================================
--- linux-2.6.10.orig/drivers/mmc/davinci_mmc.c
+++ linux-2.6.10/drivers/mmc/davinci_mmc.c
@@ -82,7 +82,7 @@ static inline void wait_on_data(struct m
 		udelay(1);
 	}
 	if (!cnt) {
-		dev_warn(host->dev, "ERROR: TOUT waiting for BUSY\n");
+		dev_warn(host->mmc->dev, "ERROR: TOUT waiting for BUSY\n");
 	}
 }
 
@@ -96,16 +96,15 @@ static void mmc_davinci_start_command(st
 
 #ifdef CONFIG_MMC_DEBUG
 	if (cmd->flags & MMC_RSP_SHORT)
-		dev_dbg(host->dev, ", 32-bit response");
+		dev_dbg(host->mmc->dev, "32-bit response\n");
 	if (cmd->flags & MMC_RSP_LONG)
-		dev_dbg(host->dev, ", 128-bit response");
+		dev_dbg(host->mmc->dev, "128-bit response\n");
 	if (cmd->flags & MMC_RSP_CRC)
-		dev_dbg(host->dev, ", CRC");
+		dev_dbg(host->mmc->dev, "CRC\n");
 	if (cmd->flags & MMC_RSP_BUSY)
-		dev_dbg(host->dev, ", busy notification");
+		dev_dbg(host->mmc->dev, "busy notification\n");
 	else
-		dev_dbg(host->dev, ", No busy notification");
-	dev_dbg(host->dev, "\n");
+		dev_dbg(host->mmc->dev, "No busy notification\n");
 #endif
 	host->cmd = cmd;
 
@@ -289,7 +288,7 @@ static void mmc_davinci_dma_cb(int lch, 
 {
 	if (DMA_COMPLETE != ch_status) {
 		struct mmc_davinci_host *host = (struct mmc_davinci_host *)data;
-		dev_warn(host->dev, "[DMA FAILED]");
+		dev_warn(host->mmc->dev, "[DMA FAILED]");
 		davinci_abort_dma(host);
 	}
 }
@@ -355,7 +354,7 @@ static int mmc_davinci_start_dma_transfe
 	struct mmc_data *data = host->data;
 	int block_size = (1 << data->blksz_bits);
 
-	host->sg_len = dma_map_sg(host->dev, data->sg, host->sg_len,
+	host->sg_len = dma_map_sg(host->mmc->dev, data->sg, host->sg_len,
 				  ((data->
 				    flags & MMC_DATA_WRITE) ? DMA_TO_DEVICE :
 				   DMA_FROM_DEVICE));
@@ -369,7 +368,7 @@ static int mmc_davinci_start_dma_transfe
 	}
 
 	if (!use_dma) {
-		dma_unmap_sg(host->dev, data->sg, host->sg_len,
+		dma_unmap_sg(host->mmc->dev, data->sg, host->sg_len,
 			     (data->
 			      flags & MMC_DATA_WRITE) ? DMA_TO_DEVICE :
 			     DMA_FROM_DEVICE);
@@ -406,7 +405,7 @@ static int davinci_acquire_dma_channels(
 	if ((r = davinci_request_dma(host->dma_tx_event, "MMC_WRITE",
 				     mmc_davinci_dma_cb, host,
 				     &edma_chan_num, &tcc, queue_no)) != 0) {
-		dev_warn(host->dev,
+		dev_warn(host->mmc->dev,
 			 "MMC: davinci_request_dma() failed with %d\n", r);
 		return r;
 	}
@@ -415,7 +414,7 @@ static int davinci_acquire_dma_channels(
 	if ((r = davinci_request_dma(host->dma_rx_event, "MMC_READ",
 				     mmc_davinci_dma_cb, host,
 				     &edma_chan_num, &tcc, queue_no)) != 0) {
-		dev_warn(host->dev,
+		dev_warn(host->mmc->dev,
 			 "MMC: davinci_request_dma() failed with %d\n", r);
 		goto free_master_write;
 	}
@@ -431,7 +430,7 @@ static int davinci_acquire_dma_channels(
 	if ((r = davinci_request_dma(DAVINCI_EDMA_PARAM_ANY, "LINK",
 				     NULL, NULL, &edma_chan_num,
 				     &sync_dev, queue_no)) != 0) {
-		dev_warn(host->dev,
+		dev_warn(host->mmc->dev,
 			 "MMC: davinci_request_dma() failed with %d\n", r);
 		goto free_master_read;
 	}
@@ -464,8 +463,6 @@ static int mmc_davinci_send_dma_request(
 	enum sync_dimension sync_mode;
 	edmacc_paramentry_regs temp;
 	int edma_chan_num;
-	static unsigned int option_read = 0;
-	static unsigned int option_write = 0;
 	struct mmc_data *data = host->data;
 	struct scatterlist *sg = &data->sg[0];
 	unsigned int count;
@@ -543,18 +540,18 @@ static int mmc_davinci_send_dma_request(
 
 	davinci_get_dma_params(sync_dev, &temp);
 	if (sync_dev == host->dma_tx_event) {
-		if (option_write == 0) {
-			option_write = temp.opt;
+		if (host->option_write == 0) {
+			host->option_write = temp.opt;
 		} else {
-			temp.opt = option_write;
+			temp.opt = host->option_write;
 			davinci_set_dma_params(sync_dev, &temp);
 		}
 	}
 	if (sync_dev == host->dma_rx_event) {
-		if (option_read == 0) {
-			option_read = temp.opt;
+		if (host->option_read == 0) {
+			host->option_read = temp.opt;
 		} else {
-			temp.opt = option_read;
+			temp.opt = host->option_read;
 			davinci_set_dma_params(sync_dev, &temp);
 		}
 	}
@@ -627,9 +624,9 @@ static void mmc_davinci_prepare_data(str
 	/* Init idx */
 	host->sg_idx = 0;
 
-	dev_dbg(host->dev,
+	dev_dbg(host->mmc->dev,
 		"MMCSD : Data xfer (%s %s), "
-		"DTO %d cycles + %d ns, %d blocks of %d bytes\r\n",
+		"DTO %d cycles + %d ns, %d blocks of %d bytes\n",
 		(req->data->flags & MMC_DATA_STREAM) ? "stream" : "block",
 		(req->data->flags & MMC_DATA_WRITE) ? "write" : "read",
 		req->data->timeout_clks, req->data->timeout_ns,
@@ -707,7 +704,7 @@ static void mmc_davinci_request(struct m
 			req->cmd->error |= MMC_ERR_TIMEOUT;
 			mmc_request_done(mmc, req);
 		}
-		dev_dbg(host->dev,
+		dev_dbg(host->mmc->dev,
 			"From code segment excuted when card removed\n");
 		return;
 	}
@@ -762,14 +759,14 @@ static void mmc_davinci_set_ios(struct m
 	struct mmc_davinci_host *host = mmc_priv(mmc);
 
 	cpu_arm_clk = clk_get_rate(host->clk);
-	dev_dbg(host->dev, "clock %dHz busmode %d powermode %d Vdd %d.%02d\r\n",
+	dev_dbg(host->mmc->dev, "clock %dHz busmode %d powermode %d Vdd %d.%02d\n",
 		ios->clock, ios->bus_mode, ios->power_mode,
 		ios->vdd / 100, ios->vdd % 100);
 	if (ios->bus_width == MMC_BUS_WIDTH_4) {
-		dev_dbg(host->dev, "\nEnabling 4 bit mode\n");
+		dev_dbg(host->mmc->dev, "\nEnabling 4 bit mode\n");
 		mmcsd_regs(host)->mmc_ctl = mmcsd_regs(host)->mmc_ctl | (1 << 2);
 	} else {
-		dev_dbg(host->dev, "Disabling 4 bit mode\n");
+		dev_dbg(host->mmc->dev, "Disabling 4 bit mode\n");
 		mmcsd_regs(host)->mmc_ctl = mmcsd_regs(host)->mmc_ctl & ~(1 << 2);
 	}
 
@@ -813,7 +810,7 @@ static void mmc_davinci_xfer_done(struct
 	if (host->do_dma) {
 		davinci_abort_dma(host);
 
-		dma_unmap_sg(host->dev, data->sg, host->sg_len,
+		dma_unmap_sg(host->mmc->dev, data->sg, host->sg_len,
 			     (data->
 			      flags & MMC_DATA_WRITE) ? DMA_TO_DEVICE :
 			     DMA_FROM_DEVICE);
@@ -844,7 +841,7 @@ static void mmc_davinci_cmd_done(struct 
 	host->cmd = NULL;
 
 	if (!cmd) {
-		dev_warn(host->dev, "%s(): No cmd ptr\n", __FUNCTION__);
+		dev_warn(host->mmc->dev, "%s(): No cmd ptr\n", __FUNCTION__);
 		return;
 	}
 
@@ -890,7 +887,7 @@ static irqreturn_t mmc_davinci_irq(int i
 	if (host->is_core_command) {
 		if (host->cmd == NULL && host->data == NULL) {
 			status = mmcsd_regs(host)->mmc_st0;
-			dev_dbg(host->dev, "Spurious interrupt 0x%04x\r\n",
+			dev_dbg(host->mmc->dev, "Spurious interrupt 0x%04x\n",
 				status);
 			/* Disable the interrupt from mmcsd */
 			mmcsd_regs(host)->mmc_im = 0;
@@ -911,7 +908,7 @@ static irqreturn_t mmc_davinci_irq(int i
 					host->cmd->error |= MMC_ERR_TIMEOUT;
 					mmc_davinci_cmd_done(host, host->cmd);
 				}
-				dev_dbg(host->dev,
+				dev_dbg(host->mmc->dev,
 					"From code segment excuted when card removed\n");
 				return IRQ_HANDLED;
 			}
@@ -951,7 +948,7 @@ static irqreturn_t mmc_davinci_irq(int i
 						end_transfer = 1;
 					}
 				} else {
-					dev_warn(host->dev,
+					dev_warn(host->mmc->dev,
 						 "TC:host->data is NULL\n");
 				}
 			}
@@ -966,8 +963,8 @@ static irqreturn_t mmc_davinci_irq(int i
 					host->is_card_initialized = 0;
 					spin_unlock_irqrestore(&host->mmc_lock,
 							       flags);
-					dev_dbg(host->dev,
-						"MMCSD: Data timeout, CMD%d and status is %x\r\n",
+					dev_dbg(host->mmc->dev,
+						"MMCSD: Data timeout, CMD%d and status is %x\n",
 						host->cmd->opcode, status);
 
 					if (host->cmd) {
@@ -989,13 +986,13 @@ static irqreturn_t mmc_davinci_irq(int i
 				/* Data CRC error */
 				if (host->data) {
 					host->data->error |= MMC_ERR_BADCRC;
-					dev_dbg(host->dev,
-						"MMCSD: Data CRC error, bytes left %d\r\n",
+					dev_dbg(host->mmc->dev,
+						"MMCSD: Data CRC error, bytes left %d\n",
 						host->bytes_left);
 					end_transfer = 1;
 				} else {
-					dev_dbg(host->dev,
-						"MMCSD: Data CRC error\r\n");
+					dev_dbg(host->mmc->dev,
+						"MMCSD: Data CRC error\n");
 				}
 			}
 
@@ -1012,8 +1009,8 @@ static irqreturn_t mmc_davinci_irq(int i
 					 */
 					if (host->cmd->opcode !=
 					    MMC_ALL_SEND_CID) {
-						dev_dbg(host->dev,
-							"MMCSD: Command timeout, CMD%d and status is %x\r\n",
+						dev_dbg(host->mmc->dev,
+							"MMCSD: Command timeout, CMD%d and status is %x\n",
 							host->cmd->opcode,
 							status);
 						spin_lock_irqsave(&host->mmc_lock,
@@ -1031,7 +1028,7 @@ static irqreturn_t mmc_davinci_irq(int i
 
 			if (status & MMCSD_EVENT_ERROR_CMDCRC) {
 				/* Command CRC error */
-				dev_dbg(host->dev, "Command CRC error\r\n");
+				dev_dbg(host->mmc->dev, "Command CRC error\n");
 				if (host->cmd) {
 					/* Ignore CMD CRC errors during high speed operation */
 					if (host->mmc->ios.clock <= 25000000) {
@@ -1050,7 +1047,7 @@ static irqreturn_t mmc_davinci_irq(int i
 			if (host->data == NULL) {
 				status = mmcsd_regs(host)->mmc_st0;
 				if (status != 0) {
-					dev_dbg(host->dev,
+					dev_dbg(host->mmc->dev,
 						"Status is %x at end of ISR when host->data is NULL",
 						status);
 					status = 0;
@@ -1128,17 +1125,16 @@ static irqreturn_t mmc_davinci_irq(int i
 
 		if (host->cmd_code == 0) {
 			if (status & MMCSD_EVENT_EOFCMD) {
-				static int flag_sd_mmc;
 				host->is_core_command = 0;
 
-				if (flag_sd_mmc) {
-					flag_sd_mmc = 0;
+				if (host->flag_sd_mmc) {
+					host->flag_sd_mmc = 0;
 					host->cmd_code = 1;
 					/* Issue cmd1 */
 					mmcsd_regs(host)->mmc_arghl = 0x80300000;
 					mmcsd_regs(host)->mmc_cmd = 0x00000601;
 				} else {
-					flag_sd_mmc = 1;
+					host->flag_sd_mmc = 1;
 					host->cmd_code = 55;
 					/* Issue cmd55 */
 					mmcsd_regs(host)->mmc_arghl = 0x0;
@@ -1146,7 +1142,7 @@ static irqreturn_t mmc_davinci_irq(int i
 					    ((0x0 | (1 << 9) | 55));
 				}
 
-				dev_dbg(host->dev,
+				dev_dbg(host->mmc->dev,
 					"MMC-Probing mmc with cmd%d\n",
 					host->cmd_code);
 			} else {
Index: linux-2.6.10/drivers/mmc/davinci_mmc.h
===================================================================
--- linux-2.6.10.orig/drivers/mmc/davinci_mmc.h
+++ linux-2.6.10/drivers/mmc/davinci_mmc.h
@@ -124,10 +124,12 @@ struct mmc_davinci_host {
 	struct mmc_command *cmd;
 	struct mmc_data *data;
 	struct mmc_host *mmc;
-	struct device *dev;
 	struct clk *clk;
 	volatile mmcsd_regs_base *base;
 	unsigned int rw_threshold;
+	unsigned int option_read;
+	unsigned int option_write;
+	int flag_sd_mmc;
 	int irq;
 	unsigned char bus_mode;
 
Index: linux-2.6.10/mvl_patches/pro-1666.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1666.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1666);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

