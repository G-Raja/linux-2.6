#! /usr/bin/env bash
# Patch: -common_fix_ltt_deadlock
# Date: Fri Jan  4 18:39:09 2008
# Source: MontaVista Software, Inc.
# MR: 18874
# Type: Defect Fix
# Disposition: local
# Signed-off-by: Hiroshi Shimamoto <hshimamoto@mvista.com>
# Description:
# There is a deadlock caused by recursive __mod_timer() call.
# With LTT (CONFIG_LTT=y, CONFIG_RELAYFS_FS=y) and
# HRT (CONFIG_HIGH_RES_TIMERS=y) enabled kernel.
# Here is a sequence;
# schedule_timeout()
#  __mod_timer() <---- First Call
#   internal_add_timer()
#    do_handle_expired_timer()
#     raise_softirq()
#      wake_up_process()
#       try_to_wake_up()
#        task_rq_lock()
#         ltt_ev_process()
#          _ltt_log_event()
#           relay_commit()
#            schedule_delayed_work()
#             queue_delayed_work()
#              __mod_timer() <----- Recursive Call (hangs)
# 
# schedule_delayed_work() is called in relay_commit() to queue a delayed work
# which wakes up VFS readers and writers waiting on a channel, and this calling
# schedule_delayed_work() causes recursive __mod_timer() call, so this is the
# root cause of the issue.
# This patch removes delayed work registration by calling schedule_delayed_work()
# and introduces a new periodic timer to wake up VFS readers and writers
# instead of calling schedule_delayed_work().
# 

PATCHNUM=1512
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 18874
Type: Defect Fix
Disposition: local
Signed-off-by: Hiroshi Shimamoto <hshimamoto@mvista.com>
Description:
There is a deadlock caused by recursive __mod_timer() call.
With LTT (CONFIG_LTT=y, CONFIG_RELAYFS_FS=y) and
HRT (CONFIG_HIGH_RES_TIMERS=y) enabled kernel.
Here is a sequence;
schedule_timeout()
 __mod_timer() <---- First Call
  internal_add_timer()
   do_handle_expired_timer()
    raise_softirq()
     wake_up_process()
      try_to_wake_up()
       task_rq_lock()
        ltt_ev_process()
         _ltt_log_event()
          relay_commit()
           schedule_delayed_work()
            queue_delayed_work()
             __mod_timer() <----- Recursive Call (hangs)

schedule_delayed_work() is called in relay_commit() to queue a delayed work
which wakes up VFS readers and writers waiting on a channel, and this calling
schedule_delayed_work() causes recursive __mod_timer() call, so this is the
root cause of the issue.
This patch removes delayed work registration by calling schedule_delayed_work()
and introduces a new periodic timer to wake up VFS readers and writers
instead of calling schedule_delayed_work().

Index: linux-2.6.10/fs/relayfs/relay.c
===================================================================
--- linux-2.6.10.orig/fs/relayfs/relay.c
+++ linux-2.6.10/fs/relayfs/relay.c
@@ -205,6 +205,30 @@ static void remove_rchan_file_tasklet(un
 }
 
 /**
+ *	relay_async_wakeup - wake up VFS readers and writers waiting on a channel
+ *	@rchan: the channel
+ */
+static void relay_async_wakeup(struct rchan *rchan)
+{
+	if (atomic_read(&rchan->wake_readers) == 1) {
+		atomic_set(&rchan->wake_readers, 0);
+		wake_up_interruptible(&rchan->read_wait);
+	}
+	if (atomic_read(&rchan->wake_writers) == 1) {
+		atomic_set(&rchan->wake_writers, 0);
+		wake_up_interruptible(&rchan->write_wait);
+	}
+}
+
+static void async_wakeup(void* private)
+{
+	struct rchan *rchan = (struct rchan *)private;
+
+	relay_async_wakeup(rchan);
+	mod_timer(&rchan->async_wakeup_timer, jiffies + 1);
+}
+
+/**
  *	relay_release - perform end-of-buffer processing for last buffer
  *	@rchan: the channel
  *
@@ -236,6 +260,9 @@ static int relay_release(struct rchan *r
 		goto exit;
 	init_and_schedule_work(&rchan->work, remove_rchan_file, rchan);
 
+	del_timer(&rchan->async_wakeup_timer);
+	relay_async_wakeup(rchan);
+
 	clear_readers(rchan);
 exit:
 	return err;
@@ -292,22 +319,6 @@ relay_reserve(struct rchan *rchan,
 	return rchan->relay_ops->reserve(rchan, len, ts, td, err, interrupting);
 }
 
-
-/**
- *	wakeup_readers - wake up VFS readers waiting on a channel
- *	@private: the channel
- *
- *	This is the work function used to defer reader waking.  The
- *	reason waking is deferred is that calling directly from commit
- *	causes problems if you're writing from say the scheduler.
- */
-static void wakeup_readers(void *private)
-{
-	struct rchan *rchan = (struct rchan *)private;
-
-	wake_up_interruptible(&rchan->read_wait);
-}
-
 static void wakeup_readers_tasklet(unsigned long private)
 {
 	struct tasklet_node *node = (struct tasklet_node *)private;
@@ -356,8 +367,7 @@ void relay_commit(struct rchan *rchan,
 					     wakeup_readers_tasklet,
 					     rchan);
 		BUG_ON(err);
-		prepare_and_schedule_work(&rchan->wake_readers, 
-					  wakeup_readers, rchan);
+		atomic_set(&rchan->wake_readers, 1);
 	}
 }
 
@@ -1076,6 +1086,14 @@ relay_open(const char *chanpath,
 		init_shrink_timer(rchan);
 	}
 
+	atomic_set(&rchan->wake_readers, 0);
+	atomic_set(&rchan->wake_writers, 0);
+	init_timer(&rchan->async_wakeup_timer);
+	rchan->async_wakeup_timer.function = async_wakeup;
+	rchan->async_wakeup_timer.expires = jiffies + 1;
+	rchan->async_wakeup_timer.data = rchan;
+	add_timer(&rchan->async_wakeup_timer);
+
 	rchan_get(rchan->id);
 
 	return rchan->id;
@@ -1148,8 +1166,7 @@ static int relay_finalize(int rchan_id)
 					     rchan);
 		if (err)
 			goto failed;
-		prepare_and_schedule_work(&rchan->wake_readers, 
-					  wakeup_readers, rchan);
+		atomic_set(&rchan->wake_readers, 1);
 	}
 
 failed:
@@ -1273,22 +1290,6 @@ relay_write(int rchan_id, 
 	return bytes_written;
 }
 
-/**
- *	wakeup_writers - wake up VFS writers waiting on a channel
- *	@private: the channel
- *
- *	This is the work function used to defer writer waking.  The
- *	reason waking is deferred is that calling directly from 
- *	buffers_consumed causes problems if you're writing from say 
- *	the scheduler.
- */
-static void wakeup_writers(void *private)
-{
-	struct rchan *rchan = (struct rchan *)private;
-
-	wake_up_interruptible(&rchan->write_wait);
-}
-
 static void wakeup_writers_tasklet(unsigned long private)
 {
 	struct tasklet_node *node = (struct tasklet_node *)private;	
@@ -1324,7 +1325,7 @@ static void __relay_buffers_consumed(str
 				     wakeup_writers_tasklet,
 				     rchan);
 	BUG_ON(err);
-	prepare_and_schedule_work(&rchan->wake_writers, wakeup_writers, rchan);
+	atomic_set(&rchan->wake_writers, 1);
 }
 
 /**
Index: linux-2.6.10/fs/relayfs/rtasklet.h
===================================================================
--- linux-2.6.10.orig/fs/relayfs/rtasklet.h
+++ linux-2.6.10/fs/relayfs/rtasklet.h
@@ -214,11 +214,6 @@ static inline void init_and_schedule_wor
 {
 }
 
-static inline void prepare_and_schedule_work(struct work_struct *work, 
-				void (*func)(void *), void *private)
-{
-}
-
 static inline void relay_init_workqueues(struct rchan *rchan)
 {
 }
@@ -290,17 +285,8 @@ static inline void init_and_schedule_wor
 	schedule_delayed_work(work, 1);
 }
 
-static inline void prepare_and_schedule_work(struct work_struct *work, 
-				void (*func)(void *), void *data)
-{
-	PREPARE_WORK(work, func, data);
-	schedule_delayed_work(work, 1);
-}
-
 static inline void relay_init_workqueues(struct rchan *rchan)
 {
-	INIT_WORK(&rchan->wake_readers, NULL, NULL);
-	INIT_WORK(&rchan->wake_writers, NULL, NULL);
 	INIT_WORK(&rchan->work, NULL, NULL);
 }
 
Index: linux-2.6.10/include/linux/relayfs_fs.h
===================================================================
--- linux-2.6.10.orig/include/linux/relayfs_fs.h
+++ linux-2.6.10/include/linux/relayfs_fs.h
@@ -318,11 +318,12 @@ struct rchan
 
 	wait_queue_head_t read_wait;	/* VFS read wait queue */
 	wait_queue_head_t write_wait;	/* VFS write wait queue */
-	struct work_struct wake_readers; /* reader wake-up work struct */
-	struct work_struct wake_writers; /* reader wake-up work struct */
 	struct tasklet_queue_head wake_readers_tasklet; 
 	struct tasklet_queue_head wake_writers_tasklet;
 	atomic_t refcount;		/* channel refcount */
+	atomic_t wake_readers;		/* wake up readers */
+	atomic_t wake_writers;		/* wake up writers */
+	struct timer_list async_wakeup_timer;
 
 	struct relay_ops *relay_ops;	/* scheme-specific channel ops */
 
Index: linux-2.6.10/mvl_patches/pro-1512.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1512.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1512);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

