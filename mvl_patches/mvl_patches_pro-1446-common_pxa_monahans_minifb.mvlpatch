#! /usr/bin/env bash
# Patch: -common_pxa_monahans_minifb
# Date: Fri Dec  7 11:52:46 2007
# Source: Marvell
# MR: 23361
# Type: Integration
# Disposition: merged from Marvell
# Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
# Description:
#     PXA3xx framebuffer
# 

PATCHNUM=1446
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Marvell
MR: 23361
Type: Integration
Disposition: merged from Marvell
Signed-off-by: Aleksey Makarov <amakarov@ru.mvista.com>
Description:
    PXA3xx framebuffer

Index: linux-2.6.10/drivers/video/Kconfig
===================================================================
--- linux-2.6.10.orig/drivers/video/Kconfig
+++ linux-2.6.10/drivers/video/Kconfig
@@ -1204,6 +1204,17 @@ config FB_PXA
 
 	  If unsure, say N.
 
+config FB_PXA_MINILCD
+	bool "PXA Mini-LCD Support"
+	depends on FB_PXA && PXA3xx
+	---help---
+	  When the processor goes into low power mode S0/D1/C2 (Standby with
+	  LCD refresh), the main LCD controller will power off. The Mini-LCD
+	  controller will then be functional and continue to refresh the LCD
+	  panel. If you want to enable this mode, say Y here.
+
+	  If unsure, say N.
+
 config FB_PXA_PARAMETERS
 	bool "PXA LCD command line parameters"
 	default n
Index: linux-2.6.10/drivers/video/Makefile
===================================================================
--- linux-2.6.10.orig/drivers/video/Makefile
+++ linux-2.6.10/drivers/video/Makefile
@@ -90,6 +90,7 @@ obj-$(CONFIG_FB_GBE)              += gbe
 obj-$(CONFIG_FB_CIRRUS)		  += cirrusfb.o cfbfillrect.o cfbimgblt.o cfbcopyarea.o
 obj-$(CONFIG_FB_ASILIANT)	  += asiliantfb.o cfbfillrect.o cfbcopyarea.o cfbimgblt.o
 obj-$(CONFIG_FB_PXA)		  += pxafb.o cfbimgblt.o cfbcopyarea.o cfbfillrect.o
+obj-$(CONFIG_FB_PXA_MINILCD)	  += pxafb_minilcd.o
 obj-$(CONFIG_FB_PMAG_AA)	  += pmag-aa-fb.o  cfbfillrect.o cfbcopyarea.o cfbimgblt.o
 obj-$(CONFIG_FB_PMAG_BA)	  += pmag-ba-fb.o  cfbfillrect.o cfbcopyarea.o cfbimgblt.o
 obj-$(CONFIG_FB_PMAGB_B)	  += pmagb-b-fb.o  cfbfillrect.o cfbcopyarea.o cfbimgblt.o
Index: linux-2.6.10/drivers/video/pxafb.c
===================================================================
--- linux-2.6.10.orig/drivers/video/pxafb.c
+++ linux-2.6.10/drivers/video/pxafb.c
@@ -839,7 +839,11 @@ static int pxafb_ioctl(struct inode *ino
 	case FBIO_WAITFORVSYNC:
 		return pxafb_wait_for_eof(fbi, 0x1);
 	default:
+#ifdef CONFIG_FB_PXA_MINILCD
+		return pxafb_minilcd_ioctl(inode, file, cmd, arg, info);
+#else
 		return -EINVAL;
+#endif
 	}
 
 	return 0;
@@ -3283,6 +3287,10 @@ int __init pxafb_probe(struct device *de
 
 #endif				/* CONFIG_PXA27x */
 
+#ifdef CONFIG_FB_PXA_MINILCD
+	pxafb_minilcd_register(&pxafbi->fb);
+#endif
+
 	/*
 	 * Ok, now enable the LCD controller
 	 */
Index: linux-2.6.10/drivers/video/pxafb.h
===================================================================
--- linux-2.6.10.orig/drivers/video/pxafb.h
+++ linux-2.6.10/drivers/video/pxafb.h
@@ -21,6 +21,10 @@
  * for more details.
  */
 
+#ifdef CONFIG_FB_PXA_MINILCD
+#include "pxafb_minilcd.h"
+#endif
+
 /*
  * These are the bitfields for each
  * display depth that we support.
@@ -111,6 +115,10 @@ struct pxafb_info {
 	struct overlayfb_info *cursorfb;
 #endif				/* CONFIG_PXA27x */
 
+#ifdef CONFIG_FB_PXA_MINILCD
+	struct pxafb_minilcd_info minilcd_info;
+#endif
+
 };
 
 #if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
Index: linux-2.6.10/drivers/video/pxafb_minilcd.c
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/video/pxafb_minilcd.c
@@ -0,0 +1,298 @@
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/vmalloc.h>
+#include <linux/fb.h>
+
+#include <asm/uaccess.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/pxa-regs.h>
+#include <asm/arch/mfp.h>
+
+#include "pxafb.h"
+
+extern void zylonite_enable_lcd_pins(void);
+extern void zylonite_enable_mlcd_pins(void);
+
+static struct pxafb_info *g_pxafb_info = NULL;
+
+int pxafb_minilcd_register(struct fb_info *info)
+{
+	struct pxafb_info *fbi = (struct pxafb_info *)info;
+	struct pxafb_minilcd_info *mi;
+
+	if ((g_pxafb_info = fbi) == NULL)
+		return -EINVAL;
+
+	mi = &fbi->minilcd_info;
+
+	mi->enable = 1;		/* default to be enabled */
+	mi->backlight = 1;	/* default to turn on backlight */
+	mi->framecount = 0;	/* default to no framecount wakeup */
+	mi->framedata = NULL;	/* default to base frame buffer */
+
+	return 0;
+}
+
+int pxafb_minilcd_ioctl(struct inode *inode, struct file *file,
+			unsigned int cmd, unsigned long arg,
+			struct fb_info *info)
+{
+	struct pxafb_info *fbi = (struct pxafb_info *)info;
+	struct pxafb_minilcd_info *mi;
+
+	if (fbi == NULL)
+		return -ENODEV;
+
+	mi = &fbi->minilcd_info;
+
+	switch (cmd) {
+	case PXAFB_MINILCD_ENABLE:
+		mi->enable = (uint32_t) (arg);
+		break;
+
+	case PXAFB_MINILCD_BACKLIGHT:
+		mi->backlight = (uint32_t) (arg);
+		break;
+
+	case PXAFB_MINILCD_WAKEUP:
+		if (arg == 0) {
+			mi->framecount &=
+			    ~(MLFRMCNT_WKUP | MLFRMCNT_FRCOUNT_MASK);
+		} else {
+			mi->framecount |= MLFRMCNT_FRCOUNT(arg);
+			mi->framecount |= MLFRMCNT_WKUP;
+		}
+		break;
+
+	case PXAFB_MINILCD_FWAKEUP:
+		if (arg == 0) {
+			mi->framecount &= ~(MLFRMCNT_FWKUP);
+		} else {
+			mi->framecount |= MLFRMCNT_FWKUP;
+		}
+		break;
+
+	case PXAFB_MINILCD_FRAMEDATA:
+		{
+			unsigned int size;
+
+			size = fbi->fb.var.xres * fbi->fb.var.yres;
+			size = (size * fbi->fb.var.bits_per_pixel) >> 3;
+
+			if (arg == 0) {
+				if (mi->framedata)
+					vfree(mi->framedata);
+
+				mi->framedata = NULL;
+			}
+
+			if (mi->framedata == NULL) {
+				mi->framedata = vmalloc(size);
+				if (mi->framedata == NULL)
+					return -ENOMEM;
+			}
+
+			if (copy_from_user(mi->framedata, (void *)arg, size))
+				return -EFAULT;
+
+			break;
+		}
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+#define MINILCD_SRAM_ADDR	(0x5C011000)
+
+#define rgb16to15(n) (uint16_t)(((n) & 0x1f) | (((n) & 0xffc0) >> 1))
+/*
+ * pxafb_minilcd_encode
+ *
+ * @brief this function encodes the pixels (RGB565) in the source buffers
+ * "src", with the geometry of width x height, into the destination "dst"
+ * (RGB555). The pixels will be run-length encoded. It returns the number
+ * of the encoded bytes if successful, or a negative number if failed.
+ *
+ * Note: this function assumes the destination buffer is large enough.
+ * This is usually true because the SRAM will only used by Mini-LCD in
+ * D1 power mode.
+ */
+static int pxafb_minilcd_encode(void *dst, void *src, int width, int height)
+{
+	uint16_t last, curr;
+	uint16_t *s = src;
+	uint16_t *d = dst;
+	int i, j, count;
+
+	if ((src == NULL) || (dst == NULL))
+		return -EINVAL;
+
+	for (i = 0; i < height; i++) {
+		curr = rgb16to15(*s);
+		s++;
+		*d++ = curr;
+		last = curr;
+		count = 0;
+		for (j = 1; j < width - 1; j++) {
+			curr = rgb16to15(*s);
+			s++;
+			if (curr == last)
+				count++;
+			else {
+				if (count) {
+					*d++ = 0x8000 | count;
+					count = 0;
+				}
+				*d++ = curr;
+				last = curr;
+			}
+		}
+		if (count)
+			*d++ = 0x8000 | count;
+		*d++ = rgb16to15(*s);
+		s++;
+		*d++ = 0x9001;	/* EOL */
+	}
+	*(d - 1) = 0xA001;	/* replace last EOL with EOF */
+
+	while ((unsigned int)(d) & 0x7)
+		*d++ = 0xF001;	/* padding to 64-bit aligned */
+
+	return ((unsigned int)(d) - (unsigned int)(dst));
+}
+
+static void pxafb_minilcd_enable(struct pxafb_info *fbi)
+{
+	struct pxafb_minilcd_info *mi = &fbi->minilcd_info;
+	uint32_t mlccr0 = 0;
+
+	pxa_set_cken(CKEN_MINI_LCD, 1);
+
+	/* FIXME:  hack the timing information from fbi->reg_lccrX
+	 * instead of from platform specific struct pxafb_mach_info
+	 */
+	if (fbi->reg_lccr3 & LCCR3_OEP)
+		mlccr0 |= MLCCR0_OEP;
+	if (fbi->reg_lccr3 & LCCR3_PCP)
+		mlccr0 |= MLCCR0_PCP;
+	if (fbi->reg_lccr3 & LCCR3_HSP)
+		mlccr0 |= MLCCR0_HSP;
+	if (fbi->reg_lccr3 & LCCR3_VSP)
+		mlccr0 |= MLCCR0_VSP;
+
+	mlccr0 |= 0x04;
+
+	MLCCR0 = mlccr0;
+	MLCCR1 = fbi->reg_lccr1;
+	MLCCR2 = fbi->reg_lccr2;
+	MLSADD = mi->sram_addr_phys;
+	MLFRMCNT = mi->framecount;
+
+	zylonite_enable_mlcd_pins();
+
+	if (mi->backlight)
+		mhn_mfp_set_lpm(MFP_BACKLIGHT_PWM, MFP_LPM_DRIVE_HIGH);
+	else
+		mhn_mfp_set_lpm(MFP_BACKLIGHT_PWM, MFP_LPM_DRIVE_LOW);
+
+	return;
+}
+
+static void pxafb_minilcd_disable(struct pxafb_info *fbi)
+{
+	/* restore MFP pin settings back to LCD */
+	zylonite_enable_lcd_pins();
+	pxa_set_cken(CKEN_MINI_LCD, 0);
+}
+
+/* pxafb_minilcd_enter
+ *
+ * @brief this function will be called by power management routines when
+ * entering into S0/D1/C2 (standby with LCD refreshing) mode.
+ *
+ * SRAM allocation is currently forced. Memory from MINILCD_SRAM_ADDR of
+ * adequate size will be backed up into DRAM, and be restored later when
+ * exiting from D1.
+ */
+int pxafb_minilcd_enter(void)
+{
+	void *frame_src;
+	size_t sram_size;
+	struct pxafb_info *fbi;
+	struct pxafb_minilcd_info *mi;
+
+	if ((fbi = g_pxafb_info) == NULL)
+		return -ENODEV;
+
+	mi = &fbi->minilcd_info;
+
+	if (!mi->enable)
+		return 0;
+
+	if ((fbi->overlay1fb->state == C_ENABLE) ||
+	    (fbi->overlay2fb->state == C_ENABLE))
+		return -EBUSY;
+
+	if (fbi->fb.var.bits_per_pixel != 16)
+		return -EINVAL;
+
+	sram_size = (fbi->fb.var.xres + 1) * fbi->fb.var.yres * 2;
+	sram_size = PAGE_ALIGN(sram_size);
+
+	mi->sram_addr_virt =
+	    (void *)__ioremap(MINILCD_SRAM_ADDR, sram_size, 0, 1);
+	mi->sram_addr_phys = MINILCD_SRAM_ADDR;
+
+	mi->sram_save_to = vmalloc(sram_size);
+	if (mi->sram_save_to == NULL) {
+		iounmap(mi->sram_addr_virt);
+		return -ENOMEM;
+	}
+	memcpy(mi->sram_save_to, mi->sram_addr_virt, sram_size);
+	mi->sram_save_size = sram_size;
+
+	frame_src = (mi->framedata) ? mi->framedata : fbi->fb.screen_base;
+
+	if (pxafb_minilcd_encode(mi->sram_addr_virt, frame_src,
+				 fbi->fb.var.xres, fbi->fb.var.yres) < 0)
+		return -EINVAL;
+
+	pxafb_minilcd_enable(fbi);
+
+	return 0;
+}
+
+int pxafb_minilcd_exit(void)
+{
+	struct pxafb_info *fbi;
+	struct pxafb_minilcd_info *mi;
+
+	if ((fbi = g_pxafb_info) == NULL)
+		return -ENODEV;
+
+	mi = &fbi->minilcd_info;
+
+	if (!mi->enable)
+		return 0;
+
+	pxafb_minilcd_disable(fbi);
+
+	/* restore saved SRAM */
+	if (mi->sram_save_to) {
+		memcpy(mi->sram_addr_virt,
+		       mi->sram_save_to, mi->sram_save_size);
+
+		iounmap(mi->sram_addr_virt);
+		vfree(mi->sram_save_to);
+
+		mi->sram_addr_phys = 0;
+		mi->sram_addr_virt = NULL;
+		mi->sram_save_to = NULL;
+		mi->sram_save_size = 0;
+	}
+
+	return 0;
+}
+
Index: linux-2.6.10/drivers/video/pxafb_minilcd.h
===================================================================
--- /dev/null
+++ linux-2.6.10/drivers/video/pxafb_minilcd.h
@@ -0,0 +1,93 @@
+#ifndef __PXAFB_MINILCD_H__
+#define __PXAFB_MINILCD_H__
+
+/*
+ * linux/drivers/video/pxafb_minilcd.h
+ *    -- Intel PXA3xx mini-LCD Controller Frame Buffer Device
+ *
+ * (C) Copyright 2006 Marvell International Ltd.
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file COPYING in the main directory of this archive
+ * for more details.
+ */
+
+#include <asm/ioctl.h>
+
+/* commands for pxafb_minilcd_ioctl() */
+
+#define PXAFB_MINILCD_ENABLE		_IOW('F', 0x80, unsigned int)
+#define PXAFB_MINILCD_BACKLIGHT		_IOW('F', 0x81, unsigned int)
+#define PXAFB_MINILCD_WAKEUP		_IOW('F', 0x82, unsigned int)
+#define PXAFB_MINILCD_FWAKEUP		_IOW('F', 0x83, unsigned int)
+#define PXAFB_MINILCD_FRAMEDATA		_IOW('F', 0x84, void *)
+
+/* Mini-LCD register definitions */
+
+#define MLCCR0			__REG_2(0x46000000)
+#define MLCCR1			__REG_2(0x46000004)
+#define MLCCR2			__REG_2(0x46000008)
+#define MLSADD			__REG_2(0x4600000C)
+#define MLFRMCNT		__REG_2(0x46000010)
+
+#define MLCCR0_OEP		(1 << 11)
+#define MLCCR0_PCP		(1 << 10)
+#define MLCCR0_VSP		(1 << 9)
+#define MLCCR0_HSP		(1 << 8)
+#define MLCCR0_PCD(d)		((d) & 0xff)
+
+#define MLCCR1_BLW(n)		(((n) & 0xff) << 24)
+#define MLCCR1_ELW(n)		(((n) & 0xff) << 16)
+#define MLCCR1_HSW(n)		(((n) & 0x3f) << 10)
+#define MLCCR1_PPL(n)		(((n) & 0x3ff)
+
+#define MLCCR2_BFW(n)		(((n) & 0xff) << 24)
+#define MLCCR2_EFW(n)		(((n) & 0xff) << 16)
+#define MLCCR2_VSW(n)		(((n) & 0x3f) << 10)
+#define MLCCR2_LPP(n)		(((n) & 0x3ff)
+
+#define MLFRMCNT_WKUP		(1U << 31)
+#define MLFRMCNT_FWKUP		(1U << 30)
+#define MLFRMCNT_FRCOUNT(n)	((n) & 0x3ff)
+#define MLFRMCNT_FRCOUNT_MASK	(0x3ff)
+
+/* Shadows for Mini-LCD controller registers */
+struct pxafb_minilcd_reg {
+	uint32_t mlccr0;
+	uint32_t mlccr1;
+	uint32_t mlccr2;
+	uint32_t mlsadd;
+	uint32_t mlfrmcnt;
+};
+
+/*
+ * pxafb_minilcd_info - run-time information to enable mini-lcd
+ * enable     - enable in low power mode (S0/D1/C2)
+ * framecount - shadow of register MLFRMCNT
+ * frameaddr  - shadow of register MLSADR
+ * framedata  - points to the encoded data from user specified buffer,
+ *              or NULL if the base frame buffer is going to be used.
+ * framesize  - size of the encoded frame data if 'framedata' is not NULL
+ */
+struct pxafb_minilcd_info {
+	unsigned int	enable;
+	unsigned int	backlight;
+	uint32_t	framecount;
+	void *		framedata;
+	size_t		framesize;
+
+	uint32_t	sram_addr_phys; /* Physical address of the SRAM */
+	void *		sram_addr_virt; /* Virtual address of the SRAM */
+	void *		sram_save_to;	/* address to backup SRAM into */
+	size_t		sram_save_size; /* size of saved SRAM */
+};
+
+extern int pxafb_minilcd_register(struct fb_info *);
+extern int pxafb_minilcd_ioctl(struct inode *inode, struct file *file,
+				unsigned int cmd, unsigned long arg,
+				struct fb_info *info);
+
+extern int pxafb_minilcd_enter(void);
+extern int pxafb_minilcd_exit(void);
+
+#endif /* __PXAFB_MINILCD_H__ */
Index: linux-2.6.10/mvl_patches/pro-1446.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1446.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1446);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

