#! /usr/bin/env bash
# Patch: -common_omap_audio_pm
# Date: Wed Dec 28 14:55:10 2005
# Source: MontaVista Software, Inc.
# MR: 11259
# Type: Enhancement
# Disposition: needs submitting to bk://linux-omap.bkbits.net
# Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
# Description:
# 	Added PM support for OMAP Audio driver to 
# 	enable suspend when the audio is active.
# 

PATCHNUM=25
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 11259
Type: Enhancement
Disposition: needs submitting to bk://linux-omap.bkbits.net
Signed-off-by: Vladimir Barinov <vbarinov@ru.mvista.com>
Description:
	Added PM support for OMAP Audio driver to 
	enable suspend when the audio is active.

Index: linux-2.6.10/sound/oss/omap-audio.c
===================================================================
--- linux-2.6.10.orig/sound/oss/omap-audio.c
+++ linux-2.6.10/sound/oss/omap-audio.c
@@ -181,43 +181,21 @@ static int audio_ldm_suspend(void *data)
 	audio_state_t *state = data;
 
 	FN_IN;
-
-	/* 
-	 * Reject the suspend request if we are already actively transmitting data 
-	 * Rationale: We dont want to be suspended while in the middle of a call!
-	 */
 	if (AUDIO_ACTIVE(state) && state->hw_init) {
-		printk(KERN_ERR "Audio device Active, Cannot Suspend");
-		return -EPERM;
-#if 0
-		/* NOTE:
-		 * This Piece of code is commented out in hope
-		 * That one day we would need to suspend the device while 
-		 * audio operations are in progress and resume the operations
-		 * once the resume is done.
-		 * This is just a sample implementation of how it could be done.
-		 * Currently NOT SUPPORTED
-		 */
 		audio_stream_t *is = state->input_stream;
 		audio_stream_t *os = state->output_stream;
-		int stopstate;
 		if (is && is->buffers) {
-			printk("IS Suspend\n");
-			stopstate = is->stopped;
 			audio_stop_dma(is);
 			DMA_CLEAR(is);
 			is->dma_spinref = 0;
-			is->stopped = stopstate;
 		}
 		if (os && os->buffers) {
-			printk("OS Suspend\n");
-			stopstate = os->stopped;
 			audio_stop_dma(os);
 			DMA_CLEAR(os);
 			os->dma_spinref = 0;
-			os->stopped = stopstate;
 		}
-#endif
+
+		audio_state.hw_suspend();
 	}
 
 	FN_OUT(0);
@@ -235,31 +213,16 @@ static int audio_ldm_resume(void *data)
 
 	FN_IN;
 	if (AUDIO_ACTIVE(state) && state->hw_init) {
-		/* Should never occur - since we never suspend with active state */
-		BUG();
-		return -EPERM;
-#if 0
-		/* NOTE:
-		 * This Piece of code is commented out in hope
-		 * That one day we would need to suspend the device while 
-		 * audio operations are in progress and resume the operations
-		 * once the resume is done.
-		 * This is just a sample implementation of how it could be done.
-		 * Currently NOT SUPPORTED
-		 */
 		audio_stream_t *is = state->input_stream;
 		audio_stream_t *os = state->output_stream;
 		if (os && os->buffers) {
-			printk("OS Resume\n");
-			audio_reset(os);
-			audio_process_dma(os);
+			audio_start_dma_chain(os);
 		}
 		if (is && is->buffers) {
-			printk("IS Resume\n");
-			audio_reset(is);
-			audio_process_dma(is);
+			audio_start_dma_chain(is);
 		}
-#endif
+
+		audio_state.hw_resume();
 	}
 	FN_OUT(0);
 	return 0;
@@ -343,13 +306,6 @@ static int audio_suspend(struct device *
 	}
 	if (audio_state.hw_suspend) {
 		ret = audio_ldm_suspend(data);
-		if (ret == 0)
-			ret = audio_state.hw_suspend();
-	}
-	if (ret) {
-		printk(KERN_INFO "Audio Suspend Failed \n");
-	} else {
-		printk(KERN_INFO "Audio Suspend Success \n");
 	}
 #endif				/* CONFIG_PM */
 
@@ -374,13 +330,6 @@ static int audio_resume(struct device *d
 	}
 	if (audio_state.hw_resume) {
 		ret = audio_ldm_resume(data);
-		if (ret == 0)
-			ret = audio_state.hw_resume();
-	}
-	if (ret) {
-		printk(KERN_INFO " Audio Resume Failed \n");
-	} else {
-		printk(KERN_INFO " Audio Resume Success \n");
 	}
 #endif				/* CONFIG_PM */
 
Index: linux-2.6.10/sound/oss/omap-audio-dma-intfc.h
===================================================================
--- linux-2.6.10.orig/sound/oss/omap-audio-dma-intfc.h
+++ linux-2.6.10/sound/oss/omap-audio-dma-intfc.h
@@ -48,6 +48,7 @@ void audio_prime_rx(audio_state_t * stat
 int audio_set_fragments(audio_stream_t * s, int val);
 int audio_sync(struct file *file);
 void audio_stop_dma(audio_stream_t * s);
+int audio_start_dma_chain(audio_stream_t * s);
 u_int audio_get_dma_pos(audio_stream_t * s);
 void audio_reset(audio_stream_t * s);
 void audio_discard_buf(audio_stream_t * s);
Index: linux-2.6.10/sound/oss/omap-audio-tsc2101.c
===================================================================
--- linux-2.6.10.orig/sound/oss/omap-audio-tsc2101.c
+++ linux-2.6.10/sound/oss/omap-audio-tsc2101.c
@@ -985,6 +985,16 @@ static void omap_tsc2101_remove(void)
  ********************************************************************************/
 static int omap_tsc2101_suspend(void)
 {
+	FN_IN;
+	set_current_state(TASK_INTERRUPTIBLE);
+	schedule_timeout(2);
+
+	omap_mcbsp_stop(AUDIO_MCBSP);
+	omap_mcbsp_free(AUDIO_MCBSP);
+
+	audio_tsc2101_write(TSC2101_CODEC_POWER_CTRL,
+			    ~(CPC_SP1PWDN | CPC_SP2PWDN | CPC_BASSBC));
+	omap_tsc2101_disable();
 
 	FN_OUT(0);
 	return 0;
@@ -997,6 +1007,15 @@ static int omap_tsc2101_suspend(void)
  ********************************************************************************/
 static int omap_tsc2101_resume(void)
 {
+	FN_IN;
+
+	omap_mcbsp_request(AUDIO_MCBSP);
+
+	omap_tsc2101_enable();
+	tsc2101_configure();
+
+	omap_mcbsp_config(AUDIO_MCBSP, &initial_config);
+	omap_mcbsp_start(AUDIO_MCBSP);
 
 	FN_OUT(0);
 	return 0;
Index: linux-2.6.10/sound/oss/omap-audio-dma-intfc.c
===================================================================
--- linux-2.6.10.orig/sound/oss/omap-audio-dma-intfc.c
+++ linux-2.6.10/sound/oss/omap-audio-dma-intfc.c
@@ -152,7 +152,6 @@ static int audio_set_dma_params_play(int
 				     u_int dma_size);
 static int audio_set_dma_params_capture(int channel, dma_addr_t dma_ptr,
 					u_int dma_size);
-static int audio_start_dma_chain(audio_stream_t * s);
 
 /*********************************** GLOBAL FUNCTIONS DEFINTIONS ***********************/
 
@@ -738,7 +737,7 @@ static int audio_set_dma_params_capture(
 	return 0;
 }
 
-static int audio_start_dma_chain(audio_stream_t * s)
+int audio_start_dma_chain(audio_stream_t * s)
 {
 	int channel = s->lch[s->dma_q_head];
 	FN_IN;
@@ -977,6 +976,7 @@ EXPORT_SYMBOL(audio_prime_rx);
 EXPORT_SYMBOL(audio_set_fragments);
 EXPORT_SYMBOL(audio_sync);
 EXPORT_SYMBOL(audio_stop_dma);
+EXPORT_SYMBOL(audio_start_dma_chain);
 EXPORT_SYMBOL(audio_get_dma_pos);
 EXPORT_SYMBOL(audio_reset);
 EXPORT_SYMBOL(audio_discard_buf);
Index: linux-2.6.10/mvl_patches/pro-0025.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0025.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2005 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(25);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

