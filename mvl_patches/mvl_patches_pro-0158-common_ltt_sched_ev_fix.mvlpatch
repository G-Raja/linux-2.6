#! /usr/bin/env bash
# Patch: -common_ltt_sched_ev_fix
# Date: Wed Dec 28 14:59:47 2005
# Source: MontaVista Software, Inc.
# MR: 14895
# Type: Defect Fix
# Disposition: needs submitting to www.listserv.shafik.org/pipermail/ltt-dev/
# Signed-off-by: Yuri Frolov <yfrolov@ru.mvista.com>
# Description:
# 	There is no guarantee the "prev" will exist any more after 
# 	finish_task_switch, so it is illegal to use it 
# 	(ltt_ev_schedchange_rt references into the structure).
# 	So, we split ltt_ev_schedchange into two parts.
# 	The first part initializes ltt_schedchange variable (we can do
# 	it only after context_switch(rq, prev, next) returns, otherwise
# 	we lose all the initialization data due to a switch of stacks.
# 	The second part does the real logging actions, we can do it just
# 	after runqueue lock has been unlocked (i.e after 
# 	finish_task_switch(prev) returns), this works both for
# 	PREEMPT_RT and other scheduling policies.
# 

PATCHNUM=158
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 14895
Type: Defect Fix
Disposition: needs submitting to www.listserv.shafik.org/pipermail/ltt-dev/
Signed-off-by: Yuri Frolov <yfrolov@ru.mvista.com>
Description:
	There is no guarantee the "prev" will exist any more after 
	finish_task_switch, so it is illegal to use it 
	(ltt_ev_schedchange_rt references into the structure).
	So, we split ltt_ev_schedchange into two parts.
	The first part initializes ltt_schedchange variable (we can do
	it only after context_switch(rq, prev, next) returns, otherwise
	we lose all the initialization data due to a switch of stacks.
	The second part does the real logging actions, we can do it just
	after runqueue lock has been unlocked (i.e after 
	finish_task_switch(prev) returns), this works both for
	PREEMPT_RT and other scheduling policies.

Index: linux-2.6.10/include/linux/ltt-events.h
===================================================================
--- linux-2.6.10.orig/include/linux/ltt-events.h
+++ linux-2.6.10/include/linux/ltt-events.h
@@ -150,25 +150,19 @@ typedef struct _ltt_schedchange {
 	ulong in;		/* Incoming process */
 	u32 out_state;		/* Outgoing process' state */
 } LTT_PACKED_STRUCT ltt_schedchange;
-static inline void __ltt_ev_schedchange(task_t * task_out, task_t * task_in)
+
+static inline void ltt_init_sched_event(ltt_schedchange *sched_event,
+					task_t *task_out, task_t *task_in)
 {
-	ltt_schedchange sched_event;
+	sched_event->out = (u32) task_out->pid;
+	sched_event->in  = (ulong) task_in;
+	sched_event->out_state = (u32) task_out->state;
+}
 
-	sched_event.out = (u32) task_out->pid;
-	sched_event.in  = (ulong) task_in;
-	sched_event.out_state = (u32) task_out->state;
-
-	ltt_log_event(LTT_EV_SCHEDCHANGE, &sched_event);
-}
-#if defined(CONFIG_PREEMPT_RT) && defined(CONFIG_SMP)
-#define ltt_ev_schedchange(task_out, task_in) do { } while (0)
-#define ltt_ev_schedchange_rt(task_out, task_in) \
-		__ltt_ev_schedchange(task_out, task_in)
-#else
-#define ltt_ev_schedchange(task_out, task_in) \
-		__ltt_ev_schedchange(task_out, task_in)
-#define ltt_ev_schedchange_rt(task_out, task_in) do { } while (0)
-#endif
+static inline void ltt_ev_schedchange(ltt_schedchange *sched_event)
+{
+	ltt_log_event(LTT_EV_SCHEDCHANGE, sched_event);
+}
 
 /*  LTT_SOFT_IRQ */
 enum {
@@ -459,8 +453,8 @@ ltt_ev_define_name(u8 event_id, u32 data
 #define ltt_ev_trap_exit()
 #define ltt_ev_irq_entry(ID, KERNEL)
 #define ltt_ev_irq_exit()
-#define ltt_ev_schedchange(OUT, IN)
-#define ltt_ev_schedchange_rt(OUT, IN)
+#define ltt_init_sched_event(DATA, OUT, IN)
+#define ltt_ev_schedchange(DATA)
 #define ltt_ev_soft_irq(ID, DATA)
 #define ltt_ev_process(ID, DATA1, DATA2)
 #define ltt_ev_process_exit(DATA1, DATA2)
Index: linux-2.6.10/kernel/sched.c
===================================================================
--- linux-2.6.10.orig/kernel/sched.c
+++ linux-2.6.10/kernel/sched.c
@@ -2985,19 +2985,22 @@ switch_tasks:
 
 	sched_info_switch(prev, next);
 	if (likely(prev != next)) {
+#ifdef CONFIG_LTT
+		ltt_schedchange sched_event;
+#endif
 		next->timestamp = now;
 		rq->nr_switches++;
 		rq->curr = next;
 		++*switch_count;
 
 		prepare_arch_switch(rq, next);
-		ltt_ev_schedchange(prev, next);
 		prev = context_switch(rq, prev, next);
 		barrier();
+		ltt_init_sched_event(&sched_event, prev, current);
 		if (prev && current)
 			trace_special_pid(prev->pid, prev->prio, current->prio);
 		finish_task_switch(prev);
-		ltt_ev_schedchange_rt(prev, current);
+		ltt_ev_schedchange(&sched_event);
 		preempt_enable_no_resched();
 	} else {
 		trace_stop_sched_switched(next);
Index: linux-2.6.10/mvl_patches/pro-0158.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0158.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2005 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(158);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

