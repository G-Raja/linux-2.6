#! /usr/bin/env bash
# Patch: -common_pxafb_cleanup
# Date: Fri Dec  7 11:48:50 2007
# Type: Enhancement
# Disposition: needs submitting to linux-arm-kernel
# Signed-off-by: Steve Longerbeam <stevel@mvista.com>
# Keywords: PXA, framebuffer
# Description:
#   Cleanup patch for pxafb:
# 
#   - Remove compile warnings (fix pointer types for overlays).
#   - In enable_overlays(), make sure fbi pointers are set before
#     dereferencing (fixes a NULL dereference).
#   - In pxafb_check_var(), check that xres/yres are within maximum
#     resolution supported by the pxa2xx hardware, not by the
#     fixed resolution of a particular platform. Also check that
#     xres_virtual is within max X h/w limits and that the virtual
#     framebuffer is less than the framebuffer size.
#   - In overlay[12]fb_check_var(), check that xpos/ypos and xres/yres
#     are within the current base frame size, as required by PXA27x.
#   - Allocate color map once at fb init, and don't deallocate unless
#     driver load fails.
#   - fixed some typo errors.
#   - Make base framebuffer size smem_len to be the maximum 800x600
#     resolution supported by the hardware (to allow virtual screens
#     in a later patch).
#   - remove duplicated register bit defines in pxa-regs.h.
# 

PATCHNUM=1402
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Type: Enhancement
Disposition: needs submitting to linux-arm-kernel
Signed-off-by: Steve Longerbeam <stevel@mvista.com>
Keywords: PXA, framebuffer
Description:
  Cleanup patch for pxafb:

  - Remove compile warnings (fix pointer types for overlays).
  - In enable_overlays(), make sure fbi pointers are set before
    dereferencing (fixes a NULL dereference).
  - In pxafb_check_var(), check that xres/yres are within maximum
    resolution supported by the pxa2xx hardware, not by the
    fixed resolution of a particular platform. Also check that
    xres_virtual is within max X h/w limits and that the virtual
    framebuffer is less than the framebuffer size.
  - In overlay[12]fb_check_var(), check that xpos/ypos and xres/yres
    are within the current base frame size, as required by PXA27x.
  - Allocate color map once at fb init, and don't deallocate unless
    driver load fails.
  - fixed some typo errors.
  - Make base framebuffer size smem_len to be the maximum 800x600
    resolution supported by the hardware (to allow virtual screens
    in a later patch).
  - remove duplicated register bit defines in pxa-regs.h.

Index: linux-2.6.10/drivers/video/pxafb.c
===================================================================
--- linux-2.6.10.orig/drivers/video/pxafb.c
+++ linux-2.6.10/drivers/video/pxafb.c
@@ -93,9 +93,10 @@ static void overlay2fb_blank(int blank, 
 #endif /*CONFIG_PXA27x*/
 
 int pxafb_probe(struct device *dev);
+#ifdef CONFIG_PM
 static int pxafb_suspend(struct device *dev, u32 state, u32 level);
 static int pxafb_resume(struct device *dev, u32 level);
-
+#endif
 
 #ifdef CONFIG_FB_PXA_PARAMETERS
 #define PXAFB_OPTIONS_SIZE 256
@@ -110,7 +111,9 @@ static int overlay2fb_disable(struct fb_
 static void pxafb_init_unchangeable_vars(struct fb_var_screeninfo *var,
 				      struct device *dev);
 
+#ifdef CONFIG_PXA27x
 static int yuv420_enabled = 0;
+#endif
 static struct device *my_device;	/* We preserve reference to the device here */
 static struct device_driver pxafb_driver;
 static struct pxafb_info *pxafbi;
@@ -245,15 +248,15 @@ static void disable_overlays(struct pxaf
 
 static void enable_overlays(struct pxafb_info *fbi)
 {
-	if (fbi->overlay1fb->state == C_ENABLE) {
+	if (fbi->overlay1fb && fbi->overlay1fb->state == C_ENABLE) {
 		fbi->overlay1fb->state = C_DISABLE;
 		overlay1fb_enable(fbi->overlay1fb);
 	}
-	if (fbi->overlay2fb->state == C_ENABLE) {
+	if (fbi->overlay2fb && fbi->overlay2fb->state == C_ENABLE) {
 		fbi->overlay2fb->state = C_DISABLE;
 		overlay2fb_enable(fbi->overlay2fb);
 	}
-	if (fbi->cursorfb->state == C_ENABLE) {
+	if (fbi->cursorfb && fbi->cursorfb->state == C_ENABLE) {
 		fbi->cursorfb->state = C_DISABLE;
 		cursorfb_enable((struct fb_info *)fbi->cursorfb);
 	}
@@ -278,6 +281,7 @@ static void enable_overlays(struct pxafb
 
 static inline void pxafb_schedule_work(struct pxafb_info *fbi, u_int state)
 {
+#if 0
 	unsigned long flags;
 
 	/*
@@ -290,7 +294,6 @@ static inline void pxafb_schedule_work(s
 	 */
 
 	/*use 1 to enable Kernel turn off the LCD or 0 to dsiable it*/
-#if 0 
 	local_irq_save(flags);
 	if (fbi->task_state == C_ENABLE && state == C_REENABLE)
 		state = (u_int) -1;
@@ -448,14 +451,18 @@ static int pxafb_check_var(struct fb_var
 		var->xres = MIN_XRES;
 	if (var->yres < MIN_YRES)
 		var->yres = MIN_YRES;
-	if (var->xres > fbi->max_xres)
-		var->xres = fbi->max_xres;
-	if (var->yres > fbi->max_yres)
-		var->yres = fbi->max_yres;
-	var->xres_virtual =
-		max(var->xres_virtual, var->xres);
-	var->yres_virtual =
-		max(var->yres_virtual, var->yres);
+	if (var->xres > MAX_XRES)
+		var->xres = MAX_XRES;
+	if (var->yres > MAX_YRES)
+		var->yres = MAX_YRES;
+
+	var->xres_virtual = max(var->xres_virtual, var->xres);
+	var->yres_virtual = max(var->yres_virtual, var->yres);
+	if (var->xres_virtual > MAX_XRES)
+		var->xres_virtual = MAX_XRES;
+	if (var->xres_virtual * var->yres_virtual * var->bits_per_pixel/8 >
+	    info->fix.smem_len)
+		var->yres_virtual = MAX_YRES;
 
         /*
 	 * Setup the RGB parameters for this display.
@@ -499,23 +506,30 @@ static int overlay1fb_check_var(struct f
 				struct fb_info *info)
 {
 	struct overlayfb_info *fbi = (struct overlayfb_info *)info;
-
 	int xpos = 0, ypos = 0;
+	int base_xres, base_yres;
+
+	base_xres = fbi->basefb->fb.var.xres;
+	base_yres = fbi->basefb->fb.var.yres;
 
 	xpos = (var->nonstd & 0x3ff);
 	ypos = ((var->nonstd >> 10) & 0x3ff);
 
-	if (xpos > fbi->basefb->max_xres)
-		xpos = fbi->basefb->max_xres;
-	if (ypos > fbi->basefb->max_yres)
-		ypos = fbi->basefb->max_yres;
+	if (var->xres > base_xres)
+		var->xres = base_xres;
+	if (var->yres > base_yres)
+		var->yres = base_yres;
 
-	if ((xpos + var->xres) > fbi->basefb->max_xres) {
-		var->xres = fbi->basefb->max_xres - xpos;
+	if ((xpos + var->xres) > base_xres) {
+		xpos = base_xres - var->xres;
+		if (xpos < 0)
+			xpos = 0;
 	}
 
-	if ((ypos + var->yres) > fbi->basefb->max_yres) {
-		var->yres = fbi->basefb->max_yres - ypos;
+	if ((ypos + var->yres) > base_yres) {
+		ypos = base_yres - var->yres;
+		if (ypos < 0)
+			ypos = 0;
 	}
 
 	/*set xpos and ypos back to variable params */
@@ -559,13 +573,21 @@ static int overlay2fb_check_var(struct f
 				struct fb_info *info)
 {
 	struct overlayfb_info *fbi = (struct overlayfb_info *)info;
-
 	int format, xpos, ypos, xres = 0, yres = 0;
+	int base_xres, base_yres;
+
+	base_xres = fbi->basefb->fb.var.xres;
+	base_yres = fbi->basefb->fb.var.yres;
 
 	xpos = (var->nonstd & 0x3ff);
 	ypos = (var->nonstd >> 10) & 0x3ff;
 	format = (var->nonstd >> 20) & 0x7;
 
+	if (var->xres > base_xres)
+		var->xres = base_xres;
+	if (var->yres > base_yres)
+		var->yres = base_yres;
+
 	/* Planar YCbCr444, YCbCr422, YCbCr420, RGB */
 	if ((format != 0x4) && (format != 0x3) && (format != 0x2)
 	    && (format != 0x0)) {
@@ -579,27 +601,33 @@ static int overlay2fb_check_var(struct f
 		break;
 	case 0x2:		/* 444 */
 		/* xres should be a multiple of 4 pixels! */
-		xres = (var->xres + 0x3) & ~(0x3);
+		xres = var->xres & ~(0x3);
+		printk("xres should be a multiple of 4 pixels! "
+		       "setting it to %d\n", xres);
 		break;
 
 	case 0x3:		/* 422 */
 		/* xres should be a multiple of 8 pixels! */
-		xres = (var->xres + 0x7) & ~(0x7);
+		xres = var->xres & ~(0x7);
+		printk("xres should be a multiple of 8 pixels! "
+		       "setting it to %d\n", xres);
 		break;
 	case 0x4:		/* 420 */
 		/* xres should be a multiple of 16 pixels! */
-		xres = (var->xres + 0xf) & ~(0xf);
+		xres = var->xres & ~(0xf);
+		printk("xres should be a multiple of 16 pixels! "
+		       "setting it to %d\n", xres);
 		break;
 	}
 	yres = var->yres;
 
-	if ((xpos + xres) > fbi->basefb->max_xres) {
-		xpos = fbi->basefb->max_xres - xres;
+	if ((xpos + xres) > base_xres) {
+		xpos = base_xres - xres;
 		if (xpos < 0)
 			xpos = 0;
 	}
-	if ((ypos + yres) > fbi->basefb->max_yres) {
-		ypos = fbi->basefb->max_yres - yres;
+	if ((ypos + yres) > base_yres) {
+		ypos = base_yres - yres;
 		if (ypos < 0)
 			ypos = 0;
 	}
@@ -762,19 +790,6 @@ static int pxafb_blank(int blank, struct
 	return 0;
 }
 
-static int pxafb_mmap(struct fb_info *info, struct file *file,
-		      struct vm_area_struct *vma)
-{
-	struct pxafb_info *fbi = (struct pxafb_info *)info;
-	unsigned long off = vma->vm_pgoff << PAGE_SHIFT;
-	if (off < info->fix.smem_len) {
-		vma->vm_pgoff += 1;
-		return dma_mmap_writecombine(fbi->dev, vma, fbi->map_cpu,
-					     fbi->map_dma, fbi->map_size);
-	}
-	return -EINVAL;
-}
-
 static struct fb_ops pxafb_ops = {
 	.owner		= THIS_MODULE,
 	.fb_check_var	= pxafb_check_var,
@@ -785,9 +800,6 @@ static struct fb_ops pxafb_ops = {
 	.fb_imageblit	= cfb_imageblit,
 	.fb_blank	= pxafb_blank,
 	.fb_cursor	= soft_cursor,
-#if 0
-	.fb_mmap	= pxafb_mmap,
-#endif
 };
 
 
@@ -1023,21 +1035,14 @@ static int pxafb_activate_var(struct fb_
 
 	DPRINTK("palette_mem_size = 0x%08lx\n", (u_long) palette_mem_size);
 
-	fbi->palette_cpu =
-	    (u16 *) (fbi->map_cpu + PAGE_SIZE - palette_mem_size);
-	fbi->palette_dma = fbi->map_dma + PAGE_SIZE - palette_mem_size;
+	fbi->palette_cpu = (u16 *) (fbi->screen_cpu - palette_mem_size);
+	fbi->palette_dma = fbi->screen_dma - palette_mem_size;
 
 	/*
 	 * Set (any) board control register to handle new color depth
 	 */
 	pxafb_set_truecolor(fbi->fb.fix.visual == FB_VISUAL_TRUECOLOR);
 
-	if (fbi->fb.var.bits_per_pixel == 16)
-		fb_dealloc_cmap(&fbi->fb.cmap);
-	else
-		fb_alloc_cmap(&fbi->fb.cmap, 1 << fbi->fb.var.bits_per_pixel,
-			      0);
-
 	DPRINTK("Configuring PXA LCD\n");
 
 	DPRINTK("var: xres=%d hslen=%d lm=%d rm=%d\n",
@@ -1048,7 +1053,7 @@ static int pxafb_activate_var(struct fb_
 	DPRINTK("var: pixclock=%d pcd=%d\n", var->pixclock, pcd);
 
 #if DEBUG_VAR
-	if (var->xres < 16        || var->xres > 1024)
+	if (var->xres < MIN_XRES || var->xres > MAX_XRES)
 		printk(KERN_ERR "%s: invalid xres %d\n",
 		       fbi->fb.fix.id, var->xres);
 	switch(var->bits_per_pixel) {
@@ -1072,7 +1077,7 @@ static int pxafb_activate_var(struct fb_
 	if (var->right_margin < 1 || var->right_margin > 255)
 		printk(KERN_ERR "%s: invalid right_margin %d\n",
 			fbi->fb.fix.id, var->right_margin);
-	if (var->yres < 1         || var->yres > 1024)
+	if (var->yres < MIN_YRES || var->yres > MAX_YRES)
 		printk(KERN_ERR "%s: invalid yres %d\n",
 			fbi->fb.fix.id, var->yres);
 	if (var->vsync_len < 1    || var->vsync_len > 64)
@@ -1129,9 +1134,12 @@ static int pxafb_activate_var(struct fb_
 	local_irq_save(flags);
 
 	/* setup dma descriptors */
-	fbi->dmadesc_fblow_cpu = (struct pxafb_dma_descriptor *)((unsigned int)fbi->palette_cpu - 3*16);
-	fbi->dmadesc_fbhigh_cpu = (struct pxafb_dma_descriptor *)((unsigned int)fbi->palette_cpu - 2*16);
-	fbi->dmadesc_palette_cpu = (struct pxafb_dma_descriptor *)((unsigned int)fbi->palette_cpu - 1*16);
+	fbi->dmadesc_fblow_cpu = (struct pxafb_dma_descriptor *)
+		((unsigned int)fbi->palette_cpu - 3*16);
+	fbi->dmadesc_fbhigh_cpu = (struct pxafb_dma_descriptor *)
+		((unsigned int)fbi->palette_cpu - 2*16);
+	fbi->dmadesc_palette_cpu = (struct pxafb_dma_descriptor *)
+		((unsigned int)fbi->palette_cpu - 1*16);
 
 	fbi->dmadesc_fblow_dma = fbi->palette_dma - 3*16;
 	fbi->dmadesc_fbhigh_dma = fbi->palette_dma - 2*16;
@@ -1592,8 +1600,8 @@ static int __init pxafb_map_video_memory
 	u_long palette_mem_size;
 
 	/*
-	 * We reserve one page for the palette, plus the size
-	 * of the framebuffer.
+	 * We reserve one page for the palette and DMA descriptors,
+	 * plus the size of the framebuffer.
 	 */
 	fbi->map_size = PAGE_ALIGN(fbi->fb.fix.smem_len + PAGE_SIZE);
 	fbi->map_cpu = dma_alloc_coherent(fbi->dev, fbi->map_size,
@@ -1604,7 +1612,8 @@ static int __init pxafb_map_video_memory
 	if (fbi->map_cpu) {
 		/* prevent initial garbage on screen */
 		memset(fbi->map_cpu, 0, fbi->map_size);
-		fbi->fb.screen_base = fbi->map_cpu + PAGE_SIZE;
+		fbi->screen_cpu = fbi->fb.screen_base =
+			fbi->map_cpu + PAGE_SIZE;
 		fbi->screen_dma = fbi->map_dma + PAGE_SIZE;
 		/*
 		 * FIXME: this is actually the wrong thing to place in
@@ -1619,8 +1628,8 @@ static int __init pxafb_map_video_memory
 		palette_mem_size = fbi->palette_size * sizeof(u16);
 		DPRINTK("palette_mem_size = 0x%08lx\n", (u_long) palette_mem_size);
 
-		fbi->palette_cpu = (u16 *)(fbi->map_cpu + PAGE_SIZE - palette_mem_size);
-		fbi->palette_dma = fbi->map_dma + PAGE_SIZE - palette_mem_size;
+		fbi->palette_cpu = (u16 *)(fbi->screen_cpu - palette_mem_size);
+		fbi->palette_dma = fbi->screen_dma - palette_mem_size;
 	}
 	return fbi->map_cpu ? 0 : -ENOMEM;
 }
@@ -1634,23 +1643,23 @@ static int overlay1fb_map_video_memory(s
 {
 
 	if (fbi->map_cpu) {
-		dma_free_coherent(fbi->dev, fbi->map_size, (void *)fbi->map_cpu,
+		dma_free_coherent(fbi->dev, fbi->map_size, fbi->map_cpu,
 				  fbi->map_dma);
-		fbi->map_cpu = 0;
+		fbi->map_cpu = NULL;
 	}
 	fbi->map_size = PAGE_ALIGN(fbi->fb.fix.smem_len + PAGE_SIZE);
-	fbi->map_cpu = (int)dma_alloc_coherent(fbi->dev, fbi->map_size,
-					       (dma_addr_t *) & fbi->map_dma,
-					       GFP_KERNEL);
+	fbi->map_cpu = dma_alloc_coherent(fbi->dev, fbi->map_size,
+					  (dma_addr_t *) & fbi->map_dma,
+					  GFP_KERNEL);
 
 	if (!fbi->map_cpu)
 		return -ENOMEM;
 
-	memset((void *)fbi->map_cpu, 0, fbi->map_size);
+	memset(fbi->map_cpu, 0, fbi->map_size);
 
 	fbi->screen_cpu = fbi->map_cpu + PAGE_SIZE;
 	fbi->screen_dma = fbi->map_dma + PAGE_SIZE;
-	fbi->fb.screen_base = (char *)(fbi->map_cpu + PAGE_SIZE);
+	fbi->fb.screen_base = fbi->map_cpu + PAGE_SIZE;
 	fbi->fb.fix.smem_start = fbi->screen_dma;
 
 	/* setup dma descriptor */
@@ -1672,9 +1681,9 @@ static int overlay2fb_map_YUV_memory(str
 	yoff = cboff = croff = 0;
 
 	if (fbi->map_cpu) {
-		dma_free_coherent(fbi->dev, fbi->map_size, (void *)fbi->map_cpu,
+		dma_free_coherent(fbi->dev, fbi->map_size, fbi->map_cpu,
 				  fbi->map_dma);
-		fbi->map_cpu = 0;
+		fbi->map_cpu = NULL;
 	}
 
 	yres = fbi->fb.var.yres;
@@ -1722,10 +1731,10 @@ static int overlay2fb_map_YUV_memory(str
 	/* alloc memory */
 
 	fbi->map_size = PAGE_ALIGN(fbi->fb.fix.smem_len + PAGE_SIZE);
-	fbi->map_cpu = (int)dma_alloc_coherent(fbi->dev,
-					       fbi->map_size,
-					       (dma_addr_t *) & fbi->map_dma,
-					       GFP_KERNEL);
+	fbi->map_cpu = dma_alloc_coherent(fbi->dev,
+					  fbi->map_size,
+					  (dma_addr_t *) & fbi->map_dma,
+					  GFP_KERNEL);
 
 
 	if (!fbi->map_cpu)
@@ -1786,9 +1795,9 @@ static int overlay2fb_map_RGB_memory(str
 	int pixels_per_line = 0, nbytes = 0;
 
 	if (fbi->map_cpu) {
-		dma_free_coherent(fbi->dev, fbi->map_size, (void *)fbi->map_cpu,
+		dma_free_coherent(fbi->dev, fbi->map_size, fbi->map_cpu,
 				  fbi->map_dma);
-		fbi->map_cpu = 0;
+		fbi->map_cpu = NULL;
 	}
 
 	switch (var->bits_per_pixel) {
@@ -1862,7 +1871,7 @@ static int overlay2fb_map_RGB_memory(str
 
 	if (!fbi->map_cpu)
 		return -ENOMEM;
-	memset((void *)fbi->map_cpu, 0, fbi->map_size);
+	memset(fbi->map_cpu, 0, fbi->map_size);
 
 	fbi->screen_cpu = fbi->map_cpu + PAGE_SIZE;
 	fbi->screen_dma = fbi->map_dma + PAGE_SIZE;
@@ -2220,7 +2229,7 @@ cursorfb_activate_var(struct fb_var_scre
 		if (!fbi->map_cpu) {
 			return -ENOMEM;
 		}
-		memset((void *)fbi->map_cpu, 0, fbi->map_size);
+		memset(fbi->map_cpu, 0, fbi->map_size);
 	}
 
 	cursor = cursor_modes + mode;
@@ -2338,20 +2347,17 @@ static struct pxafb_info *__init pxafb_i
 	addr = addr + sizeof(struct pxafb_info);
 	fbi->fb.pseudo_palette	= addr;
 
-	fbi->max_xres			= inf->xres;
-	fbi->max_yres			= inf->yres;
-	fbi->max_bpp			= inf->bpp;
-
 	pxafb_init_unchangeable_vars(&fbi->fb.var, my_device);
 
+	fb_alloc_cmap(&fbi->fb.cmap, 256, 0);
+
 	fbi->cmap_inverse		= inf->cmap_inverse;
 	fbi->cmap_static		= inf->cmap_static;
 	fbi->lccr0			= inf->lccr0;
 	fbi->lccr3			= inf->lccr3;
 	fbi->state			= C_STARTUP;
 	fbi->task_state			= (u_char)-1;
-	fbi->fb.fix.smem_len		= fbi->max_xres * fbi->max_yres *
-					  fbi->max_bpp / 8;
+	fbi->fb.fix.smem_len = PAGE_ALIGN(MAX_XRES * MAX_YRES * inf->bpp / 8);
 
 	init_waitqueue_head(&fbi->ctrlr_wait);
 	INIT_WORK(&fbi->task, pxafb_task, fbi);
@@ -2611,7 +2617,7 @@ static void overlay2fb_blank(int blank, 
 		}
 		break;
 	case 1:
-		res=overlay2fb_disable(fbi);
+		res=overlay2fb_disable((struct fb_info *)fbi);
 		if(res != 0){
 		  fbi->state = C_DISABLE;
 		  set_ctrlr_state(fbi->basefb, C_REENABLE);
@@ -2627,12 +2633,13 @@ static int overlay2fb_YUV420_workaround(
 {
 	struct overlayfb_info *fbi = (struct overlayfb_info *)info;
 	struct pxafb_dma_descriptor *dma;
-	u32 map_dma, map_cpu;
+	u32 map_dma;
+	void *map_cpu;
 	int done, ret = 0;
 
-	map_cpu = (unsigned long)dma_alloc_coherent(fbi->dev, PAGE_SIZE,
-						    (dma_addr_t *) & map_dma,
-						    GFP_KERNEL);
+	map_cpu = dma_alloc_coherent(fbi->dev, PAGE_SIZE,
+				     (dma_addr_t *) & map_dma,
+				     GFP_KERNEL);
 
 
 	if (!map_cpu)
@@ -2691,13 +2698,12 @@ static int overlay2fb_YUV420_workaround(
 	ret = -1;
       out:
 	/* free buffer allocated */
-	if (map_cpu != 0) {
-		dma_free_coherent(fbi->dev, fbi->map_size, (void *)map_cpu,
-				  map_dma);
-		map_cpu = 0;
+	if (map_cpu != NULL) {
+		dma_free_coherent(fbi->dev, fbi->map_size, map_cpu, map_dma);
+		map_cpu = NULL;
 	}
 
-	fbi->state == C_DISABLE;
+	fbi->state = C_DISABLE;
 
 	return ret;
 }
@@ -3152,8 +3158,10 @@ int __init pxafb_probe(struct device *de
 
 failed:
 	dev_set_drvdata(dev, NULL);
-	if (pxafbi)
+	if (pxafbi) {
+		fb_dealloc_cmap(&pxafbi->fb.cmap);
 		kfree(pxafbi);
+	}
 #ifdef CONFIG_PXA27x
 	if (overlay1fb)
 		kfree(overlay1fb);
Index: linux-2.6.10/drivers/video/pxafb.h
===================================================================
--- linux-2.6.10.orig/drivers/video/pxafb.h
+++ linux-2.6.10/drivers/video/pxafb.h
@@ -52,10 +52,6 @@ struct pxafb_info {
 	struct fb_info		fb;
 	struct device		*dev;
 
-	u_int			max_bpp;
-	u_int			max_xres;
-	u_int			max_yres;
-
 	/*
 	 * These are the addresses we mapped
 	 * the framebuffer memory region to.
@@ -119,9 +115,9 @@ struct overlayfb_info {
 
 	struct pxafb_info *basefb;
 
-	unsigned long map_cpu;
-	unsigned long screen_cpu;
-	unsigned long palette_cpu;
+	void *map_cpu;
+	void *screen_cpu;
+	void *palette_cpu;
 	unsigned long map_size;
 	unsigned long palette_size;
 
@@ -181,9 +177,12 @@ struct overlayfb_info {
 #endif
 
 /*
- * Minimum X and Y resolutions
+ * Minimum and maximum X and Y resolutions
  */
 #define MIN_XRES	64
 #define MIN_YRES	64
+#define MAX_XRES       800
+#define MAX_YRES       600
+#define MAX_BPP         32
 
 #endif /* __PXAFB_H__ */
Index: linux-2.6.10/include/asm-arm/arch-pxa/pxa-regs.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/pxa-regs.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/pxa-regs.h
@@ -2009,20 +2009,6 @@
 
 #define LDCMD_PAL	(1 << 26)	/* instructs DMA to load palette buffer */
 
-#define LCSR_LDD	(1 << 0)	/* LCD Disable Done */
-#define LCSR_SOF	(1 << 1)	/* Start of frame */
-#define LCSR_BER	(1 << 2)	/* Bus error */
-#define LCSR_ABC	(1 << 3)	/* AC Bias count */
-#define LCSR_IUL	(1 << 4)	/* input FIFO underrun Lower panel */
-#define LCSR_IUU	(1 << 5)	/* input FIFO underrun Upper panel */
-#define LCSR_OU		(1 << 6)	/* output FIFO underrun */
-#define LCSR_QD		(1 << 7)	/* quick disable */
-#define LCSR_EOF	(1 << 8)	/* end of frame */
-#define LCSR_BS		(1 << 9)	/* branch status */
-#define LCSR_SINT	(1 << 10)	/* subsequent interrupt */
-
-#define LDCMD_PAL	(1 << 26)	/* instructs DMA to load palette buffer */
-
 #ifdef CONFIG_PXA27x
 #define LDCMD_SOFINT	(1 << 22)
 #define LDCMD_EOFINT	(1 << 21)
@@ -2056,20 +2042,6 @@
 #define LCSR1_IU5       (1 << 28)
 #define LCSR1_IU6       (1 << 29)
 
-#define LCSR_LDD	(1 << 0)	/* LCD Disable Done */
-#define LCSR_SOF	(1 << 1)	/* Start of frame */
-#define LCSR_BER	(1 << 2)	/* Bus error */
-#define LCSR_ABC	(1 << 3)	/* AC Bias count */
-#define LCSR_IUL	(1 << 4)	/* input FIFO underrun Lower panel */
-#define LCSR_IUU	(1 << 5)	/* input FIFO underrun Upper panel */
-#define LCSR_OU		(1 << 6)	/* output FIFO underrun */
-#define LCSR_QD		(1 << 7)	/* quick disable */
-#define LCSR_EOF	(1 << 8)	/* end of frame */
-#define LCSR_BS		(1 << 9)	/* branch status */
-#define LCSR_SINT	(1 << 10)	/* subsequent interrupt */
-
-#define LDCMD_PAL	(1 << 26)	/* instructs DMA to load palette buffer */
-
 /*
  * Memory controller
  */
Index: linux-2.6.10/mvl_patches/pro-1402.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1402.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1402);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

