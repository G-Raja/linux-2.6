#! /usr/bin/env bash
# Patch: -pro_arm_davinci_dm355_core
# Date: Mon Jan 21 23:04:25 2008
# Source: MontaVista Software, Inc.
# MR: 25656
# Type: Enhancement
# Disposition: local
# Signed-off-by: Steve Chen <schen@mvista.com>
# Description:
# Add DaVinci DM355 architecture support.  Please note that
# pro_arm_davinci_add_dm6467_and_dm355_support.patch builts on
# top of this patch and add dm6467 support.  In addition, the
# pro_arm_davinci_add_dm6467_and_dm355_support.patch also contains
# updates to common file shared by both DM355 and DM6467.
# 
# ARCH_DAVINCI644x is replaced with ARCH_DAVINCI_DM644x in
# pro_arm_davinci_add_dm6467_and_dm355_support.patch.
# 
# This patch does not touch generic code.  Only files specific to Davinci.
# Patch obsolete by this patch is
# 
# pro_arm_davinci-family-irqs.patch
# 
# 

PATCHNUM=1659
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 25656
Type: Enhancement
Disposition: local
Signed-off-by: Steve Chen <schen@mvista.com>
Description:
Add DaVinci DM355 architecture support.  Please note that
pro_arm_davinci_add_dm6467_and_dm355_support.patch builts on
top of this patch and add dm6467 support.  In addition, the
pro_arm_davinci_add_dm6467_and_dm355_support.patch also contains
updates to common file shared by both DM355 and DM6467.

ARCH_DAVINCI644x is replaced with ARCH_DAVINCI_DM644x in
pro_arm_davinci_add_dm6467_and_dm355_support.patch.

This patch does not touch generic code.  Only files specific to Davinci.
Patch obsolete by this patch is

pro_arm_davinci-family-irqs.patch


Index: linux-2.6.10/arch/arm/mach-davinci/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/Kconfig
+++ linux-2.6.10/arch/arm/mach-davinci/Kconfig
@@ -8,6 +8,10 @@ config ARCH_DAVINCI644x
 	default y
 	bool "DaVinci 644x based system"
 
+config ARCH_DAVINCI_DM355
+	default n
+	bool "DaVinci DM355 based system"
+
 comment "DaVinci Board Type"
 
 config MACH_DAVINCI_EVM
@@ -18,6 +22,14 @@ config MACH_DAVINCI_EVM
 	  Configure this option to specify the whether the board used
 	  for development is a DaVinci EVM
 
+config MACH_DAVINCI_DM355_EVM
+	bool "TI DM355 EVM"
+	default n
+	depends on ARCH_DAVINCI_DM355
+	help
+	  Configure this option to specify the whether the board used
+	  for development is a DM355 EVM
+
 config DAVINCI_I2C_EXPANDER
 	bool "TI DaVinci I2C Expander"
 	default y
Index: linux-2.6.10/arch/arm/mach-davinci/Makefile
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/Makefile
+++ linux-2.6.10/arch/arm/mach-davinci/Makefile
@@ -5,12 +5,15 @@
 
 
 # Common objects
-obj-y 				:= time.o irq.o dma.o serial.o clock.o io.o id.o
+ obj-y                         := time.o irq.o dma.o serial.o clock.o gio.o io.o id.o
+
 
 # Board specific
-obj-$(CONFIG_MACH_DAVINCI_EVM)  += board-evm.o i2c-emac.o
-obj-$(CONFIG_DAVINCI_MCBSP)	+= mcbsp.o
-obj-$(CONFIG_I2C_DAVINCI)       += i2c-client.o
+ obj-$(CONFIG_MACH_DAVINCI_EVM)                += board-evm.o i2c-emac.o
+ obj-$(CONFIG_MACH_DAVINCI_DM355_EVM)  += board-dm355-evm.o
+ obj-$(CONFIG_DAVINCI_MCBSP)          += mcbsp.o
+ obj-$(CONFIG_DAVINCI_I2C_EXPANDER)    += i2c-client.o
+
 
 ifeq ($(CONFIG_LEDS),y)
 obj-$(CONFIG_MACH_DAVINCI_EVM)	+= leds-evm.o
Index: linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-davinci/board-dm355-evm.c
@@ -0,0 +1,280 @@
+/*
+ * TI DaVinci DM355 EVM board
+ *
+ * Derived from: arch/arm/mach-davinci/board-evm.c
+ * Copyright (C) 2006 Texas Instruments.
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+
+/**************************************************************************
+ * Included Files
+ **************************************************************************/
+
+#include <linux/config.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/major.h>
+#include <linux/root_dev.h>
+#include <linux/dma-mapping.h>
+#if defined(CONFIG_USB_MUSB_HDRC) || defined(CONFIG_USB_MUSB_HDRC_MODULE)
+#include <linux/usb_musb.h>
+#endif
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+#include <linux/serial_8250.h>
+
+#include <asm/setup.h>
+#include <asm/io.h>
+#include <asm/mach-types.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+#include <asm/mach/flash.h>
+#include <asm/arch/irqs.h>
+#include <asm/arch/hardware.h>
+#include "clock.h"
+
+/**************************************************************************
+ * Definitions
+ **************************************************************************/
+
+static struct plat_serial8250_port serial_platform_data[] = {
+	{
+		.membase = (char *) IO_ADDRESS(DAVINCI_UART0_BASE),
+		.mapbase = (unsigned long) DAVINCI_UART0_BASE,
+		.irq = IRQ_UARTINT0,
+		.flags = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype = UPIO_MEM,
+		.regshift = 2,
+		.uartclk = 24000000,
+	},
+	{
+		.membase = (char *) IO_ADDRESS(DAVINCI_UART1_BASE),
+		.mapbase = (unsigned long) DAVINCI_UART1_BASE,
+		.irq = IRQ_UARTINT1,
+		.flags = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype = UPIO_MEM,
+		.regshift = 2,
+		.uartclk = 24000000,
+	},
+	{
+		.membase = (char *) IO_ADDRESS(DM355_UART2_BASE),
+		.mapbase = (unsigned long) DM355_UART2_BASE,
+		.irq = IRQ_DM355_UARTINT2,
+		.flags = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype = UPIO_MEM,
+		.regshift = 2,
+		.uartclk = 24000000,
+	},
+	{
+		.flags = 0
+	},
+};
+
+static struct platform_device serial_device = {
+	.name = "serial8250",
+	.id = 0,
+	.dev = {
+			.platform_data = serial_platform_data,
+		},
+};
+
+/**************************************************************************
+ * Public Functions
+ **************************************************************************/
+int cpu_type(void)
+{
+	return MACH_TYPE_DAVINCI_DM355_EVM;
+}
+EXPORT_SYMBOL(cpu_type);
+
+extern void davinci_serial_init(struct platform_device *pdev);
+
+/*
+ * USB
+ */
+#if defined(CONFIG_USB_MUSB_HDRC) || defined(CONFIG_USB_MUSB_HDRC_MODULE)
+
+static struct musb_hdrc_platform_data usb_data = {
+#if	 defined(CONFIG_USB_MUSB_OTG)
+	 /* OTG requires a Mini-AB connector */
+	 .mode		 = MUSB_OTG,
+#elif	 defined(CONFIG_USB_MUSB_PERIPHERAL)
+	 .mode		 = MUSB_PERIPHERAL,
+#elif	 defined(CONFIG_USB_MUSB_HOST)
+	 .mode		 = MUSB_HOST,
+#endif
+	 /* irlml6401 switches 5V */
+	 .power		 = 255,		 /* sustains 3.0+ Amps (!) */
+	 .potpgt	 = 4,		 /* ~8 msec */
+
+	 /* REVISIT multipoint is a _chip_ capability; not board specific */
+	 .multipoint	 = 1,
+};
+
+static struct resource usb_resources [] = {
+	{
+		/* physical address */
+		.start		= DAVINCI_USB_OTG_BASE,
+		.end		= DAVINCI_USB_OTG_BASE + 0x5ff,
+		.flags		= IORESOURCE_MEM,
+	},
+	{
+		.start		= IRQ_USBINT,
+		.flags		= IORESOURCE_IRQ,
+	},
+};
+
+static u64 usb_dmamask = DMA_32BIT_MASK;
+
+static struct platform_device usb_dev = {
+	 .name		 = "musb_hdrc",
+	 .id		 = -1,
+	 .dev = {
+		 .platform_data  = &usb_data,
+		 .dma_mask		 = &usb_dmamask,
+		 .coherent_dma_mask	 = DMA_32BIT_MASK,
+	 },
+	 .resource	 = usb_resources,
+	 .num_resources  = ARRAY_SIZE(usb_resources),
+};
+
+static inline void setup_usb(void)
+{
+	 /* REVISIT:  everything except platform_data setup should be
+	  * shared between all DaVinci boards using the same core.
+	  */
+	 int status;
+
+	 status = platform_device_register(&usb_dev);
+	 if (status != 0)
+		 pr_debug("setup_usb --> %d\n", status);
+	 else
+		 board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_USB, 1);
+}
+
+#else
+static inline void setup_usb(void)
+{
+	 /* NOP */
+}
+#endif  /* CONFIG_USB_MUSB_HDRC */
+
+#if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
+
+
+static struct mtd_partition nand_partitions[] = {
+	/* bootloader (UBL, U-Boot, BBT) in sectors: 0 - 14 */
+	{
+		.name		= "bootloader",
+		.offset   = 0,
+		.size             = 15*SZ_128K,
+		.mask_flags	= MTD_WRITEABLE, /* force read-only */
+	},
+	/* bootloader params in the next sector 15 */
+	{
+		.name		= "params",
+		.offset   = MTDPART_OFS_APPEND,
+		.size             = SZ_128K,
+		.mask_flags	= MTD_WRITEABLE, /* force read-only */
+	},
+	/* kernel in sectors: 16 - 47 */
+	{
+		.name		= "kernel",
+		.offset	= MTDPART_OFS_APPEND,
+		.size		= SZ_4M,
+		.mask_flags	= 0
+	},
+	/* file system in sectors: 48 - last */
+	{
+		.name		= "filesystem",
+		.offset	= MTDPART_OFS_APPEND,
+		.size		= MTDPART_SIZ_FULL,
+		.mask_flags	= 0
+	}
+};
+
+static struct nand_platform_data nand_data = {
+	.parts		= nand_partitions,
+	.nr_parts	= ARRAY_SIZE(nand_partitions),
+};
+
+static struct resource nand_resource = {
+	.start		= DAVINCI_ASYNC_EMIF_DATA_CE0_BASE,
+	.end		= DAVINCI_ASYNC_EMIF_DATA_CE0_BASE + SZ_16K,
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device nand_device = {
+	.name		= "nand_davinci",
+	.id		= 0,
+	.dev		= {
+		.platform_data	= &nand_data
+	},
+
+	.num_resources	= 1,
+	.resource	= &nand_resource,
+};
+#endif
+
+static struct platform_device *dm355_evm_devices[] __initdata =
+{
+	&serial_device,
+#if defined (CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
+	&nand_device,
+#endif
+};
+
+static void board_init(void)
+{
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_VPSSMSTR, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_VPSSSLV, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_TPCC, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_TPTC0, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_TPTC1, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_GPIO, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_MMC_SD, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_McBSP1, 1);
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_SPI, 1);
+
+	/* Turn on WatchDog timer LPSC.  Needed for RESET to work */
+	board_setup_psc(DAVINCI_GPSC_ARMDOMAIN, DAVINCI_LPSC_TIMER2, 1);
+	davinci_serial_init(&serial_device);
+}
+
+static void __init
+davinci_map_io(void)
+{
+	davinci_map_common_io();
+
+	/* Board-specific initialization */
+	board_init ();
+}
+
+
+static __init void davinci_init(void)
+{
+	platform_add_devices(dm355_evm_devices,
+		ARRAY_SIZE(dm355_evm_devices));
+
+	 setup_usb();
+}
+
+extern void davinci_irq_init(void);
+extern struct sys_timer davinci_timer;
+
+MACHINE_START(DAVINCI_EVM, "DaVinci DM355 EVM")
+	MAINTAINER("MontaVista Software")
+	BOOT_MEM(DAVINCI_DDR_BASE, IO_PHYS, IO_VIRT)
+	BOOT_PARAMS(0x80000100)
+	MAPIO(davinci_map_io)
+	INITIRQ(davinci_irq_init)
+	.timer = &davinci_timer,
+	INIT_MACHINE(davinci_init)
+	MACHINE_END
Index: linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-davinci/mcbsp.c
+++ linux-2.6.10/arch/arm/mach-davinci/mcbsp.c
@@ -511,7 +511,7 @@ static int __init davinci_mcbsp_init(voi
 	static const struct davinci_mcbsp_info *mcbsp_info;
 	struct clk *clkp;
 
-	clkp = clk_get (NULL, "McBSPCLK");
+	clkp = clk_get (NULL, "McBSPCLK0");
 	if (IS_ERR(clkp)) {
 		return -1;
 	}
Index: linux-2.6.10/include/asm-arm/arch-davinci/io.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-davinci/io.h
+++ linux-2.6.10/include/asm-arm/arch-davinci/io.h
@@ -91,7 +91,6 @@ typedef struct { volatile u32 offset[409
 #define __REG(paddr)		__REGV32(io_p2v(paddr))
 
 extern void davinci_map_common_io(void);
-extern void davinci_init_common_hw(void);
 #else
 
 #define __REG(x)        (*((volatile unsigned long *)io_p2v(x)))
Index: linux-2.6.10/include/asm-arm/arch-davinci/irqs.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-davinci/irqs.h
+++ linux-2.6.10/include/asm-arm/arch-davinci/irqs.h
@@ -36,78 +36,171 @@
  * Definitions
  **************************************************************************/
 
-#define IRQ_VDINT0       0
-#define IRQ_VDINT1       1
-#define IRQ_VDINT2       2
-#define IRQ_HISTINT      3
-#define IRQ_H3AINT       4
-#define IRQ_PRVUINT      5
-#define IRQ_RSZINT       6
-#define IRQ_VFOCINT      7
-#define IRQ_VENCINT      8
-#define IRQ_ASQINT       9
-#define IRQ_IMXINT       10
-#define IRQ_VLCDINT      11
-#define IRQ_USBINT       12
-#define IRQ_EMACINT      13
-#define IRQ_IEEE1394INT  14
-#define IRQ_IEEE1394WK   15
-#define IRQ_CCINT0       16
-#define IRQ_CCERRINT     17
-#define IRQ_TCERRINT0    18
-#define IRQ_TCERRINT     19
-#define IRQ_PSCIN        20
-#define IRQ_RESERVED     21
-#define IRQ_IDE          22
-#define IRQ_HPIINT       23
-#define IRQ_MBXINT       24
-#define IRQ_MBRINT       25
-#define IRQ_MMCINT       26
-#define IRQ_SDIOINT      27
-#define IRQ_MSINT        28
-#define IRQ_DDRINT       29
-#define IRQ_AEMIFINT     30
-#define IRQ_VLQINT       31
-#define IRQ_TINT0_TINT12 32
-#define IRQ_TINT0_TINT34 33
-#define IRQ_TINT1_TINT12 34
-#define IRQ_TINT1_TINT34 35
-#define IRQ_PWMINT0      36
-#define IRQ_PWMINT1      37
-#define IRQ_PWMINT2      38
-#define IRQ_I2C          39
-#define IRQ_UARTINT0     40
-#define IRQ_UARTINT1     41
-#define IRQ_UARTINT2     42
-#define IRQ_SPINT0       43
-#define IRQ_SPINT1       44
-#define IRQ_RESERVED_2   45
-#define IRQ_DSP2ARM0     46
-#define IRQ_DSP2ARM1     47
-#define IRQ_GPIO0        48
-#define IRQ_GPIO1        49
-#define IRQ_GPIO2        50
-#define IRQ_GPIO3        51
-#define IRQ_GPIO4        52
-#define IRQ_GPIO5        53
-#define IRQ_GPIO6        54
-#define IRQ_GPIO7        55
-#define IRQ_GPIOBNK0     56
-#define IRQ_GPIOBNK1     57
-#define IRQ_GPIOBNK2     58
-#define IRQ_GPIOBNK3     59
-#define IRQ_GPIOBNK4     60
-#define IRQ_COMMTX       61
-#define IRQ_COMMRX       62
-#define IRQ_EMUINT       63
-
-#define DAVINCI_MAXIRQNUM  63
-#define NR_IRQS		   (DAVINCI_MAXIRQNUM + 1)
-#define DAVINCI_MAXSWINUM  DAVINCI_MAXIRQNUM
+/* These interrupt definitions are common to all DaVinci variants */
+#define IRQ_ASQINT		9
+#define IRQ_IMXINT		10
+#define IRQ_USBINT		12
+#define IRQ_CCINT0		16
+#define IRQ_CCERRINT		17
+#define IRQ_TCERRINT0		18
+#define IRQ_TCERRINT		19
+#define IRQ_TCERRINT1		19
+#define IRQ_PSCINT		20
+#define IRQ_MBXINT		24
+#define IRQ_MBRINT		25
+#define IRQ_MMCINT		26
+#define IRQ_DDRINT		29
+#define IRQ_AEMIFINT		30
+#define IRQ_TINT0		32
+#define IRQ_TINT0_TINT12	32
+#define IRQ_TINT1		33
+#define IRQ_TINT0_TINT34	33
+#define IRQ_TINT2		34
+#define IRQ_TINT1_TINT12	34
+#define IRQ_TINT3		35
+#define IRQ_TINT1_TINT34	35
+#define IRQ_PWMINT0		36
+#define IRQ_PWMINT1		37
+#define IRQ_PWMINT2		38
+#define IRQ_I2C			39
+#define IRQ_UARTINT0		40
+#define IRQ_UARTINT1		41
+#define IRQ_COMMTX		61
+#define IRQ_COMMRX		62
+#define IRQ_EMUINT		63
+
+/*
+ * These interrupt definitions are not common among all DaVinci variants,
+ * but are defined here for backwards compatibility with the original
+ * DaVinci DM6446 implementation..
+ */
+#define IRQ_VDINT0		0
+#define IRQ_VDINT1		1
+#define IRQ_VDINT2		2
+#define IRQ_HISTINT		3
+#define IRQ_H3AINT		4
+#define IRQ_PRVUINT		5
+#define IRQ_RSZINT		6
+#define IRQ_VFOCINT		7
+#define IRQ_VENCINT		8
+#define IRQ_VLCDINT		11
+#define IRQ_EMACINT		13
+#define IRQ_IEEE1394INT		14
+#define IRQ_IEEE1394WK		15
+#define IRQ_IDE			22
+#define IRQ_HPIINT		23
+#define IRQ_SDIOINT		27
+#define IRQ_MSINT		28
+#define IRQ_VLQINT		31
+#define IRQ_UARTINT2		42
+#define IRQ_SPINT0		43
+#define IRQ_SPINT1		44
+#define IRQ_DSP2ARM0		46
+#define IRQ_DSP2ARM1		47
+#define IRQ_GPIO0		48
+#define IRQ_GPIO1		49
+#define IRQ_GPIO2		50
+#define IRQ_GPIO3		51
+#define IRQ_GPIO4		52
+#define IRQ_GPIO5		53
+#define IRQ_GPIO6		54
+#define IRQ_GPIO7		55
+#define IRQ_GPIOBNK0		56
+#define IRQ_GPIOBNK1		57
+#define IRQ_GPIOBNK2		58
+#define IRQ_GPIOBNK3		59
+#define IRQ_GPIOBNK4		60
+
+/* DaVinci DM644x-specific Interrupts */
+#define IRQ_DM644X_VDINT0	0
+#define IRQ_DM644X_VDINT1	1
+#define IRQ_DM644X_VDINT2	2
+#define IRQ_DM644X_HISTINT	3
+#define IRQ_DM644X_H3AINT	4
+#define IRQ_DM644X_PRVUINT	5
+#define IRQ_DM644X_RSZINT	6
+#define IRQ_DM644X_VENCINT	8
+#define IRQ_DM644X_VLCDINT	11
+#define IRQ_DM644X_EMACINT	13
+#define IRQ_DM644X_IDE		22
+#define IRQ_DM644X_SDIOINT	27
+#define IRQ_DM644X_VLQINT	31
+#define IRQ_DM644X_UARTINT2	42
+#define IRQ_DM644X_SPINT0	43
+#define IRQ_DM644X_SPINT1	44
+#define IRQ_DM644X_DSP2ARM0	46
+#define IRQ_DM644X_DSP2ARM1	47
+#define IRQ_DM644X_GPIO0	48
+#define IRQ_DM644X_GPIO1	49
+#define IRQ_DM644X_GPIO2	50
+#define IRQ_DM644X_GPIO3	51
+#define IRQ_DM644X_GPIO4	52
+#define IRQ_DM644X_GPIO5	53
+#define IRQ_DM644X_GPIO6	54
+#define IRQ_DM644X_GPIO7	55
+#define IRQ_DM644X_GPIOBNK0	56
+#define IRQ_DM644X_GPIOBNK1	57
+#define IRQ_DM644X_GPIOBNK2	58
+#define IRQ_DM644X_GPIOBNK3	59
+#define IRQ_DM644X_GPIOBNK4	60
+
+/* DaVinci DM355-specific Interrupts */
+#define IRQ_DM355_VPSSINT0	0
+#define IRQ_DM355_VPSSINT1	1
+#define IRQ_DM355_VPSSINT2	2
+#define IRQ_DM355_VPSSINT3	3
+#define IRQ_DM355_VPSSINT4	4
+#define IRQ_DM355_VPSSINT5	5
+#define IRQ_DM355_VPSSINT6	6
+#define IRQ_DM355_VPSSINT7	7
+#define IRQ_DM355_VPSSINT8	8
+#define IRQ_DM355_IMCOPINT	11
+#define IRQ_DM355_RTOINT	13
+#define IRQ_DM355_TINT4		13
+#define IRQ_DM355_TINT2_TINT12	13
+#define IRQ_DM355_UARTINT2	14
+#define IRQ_DM355_TINT5		14
+#define IRQ_DM355_TINT2_TINT34	14
+#define IRQ_DM355_TINT6		15
+#define IRQ_DM355_TINT3_TINT12	15
+#define IRQ_DM355_SPINT1_0	17
+#define IRQ_DM355_SPINT1_1	18
+#define IRQ_DM355_SPINT2_0	19
+#define IRQ_DM355_SPINT2_1	21
+#define IRQ_DM355_TINT7		22
+#define IRQ_DM355_TINT3_TINT34	22
+#define IRQ_DM355_SDIOINT0	23
+#define IRQ_DM355_MMCINT0	26
+#define IRQ_DM355_MSINT		26
+#define IRQ_DM355_MMCINT1	27
+#define IRQ_DM355_PWMINT3	28
+#define IRQ_DM355_SDIOINT1	31
+#define IRQ_DM355_SPINT0_0	42
+#define IRQ_DM355_SPINT0_1	43
+#define IRQ_DM355_GPIO0		44
+#define IRQ_DM355_GPIO1		45
+#define IRQ_DM355_GPIO2		46
+#define IRQ_DM355_GPIO3		47
+#define IRQ_DM355_GPIO4		48
+#define IRQ_DM355_GPIO5		49
+#define IRQ_DM355_GPIO6		50
+#define IRQ_DM355_GPIO7		51
+#define IRQ_DM355_GPIO8		52
+#define IRQ_DM355_GPIO9		53
+#define IRQ_DM355_GPIOBNK0	54
+#define IRQ_DM355_GPIOBNK1	55
+#define IRQ_DM355_GPIOBNK2	56
+#define IRQ_DM355_GPIOBNK3	57
+#define IRQ_DM355_GPIOBNK4	58
+#define IRQ_DM355_GPIOBNK5	59
+#define IRQ_DM355_GPIOBNK6	60
+
+#define DAVINCI_MAXIRQNUM	63
+#define NR_IRQS			(DAVINCI_MAXIRQNUM + 1)
+#define DAVINCI_MAXSWINUM	DAVINCI_MAXIRQNUM
 
-#define DAVINCI_MAXFIQNUM  0
+#define DAVINCI_MAXFIQNUM	0
 
-#define ARCH_TIMER_IRQ IRQ_TINT1_TINT34
+#define ARCH_TIMER_IRQ		IRQ_TINT1_TINT34
 
 #endif /* __ASM_ARCH_IRQS_H */
-
Index: linux-2.6.10/mvl_patches/pro-1659.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1659.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2008 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1659);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

