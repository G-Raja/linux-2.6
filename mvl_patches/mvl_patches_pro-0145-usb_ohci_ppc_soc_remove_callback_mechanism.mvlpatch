#! /usr/bin/env bash
# Patch: -usb_ohci_ppc_soc_remove_callback_mechanism
# Date: Wed Dec 28 14:59:21 2005
# [PATCH] USB: remove include of asm/usb.h in ohci-ppc-soc.c
# 
# ohci-ppc-soc.c provides for a platform-specific callback mechanism for
# when the HC is successfully probed or removed.  It turned out that none
# of the 3 platforms using it need this facility. Also the required
# include/asm-ppc/usb.h has never been accepted.  This patch removes the
# callback feature and the include of <asm/usb.h>.
# 
# Signed-off-by: Dale Farnsworth <dale@farnsworth.org>
# Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
# 
# commit 4fbd55f03e294d18bd7a5c4c98974e157f6f84e7
# tree 6202f82a40fb1de8699989da845604723543ecd6
# parent 8f34c2883b894b9a97f07b23b5b86fd65ecd2f85
# author Dale Farnsworth <dale@farnsworth.org> Wed, 10 Aug 2005 17:25:25 -0700
# committer Greg Kroah-Hartman <gregkh@suse.de> Thu, 08 Sep 2005 16:28:26 -0700
# 
#  drivers/usb/host/ohci-ppc-soc.c |   16 +---------------
#  1 files changed, 1 insertion(+), 15 deletions(-)
# 

PATCHNUM=145
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
[PATCH] USB: remove include of asm/usb.h in ohci-ppc-soc.c

ohci-ppc-soc.c provides for a platform-specific callback mechanism for
when the HC is successfully probed or removed.  It turned out that none
of the 3 platforms using it need this facility. Also the required
include/asm-ppc/usb.h has never been accepted.  This patch removes the
callback feature and the include of <asm/usb.h>.

Signed-off-by: Dale Farnsworth <dale@farnsworth.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 4fbd55f03e294d18bd7a5c4c98974e157f6f84e7
tree 6202f82a40fb1de8699989da845604723543ecd6
parent 8f34c2883b894b9a97f07b23b5b86fd65ecd2f85
author Dale Farnsworth <dale@farnsworth.org> Wed, 10 Aug 2005 17:25:25 -0700
committer Greg Kroah-Hartman <gregkh@suse.de> Thu, 08 Sep 2005 16:28:26 -0700

 drivers/usb/host/ohci-ppc-soc.c |   16 +---------------
 mvl_patches/pro-0145.c          |   16 ++++++++++++++++
 2 files changed, 17 insertions(+), 15 deletions(-)

Index: linux-2.6.10/drivers/usb/host/ohci-ppc-soc.c
===================================================================
--- linux-2.6.10.orig/drivers/usb/host/ohci-ppc-soc.c
+++ linux-2.6.10/drivers/usb/host/ohci-ppc-soc.c
@@ -14,8 +14,6 @@
  * This file is licenced under the GPL.
  */
 
-#include <asm/usb.h>
-
 static void usb_hcd_ppc_soc_remove(struct usb_hcd *, struct platform_device *);
 
 /* configure so an HC device and id are always provided */
@@ -25,9 +23,7 @@ static void usb_hcd_ppc_soc_remove(struc
  * usb_hcd_ppc_soc_probe - initialize On-Chip HCDs
  * Context: !in_interrupt()
  *
- * Allocates basic resources for this USB host controller, and
- * then invokes the start() method for the HCD associated with it
- * through the hotplug entry's driver_data.
+ * Allocates basic resources for this USB host controller.
  *
  * Store this function in the HCD's struct pci_driver as probe().
  */
@@ -40,7 +36,6 @@ static int usb_hcd_ppc_soc_probe(const s
 	struct ohci_hcd	*ohci;
 	struct resource *res;
 	int irq;
-	struct usb_hcd_platform_data *pd = pdev->dev.platform_data;
 
 	pr_debug("initializing PPC-SOC USB Controller\n");
 
@@ -62,8 +57,6 @@ static int usb_hcd_ppc_soc_probe(const s
 		return -EBUSY;
 	}
 
-	if (pd->start && (retval = pd->start(pdev)))
-		goto err0;
 	hcd = driver->hcd_alloc ();
 	if (!hcd){
 		pr_debug(__FILE__ ": hcd_alloc failed\n");
@@ -133,9 +126,6 @@ static int usb_hcd_ppc_soc_probe(const s
 	dev_set_drvdata(&pdev->dev, NULL);
  err1:
 	pr_debug("Removing PPC-SOC USB Controller\n");
-	if (pd && pd->stop)
-		pd->stop(pdev);
- err0:
 	release_mem_region(res->start, res->end - res->start + 1);
 	return retval;
 }
@@ -157,7 +147,6 @@ static int usb_hcd_ppc_soc_probe(const s
 static void usb_hcd_ppc_soc_remove(struct usb_hcd *hcd, struct platform_device *pdev)
 {
 	struct resource *res;
-	struct usb_hcd_platform_data *pd = pdev->dev.platform_data;
 
 	pr_debug(__FILE__ ": remove: %s, state %x\n", hcd->self.bus_name,
 								hcd->state);
@@ -182,9 +171,6 @@ static void usb_hcd_ppc_soc_remove(struc
 
 	pr_debug("stopping PPC-SOC USB Controller\n");
 
-	if (pd && pd->stop)
-		pd->stop(pdev);
-
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	release_mem_region(res->start, res->end - res->start + 1);
 }
Index: linux-2.6.10/mvl_patches/pro-0145.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0145.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2005 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(145);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

