#! /usr/bin/env bash
# Patch: -pro_create_dev_console
# Date: Fri Jul 28 09:08:58 2006
# Source: MontaVista Software, Inc.
# MR: 19327
# Type: Enhancement
# Disposition: local
# Signed-off-by: Corey Minyard <cminyard@mvista.com>
# Description:
#     On systems that are upgraded from the 3.1 product, there may
#     not be a /dev/console device on the root filesystem if the
#     customer relied on devfs automount to create it for them.
#     This patch adds a config option that will automatically
#     create the /dev/console device if it does not already exist.
#     This is a short-term fix that will not be brought forward to
#     the next release.
# 

PATCHNUM=809
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.
MR: 19327
Type: Enhancement
Disposition: local
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Description:
    On systems that are upgraded from the 3.1 product, there may
    not be a /dev/console device on the root filesystem if the
    customer relied on devfs automount to create it for them.
    This patch adds a config option that will automatically
    create the /dev/console device if it does not already exist.
    This is a short-term fix that will not be brought forward to
    the next release.

Index: linux-2.6.10/init/Kconfig
===================================================================
--- linux-2.6.10.orig/init/Kconfig
+++ linux-2.6.10/init/Kconfig
@@ -494,6 +494,16 @@ config CSTM
        help
          Log user-defined events occurrences. 
 
+config CREATE_DEV_CONSOLE
+	bool "Create /dev/console if it doesn't exist"
+	default n
+	help
+	  Create /dev/console automatically if it doesn't already
+	  exist.  Note that this option is only to help some people
+	  move from devfs to udev, and is not for general use and
+	  will probably go away in the next release.  So don't
+	  depend on this staying here.
+
 endmenu		# General setup
 
 config TINY_SHMEM
Index: linux-2.6.10/init/main.c
===================================================================
--- linux-2.6.10.orig/init/main.c
+++ linux-2.6.10/init/main.c
@@ -47,6 +47,8 @@
 #include <linux/irq.h>
 #include <linux/mempolicy.h>
 #include <linux/key.h>
+#include <linux/namei.h>
+#include <linux/mount.h>
 
 #include <asm/io.h>
 #include <asm/bugs.h>
@@ -701,6 +703,50 @@ static inline void fixup_cpu_present_map
 #endif
 }
 
+#ifdef CONFIG_CREATE_DEV_CONSOLE
+static inline int check_mnt(struct vfsmount *mnt)
+{
+	return mnt->mnt_namespace == current->namespace;
+}
+
+static int remount_dev_lookup(char *path, struct nameidata *nd)
+{
+	int retval;
+
+	retval = path_lookup(path, LOOKUP_FOLLOW, nd);
+	if (retval)
+		return retval;
+
+	if (!check_mnt(nd->mnt) || (nd->dentry != nd->mnt->mnt_root)) {
+		path_release(nd);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int remount_dev(unsigned long flags)
+{
+	struct nameidata nd;
+	struct super_block *sb;
+	int retval;
+
+	retval = remount_dev_lookup("/dev", &nd);
+	if (retval)
+		retval = remount_dev_lookup("/", &nd);
+	if (retval)
+		return retval;
+
+	sb = nd.mnt->mnt_sb;
+	down_write(&sb->s_umount);
+	retval = do_remount_sb(sb, flags, NULL, 0);
+	up_write(&sb->s_umount);
+
+	path_release(&nd);
+	return retval;
+}
+#endif
+
 static int init(void * unused)
 {
 	lock_kernel();
@@ -752,6 +798,41 @@ static int init(void * unused)
 	system_state = SYSTEM_RUNNING;
 	numa_default_policy();
 
+#ifdef CONFIG_CREATE_DEV_CONSOLE
+	if (sys_access((const char __user *) "/dev/console", 0) != 0) {
+		int err;
+		int remount_done = 0;
+
+	retry:
+		err = sys_mknod((const char __user *) "/dev/console",
+				S_IFCHR | S_IRUSR | S_IWUSR,
+				new_encode_dev(MKDEV(5, 1)));
+		if (err == -EROFS && !remount_done) {
+			/*
+			 * This is a really cheap hack.  The root filesystem
+			 * is read-only.  Remount it write to create the
+			 * device, then remount it read-only again later.
+			 */
+			err = remount_dev(0);
+			if (err)
+				printk("Warning: Cannot remount filesystem: %d",
+				       err);
+			else {
+				remount_done = 1;
+				goto retry;
+			}
+		} else if (err)
+			printk("Warning: Cannot create /dev/console: %d", err);
+		if (remount_done) {
+			err = remount_dev(MS_RDONLY);
+			if (err)
+				printk("Warning: "
+				       "Cannot remount filesystem readonly: %d",
+				       err);
+		}
+	}
+#endif
+
 	if (sys_open((const char __user *) "/dev/console", O_RDWR, 0) < 0)
 		printk("Warning: unable to open an initial console.\n");
 
Index: linux-2.6.10/mvl_patches/pro-0809.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-0809.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2006 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(809);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

