#! /usr/bin/env bash
# Patch: -xtensa_gdb
# Date: Fri Feb 16 17:21:44 2007
# Source: MontaVista Software, Inc.  
# MR: 18059
# Type: Defect Fix
# Disposition: Will be submitted to community by Xtensa
# Signed-off-by: Ash Desta <adesta.com>
# Description:
#     The patch fixes the probelm of native and cross gdb error inserting
#     a break point and input/output error when the "continue" instruction
#     is issued at the gdb prompt.
# 
#  arch/xtensa/kernel/entry.S      |   12 ------------
#  arch/xtensa/kernel/ptrace.c     |   17 ++++++++++-------
#  arch/xtensa/kernel/signal.c     |    8 ++++----
#  arch/xtensa/kernel/traps.c      |    2 +-
#  include/asm-xtensa/cacheflush.h |   12 ++++++------
#  5 files changed, 21 insertions(+), 30 deletions(-)
# 

PATCHNUM=1102
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: MontaVista Software, Inc.  
MR: 18059
Type: Defect Fix
Disposition: Will be submitted to community by Xtensa
Signed-off-by: Ash Desta <adesta.com>
Description:
    The patch fixes the probelm of native and cross gdb error inserting
    a break point and input/output error when the "continue" instruction
    is issued at the gdb prompt.

 arch/xtensa/kernel/entry.S      |   12 ------------
 arch/xtensa/kernel/ptrace.c     |   17 ++++++++++-------
 arch/xtensa/kernel/signal.c     |    8 ++++----
 arch/xtensa/kernel/traps.c      |    2 +-
 include/asm-xtensa/cacheflush.h |   12 ++++++------
 mvl_patches/pro-1102.c          |   16 ++++++++++++++++
 6 files changed, 37 insertions(+), 30 deletions(-)

Index: linux-2.6.10/include/asm-xtensa/cacheflush.h
===================================================================
--- linux-2.6.10.orig/include/asm-xtensa/cacheflush.h
+++ linux-2.6.10/include/asm-xtensa/cacheflush.h
@@ -113,13 +113,13 @@ extern void flush_cache_page(struct vm_a
 #define flush_dcache_mmap_unlock(mapping)		do { } while (0)
 
 
-#define copy_to_user_page(vma, page, vaddr, dst, src, len)       \
-        do {        \
-                unsigned long paddr = (unsigned long) page_address(page);     \
-                memcpy(dst, src, len);        \
-                __flush_dcache_page(paddr);        \
-                __invalidate_icache_page(paddr);        \
+#define copy_to_user_page(vma, page, vaddr, dst, src, len)		\
+        do {								\
+                memcpy(dst, src, len);					\
+                __flush_invalidate_dcache_range(dst, len);		\
+                __invalidate_icache_range(dst, len);			\
         } while (0) 
+
 #define copy_from_user_page(vma, page, vaddr, dst, src, len) \
 	memcpy(dst, src, len)
 
Index: linux-2.6.10/arch/xtensa/kernel/entry.S
===================================================================
--- linux-2.6.10.orig/arch/xtensa/kernel/entry.S
+++ linux-2.6.10/arch/xtensa/kernel/entry.S
@@ -466,16 +466,6 @@ common_exception_return:
 
 4:	/* a2 holds GET_CURRENT(a2,a1)  */
 
-	l32i	a3, a2, TI_TASK
-	l32i	a3, a3, TASK_PTRACE
-	l32i	a4, a1, PT_ICOUNTLEVEL
-	bbci.l	a3, PT_SINGLESTEP_BIT, 1f # jump if single-step flag is not set
-
-	movi	a3, -2			# PT_SINGLESTEP flag is set,
-	movi	a4, 1			# icountlevel of 1 means it won't
-	wsr	a3, ICOUNT		# start counting until after rfe
-1:	wsr	a4, ICOUNTLEVEL		# so setup icount & icountlevel.
-
 #if XCHAL_EXTRA_SA_SIZE
 
 	/* For user exceptions, restore the extra state from the user's TCB. */
@@ -678,12 +668,10 @@ common_exception_exit:
 	wsr	a3, LEND
 	wsr	a2, LCOUNT
 
-#ifdef CONFIG_KGDB
 	l32i    a2, a1, PT_ICOUNTLEVEL
 	wsr     a2, ICOUNTLEVEL
 	movi    a3, -2         
 	wsr     a3, ICOUNT         
-#endif
 
 	/* Check if it was double exception. */
 
Index: linux-2.6.10/arch/xtensa/kernel/ptrace.c
===================================================================
--- linux-2.6.10.orig/arch/xtensa/kernel/ptrace.c
+++ linux-2.6.10/arch/xtensa/kernel/ptrace.c
@@ -248,7 +248,7 @@ int xtensa_ptrace(long request, long pid
 			clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
 		child->exit_code = data;
 		/* Make sure the single step bit is not set. */
-		child->ptrace &= ~PT_SINGLESTEP;
+		xtensa_pt_regs(child)->icountlevel = 0;
 		wake_up_process(child);
 		ret = 0;
 		break;
@@ -264,7 +264,7 @@ int xtensa_ptrace(long request, long pid
 		if (child->state == EXIT_ZOMBIE)	/* already dead */
 			break;
 		child->exit_code = SIGKILL;
-		child->ptrace &= ~PT_SINGLESTEP;
+		xtensa_pt_regs(child)->icountlevel = 0;
 		wake_up_process(child);
 		break;
 
@@ -274,7 +274,7 @@ int xtensa_ptrace(long request, long pid
                         break;
 
 		clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
-		child->ptrace |= PT_SINGLESTEP;
+		xtensa_pt_regs(child)->icountlevel = 1;
 		child->exit_code = data;
 		wake_up_process(child);
 		ret = 0;
@@ -325,6 +325,7 @@ int xtensa_ptrace(long request, long pid
 
 	case PTRACE_GETFPREGS:
 	{
+#if ENABLED
 		/* 'data' points to user memory in which to write.
 		 * For convenience, we use the handy
 		 * elf_fpregset_t format. */
@@ -333,12 +334,14 @@ int xtensa_ptrace(long request, long pid
 		struct pt_regs *regs = xtensa_pt_regs(child);
 
 		do_save_fpregs (&fpregs, regs, child);
-
+#else
+		unsigned long fpregs = 0xfc000000;
+#endif
 		/* Now, copy to user space nice and easy... */
 		ret = 0;
-		if (copy_to_user((void *)data, &fpregs, sizeof(elf_fpregset_t)))
-			ret = -EFAULT;
-
+		if (copy_to_user((void *)data, &fpregs, sizeof(fpregs)))			
+		ret = -EFAULT;
+		
 		break;
 	}
 
Index: linux-2.6.10/arch/xtensa/kernel/signal.c
===================================================================
--- linux-2.6.10.orig/arch/xtensa/kernel/signal.c
+++ linux-2.6.10/arch/xtensa/kernel/signal.c
@@ -512,18 +512,18 @@ int do_signal(struct pt_regs *regs, sigs
 	if (regs->syscall >= 0) {
 		/* If so, check system call restarting.. */
 		switch (regs->areg[2]) {
-			case ERESTARTNOHAND:
-			case ERESTART_RESTARTBLOCK:
+			case -ERESTARTNOHAND:
+			case -ERESTART_RESTARTBLOCK:
 				regs->areg[2] = -EINTR;
 				break;
 
-			case ERESTARTSYS:
+			case -ERESTARTSYS:
 				if (!(ka.sa.sa_flags & SA_RESTART)) {
 					regs->areg[2] = -EINTR;
 					break;
 				}
 			/* fallthrough */
-			case ERESTARTNOINTR:
+			case -ERESTARTNOINTR:
 				regs->areg[2] = regs->syscall;
 				regs->pc -= 3;
 		}
Index: linux-2.6.10/arch/xtensa/kernel/traps.c
===================================================================
--- linux-2.6.10.orig/arch/xtensa/kernel/traps.c
+++ linux-2.6.10/arch/xtensa/kernel/traps.c
@@ -265,10 +265,10 @@ do_unaligned_user (struct pt_regs *regs)
 void
 do_debug(struct pt_regs *regs)
 {
+#ifdef CONFIG_KGDB
 	if (!kgdb_early_setup)
 		return;
 
-#ifdef CONFIG_KGDB
 	/* If remote debugging is configured AND enabled, we give control to
 	 * kgdb.  Otherwise, we fall through, perhaps giving control to the
 	 * native debugger.
Index: linux-2.6.10/mvl_patches/pro-1102.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1102.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1102);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

