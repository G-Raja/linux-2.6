#! /usr/bin/env bash
# Patch: -common_pxa_monahans_base
# Date: Fri Dec  7 11:49:30 2007
# Source: Marvell, Inc. 
# MR: 20443
# Type: Enhancement
# Disposition: needs submitting to community
# Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
# Signed-off-by: dmitry pervushin <dpervushin@ru.mvista.com>
# Description:
#     Base port for Marvell PXA3xx
# 

PATCHNUM=1408
LSPINFO=include/linux/lsppatchlevel.h
TMPFILE=/tmp/mvl_patch_$$

function dopatch() {
    patch $* >${TMPFILE} 2>&1 <<"EOF"
Source: Marvell, Inc. 
MR: 20443
Type: Enhancement
Disposition: needs submitting to community
Signed-off-by: Sergey Podstavin <spodstavin@ru.mvista.com>
Signed-off-by: dmitry pervushin <dpervushin@ru.mvista.com>
Description:
    Base port for Marvell PXA3xx

Index: linux-2.6.10/arch/arm/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/arm/Kconfig
+++ linux-2.6.10/arch/arm/Kconfig
@@ -665,7 +665,12 @@ config CMDLINE
 
 config LEDS
 	bool "Timer and CPU usage LEDs"
-	depends on ARCH_NETWINDER || ARCH_EBSA110 || ARCH_EBSA285 || ARCH_SHARK || ARCH_CO285 || ARCH_SA1100 || ARCH_LUBBOCK || MACH_MAINSTONE || ARCH_PXA_IDP || ARCH_INTEGRATOR || ARCH_CDB89712 || ARCH_P720T || ARCH_OMAP || ARCH_VERSATILE || ARCH_IMX || MACH_DAVINCI_EVM
+	depends on ARCH_NETWINDER || ARCH_EBSA110 || ARCH_EBSA285 || \
+		ARCH_SHARK || ARCH_CO285 || ARCH_SA1100 || \
+		ARCH_LUBBOCK || MACH_MAINSTONE || MACH_ZYLONITE || \
+		ARCH_PXA_IDP || ARCH_INTEGRATOR || ARCH_CDB89712 || \
+		ARCH_P720T || ARCH_OMAP || ARCH_VERSATILE || \
+		ARCH_IMX || MACH_DAVINCI_EVM
 	help
 	  If you say Y here, the LEDs on your machine will be used
 	  to provide useful information about your current system status.
Index: linux-2.6.10/arch/arm/configs/zylonite_defconfig
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/configs/zylonite_defconfig
@@ -0,0 +1,1001 @@
+#
+# Automatically generated make config: don't edit
+# Linux kernel version: 2.6.10_dev
+# Wed Jan 17 15:18:39 2007
+#
+CONFIG_ARM=y
+CONFIG_MMU=y
+CONFIG_UID16=y
+CONFIG_GENERIC_IOMAP=y
+
+#
+# Code maturity level options
+#
+CONFIG_EXPERIMENTAL=y
+CONFIG_CLEAN_COMPILE=y
+CONFIG_BROKEN_ON_SMP=y
+CONFIG_LOCK_KERNEL=y
+
+#
+# General setup
+#
+CONFIG_LOCALVERSION=""
+CONFIG_SWAP=y
+CONFIG_SYSVIPC=y
+CONFIG_SYSVIPC_SEMMNI=128
+CONFIG_SYSVIPC_SEMMSL=250
+CONFIG_POSIX_MQUEUE=y
+# CONFIG_BSD_PROCESS_ACCT is not set
+CONFIG_SYSCTL=y
+# CONFIG_AUDIT is not set
+CONFIG_LOG_BUF_SHIFT=14
+CONFIG_HOTPLUG=y
+CONFIG_KOBJECT_UEVENT=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+# CONFIG_EMBEDDED is not set
+CONFIG_KALLSYMS=y
+# CONFIG_KALLSYMS_EXTRA_PASS is not set
+CONFIG_FUTEX=y
+CONFIG_EPOLL=y
+CONFIG_CC_OPTIMIZE_FOR_SIZE=y
+CONFIG_SHMEM=y
+CONFIG_CC_ALIGN_FUNCTIONS=0
+CONFIG_CC_ALIGN_LABELS=0
+CONFIG_CC_ALIGN_LOOPS=0
+CONFIG_CC_ALIGN_JUMPS=0
+CONFIG_LTT_MAX_HANDLES=128
+# CONFIG_BOOT_FLIGHT_RECORDER is not set
+CONFIG_LOCKLESS=y
+CONFIG_BOOT_FLIGHT_BUFFERS=4
+CONFIG_BOOT_FLIGHT_SIZE=524288
+CONFIG_FLIGHT_PROC_BUFFERS=8
+CONFIG_FLIGHT_PROC_SIZE=8192
+CONFIG_NEWEV=y
+CONFIG_CSTM=y
+# CONFIG_TINY_SHMEM is not set
+
+#
+# Loadable module support
+#
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODULE_FORCE_UNLOAD=y
+CONFIG_OBSOLETE_MODPARM=y
+CONFIG_MODVERSIONS=y
+# CONFIG_MODULE_SRCVERSION_ALL is not set
+CONFIG_KMOD=y
+
+#
+# System type and features
+#
+# CONFIG_ARCH_CLPS7500 is not set
+# CONFIG_ARCH_CLPS711X is not set
+# CONFIG_ARCH_CO285 is not set
+# CONFIG_ARCH_EBSA110 is not set
+# CONFIG_ARCH_CAMELOT is not set
+# CONFIG_ARCH_FOOTBRIDGE is not set
+# CONFIG_ARCH_INTEGRATOR is not set
+# CONFIG_ARCH_IOP3XX is not set
+# CONFIG_ARCH_IXP4XX is not set
+# CONFIG_ARCH_IXP2000 is not set
+# CONFIG_ARCH_L7200 is not set
+CONFIG_ARCH_PXA=y
+# CONFIG_ARCH_RPC is not set
+# CONFIG_ARCH_SA1100 is not set
+# CONFIG_ARCH_S3C2410 is not set
+# CONFIG_ARCH_SHARK is not set
+# CONFIG_ARCH_LH7A40X is not set
+# CONFIG_ARCH_OMAP is not set
+# CONFIG_ARCH_VERSATILE is not set
+# CONFIG_ARCH_IMX is not set
+# CONFIG_ARCH_H720X is not set
+
+#
+# Intel PXA2xx Implementations
+#
+# CONFIG_ARCH_LUBBOCK is not set
+# CONFIG_MACH_MAINSTONE is not set
+# CONFIG_ARCH_PXA_IDP is not set
+CONFIG_MACH_ZYLONITE=y
+CONFIG_PXA3xx=y
+CONFIG_IWMMXT=y
+
+#
+# Processor Type
+#
+CONFIG_CPU_32=y
+CONFIG_CPU_XSC3=y
+CONFIG_CPU_32v5=y
+CONFIG_CPU_ABRT_EV5T=y
+CONFIG_CPU_CACHE_VIVT=y
+CONFIG_CPU_TLB_V4WBI=y
+CONFIG_IO_36=y
+
+#
+# Processor Features
+#
+CONFIG_ARM_THUMB=y
+# CONFIG_AEABI is not set
+CONFIG_ZBOOT_ROM_TEXT=0x0
+CONFIG_ZBOOT_ROM_BSS=0x0
+# CONFIG_XIP_KERNEL is not set
+# CONFIG_HIGH_RES_TIMERS is not set
+
+#
+# PCCARD (PCMCIA/CardBus) support
+#
+# CONFIG_PCCARD is not set
+
+#
+# PC-card bridges
+#
+
+#
+# At least one math emulation must be selected
+#
+CONFIG_FPE_NWFPE=y
+# CONFIG_FPE_NWFPE_XP is not set
+# CONFIG_FPE_FASTFPE is not set
+CONFIG_BINFMT_ELF=y
+# CONFIG_BINFMT_AOUT is not set
+# CONFIG_BINFMT_MISC is not set
+CONFIG_PM=y
+# CONFIG_PREEMPT_NONE is not set
+# CONFIG_PREEMPT_VOLUNTARY is not set
+CONFIG_PREEMPT_DESKTOP=y
+# CONFIG_PREEMPT_RT is not set
+CONFIG_PREEMPT=y
+# CONFIG_PREEMPT_SOFTIRQS is not set
+# CONFIG_PREEMPT_HARDIRQS is not set
+# CONFIG_PREEMPT_RCU is not set
+# CONFIG_SPINLOCK_BKL is not set
+CONFIG_PREEMPT_BKL=y
+CONFIG_RWSEM_GENERIC_SPINLOCK=y
+CONFIG_ASM_SEMAPHORES=y
+CONFIG_APM=y
+# CONFIG_ARTHUR is not set
+CONFIG_CMDLINE="console=ttyS0,38400 mem=63M ip=on"
+CONFIG_LEDS=y
+CONFIG_ALIGNMENT_TRAP=y
+
+#
+# Device Drivers
+#
+
+#
+# Generic Driver Options
+#
+# CONFIG_STANDALONE is not set
+# CONFIG_PREVENT_FIRMWARE_BUILD is not set
+CONFIG_FW_LOADER=y
+
+#
+# Parallel port support
+#
+# CONFIG_PARPORT is not set
+
+#
+# Memory Technology Devices (MTD)
+#
+CONFIG_MTD=y
+# CONFIG_MTD_DEBUG is not set
+CONFIG_MTD_CONCAT=y
+CONFIG_MTD_PARTITIONS=y
+# CONFIG_MTD_REDBOOT_PARTS is not set
+CONFIG_MTD_CMDLINE_PARTS=y
+# CONFIG_MTD_AFS_PARTS is not set
+
+#
+# User Modules And Translation Layers
+#
+CONFIG_MTD_CHAR=y
+CONFIG_MTD_BLOCK=y
+# CONFIG_FTL is not set
+# CONFIG_NFTL is not set
+# CONFIG_INFTL is not set
+# CONFIG_RFD_FTL is not set
+
+#
+# RAM/ROM/Flash chip drivers
+#
+CONFIG_MTD_CFI=y
+# CONFIG_MTD_JEDECPROBE is not set
+CONFIG_MTD_GEN_PROBE=y
+# CONFIG_MTD_CFI_ADV_OPTIONS is not set
+CONFIG_MTD_MAP_BANK_WIDTH_1=y
+CONFIG_MTD_MAP_BANK_WIDTH_2=y
+CONFIG_MTD_MAP_BANK_WIDTH_4=y
+# CONFIG_MTD_MAP_BANK_WIDTH_8 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_16 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_32 is not set
+CONFIG_MTD_CFI_I1=y
+CONFIG_MTD_CFI_I2=y
+# CONFIG_MTD_CFI_I4 is not set
+# CONFIG_MTD_CFI_I8 is not set
+CONFIG_MTD_CFI_INTELEXT=y
+# CONFIG_MTD_CFI_AMDSTD is not set
+# CONFIG_MTD_CFI_STAA is not set
+CONFIG_MTD_CFI_UTIL=y
+# CONFIG_MTD_RAM is not set
+# CONFIG_MTD_ROM is not set
+# CONFIG_MTD_ABSENT is not set
+# CONFIG_MTD_XIP is not set
+
+#
+# Mapping drivers for chip access
+#
+# CONFIG_MTD_COMPLEX_MAPPINGS is not set
+# CONFIG_MTD_PHYSMAP is not set
+# CONFIG_MTD_MULTI_PHYSMAP is not set
+# CONFIG_MTD_ARM_INTEGRATOR is not set
+# CONFIG_MTD_EDB7312 is not set
+# CONFIG_MTD_SHARP_SL is not set
+# CONFIG_MTD_PLATRAM is not set
+
+#
+# Self-contained MTD device drivers
+#
+# CONFIG_MTD_SLRAM is not set
+# CONFIG_MTD_PHRAM is not set
+# CONFIG_MTD_MTDRAM is not set
+# CONFIG_RAMTD is not set
+# CONFIG_MTD_BLKMTD is not set
+# CONFIG_MTD_BLOCK2MTD is not set
+
+#
+# Disk-On-Chip Device Drivers
+#
+# CONFIG_MTD_DOC2000 is not set
+# CONFIG_MTD_DOC2001 is not set
+# CONFIG_MTD_DOC2001PLUS is not set
+
+#
+# NAND Flash Device Drivers
+#
+CONFIG_MTD_NAND=y
+# CONFIG_MTD_NAND_VERIFY_WRITE is not set
+# CONFIG_MTD_NAND_H1900 is not set
+CONFIG_MTD_NAND_IDS=y
+# CONFIG_MTD_NAND_DISKONCHIP is not set
+# CONFIG_MTD_NAND_SHARPSL is not set
+# CONFIG_MTD_NAND_NANDSIM is not set
+
+#
+# Plug and Play support
+#
+
+#
+# Block devices
+#
+# CONFIG_BLK_DEV_FD is not set
+CONFIG_BLK_DEV_LOOP=y
+# CONFIG_BLK_DEV_CRYPTOLOOP is not set
+# CONFIG_BLK_DEV_NBD is not set
+CONFIG_BLK_DEV_RAM=y
+CONFIG_BLK_DEV_RAM_COUNT=16
+CONFIG_BLK_DEV_RAM_SIZE=4096
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_INITRAMFS_SOURCE=""
+# CONFIG_CDROM_PKTCDVD is not set
+
+#
+# IO Schedulers
+#
+CONFIG_IOSCHED_NOOP=y
+CONFIG_IOSCHED_AS=y
+CONFIG_IOSCHED_DEADLINE=y
+CONFIG_IOSCHED_CFQ=y
+
+#
+# Multi-device support (RAID and LVM)
+#
+# CONFIG_MD is not set
+
+#
+# Networking support
+#
+CONFIG_NET=y
+
+#
+# Networking options
+#
+CONFIG_PACKET=y
+# CONFIG_PACKET_MMAP is not set
+# CONFIG_NETLINK_DEV is not set
+CONFIG_UNIX=y
+# CONFIG_NET_KEY is not set
+CONFIG_USE_POLICY_FWD=y
+CONFIG_INET=y
+# CONFIG_IP_MULTICAST is not set
+# CONFIG_IP_ADVANCED_ROUTER is not set
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IP_PNP_RARP=y
+# CONFIG_NET_IPIP is not set
+# CONFIG_NET_IPGRE is not set
+# CONFIG_ARPD is not set
+# CONFIG_SYN_COOKIES is not set
+# CONFIG_INET_AH is not set
+# CONFIG_INET_ESP is not set
+# CONFIG_INET_IPCOMP is not set
+# CONFIG_INET_TUNNEL is not set
+CONFIG_IP_TCPDIAG=y
+# CONFIG_IP_TCPDIAG_IPV6 is not set
+
+#
+# IP: Virtual Server Configuration
+#
+# CONFIG_IP_VS is not set
+CONFIG_IPV6=m
+# CONFIG_IPV6_PRIVACY is not set
+# CONFIG_IPV6_ROUTER_PREF is not set
+# CONFIG_INET6_AH is not set
+# CONFIG_INET6_ESP is not set
+# CONFIG_INET6_IPCOMP is not set
+# CONFIG_INET6_TUNNEL is not set
+# CONFIG_IPV6_TUNNEL is not set
+# CONFIG_IPV6_ADVANCED_ROUTER is not set
+# CONFIG_IPV6_MIP6 is not set
+CONFIG_NETFILTER=y
+# CONFIG_NETFILTER_DEBUG is not set
+
+#
+# IP: Netfilter Configuration
+#
+# CONFIG_IP_NF_CONNTRACK is not set
+# CONFIG_IP_NF_CONNTRACK_MARK is not set
+# CONFIG_IP_NF_QUEUE is not set
+# CONFIG_IP_NF_IPTABLES is not set
+# CONFIG_IP_NF_ARPTABLES is not set
+# CONFIG_IP_NF_COMPAT_IPCHAINS is not set
+# CONFIG_IP_NF_COMPAT_IPFWADM is not set
+
+#
+# IPv6: Netfilter Configuration
+#
+# CONFIG_IP6_NF_QUEUE is not set
+# CONFIG_IP6_NF_IPTABLES is not set
+# CONFIG_IP6_NF_CONNTRACK is not set
+
+#
+# SCTP Configuration (EXPERIMENTAL)
+#
+# CONFIG_IP_SCTP is not set
+# CONFIG_ATM is not set
+# CONFIG_BRIDGE is not set
+# CONFIG_VLAN_8021Q is not set
+# CONFIG_DECNET is not set
+# CONFIG_LLC2 is not set
+# CONFIG_IPX is not set
+# CONFIG_ATALK is not set
+# CONFIG_X25 is not set
+# CONFIG_LAPB is not set
+# CONFIG_NET_DIVERT is not set
+# CONFIG_ECONET is not set
+# CONFIG_WAN_ROUTER is not set
+
+#
+# QoS and/or fair queueing
+#
+# CONFIG_NET_SCHED is not set
+# CONFIG_NET_CLS_ROUTE is not set
+
+#
+# Network testing
+#
+# CONFIG_NET_PKTGEN is not set
+# CONFIG_NETPOLL is not set
+# CONFIG_NET_POLL_CONTROLLER is not set
+# CONFIG_HAMRADIO is not set
+CONFIG_IRDA=y
+
+#
+# IrDA protocols
+#
+CONFIG_IRLAN=y
+# CONFIG_IRNET is not set
+CONFIG_IRCOMM=y
+CONFIG_IRDA_ULTRA=y
+
+#
+# IrDA options
+#
+CONFIG_IRDA_CACHE_LAST_LSAP=y
+CONFIG_IRDA_FAST_RR=y
+CONFIG_IRDA_DEBUG=y
+
+#
+# Infrared-port device drivers
+#
+
+#
+# SIR device drivers
+#
+CONFIG_IRTTY_SIR=y
+
+#
+# Dongle support
+#
+CONFIG_DONGLE=y
+# CONFIG_ESI_DONGLE is not set
+# CONFIG_ACTISYS_DONGLE is not set
+# CONFIG_TEKRAM_DONGLE is not set
+# CONFIG_LITELINK_DONGLE is not set
+# CONFIG_MA600_DONGLE is not set
+# CONFIG_GIRBIL_DONGLE is not set
+# CONFIG_MCP2120_DONGLE is not set
+# CONFIG_OLD_BELKIN_DONGLE is not set
+# CONFIG_ACT200L_DONGLE is not set
+
+#
+# Old SIR device drivers
+#
+CONFIG_IRPORT_SIR=y
+
+#
+# Old Serial dongle support
+#
+CONFIG_DONGLE_OLD=y
+# CONFIG_ESI_DONGLE_OLD is not set
+# CONFIG_ACTISYS_DONGLE_OLD is not set
+# CONFIG_TEKRAM_DONGLE_OLD is not set
+# CONFIG_GIRBIL_DONGLE_OLD is not set
+# CONFIG_LITELINK_DONGLE_OLD is not set
+# CONFIG_MCP2120_DONGLE_OLD is not set
+# CONFIG_OLD_BELKIN_DONGLE_OLD is not set
+# CONFIG_ACT200L_DONGLE_OLD is not set
+# CONFIG_MA600_DONGLE_OLD is not set
+
+#
+# FIR device drivers
+#
+# CONFIG_OMAP1610_IR is not set
+# CONFIG_PXA_FICP is not set
+# CONFIG_BT is not set
+# CONFIG_IEEE80211 is not set
+CONFIG_NETDEVICES=y
+# CONFIG_DUMMY is not set
+# CONFIG_BONDING is not set
+# CONFIG_EQUALIZER is not set
+CONFIG_TUN=m
+
+#
+# PHY device support
+#
+# CONFIG_PHYLIB is not set
+
+#
+# Ethernet (10 or 100Mbit)
+#
+CONFIG_NET_ETHERNET=y
+CONFIG_MII=y
+CONFIG_SMC91X=y
+
+#
+# Ethernet (1000 Mbit)
+#
+
+#
+# Ethernet (10000 Mbit)
+#
+
+#
+# Token Ring devices
+#
+
+#
+# Wireless LAN (non-hamradio)
+#
+# CONFIG_NET_RADIO is not set
+
+#
+# Wan interfaces
+#
+# CONFIG_WAN is not set
+CONFIG_PPP=m
+# CONFIG_PPP_MULTILINK is not set
+# CONFIG_PPP_FILTER is not set
+CONFIG_PPP_ASYNC=m
+CONFIG_PPP_SYNC_TTY=m
+CONFIG_PPP_DEFLATE=m
+# CONFIG_PPP_BSDCOMP is not set
+# CONFIG_PPPOE is not set
+# CONFIG_SLIP is not set
+# CONFIG_SHAPER is not set
+# CONFIG_NETCONSOLE is not set
+
+#
+# ATA/ATAPI/MFM/RLL support
+#
+CONFIG_IDE=y
+CONFIG_BLK_DEV_IDE=y
+
+#
+# Please see Documentation/ide.txt for help/info on IDE drives
+#
+# CONFIG_BLK_DEV_IDE_SATA is not set
+CONFIG_BLK_DEV_IDEDISK=y
+# CONFIG_IDEDISK_MULTI_MODE is not set
+# CONFIG_BLK_DEV_IDECD is not set
+# CONFIG_BLK_DEV_IDETAPE is not set
+# CONFIG_BLK_DEV_IDEFLOPPY is not set
+# CONFIG_BLK_DEV_IDESCSI is not set
+# CONFIG_IDE_TASK_IOCTL is not set
+
+#
+# IDE chipset support/bugfixes
+#
+# CONFIG_IDE_GENERIC is not set
+# CONFIG_IDE_ARM is not set
+# CONFIG_BLK_DEV_IDEDMA is not set
+# CONFIG_IDEDMA_AUTO is not set
+# CONFIG_BLK_DEV_HD is not set
+
+#
+# SCSI device support
+#
+CONFIG_SCSI=y
+CONFIG_SCSI_PROC_FS=y
+
+#
+# SCSI support type (disk, tape, CD-ROM)
+#
+CONFIG_BLK_DEV_SD=y
+# CONFIG_CHR_DEV_ST is not set
+# CONFIG_CHR_DEV_OSST is not set
+# CONFIG_BLK_DEV_SR is not set
+# CONFIG_CHR_DEV_SG is not set
+
+#
+# Some SCSI devices (e.g. CD jukebox) support multiple LUNs
+#
+# CONFIG_SCSI_MULTI_LUN is not set
+# CONFIG_SCSI_CONSTANTS is not set
+# CONFIG_SCSI_LOGGING is not set
+
+#
+# SCSI Transport Attributes
+#
+# CONFIG_SCSI_SPI_ATTRS is not set
+# CONFIG_SCSI_FC_ATTRS is not set
+
+#
+# SCSI low-level drivers
+#
+# CONFIG_SCSI_SATA is not set
+# CONFIG_SCSI_DEBUG is not set
+
+#
+# Fusion MPT device support
+#
+
+#
+# IEEE 1394 (FireWire) support
+#
+
+#
+# I2O device support
+#
+
+#
+# ISDN subsystem
+#
+# CONFIG_ISDN is not set
+
+#
+# Input device support
+#
+CONFIG_INPUT=y
+
+#
+# Userland interfaces
+#
+CONFIG_INPUT_MOUSEDEV=y
+# CONFIG_INPUT_MOUSEDEV_PSAUX is not set
+CONFIG_INPUT_MOUSEDEV_SCREEN_X=1024
+CONFIG_INPUT_MOUSEDEV_SCREEN_Y=768
+# CONFIG_INPUT_JOYDEV is not set
+# CONFIG_INPUT_TSDEV is not set
+# CONFIG_INPUT_TSLIBDEV is not set
+CONFIG_INPUT_EVDEV=y
+# CONFIG_INPUT_EVBUG is not set
+
+#
+# Input I/O drivers
+#
+# CONFIG_GAMEPORT is not set
+CONFIG_SOUND_GAMEPORT=y
+CONFIG_SERIO=y
+# CONFIG_SERIO_SERPORT is not set
+# CONFIG_SERIO_CT82C710 is not set
+# CONFIG_SERIO_RAW is not set
+
+#
+# Input Device Drivers
+#
+CONFIG_INPUT_KEYBOARD=y
+CONFIG_KEYBOARD_ATKBD=y
+# CONFIG_KEYBOARD_SUNKBD is not set
+# CONFIG_KEYBOARD_LKKBD is not set
+# CONFIG_KEYBOARD_XTKBD is not set
+# CONFIG_KEYBOARD_NEWTON is not set
+# CONFIG_INPUT_MOUSE is not set
+# CONFIG_INPUT_JOYSTICK is not set
+CONFIG_INPUT_TOUCHSCREEN=y
+# CONFIG_TOUCHSCREEN_GUNZE is not set
+# CONFIG_TOUCHSCREEN_OMAP is not set
+# CONFIG_INPUT_MISC is not set
+
+#
+# Character devices
+#
+CONFIG_VT=y
+CONFIG_VT_CONSOLE=y
+CONFIG_HW_CONSOLE=y
+# CONFIG_SERIAL_NONSTANDARD is not set
+
+#
+# Serial drivers
+#
+# CONFIG_SERIAL_8250 is not set
+
+#
+# Non-8250 serial port support
+#
+# CONFIG_SERIAL_PXA is not set
+CONFIG_UNIX98_PTYS=y
+CONFIG_LEGACY_PTYS=y
+CONFIG_LEGACY_PTY_COUNT=256
+
+#
+# IPMI
+#
+# CONFIG_IPMI_HANDLER is not set
+
+#
+# Watchdog Cards
+#
+# CONFIG_WATCHDOG is not set
+# CONFIG_NVRAM is not set
+# CONFIG_BLOCKER is not set
+# CONFIG_SA1100_RTC is not set
+# CONFIG_DTLK is not set
+# CONFIG_R3964 is not set
+
+#
+# Ftape, the floppy tape device driver
+#
+# CONFIG_DRM is not set
+# CONFIG_RAW_DRIVER is not set
+CONFIG_FUSION_DEVICE=y
+
+#
+# I2C support
+#
+# CONFIG_I2C is not set
+
+#
+# SPI support
+#
+# CONFIG_SPI is not set
+# CONFIG_SPI_MASTER is not set
+
+#
+# Dallas's 1-wire bus
+#
+CONFIG_W1=y
+# CONFIG_W1_THERM is not set
+# CONFIG_W1_SMEM is not set
+# CONFIG_W1_DS2433 is not set
+
+#
+# Multimedia devices
+#
+CONFIG_VIDEO_DEV=y
+
+#
+# Video For Linux
+#
+
+#
+# Video Adapters
+#
+# CONFIG_VIDEO_CPIA is not set
+
+#
+# Radio Adapters
+#
+# CONFIG_RADIO_MAESTRO is not set
+
+#
+# Digital Video Broadcasting Devices
+#
+# CONFIG_DVB is not set
+
+#
+# File systems
+#
+CONFIG_EXT2_FS=y
+# CONFIG_EXT2_FS_XATTR is not set
+CONFIG_EXT3_FS=m
+CONFIG_EXT3_FS_XATTR=y
+# CONFIG_EXT3_FS_POSIX_ACL is not set
+# CONFIG_EXT3_FS_SECURITY is not set
+CONFIG_JBD=m
+# CONFIG_JBD_DEBUG is not set
+CONFIG_FS_MBCACHE=y
+# CONFIG_REISERFS_FS is not set
+# CONFIG_JFS_FS is not set
+CONFIG_XFS_FS=m
+# CONFIG_XFS_RT is not set
+# CONFIG_XFS_QUOTA is not set
+# CONFIG_XFS_SECURITY is not set
+# CONFIG_XFS_POSIX_ACL is not set
+# CONFIG_MINIX_FS is not set
+# CONFIG_ROMFS_FS is not set
+# CONFIG_QUOTA is not set
+CONFIG_DNOTIFY=y
+# CONFIG_AUTOFS_FS is not set
+CONFIG_AUTOFS4_FS=m
+
+#
+# CD-ROM/DVD Filesystems
+#
+# CONFIG_ISO9660_FS is not set
+# CONFIG_UDF_FS is not set
+
+#
+# DOS/FAT/NT Filesystems
+#
+# CONFIG_MSDOS_FS is not set
+# CONFIG_VFAT_FS is not set
+# CONFIG_NTFS_FS is not set
+
+#
+# Pseudo filesystems
+#
+CONFIG_PROC_FS=y
+CONFIG_SYSFS=y
+# CONFIG_DEVFS_FS is not set
+# CONFIG_DEVPTS_FS_XATTR is not set
+CONFIG_TMPFS=y
+# CONFIG_TMPFS_XATTR is not set
+# CONFIG_HUGETLB_PAGE is not set
+CONFIG_RAMFS=y
+# CONFIG_RELAYFS_FS is not set
+
+#
+# Miscellaneous filesystems
+#
+# CONFIG_ADFS_FS is not set
+# CONFIG_AFFS_FS is not set
+# CONFIG_HFS_FS is not set
+# CONFIG_HFSPLUS_FS is not set
+# CONFIG_BEFS_FS is not set
+# CONFIG_BFS_FS is not set
+# CONFIG_EFS_FS is not set
+CONFIG_JFFS_FS=y
+CONFIG_JFFS_FS_VERBOSE=0
+# CONFIG_JFFS_PROC_FS is not set
+CONFIG_JFFS2_FS=y
+CONFIG_JFFS2_FS_DEBUG=0
+CONFIG_JFFS2_FS_WRITEBUFFER=y
+CONFIG_JFFS2_COMPRESSION_OPTIONS=y
+CONFIG_JFFS2_ZLIB=y
+CONFIG_JFFS2_RTIME=y
+# CONFIG_JFFS2_RUBIN is not set
+# CONFIG_JFFS2_CMODE_NONE is not set
+CONFIG_JFFS2_CMODE_PRIORITY=y
+# CONFIG_JFFS2_CMODE_SIZE is not set
+CONFIG_CRAMFS=y
+# CONFIG_CRAMFS_LINEAR is not set
+# CONFIG_VXFS_FS is not set
+# CONFIG_HPFS_FS is not set
+# CONFIG_QNX4FS_FS is not set
+# CONFIG_SYSV_FS is not set
+# CONFIG_UFS_FS is not set
+# CONFIG_YAFFS_FS is not set
+# CONFIG_YAFFS1_FS is not set
+
+#
+# Network File Systems
+#
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3=y
+CONFIG_NFS_V4=y
+# CONFIG_NFS_DIRECTIO is not set
+CONFIG_NFSD=m
+CONFIG_NFSD_V3=y
+# CONFIG_NFSD_V4 is not set
+CONFIG_NFSD_TCP=y
+CONFIG_ROOT_NFS=y
+CONFIG_LOCKD=y
+CONFIG_LOCKD_V4=y
+CONFIG_EXPORTFS=m
+CONFIG_SUNRPC=y
+CONFIG_SUNRPC_GSS=y
+CONFIG_RPCSEC_GSS_KRB5=y
+# CONFIG_RPCSEC_GSS_SPKM3 is not set
+CONFIG_SMB_FS=m
+# CONFIG_SMB_NLS_DEFAULT is not set
+# CONFIG_CIFS is not set
+# CONFIG_NCP_FS is not set
+# CONFIG_CODA_FS is not set
+# CONFIG_AFS_FS is not set
+
+#
+# Partition Types
+#
+# CONFIG_PARTITION_ADVANCED is not set
+CONFIG_MSDOS_PARTITION=y
+
+#
+# Native Language Support
+#
+CONFIG_NLS=y
+CONFIG_NLS_DEFAULT="iso8859-1"
+CONFIG_NLS_CODEPAGE_437=y
+# CONFIG_NLS_CODEPAGE_737 is not set
+# CONFIG_NLS_CODEPAGE_775 is not set
+# CONFIG_NLS_CODEPAGE_850 is not set
+# CONFIG_NLS_CODEPAGE_852 is not set
+# CONFIG_NLS_CODEPAGE_855 is not set
+# CONFIG_NLS_CODEPAGE_857 is not set
+# CONFIG_NLS_CODEPAGE_860 is not set
+# CONFIG_NLS_CODEPAGE_861 is not set
+# CONFIG_NLS_CODEPAGE_862 is not set
+# CONFIG_NLS_CODEPAGE_863 is not set
+# CONFIG_NLS_CODEPAGE_864 is not set
+# CONFIG_NLS_CODEPAGE_865 is not set
+# CONFIG_NLS_CODEPAGE_866 is not set
+# CONFIG_NLS_CODEPAGE_869 is not set
+# CONFIG_NLS_CODEPAGE_936 is not set
+# CONFIG_NLS_CODEPAGE_950 is not set
+# CONFIG_NLS_CODEPAGE_932 is not set
+# CONFIG_NLS_CODEPAGE_949 is not set
+# CONFIG_NLS_CODEPAGE_874 is not set
+# CONFIG_NLS_ISO8859_8 is not set
+# CONFIG_NLS_CODEPAGE_1250 is not set
+# CONFIG_NLS_CODEPAGE_1251 is not set
+CONFIG_NLS_ASCII=m
+CONFIG_NLS_ISO8859_1=y
+# CONFIG_NLS_ISO8859_2 is not set
+# CONFIG_NLS_ISO8859_3 is not set
+# CONFIG_NLS_ISO8859_4 is not set
+# CONFIG_NLS_ISO8859_5 is not set
+# CONFIG_NLS_ISO8859_6 is not set
+# CONFIG_NLS_ISO8859_7 is not set
+# CONFIG_NLS_ISO8859_9 is not set
+# CONFIG_NLS_ISO8859_13 is not set
+# CONFIG_NLS_ISO8859_14 is not set
+# CONFIG_NLS_ISO8859_15 is not set
+# CONFIG_NLS_KOI8_R is not set
+# CONFIG_NLS_KOI8_U is not set
+CONFIG_NLS_UTF8=m
+
+#
+# Profiling support
+#
+CONFIG_PROFILING=y
+# CONFIG_OPROFILE is not set
+
+#
+# Graphics support
+#
+# CONFIG_FB is not set
+
+#
+# Console display driver support
+#
+# CONFIG_VGA_CONSOLE is not set
+CONFIG_DUMMY_CONSOLE=y
+
+#
+# Sound
+#
+# CONFIG_SOUND is not set
+
+#
+# Misc devices
+#
+
+#
+# Multimedia Capabilities Port drivers
+#
+# CONFIG_UCB1400_TS is not set
+
+#
+# USB support
+#
+# CONFIG_USB is not set
+CONFIG_USB_ARCH_HAS_HCD=y
+# CONFIG_USB_ARCH_HAS_OHCI is not set
+
+#
+# NOTE: USB_STORAGE enables SCSI, and 'SCSI disk support' may also be needed; see USB_STORAGE Help for more information
+#
+
+#
+# USB Gadget Support
+#
+# CONFIG_USB_GADGET is not set
+
+#
+# Synchronous Serial Interfaces (SSI)
+#
+
+#
+# MMC/SD Card support
+#
+# CONFIG_MMC is not set
+
+#
+# MontaVista System tools
+#
+# CONFIG_ILATENCY is not set
+
+#
+# Kernel hacking
+#
+# CONFIG_DEBUG_KERNEL is not set
+# CONFIG_DEBUG_PREEMPT is not set
+# CONFIG_WAKEUP_TIMING is not set
+# CONFIG_CRITICAL_PREEMPT_TIMING is not set
+# CONFIG_CRITICAL_IRQSOFF_TIMING is not set
+CONFIG_FRAME_POINTER=y
+CONFIG_DEBUG_USER=y
+
+#
+# Security options
+#
+# CONFIG_KEYS is not set
+# CONFIG_SECURITY is not set
+
+#
+# Cryptographic options
+#
+CONFIG_CRYPTO=y
+# CONFIG_CRYPTO_HMAC is not set
+# CONFIG_CRYPTO_NULL is not set
+# CONFIG_CRYPTO_MD4 is not set
+CONFIG_CRYPTO_MD5=y
+# CONFIG_CRYPTO_SHA1 is not set
+# CONFIG_CRYPTO_SHA256 is not set
+# CONFIG_CRYPTO_SHA512 is not set
+# CONFIG_CRYPTO_WP512 is not set
+CONFIG_CRYPTO_DES=y
+# CONFIG_CRYPTO_BLOWFISH is not set
+# CONFIG_CRYPTO_TWOFISH is not set
+# CONFIG_CRYPTO_SERPENT is not set
+# CONFIG_CRYPTO_AES is not set
+# CONFIG_CRYPTO_CAST5 is not set
+# CONFIG_CRYPTO_CAST6 is not set
+# CONFIG_CRYPTO_TEA is not set
+# CONFIG_CRYPTO_ARC4 is not set
+# CONFIG_CRYPTO_KHAZAD is not set
+# CONFIG_CRYPTO_ANUBIS is not set
+# CONFIG_CRYPTO_DEFLATE is not set
+# CONFIG_CRYPTO_MICHAEL_MIC is not set
+# CONFIG_CRYPTO_CRC32C is not set
+# CONFIG_CRYPTO_TEST is not set
+
+#
+# Library routines
+#
+CONFIG_CRC_CCITT=y
+# CONFIG_CRC16 is not set
+CONFIG_CRC32=y
+# CONFIG_LIBCRC32C is not set
+CONFIG_ZLIB_INFLATE=y
+CONFIG_ZLIB_DEFLATE=y
+
+#
+# Fast Real-Time Domain
+#
+# CONFIG_FRD is not set
+
+#
+# Fast Real-Time Domain Advanced Options
+#
Index: linux-2.6.10/arch/arm/mach-pxa/Kconfig
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/Kconfig
+++ linux-2.6.10/arch/arm/mach-pxa/Kconfig
@@ -18,6 +18,13 @@ config ARCH_PXA_IDP
 	bool "Accelent Xscale IDP"
 	select PXA25x
 
+
+config MACH_ZYLONITE
+	bool "Zylonite Development Platform"
+	select PXA3xx
+	select IWMMXT
+	select CPU_XSC3
+
 endchoice
 
 endmenu
@@ -32,6 +39,11 @@ config PXA27x
 	help
 	  Select code specific to PXA27x variants
 
+config PXA3xx
+	bool
+	help
+	  Select code specific to Intel(R) processor PXA3xx variants
+
 config IWMMXT
 	bool
 	help
Index: linux-2.6.10/arch/arm/mach-pxa/Makefile
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/Makefile
+++ linux-2.6.10/arch/arm/mach-pxa/Makefile
@@ -6,21 +6,26 @@
 obj-y += generic.o irq.o dma.o time.o
 obj-$(CONFIG_PXA25x) += pxa25x.o
 obj-$(CONFIG_PXA27x) += pxa27x.o
+obj-$(CONFIG_PXA3xx) += pxa3xx.o mfp.o
 
 # Specific board support
 obj-$(CONFIG_ARCH_LUBBOCK) += lubbock.o
 obj-$(CONFIG_MACH_MAINSTONE) += mainstone.o
 obj-$(CONFIG_ARCH_PXA_IDP) += idp.o
+obj-$(CONFIG_MACH_ZYLONITE)   += zylonite.o
 
 # Support for blinky lights
 led-y := leds.o
 led-$(CONFIG_ARCH_LUBBOCK) += leds-lubbock.o
 led-$(CONFIG_MACH_MAINSTONE) += leds-mainstone.o
 led-$(CONFIG_ARCH_PXA_IDP) += leds-idp.o
+led-$(CONFIG_MACH_ZYLONITE) += leds-zylonite.o
 
 obj-$(CONFIG_LEDS) += $(led-y)
 
 # Misc features
+obj-$(CONFIG_PXA3xx) += mhn_gpio.o
+
 obj-$(CONFIG_PM) += pm.o sleep.o
 
 ifeq ($(CONFIG_PXA27x),y)
Index: linux-2.6.10/arch/arm/mach-pxa/Makefile.boot
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/Makefile.boot
+++ linux-2.6.10/arch/arm/mach-pxa/Makefile.boot
@@ -1,2 +1,7 @@
+ifeq ($(CONFIG_MACH_ZYLONITE),y)
+   zreladdr-y	:= 0x80008000
+else
    zreladdr-y	:= 0xa0008000
+endif
+
 
Index: linux-2.6.10/arch/arm/mach-pxa/generic.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/generic.c
+++ linux-2.6.10/arch/arm/mach-pxa/generic.c
@@ -32,6 +32,7 @@
 
 #include <asm/arch/pxa-regs.h>
 #include <asm/arch/udc.h>
+#include <asm/arch/u2d.h>
 #include <asm/arch/pxafb.h>
 #include <asm/arch/mmc.h>
 #include <asm/arch/irda.h>
@@ -50,6 +51,7 @@ void pxa_gpio_mode(int gpio_mode)
 	int gafr;
 
 	local_irq_save(flags);
+#ifndef CONFIG_PXA3xx
 	if (gpio_mode & GPIO_DFLT_LOW)
 		GPCR(gpio) = GPIO_bit(gpio);
 	else if (gpio_mode & GPIO_DFLT_HIGH)
@@ -60,6 +62,9 @@ void pxa_gpio_mode(int gpio_mode)
 		GPDR(gpio) &= ~GPIO_bit(gpio);
 	gafr = GAFR(gpio) & ~(0x3 << (((gpio) & 0xf)*2));
 	GAFR(gpio) = gafr |  (fn  << (((gpio) & 0xf)*2));
+#else
+        GCDR(gpio) &= (1 << (gpio & 0x1f));
+#endif
 	local_irq_restore(flags);
 }
 
@@ -71,18 +76,103 @@ EXPORT_SYMBOL(pxa_gpio_mode);
 void pxa_set_cken(int clock, int enable)
 {
 	unsigned long flags;
+#if defined(CONFIG_PXA3xx)
+	int hsio2_enable = 0;
+#endif
+
 	local_irq_save(flags);
 
+#if defined(CONFIG_PXA3xx)
+	switch(clock) {
+	/*special case1:*/
+		case CKEN_AC97:
+			if (enable) {
+				CKENA |= (0x1u << clock);
+				if (CKEN_AC97 == clock) {
+				/*
+				 * FIXME: Make out-clock for AC97 24.576MHz
+				 * This is workaround for that AC97 clock is
+				 * not correct after reset.
+				 */
+					AC97_DIV = 1625<<12 | 128;
+				}
+			} else {
+				CKENA &= ~(0x1u << clock);
+			}
+			break;
+
+	/*special case2:*/
+		case CKEN_USB2:
+			if (enable) {
+				CKENA |= (0x1u << clock);
+			} else {
+				CKENA &= ~(0x1u << clock);
+			}
+			/* down */
+		case CKEN_GRAPHICS:
+			if (enable) {
+				CKENB |= (0x1u << (clock - 32));
+			} else {
+				CKENB &= ~(0x1u << (clock - 32));
+			}
+			/* down */
+#ifdef CONFIG_PXA310
+		case CKEN_MVED:
+			if (enable) {
+				CKENB |= (0x1u << (clock - 32));
+			} else {
+				CKENB &= ~(0x1u << (clock - 32));
+			}
+			/* down */
+#endif
+		case CKEN_HSIO2:
+			if (enable)
+				hsio2_enable++;
+			if(CKENA & (0x1u << CKEN_USB2))
+				hsio2_enable++;
+			if (CKENB & (0x1u << (CKEN_GRAPHICS - 32)))
+				hsio2_enable++;
+#ifdef CONFIG_PXA310
+			if(CKENB & (0x1u << (CKEN_MVED - 32)))
+				hsio2_enable++;
+#endif
+
+			if(hsio2_enable)
+				CKENB |= (0x1u << (CKEN_HSIO2-32) );
+			else
+				CKENB &= ~(0x1u << (CKEN_HSIO2-32) );
+			break;
+
+		default:	/*normal case:*/
+			if(clock < 32) {
+				if (enable) {
+					CKENA |= (0x1u << clock);
+				} else {
+					CKENA &= ~(0x1u << clock);
+				}
+			}else {
+				if (enable) {
+					CKENB |= (0x1u << (clock - 32) );
+				} else {
+					CKENB &= ~(0x1u << (clock - 32));
+				}
+			}
+			break;
+	}
+#else
 	if (enable)
 		CKEN |= clock;
 	else
 		CKEN &= ~clock;
 
+#endif
 	local_irq_restore(flags);
+	return;
 }
 
 EXPORT_SYMBOL(pxa_set_cken);
 
+#ifndef CONFIG_PXA3xx
 /*
  * Intel PXA2xx internal register mapping.
  *
@@ -101,6 +191,29 @@ static struct map_desc standard_io_desc[
   { 0xfe000000, 0x58000000, 0x00100000, MT_DEVICE }, /* IMem ctl */
   { 0xff000000, 0x00000000, 0x00100000, MT_DEVICE }  /* UNCACHED_PHYS_0 */
 };
+#else
+/*
+ * Intel PXA3xx internal register mapping.
+ *
+ * Note 1: not all variants implement all those addresses.
+ *
+ * Note 2: virtual 0xfffe0000-0xffffffff is reserved for the vector table
+ *         and cache flush area.
+ */
+static struct map_desc standard_io_desc[] __initdata = {
+  { 0xf5000000, 0x14000000, 0x01000000, MT_DEVICE },  /* VLIO IO            */
+  { 0xf6000000, 0x40000000, 0x02000000, MT_DEVICE },  /* devices            */
+  { 0xf8300000, 0x43100000, 0x00100000, MT_DEVICE },  /* nand               */
+  { 0xf8400000, 0x44000000, 0x00100000, MT_DEVICE },  /* lcd                */
+  { 0xf8800000, 0x46000000, 0x00100000, MT_DEVICE },  /* mini-lcd           */
+  { 0xf8d00000, 0x48100000, 0x00100000, MT_DEVICE },  /* dynamic mem ctl    */
+  { 0xf9000000, 0x4a000000, 0x00100000, MT_DEVICE },  /* static memory ctl  */
+  { 0xf9400000, 0x4c000000, 0x00100000, MT_DEVICE },  /* usb host           */
+  { 0xfa000000, 0x50000000, 0x00100000, MT_DEVICE },  /* camera             */
+  { 0xfa400000, 0x54000000, 0x00200000, MT_DEVICE },  /* 2d-graphics & usb2 */
+  { 0xfa800000, 0x58000000, 0x00100000, MT_DEVICE },  /* internal SRAM ctl  */
+};
+#endif
 
 void __init pxa_map_io(void)
 {
@@ -108,6 +221,37 @@ void __init pxa_map_io(void)
 	get_clk_frequency_khz(1);
 }
 
+static u64 ohci_hcd_pxa_dmamask = 0xffffffffUL;
+
+static struct resource pxa_ohci_resources[] = {
+	{
+		.start= 0x4C000000,
+		.end= 0x4C000fff,
+		.flags= IORESOURCE_MEM,
+	}, {
+		.start= IRQ_USBH1,
+		.end= IRQ_USBH1,
+		.flags= IORESOURCE_IRQ,
+	},
+};
+
+static void ohci_hcd_pxa_device_release(struct device *dev)
+{
+	/* Keep this function empty. */
+}
+
+static struct platform_device ohci_hcd_pxa_device = {
+	.name = "pxa-ohci",
+	.id = -1,
+	.dev		= {
+		.dma_mask = &ohci_hcd_pxa_dmamask,
+		.coherent_dma_mask = 0xffffffff,
+		.release = ohci_hcd_pxa_device_release,
+	},
+
+	.num_resources = ARRAY_SIZE(pxa_ohci_resources),
+	.resource      = pxa_ohci_resources,
+};
 
 static struct resource pxamci_resources[] = {
 	[0] = {
@@ -124,6 +268,7 @@ static struct resource pxamci_resources[
 
 static u64 pxamci_dmamask = 0xffffffffUL;
 
+#ifndef CONFIG_PXA3xx
 static struct platform_device pxamci_device = {
 	.name		= "pxa2xx-mci",
 	.id		= -1,
@@ -135,11 +280,78 @@ static struct platform_device pxamci_dev
 	.resource	= pxamci_resources,
 };
 
+#else
+
+static u64 pxa_mmc_controller_dmamask = 0xffffffffUL;
+
+static void pxa_mmc_controller_release(struct device *dev)
+{
+}
+
+static struct resource mmc0_resources[] = {
+	{
+		.start	= 0x41100000,
+		.end	= 0x41100fff,
+		.flags	= IORESOURCE_MEM,
+	}, {
+		.start	= IRQ_MMC,
+		.end	= IRQ_MMC,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device mmc0_device = {
+	.name		=	"pxa2xx-mci",
+	.id		=	0,
+	.resource	= mmc0_resources,
+	.num_resources	= ARRAY_SIZE(mmc0_resources),
+	.dev		= {
+		.dma_mask	   =	&pxa_mmc_controller_dmamask,
+		.release	   =	pxa_mmc_controller_release,
+		.coherent_dma_mask =	0xffffffff,
+	},
+};
+
+#ifdef CONFIG_MMC2
+static struct resource mmc1_resources[] = {
+	{
+		.start	= 0x42000000,
+		.end	= 0x42000fff,
+		.flags	= IORESOURCE_MEM,
+	}, {
+		.start	= IRQ_MMC2,
+		.end	= IRQ_MMC2,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device mmc1_device = {
+	.name		=	"pxa2xx-mci",
+	.id		=	1,
+	.resource	= mmc1_resources,
+	.num_resources	= ARRAY_SIZE(mmc1_resources),
+	.dev		= {
+		.dma_mask	   =	&pxa_mmc_controller_dmamask,
+		.release	   =	pxa_mmc_controller_release,
+		.coherent_dma_mask =	0xffffffff,
+	},
+};
+#endif /* MMC2 */
+#endif /* CPU_PXA_3xx */
+
 void __init pxa_set_mci_info(struct pxamci_platform_data *info)
 {
+#ifndef CONFIG_PXA3xx
 	pxamci_device.dev.platform_data = info;
+#else
+	mmc0_device.dev.platform_data = info;
+#ifdef CONFIG_MMC2
+	mmc1_device.dev.platform_data = info;
+#endif
+#endif
 }
 
+EXPORT_SYMBOL_GPL(pxa_set_mci_info);
 
 static struct pxa2xx_udc_mach_info pxa_udc_info;
 
@@ -148,6 +360,8 @@ void __init pxa_set_udc_info(struct pxa2
 	memcpy(&pxa_udc_info, info, sizeof *info);
 }
 
+EXPORT_SYMBOL_GPL(pxa_set_udc_info);
+
 static struct resource pxa2xx_udc_resources[] = {
 	[0] = {
 		.start	= 0x40600000,
@@ -171,6 +385,9 @@ static struct platform_device udc_device
 	.dev		=  {
 		.platform_data	= &pxa_udc_info,
 		.dma_mask	= &udc_dma_mask,
+#if defined(CONFIG_PXA3xx)
+		.coherent_dma_mask = 0xffffffff,
+#endif
 	}
 };
 
@@ -181,6 +398,8 @@ void __init set_pxa_fb_info(struct pxafb
 	memcpy(&pxa_fb_info,hard_pxa_fb_info,sizeof(struct pxafb_mach_info));
 }
 
+EXPORT_SYMBOL_GPL(set_pxa_fb_info);
+
 static struct resource pxafb_resources[] = {
 	[0] = {
 		.start	= 0x44000000,
@@ -221,35 +440,279 @@ static struct platform_device stuart_dev
 	.id		= 2,
 };
 
+#if defined(CONFIG_PXA3xx)
+
+static struct platform_device nand_device = {
+	.name		= "PXA3xx-nand-flash",
+	.id		= -1,
+};
+
+static struct platform_device camera_device = {
+	.name		= "pxa2xx-camera",
+	.id		= -1,
+};
+
+static struct platform_device sibley_device = {
+	.name		= "PXA3xx-sibley-flash",
+	.id		= -1,
+};
+
+static struct resource pxaac97_resources[] = {
+        {
+                .start = 0x40500000,
+                .end = 0x40500fff,
+                .flags = IORESOURCE_MEM,
+        }, {
+                .start  = IRQ_AC97,
+                .end = IRQ_AC97,
+                .flags = IORESOURCE_IRQ,
+        },
+};
+
+static u64 pxa_ac97_dmamask = 0xffffffffUL;
+
+static struct platform_device pxaac97_device = {
+	.name           = "pxa2xx-ac97",
+	.id             = -1,
+	.dev            = {
+                .dma_mask = &pxa_ac97_dmamask,
+                .coherent_dma_mask = 0xffffffffUL,
+	},
+	.num_resources  = ARRAY_SIZE(pxaac97_resources),
+	.resource       = pxaac97_resources,
+};
+
+static struct platform_device pxatouch_device = {
+        .name           = "pxa2xx-touch",
+        .id             = -1,
+};
+
+#ifdef CONFIG_PXA3xx_GPIOEX
+static struct platform_device gpio_exp_device = {
+	.name		= "gpio-exp",
+	.id		= -1,
+};
+#endif
+
+static struct platform_device arava_device = {
+        .name 		= "arava",
+        .id 		= -1,
+};
+
+static struct platform_device mhn_fv_device = {
+        .name 		= "mhn_fv",
+        .id 		= -1,
+};
+
+static struct resource w1_resources[] = {
+	{
+		.start	= 0x41B00000,
+		.end	= 0x41B00010,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct platform_device w1_device = {
+	.name		= "1-wire-mp",
+	.id		= 0,
+	.resource	= w1_resources,
+	.num_resources	= ARRAY_SIZE(w1_resources),
+};
+
+static struct platform_device rtc_device = {
+	.name		= "pxa-rtc",
+	.id		= -1,
+};
+
+static struct resource i2c_resources[] = {
+	{
+		.start	= 0x40301680,
+		.end	= 0x403016a3,
+		.flags	= IORESOURCE_MEM,
+	}, {
+		.start	= IRQ_I2C,
+		.end	= IRQ_I2C,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static u64 pxaficp_dmamask = ~(u32)0;
+#endif
+
 static struct platform_device i2c_device = {
 	.name 	= "pxa2xx-i2c",
 	.id 	= 0,
+#if defined(CONFIG_PXA3xx)
+	.resource	= i2c_resources,
+	.num_resources	= ARRAY_SIZE(i2c_resources),
+#endif
 };
 
 static struct platform_device pxaficp_device = {
 	.name		= "pxa2xx-ir",
 	.id		= -1,
+#if defined(CONFIG_PXA3xx)
+        .dev            = {
+                .dma_mask = &pxaficp_dmamask,
+                .coherent_dma_mask = 0xffffffff,
+        },
+#endif
+};
+
+#if defined(CONFIG_PXA3xx)
+static struct platform_device PXA3xx_otg_device = {
+	.name	=	"PXA3xx-otg",
+	.id	=	-1,
+};
+
+static void pxa_u2d_release(struct device *dev)
+{
+	/* Keep this function empty. */
+}
+
+static struct pxa27x_u2d_mach_info pxa_u2d_info;
+
+static u64 u2d_dma_mask = ~(u32)0;
+
+static struct resource pxa27x_u2d_resources[] = {
+	{
+		.start	= 0x54100000,
+		.end	= 0x5410ffff,
+		.flags	= IORESOURCE_MEM,
+	}, {
+		.start	= IRQ_USB2,
+		.end	= IRQ_USB2,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device u2d_device = {
+	.name		= "pxa27x-u2d",
+	.id		= -1,
+	.resource	= pxa27x_u2d_resources,
+	.num_resources	= ARRAY_SIZE(pxa27x_u2d_resources),
+	.dev		=  {
+		.platform_data	= &pxa_u2d_info,
+		.dma_mask	= &u2d_dma_mask,
+		.coherent_dma_mask = 0xffffffff,
+		.release = pxa_u2d_release,
+	}
+};
+
+void pxa_set_u2d_info(struct pxa27x_u2d_mach_info *info)
+{
+        u2d_device.dev.platform_data = info;
+}
+
+EXPORT_SYMBOL_GPL(pxa_set_u2d_info);
+
+static struct platform_device zyt_pcmcia_device = {
+	.name		= "pxa2xx-pcmcia",
+	.id		= 0,
+	.resource	= 0,
+	.num_resources	= 0,
+	.dev		=  {
+		.platform_data	= NULL,
+		.dma_mask	= 0,
+		.coherent_dma_mask = 0,
+		.release = 0,
+	}
+};
+
+void pxa_set_pcmcia_info(void *info)
+{
+        zyt_pcmcia_device.dev.platform_data = info;
+}
+
+EXPORT_SYMBOL_GPL(pxa_set_pcmcia_info);
+
+static struct platform_device zb_ts_device = {
+	.name		= "zb_ts",
+	.id		= -1,
 };
 
+static struct platform_device zb_kp_device = {
+	.name		= "zb_kp",
+	.id		= -1,
+};
+
+static struct resource m2d_resources[2] = {
+	{
+		.start = 0x54000000,
+		.end   = 0x540fffff,
+		.flags = IORESOURCE_MEM,
+	}, {
+		.start = IRQ_GRPHICS,
+		.end   = IRQ_GRPHICS,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device gcu_device = {
+	.name		= "m2d",
+	.id		= -1,
+	.resource       = m2d_resources,
+	.num_resources  = ARRAY_SIZE(m2d_resources),
+};
+
+#endif
+
 void __init pxa_set_ficp_info(struct pxaficp_platform_data *info)
 {
 	pxaficp_device.dev.platform_data = info;
 }
+EXPORT_SYMBOL_GPL(pxa_set_ficp_info);
 
 static struct platform_device *devices[] __initdata = {
+#if !defined(CONFIG_PXA3xx)
 	&pxamci_device,
+#endif
 	&udc_device,
 	&pxafb_device,
 	&ffuart_device,
 	&btuart_device,
 	&stuart_device,
 	&i2c_device,
+#if defined(CONFIG_PXA3xx)
+	&arava_device,
+#ifdef CONFIG_PXA3xx_GPIOEX
+	&gpio_exp_device,
+#endif
+	&mhn_fv_device,
+ 	&nand_device,
+	&pxaac97_device,
+	&pxatouch_device,
+	&camera_device,
+	&sibley_device,
+	&w1_device,
+	&rtc_device,
+#ifdef  CONFIG_PXA_IRDA
 	&pxaficp_device,
+#endif
+	&mmc0_device,
+#ifdef CONFIG_PXA3xx_MMC2
+	&mmc1_device,
+#endif
+	&PXA3xx_otg_device,
+#ifdef CONFIG_USB_GADGET_MHN_U2D
+	&u2d_device,
+#endif
+	&ohci_hcd_pxa_device,
+	&zyt_pcmcia_device,
+	&zb_ts_device,
+	&zb_kp_device,
+	&gcu_device,
+#else	/* defined(CONFIG_PXA3xx) */
+	&pxaficp_device,
+#endif	/* defined(CONFIG_PXA3xx) */
 };
 
 static int __init pxa_init(void)
 {
-	return platform_add_devices(devices, ARRAY_SIZE(devices));
+#if defined(CONFIG_PXA3xx)
+	/* clear RDH */
+	ASCR &= 0x7fffffff;
+#endif
+  	return platform_add_devices(devices, ARRAY_SIZE(devices));
 }
-
 subsys_initcall(pxa_init);
Index: linux-2.6.10/arch/arm/mach-pxa/irq.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/irq.c
+++ linux-2.6.10/arch/arm/mach-pxa/irq.c
@@ -34,7 +34,7 @@
 
 static void pxa_mask_low_irq(unsigned int irq)
 {
-#ifdef CONFIG_PXA27x
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 	u32 value = 0;
 
 	__asm__ __volatile__("mrc p6, 0, %0, c1, c0, 0": "=r"(value));
@@ -47,7 +47,7 @@ static void pxa_mask_low_irq(unsigned in
 
 static void pxa_unmask_low_irq(unsigned int irq)
 {
-#ifdef CONFIG_PXA27x
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 	u32 value = 0;
 
 	__asm__ __volatile__("mrc p6, 0, %0, c1, c0, 0": "=r"(value));
@@ -72,7 +72,7 @@ static struct irqchip pxa_internal_chip_
 
 static void pxa_mask_high_irq(unsigned int irq)
 {
-#ifdef CONFIG_PXA27x
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 	u32 value = 0;
 
 	__asm__ __volatile__("mrc p6, 0, %0, c7, c0, 0": "=r"(value));
@@ -85,7 +85,7 @@ static void pxa_mask_high_irq(unsigned i
 
 static void pxa_unmask_high_irq(unsigned int irq)
 {
-#ifdef CONFIG_PXA27x
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 	u32 value = 0;
 
 	__asm__ __volatile__("mrc p6, 0, %0, c7, c0, 0": "=r"(value));
@@ -127,8 +127,10 @@ static int pxa_gpio_irq_type(unsigned in
 		if ((GPIO_IRQ_rising_edge[idx] | GPIO_IRQ_falling_edge[idx]) &
 		    GPIO_bit(gpio))
 			return 0;
+#ifndef CONFIG_PXA3xx
 		if (GAFR(gpio) & (0x3 << (((gpio) & 0xf)*2)))
 			return 0;
+#endif
 		type = __IRQT_RISEDGE | __IRQT_FALEDGE;
 	}
 
@@ -258,6 +260,17 @@ static void pxa_ack_muxed_gpio(unsigned 
 static void pxa_mask_muxed_gpio(unsigned int irq)
 {
 	int gpio = irq - IRQ_GPIO(2) + 2;
+#if defined (CONFIG_PXA3xx)
+	if ( GRER(gpio) & GPIO_bit(gpio))
+		__set_bit (gpio, GPIO_IRQ_rising_edge);
+	else
+		__clear_bit (gpio, GPIO_IRQ_rising_edge);
+
+	if (GFER(gpio) & GPIO_bit(gpio))
+		__set_bit (gpio, GPIO_IRQ_falling_edge);
+	else
+		__clear_bit (gpio, GPIO_IRQ_falling_edge);
+#endif
 	__clear_bit(gpio, GPIO_IRQ_mask);
 	GRER(gpio) &= ~GPIO_bit(gpio);
 	GFER(gpio) &= ~GPIO_bit(gpio);
@@ -284,12 +297,21 @@ void __init pxa_init_irq(void)
 {
 	int irq;
 
+#ifdef CONFIG_PXA3xx
+	__asm__ __volatile__ ("\n\
+			mov     r0, #0 \n\
+			mcr     p6, 0, r0, c1, c0, 0    @ ICMR=0 \n\
+			mcr     p6, 0, r0, c2, c0, 0    @ ICLR=0"
+			:
+			:
+			: "r0");
+#else
 	/* disable all IRQs */
 	ICMR = 0;
 
 	/* all IRQs are IRQ, not FIQ */
 	ICLR = 0;
-
+#endif
 	/* clear all GPIO edge detects */
 	GFER0 = 0;
 	GFER1 = 0;
@@ -301,8 +323,8 @@ void __init pxa_init_irq(void)
 	GEDR1 = GEDR1;
 	GEDR2 = GEDR2;
 
-#ifdef CONFIG_PXA27x
-	/* And similarly for the extra regs on the PXA27x */
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
+	/* And similarly for the extra regs on the PXA27x/PXA3xx */
 	ICMR2 = 0;
 	ICLR2 = 0;
 	GFER3 = 0;
Index: linux-2.6.10/arch/arm/mach-pxa/leds-zylonite.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-pxa/leds-zylonite.c
@@ -0,0 +1,101 @@
+/*
+ * linux/arch/arm/mach-pxa/leds-zylonite.c
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * (C) Copyright 2006 Marvell International Ltd.
+ * All Rights Reserved
+ */
+
+#include <linux/config.h>
+#include <linux/init.h>
+
+#include <asm/hardware.h>
+#include <asm/leds.h>
+#include <asm/system.h>
+
+#include <asm/arch/pxa-regs.h>
+#include <asm/arch/zylonite.h>
+
+#include "leds.h"
+
+#define LED_STATE_ENABLED	1
+#define LED_STATE_CLAIMED	2
+
+/* Zylonite has two debug LEDs on GPIOs 1 and 4. We use the LED on GPIO 1 as
+   the timer tick LED and the LED on GPIO 4 as the CPU usage LED. */
+
+#define LED_TIMER 1
+#define LED_CPU 4
+
+static unsigned int led_state;
+static unsigned int led_timer_state;
+static unsigned int led_cpu_state;
+
+static inline void set_led(int led, int state)
+{
+	if (state) {
+		GPSR0 = (1 << led);
+	} else {
+		GPCR0 = (1 << led);
+	}
+}
+
+void zylonite_leds_event(led_event_t evt)
+{
+	unsigned long flags;
+
+	local_irq_save(flags);
+
+	switch (evt) {
+
+	case led_start:
+
+		/* make sure the GPIOs for the LEDS are set up as outputs */
+		GSDR0 = (1 << LED_TIMER);
+		GSDR0 = (1 << LED_CPU);
+
+		led_timer_state = 1;
+		led_cpu_state = 0;
+		led_state = LED_STATE_ENABLED;
+
+		break;
+
+	case led_stop:
+		led_state &= ~LED_STATE_ENABLED;
+		break;
+
+	case led_claim:
+		led_state |= LED_STATE_CLAIMED;
+		led_timer_state = led_cpu_state = 0;
+		break;
+
+	case led_release:
+		led_state &= ~LED_STATE_CLAIMED;
+		led_timer_state = led_cpu_state = 0;
+		break;
+
+#ifdef CONFIG_LEDS_TIMER
+	case led_timer:
+		led_timer_state = (led_timer_state ? 0 : 1);
+		break;
+#endif
+
+#ifdef CONFIG_LEDS_CPU
+	case led_idle_start:
+		led_cpu_state = 0;
+		break;
+
+	case led_idle_end:
+		led_cpu_state = 1;
+		break;
+#endif
+
+	default:
+		break;
+	}
+
+	local_irq_restore(flags);
+}
Index: linux-2.6.10/arch/arm/mach-pxa/leds.c
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/leds.c
+++ linux-2.6.10/arch/arm/mach-pxa/leds.c
@@ -22,6 +22,8 @@ pxa_leds_init(void)
 		leds_event = lubbock_leds_event;
 	if (machine_is_mainstone())
 		leds_event = mainstone_leds_event;
+	if (machine_is_zylonite())
+		leds_event = zylonite_leds_event;
 	if (machine_is_pxa_idp())
 		leds_event = idp_leds_event;
 
Index: linux-2.6.10/arch/arm/mach-pxa/leds.h
===================================================================
--- linux-2.6.10.orig/arch/arm/mach-pxa/leds.h
+++ linux-2.6.10/arch/arm/mach-pxa/leds.h
@@ -10,3 +10,4 @@
 extern void idp_leds_event(led_event_t evt);
 extern void lubbock_leds_event(led_event_t evt);
 extern void mainstone_leds_event(led_event_t evt);
+extern void zylonite_leds_event(led_event_t evt);
Index: linux-2.6.10/arch/arm/mach-pxa/mfp.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-pxa/mfp.c
@@ -0,0 +1,330 @@
+/*
+ *  arch/arm/mach-pxa/mfp.c
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * (C) Copyright 2006 Marvell International Ltd.
+ * All Rights Reserved
+ */
+
+#include <linux/module.h>
+#include <linux/spinlock.h>
+
+#include <asm/io.h>
+#include <asm/types.h>
+#include <asm/hardware.h>
+#include <asm/arch/mfp.h>
+
+#define CONFIG_MFP_DEBUG
+
+#define MAX_MFP_PINS	419
+#define PADBASE		0x00E10000
+/* This io mem space follows the definition in include/asm/arch/hardware.h */
+#undef KSEG0
+#define KSEG0(a)	(((a) & 0x01ffffff) + 0xf6000000)
+
+struct mfp_regs {
+	unsigned char __iomem	*membase;
+	unsigned int		mfp[MAX_MFP_PINS];
+};
+
+/* Writing to an MFP register is slow, a read-back of the register is
+ * necessary for most functions here to make sure that the write is
+ * finished. For configuration of multiple MFP pins, a read-back of the
+ * last register is enough.
+ */
+
+/* mfp_spin_lock is used to ensure that MFP register configuration
+ * (most likely a read-modify-write operation) is atomic.
+ */
+static spinlock_t mfp_spin_lock = SPIN_LOCK_UNLOCKED;
+
+int mhn_mfp_set_config(struct mhn_pin_config *pin_config)
+{
+	mfp_pin_t mfp_pin;
+	uint32_t  mfp_reg;
+
+	_raw_spin_lock(&mfp_spin_lock);
+
+	mfp_pin = pin_config->mfp_pin;
+	mfp_reg = PIN2REG(pin_config);
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (IS_GPIO_EXP_PIN(mfp_pin)){
+		_raw_spin_unlock(&mfp_spin_lock);
+		return 0;
+	}
+#endif
+
+#ifdef CONFIG_MFP_DEBUG
+	if ((pin_config == NULL) ||
+	    (MFP_OFFSET(mfp_pin) > MHN_MAX_MFP_OFFSET) ||
+	    (MFP_OFFSET(mfp_pin) < MHN_MIN_MFP_OFFSET)) {
+		_raw_spin_unlock(&mfp_spin_lock);
+		return -1;
+	}
+#endif
+
+	MFP_REG(mfp_pin) = mfp_reg;
+	mfp_reg = MFP_REG(mfp_pin);	/* read back */
+
+	_raw_spin_unlock(&mfp_spin_lock);
+
+	return 0;
+}
+
+int mhn_mfp_set_configs(struct mhn_pin_config *pin_configs, int n)
+{
+	mfp_pin_t mfp_pin = 0;
+	uint32_t  mfp_reg = 0;
+	int i;
+
+	if (n <= 0)
+		return 0;
+
+	_raw_spin_lock(&mfp_spin_lock);
+
+	for (i = 0; i < n; i++) {
+		mfp_pin = pin_configs->mfp_pin;
+		mfp_reg = PIN2REG(pin_configs);
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+		if (IS_GPIO_EXP_PIN(mfp_pin)) {
+			pin_configs++;
+			continue;
+		}
+#endif
+
+#ifdef CONFIG_MFP_DEBUG
+		if ((pin_configs == NULL) ||
+		    (MFP_OFFSET(mfp_pin) > MHN_MAX_MFP_OFFSET) ||
+		    (MFP_OFFSET(mfp_pin) < MHN_MIN_MFP_OFFSET)) {
+			_raw_spin_unlock(&mfp_spin_lock);
+			return -1;
+		}
+#endif
+		MFP_REG(mfp_pin) = mfp_reg;
+		pin_configs++;
+	}
+
+	mfp_reg = MFP_REG(mfp_pin);
+	_raw_spin_unlock(&mfp_spin_lock);
+
+	return 0;
+}
+
+int mhn_mfp_set_afds(mfp_pin_t pin, int af, int ds)
+{
+	uint32_t mfp_reg;
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (IS_GPIO_EXP_PIN(pin))
+		return 0;
+#endif
+
+#ifdef CONFIG_MFP_DEBUG
+	if ((MFP_OFFSET(pin) > MHN_MAX_MFP_OFFSET) ||
+	    (MFP_OFFSET(pin) < MHN_MIN_MFP_OFFSET))
+		return -1;
+#endif
+
+	_raw_spin_lock(&mfp_spin_lock);
+
+	mfp_reg = MFP_REG(pin);
+	mfp_reg &= ~(MFP_AF_MASK | MFP_DRV_MASK);
+	mfp_reg |= (((af & 0x7) << MFPR_ALT_OFFSET) |
+		    ((ds & 0x7) << MFPR_DRV_OFFSET));
+	MFP_REG(pin) = mfp_reg;
+	mfp_reg = MFP_REG(pin);
+
+	_raw_spin_unlock(&mfp_spin_lock);
+
+	return 0;
+}
+
+int mhn_mfp_set_rdh(mfp_pin_t pin, int rdh)
+{
+	uint32_t mfp_reg;
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (IS_GPIO_EXP_PIN(pin))
+		return 0;
+#endif
+
+#ifdef CONFIG_MFP_DEBUG
+	if ((MFP_OFFSET(pin) > MHN_MAX_MFP_OFFSET) ||
+	    (MFP_OFFSET(pin) < MHN_MIN_MFP_OFFSET))
+		return -1;
+#endif
+
+	_raw_spin_lock(&mfp_spin_lock);
+
+	mfp_reg = MFP_REG(pin);
+	mfp_reg &= ~MFP_RDH_MASK;
+
+	if (likely(rdh))
+		mfp_reg |= (1u << MFPR_SS_OFFSET);
+
+	MFP_REG(pin) = mfp_reg;
+	mfp_reg = MFP_REG(pin);
+
+	_raw_spin_unlock(&mfp_spin_lock);
+
+	return 0;
+}
+
+int mhn_mfp_set_lpm(mfp_pin_t pin, int lpm)
+{
+	uint32_t mfp_reg;
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (IS_GPIO_EXP_PIN(pin))
+		return 0;
+#endif
+
+#ifdef CONFIG_MFP_DEBUG
+	if ((MFP_OFFSET(pin) > MHN_MAX_MFP_OFFSET) ||
+	    (MFP_OFFSET(pin) < MHN_MIN_MFP_OFFSET))
+		return -1;
+#endif
+	_raw_spin_lock(&mfp_spin_lock);
+
+	mfp_reg = MFP_REG(pin);
+	mfp_reg &= ~(MFP_LPM_MASK);
+
+	if (lpm & 0x1) mfp_reg |= 1u << MFPR_SON_OFFSET;
+	if (lpm & 0x2) mfp_reg |= 1u << MFPR_SD_OFFSET;
+	if (lpm & 0x4) mfp_reg |= 1u << MFPR_PU_OFFSET;
+	if (lpm & 0x8) mfp_reg |= 1u << MFPR_PD_OFFSET;
+	if (lpm &0x10) mfp_reg |= 1u << MFPR_PS_OFFSET;
+
+	MFP_REG(pin) = mfp_reg;
+	mfp_reg = MFP_REG(pin);
+
+	_raw_spin_unlock(&mfp_spin_lock);
+
+	return 0;
+}
+
+int mhn_mfp_set_edge(mfp_pin_t pin, int edge)
+{
+	uint32_t mfp_reg;
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (IS_GPIO_EXP_PIN(pin))
+		return 0;
+#endif
+
+#ifdef CONFIG_MFP_DEBUG
+	if ((MFP_OFFSET(pin) > MHN_MAX_MFP_OFFSET) ||
+	    (MFP_OFFSET(pin) < MHN_MIN_MFP_OFFSET))
+		return -1;
+#endif
+	_raw_spin_lock(&mfp_spin_lock);
+
+	mfp_reg = MFP_REG(pin);
+
+	/* Clear bits - EDGE_CLEAR, EDGE_RISE_EN, EDGE_FALL_EN */
+	mfp_reg &= ~(MFP_EDGE_MASK);
+
+	switch (edge) {
+	case MFP_EDGE_RISE:
+		mfp_reg |= (1u << MFPR_ERE_OFFSET);
+		break;
+	case MFP_EDGE_FALL:
+		mfp_reg |= (1u << MFPR_EFE_OFFSET);
+		break;
+	case MFP_EDGE_BOTH:
+		mfp_reg |= (3u << MFPR_ERE_OFFSET);
+		break;
+	case MFP_EDGE_NONE:
+		mfp_reg |= (1u << MFPR_EC_OFFSET);
+		break;
+	default:
+		_raw_spin_unlock(&mfp_spin_lock);
+		return -EINVAL;
+	}
+
+	MFP_REG(pin) = mfp_reg;
+	mfp_reg = MFP_REG(pin);
+
+	_raw_spin_unlock(&mfp_spin_lock);
+
+	return 0;
+}
+
+/*
+ * The pullup and pulldown state of the MFP pin is by default determined by
+ * selected alternate function. In case some buggy devices need to override
+ * this default behavior,  this function can be invoked by setting/clearing
+ * bit PULL_SEL of MFPRxx.
+ */
+int mhn_mfp_set_pull(mfp_pin_t pin, int pull)
+{
+	uint32_t mfp_reg;
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (IS_GPIO_EXP_PIN(pin))
+		return 0;
+#endif
+
+#ifdef CONFIG_MFP_DEBUG
+	if ((MFP_OFFSET(pin) > MHN_MAX_MFP_OFFSET) ||
+	    (MFP_OFFSET(pin) < MHN_MIN_MFP_OFFSET))
+		return -1;
+#endif
+	_raw_spin_lock(&mfp_spin_lock);
+
+	mfp_reg = MFP_REG(pin);
+	mfp_reg &= ~MFP_PULL_MASK;
+
+	mfp_reg |= (pull & 0x7u) << MFPR_PD_OFFSET;
+
+	MFP_REG(pin) = mfp_reg;
+	mfp_reg = MFP_REG(pin);
+
+	_raw_spin_unlock(&mfp_spin_lock);
+
+	return 0;
+}
+
+static struct mfp_regs context;
+void mhn_mfp_save(void)
+{
+	int i, offset;
+
+	/* specify the membase */
+	context.membase = (unsigned char *)KSEG0(PADBASE);
+
+	for (i = 0; i < MAX_MFP_PINS; i++) {
+		offset = i << 2;
+		context.mfp[i] = readl(context.membase + offset);
+	}
+}
+
+void mhn_mfp_restore(void)
+{
+	int i, offset;
+
+	/* check the membase */
+	if (context.membase == NULL)
+		return;
+
+	for (i = 0; i < MAX_MFP_PINS; i++) {
+		offset = i << 2;
+		writel(context.mfp[i], context.membase + offset);
+	}
+}
+
+EXPORT_SYMBOL_GPL(mhn_mfp_set_config);
+EXPORT_SYMBOL_GPL(mhn_mfp_set_configs);
+EXPORT_SYMBOL_GPL(mhn_mfp_set_afds);
+EXPORT_SYMBOL_GPL(mhn_mfp_set_rdh);
+EXPORT_SYMBOL_GPL(mhn_mfp_set_lpm);
+EXPORT_SYMBOL_GPL(mhn_mfp_set_edge);
+EXPORT_SYMBOL_GPL(mhn_mfp_set_pull);
+EXPORT_SYMBOL_GPL(mhn_mfp_save);
+EXPORT_SYMBOL_GPL(mhn_mfp_restore);
+
Index: linux-2.6.10/arch/arm/mach-pxa/mhn_gpio.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-pxa/mhn_gpio.c
@@ -0,0 +1,321 @@
+/*
+ * arch/arm/mach-pxa/mhn_gpio.c
+ *
+ * Copyright (C) 2006,  Marvell International Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+
+#include <asm/arch/hardware.h>
+#include <asm/arch/pxa-regs.h>
+#include <asm/arch/mfp.h>
+#include <asm/arch/mhn_gpio.h>
+
+#ifdef CONFIG_GPIO_DEBUG
+#define GPIO_ID_VERIFY(gpio)						\
+	do {								\
+		if ((gpio) > GPIO_ID_MAX) {				\
+			printk(KERN_WARNING "%s: exceeds GPIO range\n",	\
+				__func__);				\
+			return -EINVAL;					\
+		}							\
+	} while (0)
+#else
+#define GPIO_ID_VERIFY(gpio)	do {} while (0)
+#endif
+
+static struct {
+	uint32_t gplr0;
+	uint32_t gplr1;
+	uint32_t gplr2;
+	uint32_t gplr3;
+	uint32_t gpdr0;
+	uint32_t gpdr1;
+	uint32_t gpdr2;
+	uint32_t gpdr3;
+	uint32_t grer0;
+	uint32_t grer1;
+	uint32_t grer2;
+	uint32_t grer3;
+	uint32_t gfer0;
+	uint32_t gfer1;
+	uint32_t gfer2;
+	uint32_t gfer3;
+} gpio_saved_reg;
+
+static DEFINE_SPINLOCK(gpio_spin_lock);
+
+int mhn_gpio_set_direction(int gpio_id, int dir)
+{
+	unsigned long flags;
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+
+	spin_lock_irqsave(&gpio_spin_lock, flags);
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START) {
+		spin_unlock_irqrestore(&gpio_spin_lock, flags);
+		return gpio_exp_set_direction(gpio, dir);
+	}
+#endif
+	if (dir == GPIO_DIR_IN)
+		GCDR(gpio) = 1u << (gpio & 0x1f);
+	else
+		GSDR(gpio) = 1u << (gpio & 0x1f);
+
+	spin_unlock_irqrestore(&gpio_spin_lock, flags);
+
+	return 0;
+}
+
+int mhn_gpio_get_direction(int gpio_id)
+{
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return gpio_exp_get_direction(gpio);
+#endif
+
+	if (GPDR(gpio) & (1u << (gpio & 0x1f)))
+		return GPIO_DIR_OUT;
+	else
+		return GPIO_DIR_IN;
+}
+
+int mhn_gpio_set_level(int gpio_id, int level)
+{
+	unsigned long flags;
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+
+	spin_lock_irqsave(&gpio_spin_lock, flags);
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START) {
+		spin_unlock_irqrestore(&gpio_spin_lock, flags);
+		return gpio_exp_set_level(gpio, level);
+	}
+#endif
+
+	if (level == GPIO_LEVEL_LOW)
+		GPCR(gpio) = 1u << (gpio & 0x1f);
+	else
+		GPSR(gpio) = 1u << (gpio & 0x1f);
+
+	spin_unlock_irqrestore(&gpio_spin_lock, flags);
+
+	return 0;
+}
+
+int mhn_gpio_get_level(int gpio_id)
+{
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return gpio_exp_get_level(gpio);
+#endif
+
+	if (GPLR(gpio) & (1u << (gpio & 0x1f)))
+		return GPIO_LEVEL_HIGH;
+	else
+		return GPIO_LEVEL_LOW;
+}
+
+/* GPIO Expander can be set as only rising or falling edge detect.
+ * It will trigger interrupt when pin state is changed.
+ */
+int mhn_gpio_set_rising_edge_detect(int gpio_id, int enable)
+{
+	unsigned long flags;
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return 0;
+#endif
+
+	spin_lock_irqsave(&gpio_spin_lock, flags);
+
+	if (enable == 0)
+		GCRER(gpio) = 1u << (gpio & 0x1f);
+	else
+		GSRER(gpio) = 1u << (gpio & 0x1f);
+
+	spin_unlock_irqrestore(&gpio_spin_lock, flags);
+
+	return 0;
+}
+
+int mhn_gpio_get_rising_edge_detect(int gpio_id)
+{
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return 0;
+#endif
+
+	if (GRER(gpio) & (1u << (gpio & 0x1f)))
+		return 1;
+
+	return 0;
+}
+
+int mhn_gpio_set_falling_edge_detect(int gpio_id, int enable)
+{
+	unsigned long flags;
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return 0;
+#endif
+
+	spin_lock_irqsave(&gpio_spin_lock, flags);
+
+	if (enable == 0)
+		GCRER(gpio) = 1u << (gpio & 0x1f);
+	else
+		GSRER(gpio) = 1u << (gpio & 0x1f);
+
+	spin_unlock_irqrestore(&gpio_spin_lock, flags);
+
+	return 0;
+}
+
+int mhn_gpio_get_falling_edge_detect(int gpio_id)
+{
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return 0;
+#endif
+
+	if (GFER(gpio) & (1u << (gpio & 0x1f)))
+		return 1;
+
+	return 0;
+}
+
+int mhn_gpio_get_edge_detect_status(int gpio_id)
+{
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return 0;
+#endif
+
+	if (GEDR(gpio) & (1u << (gpio & 0x1f)))
+		return 1;
+
+	return 0;
+}
+
+int mhn_gpio_clear_edge_detect_status(int gpio_id)
+{
+	unsigned long flags;
+	int gpio = MFP2GPIO(gpio_id);
+
+	GPIO_ID_VERIFY(gpio);
+
+#if defined(CONFIG_PXA3xx_GPIOEX)
+	if (gpio >= GPIO_EXP_START)
+		return 0;
+#endif
+
+	spin_lock_irqsave(&gpio_spin_lock, flags);
+
+	GEDR(gpio) = 1u << (gpio & 0x1f);
+
+	spin_unlock_irqrestore(&gpio_spin_lock, flags);
+
+	return 0;
+}
+
+/* The routine of save/restore gpio is used in PM.
+ * The setting of GPIO will be restored.
+ * The status of GPIO Edge Status will be lost.
+ */
+void mhn_gpio_save(void)
+{
+	gpio_saved_reg.gpdr0 = GPDR0;
+	gpio_saved_reg.gpdr1 = GPDR1;
+	gpio_saved_reg.gpdr2 = GPDR2;
+	gpio_saved_reg.gpdr3 = GPDR3;
+
+	gpio_saved_reg.gplr0 = GPLR0;
+	gpio_saved_reg.gplr1 = GPLR1;
+	gpio_saved_reg.gplr2 = GPLR2;
+	gpio_saved_reg.gplr3 = GPLR3;
+
+	gpio_saved_reg.grer0 = GRER0;
+	gpio_saved_reg.grer1 = GRER1;
+	gpio_saved_reg.grer2 = GRER2;
+	gpio_saved_reg.grer3 = GRER3;
+
+	gpio_saved_reg.gfer0 = GFER0;
+	gpio_saved_reg.gfer1 = GFER1;
+	gpio_saved_reg.gfer2 = GFER2;
+	gpio_saved_reg.gfer3 = GFER3;
+}
+
+void mhn_gpio_restore(void)
+{
+	GPDR0 = gpio_saved_reg.gpdr0;
+	GPDR1 = gpio_saved_reg.gpdr1;
+	GPDR2 = gpio_saved_reg.gpdr2;
+	GPDR3 = gpio_saved_reg.gpdr3;
+
+	GPSR0 = gpio_saved_reg.gplr0;
+	GPSR1 = gpio_saved_reg.gplr1;
+	GPSR2 = gpio_saved_reg.gplr2;
+	GPSR3 = gpio_saved_reg.gplr3;
+	GPCR0 = ~(gpio_saved_reg.gplr0);
+	GPCR1 = ~(gpio_saved_reg.gplr1);
+	GPCR2 = ~(gpio_saved_reg.gplr2);
+	GPCR3 = ~(gpio_saved_reg.gplr3);
+
+	GRER0 = gpio_saved_reg.grer0;
+	GRER1 = gpio_saved_reg.grer1;
+	GRER2 = gpio_saved_reg.grer2;
+	GRER3 = gpio_saved_reg.grer3;
+
+	GFER0 = gpio_saved_reg.gfer0;
+	GFER1 = gpio_saved_reg.gfer1;
+	GFER2 = gpio_saved_reg.gfer2;
+	GFER3 = gpio_saved_reg.gfer3;
+}
+
+EXPORT_SYMBOL_GPL(mhn_gpio_get_level);
+EXPORT_SYMBOL_GPL(mhn_gpio_set_level);
+EXPORT_SYMBOL_GPL(mhn_gpio_get_direction);
+EXPORT_SYMBOL_GPL(mhn_gpio_set_direction);
+EXPORT_SYMBOL_GPL(mhn_gpio_set_rising_edge_detect);
+EXPORT_SYMBOL_GPL(mhn_gpio_get_rising_edge_detect);
+EXPORT_SYMBOL_GPL(mhn_gpio_set_falling_edge_detect);
+EXPORT_SYMBOL_GPL(mhn_gpio_get_falling_edge_detect);
+EXPORT_SYMBOL_GPL(mhn_gpio_get_edge_detect_status);
+EXPORT_SYMBOL_GPL(mhn_gpio_clear_edge_detect_status);
+EXPORT_SYMBOL_GPL(mhn_gpio_save);
+EXPORT_SYMBOL_GPL(mhn_gpio_restore);
+
Index: linux-2.6.10/arch/arm/mach-pxa/pxa3xx.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-pxa/pxa3xx.c
@@ -0,0 +1,157 @@
+/*
+ * linux/arch/arm/mach-pxa/pxa3xx.c
+ *
+ * Porting to PXA3xx based on PXA27x.c
+ * Copyright (C) 2006 Marvell International Ltd .
+ *
+ * Code specific to PXA3xx.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/config.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/pm.h>
+
+#include <asm/hardware.h>
+#include <asm/arch/cpu-freq-voltage-mhn.h>
+#include "generic.h"
+
+/* Crystal clock: 13MHz */
+#define BASE_CLK	13000000
+
+/* ACSR field */
+#define ACSR_SMC_MASK	0x03800000	/* Static Memory Controller Frequency Select */
+#define ACSR_SRAM_MASK	0x000c0000	/* SRAM Controller Frequency Select */
+#define ACSR_FC_MASK	0x00030000	/* Frequency Change Frequency Select */
+#define ACSR_HSIO_MASK	0x0000c000	/* High Speed IO Frequency Select */
+#define ACSR_DDR_MASK	0x00003000	/* DDR Memory Controller Frequency Select */
+#define ACSR_XN_MASK	0x00000700	/* Run Mode Frequency to Turbo Mode Frequency Multiplier */
+#define ACSR_XL_MASK	0x0000001f	/* Crystal Frequency to Memory Frequency Multiplier */
+#define ACSR_XPDIS	(1 << 31)
+#define ACSR_SPDIS	(1 << 30)
+#define ACSR_13MEND1	(1 << 27)
+#define ACSR_D0CS	(1 << 26)
+#define ACSR_13MEND2	(1 << 21)
+/*
+ * Get the clock frequency as reflected by CCSR and the turbo flag.
+ * We assume these values have been applied via a fcs.
+ * If info is not 0 we also display the current settings.
+ */
+unsigned int get_clk_frequency_khz(int info)
+{
+	unsigned long acsr_val;
+	int XL, XN, HSS;
+	int clk, s_clk = 0, d0cs = 0;
+
+	acsr_val = ACSR;
+	XL = acsr_val & ACSR_XL_MASK;
+	XN = (acsr_val & ACSR_XN_MASK) >> 8;
+
+	clk = XL * XN * BASE_CLK;
+
+	if (acsr_val & ACSR_D0CS) {
+		d0cs = 1;
+		clk = 60000000;
+	}
+
+	if (info) {
+		if (d0cs) {
+			s_clk = 60000000;
+			printk(KERN_INFO "Run Mode Clock: %dMHz\n",
+					(clk / 1000000));
+			printk(KERN_INFO "High Speed I/O Bus Clock: %dMHz\n",
+					(s_clk / 1000000));
+		} else {
+			HSS = (acsr_val & ACSR_HSIO_MASK) >> 14;
+			switch (HSS) {
+			case 0:
+				s_clk = 104000000;
+				break;
+			case 1:
+				s_clk = 156000000;
+				break;
+			case 2:
+				s_clk = 208000000;
+				break;
+			default:
+				break;
+			}
+			printk(KERN_INFO "Run Mode Clock: %dMHz\n",
+				(XL * BASE_CLK / 1000000));
+			if (XN > 1)
+				printk(KERN_INFO "Turbo Mode Clock: %dMHz\n",
+					(XL * XN * BASE_CLK / 1000000));
+			printk(KERN_INFO "High Speed I/O Bus Clock: %dMHz\n",
+					(s_clk / 1000000));
+		}
+	}
+
+	return (clk / 1000);
+}
+
+/*
+ * Return the current mem clock frequency in units of 10kHz
+ */
+unsigned int get_memclk_frequency_10khz(void)
+{
+	unsigned long acsr_val;
+	int ddr_clk = 0;
+
+	acsr_val = ACSR;
+	if (acsr_val & ACSR_D0CS) {
+		/* Ring Oscillator mode */
+		ddr_clk = 30;
+	} else {
+		switch ((acsr_val & ACSR_DDR_MASK) >> 12) {
+		case 0:
+			ddr_clk = 26;
+			break;
+		case 3:
+			ddr_clk = 260;
+			break;
+		default:
+			break;
+		}
+	}
+	return (ddr_clk * 100);
+}
+
+/*
+ * Return the current LCD clock frequency in units of 10kHz as
+ * LCLK is from High Speed IO Bus Clock
+ */
+unsigned int get_lcdclk_frequency_10khz(void)
+{
+	unsigned long acsr_val;
+	int s_clk=0, HSS;
+
+	acsr_val = ACSR;
+	if (acsr_val & ACSR_D0CS) {
+		/* Ring Oscillator mode */
+		s_clk = 60;
+	} else {
+		HSS = (acsr_val & ACSR_HSIO_MASK) >> 14;
+		switch (HSS) {
+		case 0:
+			s_clk = 104;
+			break;
+		case 1:
+			s_clk = 156;
+			break;
+		case 2:
+			s_clk = 208;
+			break;
+		default:
+			break;
+		}
+	}
+	return (s_clk * 100);
+}
+
+EXPORT_SYMBOL_GPL(get_clk_frequency_khz);
+EXPORT_SYMBOL_GPL(get_memclk_frequency_10khz);
+EXPORT_SYMBOL_GPL(get_lcdclk_frequency_10khz);
Index: linux-2.6.10/arch/arm/mach-pxa/zylonite.c
===================================================================
--- /dev/null
+++ linux-2.6.10/arch/arm/mach-pxa/zylonite.c
@@ -0,0 +1,1066 @@
+/*
+ *  linux/arch/arm/mach-pxa/zylonite.c
+ *
+ *  Support for the Intel Zylonite Development Platform.
+ *
+ *  Author:	Roy Huang
+ *  Created:	Nov 15, 2004
+ *  Copyright:  Marvell International Ltd
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/interrupt.h>
+#include <linux/sched.h>
+#include <linux/bitops.h>
+#include <linux/fb.h>
+#include <linux/root_dev.h>
+#include <linux/delay.h>
+#include <linux/nodemask.h>
+
+#include <asm/types.h>
+#include <asm/setup.h>
+#include <asm/memory.h>
+#include <asm/mach-types.h>
+#include <asm/hardware.h>
+#include <asm/irq.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+#include <asm/mach/irq.h>
+
+#include <asm/arch/pxa-regs.h>
+#include <asm/arch/pxafb.h>
+#include <asm/arch/mfp.h>
+#include <asm/arch/mhn_gpio.h>
+#include <asm/arch/irda.h>
+#include <asm/arch/mmc.h>
+#include "generic.h"
+
+extern int arava_write(u8, u8);
+
+static void __init zylonite_init_irq(void)
+{
+	pxa_init_irq();
+}
+
+#ifdef CONFIG_PXA_IRDA
+static void zylonite_irda_transceiver_mode(struct device *dev, int mode)
+{
+        unsigned long flags;
+	static int irda_mfp_init = 0;
+
+	if (!irda_mfp_init) {
+		printk(KERN_INFO "zylonite_irda_transceiver_mode: init\n");
+		mhn_mfp_set_afds(MFP_CIR_ON_PWM, MFP_AF0, MFP_DS03X);
+		mhn_mfp_set_afds(MFP_IR_SHDN_N_GPIO, MFP_AF0, MFP_DS03X);
+		mhn_gpio_set_direction(MFP_CIR_ON_PWM, GPIO_DIR_OUT);
+		mhn_gpio_set_direction(MFP_IR_SHDN_N_GPIO,  GPIO_DIR_OUT);
+		mhn_gpio_set_level(MFP_CIR_ON_PWM, 0);
+		mhn_gpio_set_level(MFP_IR_SHDN_N_GPIO, 1);
+
+		irda_mfp_init = 1;
+	}
+
+        local_irq_save(flags);
+        if (mode & IR_SIRMODE) {
+		printk(KERN_INFO "zylonite_irda_transceiver_mode: SIR\n");
+		mhn_gpio_set_level(MFP_CIR_ON_PWM, 0);
+		mhn_gpio_set_level(MFP_IR_SHDN_N_GPIO, 0);
+        } else if (mode & IR_FIRMODE) {
+		/* do not support FIR */
+        }
+        if (mode & IR_OFF) {
+		printk(KERN_INFO "zylonite_irda_transceiver_mode: OFF\n");
+		mhn_gpio_set_level(MFP_CIR_ON_PWM, 0);
+		mhn_gpio_set_level(MFP_IR_SHDN_N_GPIO, 1);
+        }
+        local_irq_restore(flags);
+}
+
+static struct pxaficp_platform_data zylonite_ficp_platform_data = {
+	.transceiver_cap  = IR_SIRMODE | IR_OFF,
+	.transceiver_mode = zylonite_irda_transceiver_mode,
+};
+#endif
+
+static struct resource smc91x_resources[] = {
+	{
+		.start	= (ZYLONITE_ETH_PHYS + 0x300),
+		.end	= (ZYLONITE_ETH_PHYS + 0xfffff),
+		.flags	= IORESOURCE_MEM,
+	}, {
+		.start	= IRQ_GPIO(MFP2GPIO(MFP_DEBUG_ETH_INT_GPIO)),
+		.end	= IRQ_GPIO(MFP2GPIO(MFP_DEBUG_ETH_INT_GPIO)),
+		.flags	= IORESOURCE_IRQ,
+	}
+};
+
+static struct platform_device smc91x_device = {
+	.name		= "smc91x",
+	.id		= 0,
+	.num_resources	= ARRAY_SIZE(smc91x_resources),
+	.resource	= smc91x_resources,
+};
+
+#ifdef CONFIG_FB_PXA
+
+static void zylonite_backlight_power(int on)
+{
+	/* MFP for MFP_BACKLIGHT_PWM is supposed to be configured */
+	mhn_gpio_set_direction(MFP_BACKLIGHT_PWM, GPIO_DIR_OUT);
+	mhn_gpio_set_level(MFP_BACKLIGHT_PWM, on);
+}
+
+#ifdef CONFIG_FB_PXA_LCD_QVGA
+static struct pxafb_mach_info toshiba_ltm035a776c __initdata = {
+	.pixclock		= 110000,
+	.xres			= 240,
+	.yres			= 320,
+	.bpp			= 16,
+	.hsync_len		= 4,
+	.left_margin		= 6,
+	.right_margin		= 4,
+	.vsync_len		= 2,
+	.upper_margin		= 2,
+	.lower_margin		= 3,
+	.sync			= FB_SYNC_VERT_HIGH_ACT,
+	.lccr0			= LCCR0_Act,
+	.lccr3			= LCCR3_PCP | LCCR3_HSP,
+	.pxafb_backlight_power	= zylonite_backlight_power,
+	.pxafb_lcd_power	= NULL,
+};
+
+static struct pxafb_mach_info sharp_ls037_qvga __initdata = {
+	.pixclock		= 183333,
+	.xres			= 240,
+	.yres			= 320,
+	.bpp			= 16,
+	.hsync_len		= 4,
+	.left_margin		= 39,
+	.right_margin		= 39,
+	.vsync_len		= 1,
+	.upper_margin		= 2,
+	.lower_margin		= 3,
+	.sync			= 0,
+	.lccr0			= LCCR0_Act,
+	.lccr3			= LCCR3_PCP | LCCR3_HSP | LCCR3_VSP,
+	.pxafb_backlight_power	= zylonite_backlight_power,
+	.pxafb_lcd_power	= NULL,
+};
+#endif
+
+#ifdef CONFIG_FB_PXA_LCD_VGA
+static struct pxafb_mach_info toshiba_ltm04c380k __initdata = {
+	.pixclock		= 50000,
+	.xres			= 640,
+	.yres			= 480,
+	.bpp			= 16,
+	.hsync_len		= 1,
+	.left_margin		= 0x9f,
+	.right_margin		= 1,
+	.vsync_len		= 0x2c,
+	.upper_margin		= 0,
+	.lower_margin		= 0,
+	.sync			= FB_SYNC_HOR_HIGH_ACT|FB_SYNC_VERT_HIGH_ACT,
+	.lccr0			= LCCR0_Act,
+	.lccr3			= LCCR3_PCP,
+	.pxafb_backlight_power	= zylonite_backlight_power,
+	.pxafb_lcd_power	= NULL,
+};
+
+static struct pxafb_mach_info sharp_ls037_vga __initdata = {
+	.pixclock		= 45833,
+	.xres			= 480,
+	.yres			= 640,
+	.bpp			= 16,
+	.hsync_len		= 8,
+	.left_margin		= 81,
+	.right_margin		= 81,
+	.vsync_len		= 1,
+	.upper_margin		= 2,
+	.lower_margin		= 7,
+	.sync			= 0,
+	.lccr0			= LCCR0_Act,
+	.lccr3			= LCCR3_PCP | LCCR3_HSP | LCCR3_VSP,
+	.pxafb_backlight_power	= zylonite_backlight_power,
+	.pxafb_lcd_power	= NULL,
+};
+#endif
+
+#define MMC1_CD0		(GPIO_EXT_TO_IRQ(128))
+#define MMC1_CD1		(GPIO_EXT_TO_IRQ(129))
+
+static int zylonite_mci_init(struct device *dev, irqreturn_t (*zylonite_detect_int)(int, void *, struct pt_regs *), void *data)
+{
+	int err;
+	struct platform_device *pdev = to_platform_device(dev);
+
+	/*
+	 * setup GPIO for Zylonite MMC controller
+	 */
+	if (pdev->id == 0) {
+		printk("init\n");
+		enable_mmc1_pins();
+		mhn_mfp_set_afds(MFP_MMC_CMD_0, MFP_AF4, MFP_DS03X);
+		/* set direction of CD/WP to IN */
+		mhn_gpio_set_direction(MFP_MMC_CD_0_GPIO, GPIO_DIR_IN);
+		mhn_gpio_set_direction(MFP_MMC_WP_0_N_GPIO, GPIO_DIR_IN);
+
+		/* CD is configured to Falling/Rising Edge detect */
+		mhn_gpio_set_falling_edge_detect(MFP_MMC_CD_0_GPIO, 1);
+		mhn_gpio_set_rising_edge_detect (MFP_MMC_CD_0_GPIO, 1);
+
+		err = request_irq(MMC1_CD0, zylonite_detect_int, 0,
+			     "MMC card detect", data);
+		if (err) {
+			printk(KERN_ERR "zylonite_mci_init: MMC/SD: can't request MMC card detect IRQ\n");
+			return -1;
+		}
+		set_irq_type(MMC1_CD0, IRQT_BOTHEDGE);
+	}
+	else if (pdev->id == 1) {
+		enable_mmc2_pins();
+		mhn_gpio_set_direction(MFP_MMC2_CMD, GPIO_DIR_OUT);
+		mhn_gpio_set_level(MFP_MMC2_CMD, GPIO_LEVEL_HIGH);
+	}
+
+	return 0;
+}
+
+static void zylonite_mci_setpower(struct device *dev, unsigned int vdd)
+{
+}
+
+static void zylonite_mci_exit(struct device *dev, void *data)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	if (pdev->id == 0)
+		free_irq(MMC1_CD0, data);
+}
+
+static struct pxamci_platform_data zylonite_mci_platform_data = {
+	.detect_delay	= 20,
+	.ocr_mask	= MMC_VDD_32_33|MMC_VDD_33_34,
+	.init 		= zylonite_mci_init,
+	.setpower 	= zylonite_mci_setpower,
+	.exit		= zylonite_mci_exit,
+};
+
+
+/*
+ * lcd_id - readed from the LCD panel, the newly designed LCD panels
+ * will have a specific ID. The old panel ID is zero. This variable
+ * is made static so that enable_lcd_pins() can initialize the MFP
+ * pins accordindly.
+ *
+ * The LCD ID uses those unused LCD pins, as listed in
+ * zylonite_lcd_id_pins[]
+ */
+static unsigned int lcd_id = 0;
+static unsigned int lcd_orient = 0;
+
+#define NUM_LCD_DETECT_PINS	ARRAY_SIZE(lcd_detect_pins)
+#define	LCD_L_DD_17 		0
+#define	LCD_L_DD_16 		1
+#define	LCD_L_BIAS		2
+#define	LCD_L_LCLK		3
+#define	LCD_L_FCLK		4
+#define	LCD_L_CS		5
+#define	LCD_L_VSYNC		6
+
+static unsigned int lcd_detect_pins[] = {
+	MFP_L_DD_17,   	/* L_DD[17] - ORIENT */
+	MFP_L_DD_16,   	/* L_DD[16] - LCDID[5] */
+	MFP_L_BIAS, 	/* L_BIAS   - LCDID[4] */
+	MFP_L_LCLK, 	/* L_LCLK   - LCDID[3] */
+	MFP_L_FCLK, 	/* L_FCLK   - LCDID[2] */
+	MFP_L_CS,   	/* L_CS     - LCDID[1] */
+	MFP_L_VSYNC,   	/* L_V_SYNC - LCDID[0] */
+};
+
+static uint32_t lcd_detect_pins_mfpr[] = {
+	/* AF0, DS 1X, Pull Neither, Edge Clear */
+	0x8440, 0x8440, 0x8440, 0x8440, 0x8440, 0x8440, 0x8440,
+};
+
+static void pxafb_detect_lcd_panel(void)
+{
+	unsigned int id = 0, i;
+
+	uint32_t lcd_detect_saved_mfpr[NUM_LCD_DETECT_PINS];
+
+	/* save the original MFP settings */
+	for (i = 0; i < NUM_LCD_DETECT_PINS; i++)
+		lcd_detect_saved_mfpr[i] = MFP_REG(lcd_detect_pins[i]);
+
+	for (i = 0; i < NUM_LCD_DETECT_PINS; i++)
+		MFP_REG(lcd_detect_pins[i]) = lcd_detect_pins_mfpr[i];
+	MFP_REG(lcd_detect_pins[i - 1]);
+
+	/* set detect pins as gpio input */
+	for (i = 0; i < 7;i++){
+		mhn_gpio_set_direction(lcd_detect_pins[i], GPIO_DIR_IN);
+	}
+
+	/* get LCD ID */
+	id = 0;
+	id = (mhn_gpio_get_level(lcd_detect_pins[LCD_L_VSYNC]) 	<< 0) |
+ 	     (mhn_gpio_get_level(lcd_detect_pins[LCD_L_CS]) 	<< 1) |
+ 	     (mhn_gpio_get_level(lcd_detect_pins[LCD_L_FCLK])	<< 2) |
+ 	     (mhn_gpio_get_level(lcd_detect_pins[LCD_L_LCLK]) 	<< 3) |
+ 	     (mhn_gpio_get_level(lcd_detect_pins[LCD_L_BIAS]) 	<< 4) |
+ 	     (mhn_gpio_get_level(lcd_detect_pins[LCD_L_DD_16]) 	<< 5);
+
+	/* lcd id, flush out bit 1 */
+	lcd_id = id & 0x3D;
+
+	/* lcd orientation, portrait or landscape */
+	lcd_orient = mhn_gpio_get_level(lcd_detect_pins[LCD_L_DD_17]);
+
+	for (i = 0; i < NUM_LCD_DETECT_PINS; i++)
+		MFP_REG(lcd_detect_pins[i]) = lcd_detect_saved_mfpr[i];
+	MFP_REG(lcd_detect_pins[i - 1]);
+}
+
+static void pxafb_config_lcd_panel(void)
+{
+	if (lcd_id & 0x20) {
+#ifdef CONFIG_FB_PXA_LCD_QVGA
+		set_pxa_fb_info(&sharp_ls037_qvga);
+#endif
+#ifdef CONFIG_FB_PXA_LCD_VGA
+		set_pxa_fb_info(&sharp_ls037_vga);
+#endif
+	} else {
+#ifdef CONFIG_FB_PXA_LCD_QVGA
+		set_pxa_fb_info(&toshiba_ltm035a776c);
+#endif
+#ifdef CONFIG_FB_PXA_LCD_VGA
+		set_pxa_fb_info(&toshiba_ltm04c380k);
+#endif
+	}
+}
+#endif
+
+static struct mhn_pin_config zylonite_eth_pins[] = {
+	MHN_MFP_CFG("ETH nCS3", MFP_DEBUG_ETH_CS_N_GPIO,
+			MFP_DEBUG_ETH_CS_N_GPIO_AF, MFP_DS03X, 0,
+			MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ETH INT",  MFP_DEBUG_ETH_INT_GPIO,
+			MFP_DEBUG_ETH_INT_GPIO_AF,  MFP_DS03X, 0,
+			MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_eth_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_eth_pins, ARRAY_SIZE(zylonite_eth_pins));
+}
+
+static struct mhn_pin_config zylonite_ffuart_pins[] = {
+	MHN_MFP_CFG("FFUART RXD", MFP_FFRXD, MFP_FFRXD_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("FFUART TXD", MFP_FFTXD, MFP_FFTXD_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("FFUART CTS", MFP_FFCTS, MFP_FFCTS_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("FFUART RTS", MFP_FFRTS, MFP_FFRTS_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("FFUART DCD", MFP_FFDCD, MFP_FFDCD_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("FFUART DSR", MFP_FFDSR, MFP_FFDSR_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("FFUART RI",  MFP_FFRI,  MFP_FFRI_AF,  MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("FFUART DTR", MFP_FFDTR, MFP_FFDTR_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+};
+
+static struct mhn_pin_config zylonite_btuart_pins[] = {
+	MHN_MFP_CFG("BTUART RTS", MFP_RSVD_BT_RTS, MFP_RSVD_BT_RTS_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("BTUART RXD", MFP_RSVD_BT_RXD, MFP_RSVD_BT_RXD_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("BTUART TXD", MFP_RSVD_BT_TXD, MFP_RSVD_BT_TXD_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("BTUART CTS", MFP_RSVD_BT_CTS, MFP_RSVD_BT_CTS_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+};
+
+static struct mhn_pin_config zylonite_stuart_pins[] = {
+	MHN_MFP_CFG("STUART TXD", MFP_STD_TXD, MFP_STD_TXD_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("STUART RXD", MFP_STD_RXD, MFP_STD_RXD_AF, MFP_DS03X, 0,
+			MFP_LPM_FLOAT, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_ffuart_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_ffuart_pins,
+			ARRAY_SIZE(zylonite_ffuart_pins));
+}
+
+void zylonite_enable_btuart_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_btuart_pins,
+			ARRAY_SIZE(zylonite_btuart_pins));
+}
+
+void zylonite_enable_stuart_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_stuart_pins,
+			ARRAY_SIZE(zylonite_stuart_pins));
+}
+
+static struct mhn_pin_config zylonite_dfc_pins[] = {
+/*      description,   pin,      alt fn,      drive,  rdh, lpm,   edge */
+	MHN_MFP_CFG("DF INT RnB", MFP_DF_INT_RnB, MFP_DF_INT_RnB_AF,
+			MFP_DS10X, 0, MFP_LPM_FLOAT,     MFP_EDGE_NONE),
+	MHN_MFP_CFG("DF nRE",     MFP_DF_nRE,     MFP_DF_nRE_AF,
+			MFP_DS10X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND nWE",     MFP_DF_nWE,     MFP_DF_nWE_AF,
+			MFP_DS10X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND CLE",     MFP_ND_CLE,     MFP_ND_CLE_AF,
+			MFP_DS10X, 0, MFP_LPM_PULL_LOW,  MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND ALE1",    MFP_DF_nADV1,   MFP_DF_nADV1_AF,
+			MFP_DS10X, 0, MFP_LPM_PULL_LOW,  MFP_EDGE_NONE),
+	MHN_MFP_CFG("DF nCS0",    MFP_DF_NCS0,    MFP_DF_NCS0_AF,
+			MFP_DS10X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("DF nCS1",    MFP_DF_NCS1,    MFP_DF_NCS1_AF,
+			MFP_DS10X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<0>",   MFP_DF_IO_0,    MFP_DF_IO_0_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<1>",   MFP_DF_IO_1,    MFP_DF_IO_1_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<2>",   MFP_DF_IO_2,    MFP_DF_IO_2_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<3>",   MFP_DF_IO_3,    MFP_DF_IO_3_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<4>",   MFP_DF_IO_4,    MFP_DF_IO_4_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<5>",   MFP_DF_IO_5,    MFP_DF_IO_5_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<6>",   MFP_DF_IO_6,    MFP_DF_IO_6_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<7>",   MFP_DF_IO_7,    MFP_DF_IO_7_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<8>",   MFP_DF_IO_8,    MFP_DF_IO_8_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<9>",   MFP_DF_IO_9,    MFP_DF_IO_9_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<10>",  MFP_DF_IO_10,   MFP_DF_IO_10_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<11>",  MFP_DF_IO_11,   MFP_DF_IO_11_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<12>",  MFP_DF_IO_12,   MFP_DF_IO_12_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<13>",  MFP_DF_IO_13,   MFP_DF_IO_13_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<14>",  MFP_DF_IO_14,   MFP_DF_IO_14_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("ND IO<15>",  MFP_DF_IO_15,   MFP_DF_IO_15_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_dfc_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_dfc_pins, ARRAY_SIZE(zylonite_dfc_pins));
+}
+
+static struct mhn_pin_config zylonite_ac97_pins[] = {
+#ifdef CONFIG_AC97_EXTCLK
+/* At this time, the clock of ac97 codec is instead by CLK_POUT. */
+	MHN_MFP_CFG("AC97 SYSCLK", MFP_AC97_SYSCLK,      MFP_AF0,
+			MFP_DS03X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+#else
+	MHN_MFP_CFG("AC97 SYSCLK", MFP_AC97_SYSCLK,      MFP_AC97_SYSCLK_AF,
+			MFP_DS03X, 0, MFP_LPM_DRIVE_LOW, MFP_EDGE_NONE),
+#endif
+	MHN_MFP_CFG("AC97 BITCLK", MFP_AC97_AC97_BITCLK, MFP_AC97_AC97_BITCLK_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT,     MFP_EDGE_NONE),
+	MHN_MFP_CFG("AC97 SYNC",   MFP_AC97_SYNC,        MFP_AC97_SYNC_AF,
+			MFP_DS03X, 0, MFP_LPM_DRIVE_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("AC97 SDOUT",  MFP_AC97_SDATA_OUT,   MFP_AC97_SDATA_OUT_AF,
+			MFP_DS03X, 0, MFP_LPM_DRIVE_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("AC97 SDIN",   MFP_AC97_SDATA_IN_0,  MFP_AC97_SDATA_IN_0_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT,     MFP_EDGE_NONE),
+	MHN_MFP_CFG("AC97 nACRST", MFP_AC97_nACRESET,    MFP_AC97_nACRESET_AF,
+			MFP_DS03X, 0, MFP_LPM_DRIVE_HIGH,MFP_EDGE_NONE),
+};
+
+void zylonite_enable_ac97_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_ac97_pins, ARRAY_SIZE(zylonite_ac97_pins));
+}
+
+static struct mhn_pin_config zylonite_lcd_pins[] = {
+/*    description,   pin,           alt fn,       drive,   rdh, lpm, edge */
+	MHN_MFP_CFG("LCD LDD<0>",  MFP_L_DD_0,  MFP_L_DD_0_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<1>",  MFP_L_DD_1,  MFP_L_DD_1_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<2>",  MFP_L_DD_2,  MFP_L_DD_2_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<3>",  MFP_L_DD_3,  MFP_L_DD_3_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<4>",  MFP_L_DD_4,  MFP_L_DD_4_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<5>",  MFP_L_DD_5,  MFP_L_DD_5_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<6>",  MFP_L_DD_6,  MFP_L_DD_6_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<7>",  MFP_L_DD_7,  MFP_L_DD_7_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<8>",  MFP_L_DD_8,  MFP_L_DD_8_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<9>",  MFP_L_DD_9,  MFP_L_DD_9_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<10>", MFP_L_DD_10, MFP_L_DD_10_AF, MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<11>", MFP_L_DD_11, MFP_L_DD_11_AF, MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<12>", MFP_L_DD_12, MFP_L_DD_12_AF, MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<13>", MFP_L_DD_13, MFP_L_DD_13_AF, MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<14>", MFP_L_DD_14, MFP_L_DD_14_AF, MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<15>", MFP_L_DD_15, MFP_L_DD_15_AF, MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<16>", MFP_L_DD_16, MFP_L_DD_16_AF, MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LDD<17>", MFP_L_DD_17, MFP_AF0,        MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD CS",      MFP_L_CS,    MFP_AF0,        MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD V_SYNC",  MFP_L_VSYNC, MFP_AF0,        MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD FCLK",    MFP_L_FCLK,  MFP_L_FCLK_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD LCLK",    MFP_L_LCLK,  MFP_L_LCLK_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD PCLK",    MFP_L_PCLK,  MFP_L_PCLK_AF,  MFP_DS04X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("LCD BIAS",    MFP_L_BIAS,  MFP_L_BIAS_AF,  MFP_DS01X, 0,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+
+	MHN_MFP_CFG("LCD BKLIGHT", MFP_BACKLIGHT_PWM, MFP_AF0,  MFP_DS12X, 1,
+			MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+};
+
+static struct mhn_pin_config zylonite_mlcd_pins[] = {
+/*   description,  pin,    alt fn,    drive,    rdh, lpm,       edge */
+	MHN_MFP_CFG("MLCD LDD<8>",  MFP_L_LP_DD_8,  MFP_L_LP_DD_8_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<9>",  MFP_L_LP_DD_9,  MFP_L_LP_DD_9_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<10>", MFP_L_LP_DD_10, MFP_L_LP_DD_10_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<11>", MFP_L_LP_DD_11, MFP_L_LP_DD_11_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<12>", MFP_L_LP_DD_12, MFP_L_LP_DD_12_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<13>", MFP_L_LP_DD_13, MFP_L_LP_DD_13_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<14>", MFP_L_LP_DD_14, MFP_L_LP_DD_14_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<15>", MFP_L_LP_DD_15, MFP_L_LP_DD_15_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<16>", MFP_L_LP_DD_16, MFP_L_LP_DD_16_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<17>", MFP_L_LP_DD_17, MFP_L_LP_DD_17_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<0>",  MFP_L_LP_DD_0,  MFP_L_LP_DD_0_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<1>",  MFP_L_LP_DD_1,  MFP_L_LP_DD_1_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<2>",  MFP_L_LP_DD_2,  MFP_L_LP_DD_2_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<3>",  MFP_L_LP_DD_3,  MFP_L_LP_DD_3_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<4>",  MFP_L_LP_DD_4,  MFP_L_LP_DD_4_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<5>",  MFP_L_LP_DD_5,  MFP_L_LP_DD_5_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<6>",  MFP_L_LP_DD_6,  MFP_L_LP_DD_6_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LDD<7>",  MFP_L_LP_DD_7,  MFP_L_LP_DD_7_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD FCLK",    MFP_L_LP_FCLK,  MFP_L_LP_FCLK_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD LCLK",    MFP_L_LP_LCLK,  MFP_L_LP_LCLK_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD PCLK",    MFP_L_LP_PCLK,  MFP_L_LP_PCLK_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MLCD BIAS",    MFP_L_LP_BIAS,  MFP_L_LP_BIAS_AF,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+
+	MHN_MFP_CFG("LCD BKLIGHT",  MFP_BACKLIGHT_PWM, MFP_AF0,
+			MFP_DS08X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+};
+
+static struct mhn_pin_config zylonite_lcd_smart_pins[] = {
+/*          description,   pin,           alt fn,       drive,   rdh, lpm,              edge */
+MHN_MFP_CFG("LCD LDD<0>",  MFP_L_DD_0,  MFP_L_DD_0_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<1>",  MFP_L_DD_1,  MFP_L_DD_1_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<2>",  MFP_L_DD_2,  MFP_L_DD_2_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<3>",  MFP_L_DD_3,  MFP_L_DD_3_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<4>",  MFP_L_DD_4,  MFP_L_DD_4_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<5>",  MFP_L_DD_5,  MFP_L_DD_5_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<6>",  MFP_L_DD_6,  MFP_L_DD_6_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<7>",  MFP_L_DD_7,  MFP_L_DD_7_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<8>",  MFP_L_DD_8,  MFP_L_DD_8_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<9>",  MFP_L_DD_9,  MFP_L_DD_9_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<10>", MFP_L_DD_10, MFP_L_DD_10_AF, MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<11>", MFP_L_DD_11, MFP_L_DD_11_AF, MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<12>", MFP_L_DD_12, MFP_L_DD_12_AF, MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<13>", MFP_L_DD_13, MFP_L_DD_13_AF, MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<14>", MFP_L_DD_14, MFP_L_DD_14_AF, MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<15>", MFP_L_DD_15, MFP_L_DD_15_AF, MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<16>", MFP_L_DD_16, MFP_L_DD_16_AF, MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LDD<17>", MFP_L_DD_17, MFP_AF0,        MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD CS",      MFP_L_CS,    MFP_AF0,        MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD V_SYNC",  MFP_L_VSYNC, MFP_AF0,        MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD FCLK",    MFP_L_FCLK,  MFP_L_FCLK_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD LCLK",    MFP_L_LCLK,  MFP_L_LCLK_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD PCLK",    MFP_L_PCLK,  MFP_L_PCLK_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+MHN_MFP_CFG("LCD BIAS",    MFP_L_BIAS,  MFP_L_BIAS_AF,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+
+MHN_MFP_CFG("LCD BKLIGHT", MFP_BACKLIGHT_PWM, MFP_AF0,  MFP_DS01X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+};
+
+#ifdef CONFIG_FB_PXA
+
+void zylonite_enable_lcd_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_lcd_pins, ARRAY_SIZE(zylonite_lcd_pins));
+	if (lcd_id & 0x20) { /* OLED/VGA/QVGA panel */
+		mhn_gpio_set_direction(MFP_L_DD_17, GPIO_DIR_OUT);
+		mhn_gpio_set_direction(MFP_L_VSYNC, GPIO_DIR_OUT);
+
+		if(lcd_id & 0x01) {  /* REV1.2 Lead_free panel */
+			mhn_gpio_set_level(MFP_L_DD_17, GPIO_LEVEL_LOW);
+#ifdef CONFIG_FB_PXA_LCD_QVGA
+			/* force L_V_SYNC (MODE) HIGH */
+			mhn_gpio_set_level(MFP_L_VSYNC, GPIO_LEVEL_HIGH);
+#endif
+#ifdef CONFIG_FB_PXA_LCD_VGA
+			/* force L_V_SYNC (MODE) LOW */
+			mhn_gpio_set_level(MFP_L_VSYNC, GPIO_LEVEL_LOW);
+#endif
+		} else { /* REV1.1 Lead panel */
+			mhn_mfp_set_afds(MFP_L_BIAS, MFP_AF0, MFP_DS01X);
+			mhn_gpio_set_direction(MFP_L_BIAS, GPIO_DIR_OUT);
+			mhn_gpio_set_level(MFP_L_BIAS, GPIO_LEVEL_LOW);
+
+		mhn_gpio_set_level(MFP_L_DD_17, GPIO_LEVEL_LOW);
+#ifdef CONFIG_FB_PXA_LCD_QVGA
+			/* force L_V_SYNC (MODE) LOW */
+			mhn_gpio_set_level(MFP_L_VSYNC, GPIO_LEVEL_LOW);
+#endif
+#ifdef CONFIG_FB_PXA_LCD_VGA
+			/* force L_V_SYNC (MODE) HIGH */
+			mhn_gpio_set_level(MFP_L_VSYNC, GPIO_LEVEL_HIGH);
+#endif
+		}
+	}
+}
+
+void zylonite_enable_mlcd_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_mlcd_pins, ARRAY_SIZE(zylonite_mlcd_pins));
+}
+
+#endif /* CONFIG_FB_PXA */
+
+static struct mhn_pin_config zylonite_i2c_pins[] = {
+	MHN_MFP_CFG("I2C SCL", MFP_SCL, MFP_SCL_AF, MFP_DS03X, 0,
+			MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("I2C SDA", MFP_SDA, MFP_SDA_AF, MFP_DS03X, 0,
+			MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_lcd_smart_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_lcd_smart_pins, ARRAY_SIZE(zylonite_lcd_smart_pins));
+
+	mhn_gpio_set_direction(MFP_L_DD_17, GPIO_DIR_OUT);
+	mhn_gpio_set_direction(MFP_L_VSYNC, GPIO_DIR_OUT);
+	mhn_gpio_set_level(MFP_L_DD_17, GPIO_LEVEL_HIGH);
+	mhn_gpio_set_level(MFP_L_VSYNC, GPIO_LEVEL_LOW);
+}
+
+void zylonite_enable_i2c_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_i2c_pins, ARRAY_SIZE(zylonite_i2c_pins));
+}
+
+static struct mhn_pin_config zylonite_cif_pins[] = {
+	MHN_MFP_CFG("CIF DD<0>",  MFP_CIF_DD_0,         MFP_CIF_DD_0_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<1>",  MFP_CIF_DD_1,         MFP_CIF_DD_1_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<2>",  MFP_CIF_DD_2,         MFP_CIF_DD_2_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<3>",  MFP_CIF_DD_3,         MFP_CIF_DD_3_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<4>",  MFP_CIF_DD_4,         MFP_CIF_DD_4_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<5>",  MFP_CIF_DD_5,         MFP_CIF_DD_5_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<6>",  MFP_CIF_DD_6,         MFP_CIF_DD_6_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<7>",  MFP_CIF_DD_7,         MFP_CIF_DD_7_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<8>",  MFP_CIF_DD_8,         MFP_CIF_DD_8_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF DD<9>",  MFP_CIF_DD_9,         MFP_CIF_DD_9_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF MCLK",   MFP_CIF_MCLK,         MFP_CIF_MCLK_AF,
+			MFP_DS04X, 0, MFP_LPM_PULL_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF PCLK",   MFP_CIF_PCLK,         MFP_CIF_PCLK_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF HSYNC",  MFP_CIF_HSYNC,        MFP_CIF_HSYNC_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF VSYNC",  MFP_CIF_VSYNC,        MFP_CIF_VSYNC_AF,
+			MFP_DS04X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF HIPWDN", MFP_CIF_HI_PWDN_GPI0, MFP_CIF_HI_PWDN_GPI0_AF,
+			MFP_DS04X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("CIF LOPWDN", MFP_CIF_LO_PWDN_GPI0, MFP_CIF_LO_PWDN_GPI0_AF,
+			MFP_DS04X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_cif_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_cif_pins, ARRAY_SIZE(zylonite_cif_pins));
+}
+
+
+static struct mhn_pin_config zylonite_keyp_pins[] = {
+	MHN_MFP_CFG("KEYP DKIN0",  MFP_KP_DKIN_0,  MFP_KP_DKIN_0_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP DKIN1",  MFP_KP_DKIN_1,  MFP_KP_DKIN_1_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN0",  MFP_KP_MKIN_0,  MFP_KP_MKIN_0_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN1",  MFP_KP_MKIN_1,  MFP_KP_MKIN_1_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN2",  MFP_KP_MKIN_2,  MFP_KP_MKIN_2_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN3",  MFP_KP_MKIN_3,  MFP_KP_MKIN_3_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN4",  MFP_KP_MKIN_4,  MFP_KP_MKIN_4_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN5",  MFP_KP_MKIN_5,  MFP_KP_MKIN_5_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN6",  MFP_KP_MKIN_6,  MFP_KP_MKIN_6_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKIN7",  MFP_KP_MKIN_7,  MFP_KP_MKIN_7_AF,
+			MFP_DS03X, 0, MFP_LPM_FLOAT, MFP_EDGE_BOTH),
+	MHN_MFP_CFG("KEYP MKOUT0", MFP_KP_MKOUT_0, MFP_KP_MKOUT_0_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("KEYP MKOUT1", MFP_KP_MKOUT_1, MFP_KP_MKOUT_1_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("KEYP MKOUT2", MFP_KP_MKOUT_2, MFP_KP_MKOUT_2_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("KEYP MKOUT3", MFP_KP_MKOUT_3, MFP_KP_MKOUT_3_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("KEYP MKOUT4", MFP_KP_MKOUT_4, MFP_KP_MKOUT_4_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("KEYP MKOUT5", MFP_KP_MKOUT_5, MFP_KP_MKOUT_5_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("KEYP MKOUT6", MFP_KP_MKOUT_6, MFP_KP_MKOUT_6_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("KEYP MKOUT7", MFP_KP_MKOUT_7, MFP_KP_MKOUT_7_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_keyp_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_keyp_pins,
+			ARRAY_SIZE(zylonite_keyp_pins));
+}
+
+static struct mhn_pin_config zylonite_mmc1_pins[] = {
+	MHN_MFP_CFG("MMC1 CD0",  MFP_MMC_CD_0_GPIO,    MFP_MMC_CD_0_GPIO_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 CD1",  MFP_MMC_CD_1_GPIO,   MFP_MMC_CD_1_GPIO_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 WP0",  MFP_MMC_WP_0_N_GPIO, MFP_MMC_WP_0_N_GPIO_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 WP1",  MFP_MMC_WP_1_N_GPIO, MFP_MMC_WP_1_N_GPIO_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 D0",   MFP_MMC_DAT0,        MFP_MMC_DAT0_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 D1",   MFP_MMC_DAT1,        MFP_MMC_DAT1_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 D2",   MFP_MMC_DAT2,        MFP_MMC_DAT2_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 D3",   MFP_MMC_DAT3,        MFP_MMC_DAT3_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 CLK",  MFP_MMC_CLK,         MFP_MMC_CLK_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 CMD0", MFP_MMC_CMD_0,       MFP_AF0,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC1 CMD1", MFP_MMC_CMD_1,       MFP_AF0,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+static struct mhn_pin_config zylonite_mmc2_pins[] = {
+	MHN_MFP_CFG("MMC2 D0",  MFP_MMC2_DAT0,     MFP_MMC2_DAT0_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC2 D1",  MFP_MMC2_DAT1,     MFP_MMC2_DAT1_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC2 D2",  MFP_MMC2_DAT2_CS0, MFP_MMC2_DAT2_CS0_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC2 D3",  MFP_MMC2_DAT3_CS1, MFP_MMC2_DAT3_CS1_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC2 CLK", MFP_MMC2_CLK,      MFP_MMC2_CLK_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("MMC2 CMD", MFP_MMC2_CMD,      MFP_MMC2_CMD_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_mmc1_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_mmc1_pins,
+			ARRAY_SIZE(zylonite_mmc1_pins));
+}
+
+void zylonite_enable_mmc2_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_mmc2_pins,
+			ARRAY_SIZE(zylonite_mmc2_pins));
+}
+
+
+static struct mhn_pin_config zylonite_ssp2_pins[] = {
+	MHN_MFP_CFG("SSP2 SCLK", MFP_SSP_2_CLK, MFP_SSP_2_CLK_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP2 SFRM", MFP_SSP_2_FRM, MFP_SSP_2_FRM_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP2 TXD",  MFP_SSP_2_TXD, MFP_SSP_2_TXD_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP2 RXD",  MFP_SSP_2_RXD, MFP_SSP_2_RXD_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+static struct mhn_pin_config zylonite_ssp3_pins[] = {
+	MHN_MFP_CFG("SSP3 BITCLK", MFP_SSP_AUDIO_SCLK, MFP_SSP_AUDIO_SCLK_AF,
+			MFP_DS08X, 0, MFP_LPM_FLOAT, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP3 FRMCLK", MFP_SSP_AUDIO_FRM,  MFP_SSP_AUDIO_FRM_AF,
+			MFP_DS08X, 0, MFP_LPM_DRIVE_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP3 TXDCLK", MFP_SSP_AUDIO_TXD,  MFP_SSP_AUDIO_TXD_AF,
+			MFP_DS08X, 0, MFP_LPM_DRIVE_LOW, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP3 RXDCLK", MFP_SSP_AUDIO_RXD,  MFP_SSP_AUDIO_RXD_AF,
+			MFP_DS08X, 0, MFP_LPM_FLOAT,MFP_EDGE_NONE),
+
+};
+
+static struct mhn_pin_config zylonite_ssp4_pins[] = {
+	MHN_MFP_CFG("SSP4 SCLK", MFP_RSVD_SSP_4_CLK, MFP_RSVD_SSP_4_CLK_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP4 SFRM", MFP_RSVD_SSP_4_FRM, MFP_RSVD_SSP_4_FRM_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP4 TXD",  MFP_RSVD_SSP_4_TXD, MFP_RSVD_SSP_4_TXD_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("SSP4 RXD",  MFP_RSVD_SSP_4_RXD, MFP_RSVD_SSP_4_RXD_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_ssp2_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_ssp2_pins, ARRAY_SIZE(zylonite_ssp2_pins));
+}
+
+void zylonite_enable_ssp3_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_ssp3_pins, ARRAY_SIZE(zylonite_ssp3_pins));
+}
+
+void zylonite_enable_ssp4_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_ssp4_pins, ARRAY_SIZE(zylonite_ssp4_pins));
+}
+
+static struct mhn_pin_config zylonite_otg_pins[] = {
+	MHN_MFP_CFG("OTG SR", MFP_USB_OTG_SR, MFP_USB_OTG_SR_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("OTG EN", MFP_OTG_EN,     MFP_OTG_EN_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("OTG ID", MFP_OTG_ID,     MFP_OTG_ID_AF,
+			MFP_DS01X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_otg_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_otg_pins, ARRAY_SIZE(zylonite_otg_pins));
+}
+
+static struct mhn_pin_config zylonite_usbh_pins[] = {
+	MHN_MFP_CFG("USBH PWR", MFP_USBHPWR, MFP_USBHPWR_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("USBH PEN", MFP_USBHPEN, MFP_USBHPEN_AF,
+			MFP_DS03X, 1, MFP_LPM_DRIVE_LOW, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_usbh_pins(void)
+{
+	mhn_mfp_set_configs(zylonite_usbh_pins,
+			ARRAY_SIZE(zylonite_usbh_pins));
+}
+
+#define U2D_MFP_DS	MFP_DS08X
+static struct mhn_pin_config zylonite_u2d_pins[] = {
+MHN_MFP_CFG("U2D UTM CLK",	MFP_U2D_UTM_CLK, 	MFP_U2D_UTM_CLK_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA0",  	MFP_U2D_DATA0,		MFP_U2D_DATA0_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA1",  	MFP_U2D_DATA1,		MFP_U2D_DATA1_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA2",  	MFP_U2D_DATA2, 		MFP_U2D_DATA2_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA3",  	MFP_U2D_DATA3, 		MFP_U2D_DATA3_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA4",  	MFP_U2D_DATA4, 		MFP_U2D_DATA4_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA5",  	MFP_U2D_DATA5, 		MFP_U2D_DATA5_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA6",  	MFP_U2D_DATA6, 		MFP_U2D_DATA6_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D DATA7",  	MFP_U2D_DATA7, 		MFP_U2D_DATA7_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D RESET",  	MFP_U2D_RESET, 		MFP_U2D_RESET_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D XCVR SEL", 	MFP_U2D_XCVR_SELECT, 	MFP_U2D_XCVR_SELECT_AF,
+	       	U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D TERM SEL", 	MFP_U2D_TERM_SELECT, 	MFP_U2D_TERM_SELECT_AF,
+	       	U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D SUSPEND",  	MFP_U2D_SUSPENDM_X, 	MFP_U2D_SUSPENDM_X_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D LS0",  	MFP_U2D_LINESTATE0, 	MFP_U2D_LINESTATE0_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D LS1",		MFP_U2D_LINESTATE1, 	MFP_U2D_LINESTATE1_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D TXVALID",  	MFP_U2D_TXVALID,	MFP_U2D_TXVALID_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D TXREADY",  	MFP_U2D_TXREADY, 	MFP_U2D_TXREADY_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D RXREADY",  	MFP_U2D_RXVALID, 	MFP_U2D_RXVALID_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D RXACTIVE", 	MFP_U2D_RXACTIVE, 	MFP_U2D_RXACTIVE_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D RXERROR",  	MFP_U2D_RXERROR, 	MFP_U2D_RXERROR_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D OPMODE0",  	MFP_U2D_OPMODE0, 	MFP_U2D_OPMODE0_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+MHN_MFP_CFG("U2D OPMODE1",  	MFP_U2D_OPMODE1, 	MFP_U2D_OPMODE1_AF,
+		U2D_MFP_DS, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_u2d_pins(void)
+{
+	mhn_gpio_set_direction(MFP_UTMI_SWITCH, GPIO_DIR_OUT);
+	mhn_gpio_set_level(MFP_UTMI_SWITCH, GPIO_LEVEL_HIGH);
+
+	mhn_gpio_set_direction(MFP_UTMI_TEST_EN, GPIO_DIR_OUT);
+	mhn_gpio_set_level(MFP_UTMI_TEST_EN, GPIO_LEVEL_LOW);
+
+	mhn_mfp_set_configs(zylonite_u2d_pins, ARRAY_SIZE(zylonite_u2d_pins));
+}
+
+#ifdef CONFIG_PXA3xx_GPIOEX
+static struct mhn_pin_config gpio_exp_pins[] = {
+	MHN_MFP_CFG("GPIO_EXP_0_N", MFP_GPIO_EXP_0_N, MFP_GPIO_EXP_0_N_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+	MHN_MFP_CFG("GPIO_EXP_1_N", MFP_GPIO_EXP_1_N, MFP_GPIO_EXP_1_N_AF,
+			MFP_DS03X, 0, MFP_LPM_PULL_HIGH, MFP_EDGE_NONE),
+};
+
+void zylonite_enable_gpio_exp_pins(void)
+{
+	mhn_mfp_set_configs(gpio_exp_pins, ARRAY_SIZE(gpio_exp_pins));
+	mhn_gpio_set_direction(MFP_GPIO_EXP_0_N, GPIO_DIR_IN);
+	mhn_gpio_set_direction(MFP_GPIO_EXP_1_N, GPIO_DIR_IN);
+}
+#endif
+
+static void __init zylonite_init(void)
+{
+	/*
+	 * Note: We depend that the bootloader set
+	 * the correct value to MSC register for SMC91x.
+	 */
+	platform_device_register(&smc91x_device);
+
+#ifdef CONFIG_FB_PXA
+	pxafb_detect_lcd_panel();
+	pxafb_config_lcd_panel();
+#endif
+
+#ifdef CONFIG_PXA_IRDA
+	pxa_set_ficp_info(&zylonite_ficp_platform_data);
+#endif
+
+	zylonite_enable_eth_pins();
+	zylonite_enable_i2c_pins();
+
+	zylonite_enable_ac97_pins();
+	zylonite_enable_keyp_pins();
+
+	zylonite_enable_ffuart_pins();
+
+#ifdef CONFIG_MMC
+        pxa_set_mci_info(&zylonite_mci_platform_data);
+#endif
+}
+
+#ifdef CONFIG_DISCONTIGMEM
+static void __init
+fixup_zylonite(struct machine_desc *desc, struct tag *tags,
+                char **cmdline, struct meminfo *mi)
+{
+	int nid;
+	mi->nr_banks = NR_NODES;
+	for (nid=0; nid < mi->nr_banks; nid++)
+		SET_NODE(mi, nid);
+}
+#endif
+
+MACHINE_START(ZYLONITE, "Intel PXA3xx Development Platform (aka Zylonite)")
+	.phys_ram       = 0x80000000,
+	.phys_io        = 0x40000000,
+	.param_offset   = 0x80000100,
+	.io_pg_offst    = (io_p2v(0x40000000) >> 18) & 0xfffc,
+#ifdef CONFIG_DISCONTIGMEM
+        .fixup          = fixup_zylonite,
+#endif
+	.map_io         = pxa_map_io,
+	.init_irq       = zylonite_init_irq,
+	.timer          = &pxa_timer,
+	.init_machine   = zylonite_init,
+MACHINE_END
+
+EXPORT_SYMBOL_GPL(zylonite_enable_eth_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_i2c_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_dfc_pins);
+#ifdef CONFIG_FB_PXA
+EXPORT_SYMBOL_GPL(zylonite_enable_lcd_pins);
+#endif
+EXPORT_SYMBOL_GPL(zylonite_enable_cif_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_keyp_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_ac97_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_mmc1_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_mmc2_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_ffuart_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_btuart_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_stuart_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_u2d_pins);
+
+EXPORT_SYMBOL_GPL(zylonite_enable_otg_pins);
+EXPORT_SYMBOL_GPL(zylonite_enable_ssp3_pins);
Index: linux-2.6.10/include/asm-arm/arch-pxa/arava.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-pxa/arava.h
@@ -0,0 +1,110 @@
+/*
+ * include/asm-arm/arch-pxa/arava.h
+ *
+ * Copyright (C) 2006, Marvell International Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef _ARAVA_H_
+#define _ARAVA_H_
+#include <linux/i2c.h>
+#include <linux/i2c-pxa.h>
+
+/* SYSMON */
+#define ARAVA_CHIP_ID		0x00
+#define ARAVA_EVENT_A 		0x01
+#define ARAVA_EVENT_B 		0x02
+#define ARAVA_EVENT_C 		0x03
+#define ARAVA_STATUS  		0x04
+#define ARAVA_IRQ_MASK_A 	0x05
+#define ARAVA_IRQ_MASK_B 	0x06
+#define ARAVA_IRQ_MASK_C 	0x07
+#define ARAVA_SYSCTRL_A 	0x08
+#define ARAVA_SYSCTRL_B		0x09
+#define ARAVA_SYSCTRL_C 	0x80
+#define ARAVA_FAULT_LOG		0x0A
+
+/* REG */
+#define ARAVA_LDO1011		0x10
+#define ARAVA_LDO15		0x11
+#define ARAVA_LDO1416		0x12
+#define ARAVA_LDO1819		0x13
+#define ARAVA_LDO17_SIMCP0	0x14
+#define ARAVA_BUCK2DVC1		0x15
+#define ARAVA_BUCK2DVC2		0x16
+#define ARAVA_REGCTRL1		0x17
+#define ARAVA_REGCTRL2		0x18
+#define ARAVA_USBPUMP		0x19
+#define ARAVA_APPSLEEP_CTRL	0x1A
+#define ARAVA_STARTUP_CTRL	0x1B
+
+/* LED - ignored now. Skip */
+#define ARAVA_LED1_CTRL		0x20
+#define ARAVA_LED2_CTRL		0x21
+#define ARAVA_LED3_CTRL		0x22
+#define ARAVA_LED4_CTRL		0x23
+#define ARAVA_LEDPC_CTRL	0x24
+#define ARAVA_WLED_CTRL		0x25
+
+/* MISC */
+#define ARAVA_MISCA 		0x26
+#define ARAVA_MISCB 		0x27
+
+/* Charge */
+#define ARAVA_CHARGE_CTRL	0x28
+#define ARAVA_CCTR_CTRL		0x29
+#define ARAVA_TCTR_CTRL		0x2A
+#define ARAVA_CHARGE_PULSE	0x2B
+
+#define ARAVA_ADDRESS 		0x49
+
+
+#define VBASE			1100
+#define VSTEP			50
+#define VMAX			2650
+
+#define VBUCK2BASE		850
+#define VBUCK2STEP		25
+#define VBUCK2MAX		1625
+
+
+
+extern int arava_write(u8 reg, u8 val);
+extern int arava_read(u8 reg, u8 *pval);
+
+extern int arava_get_vcc_core(void);
+extern int arava_get_vcc_sram(void);
+extern int arava_get_vcc_io(void);
+extern int arava_set_vcc_io(unsigned int);
+extern int arava_get_vcc_msl(void);
+extern int arava_set_vcc_msl(unsigned int);
+extern int arava_get_vcc_lcd(void);
+extern int arava_set_vcc_lcd(unsigned int);
+extern int arava_get_vcc_usb(void);
+extern int arava_set_vcc_usb(unsigned int);
+extern int arava_get_vcc_card0(void);
+extern int arava_set_vcc_card0(unsigned int);
+extern int arava_get_vcc_card1(void);
+extern int arava_set_vcc_card1(unsigned int);
+extern int arava_get_vcc_mem(void);
+extern int arava_set_vcc_mem(unsigned int);
+extern int arava_get_vcc_df(void);
+extern int arava_set_vcc_df(unsigned int);
+extern int arava_get_vcc_ci(void);
+extern int arava_set_vcc_ci(unsigned int);
+extern int arava_get_vcc_tsi(void);
+extern int arava_set_vcc_tsi(unsigned int);
+extern int arava_write(u8 reg, u8 val);
+extern int arava_read(u8 reg, u8 * pval);
+extern int arava_set_vcc_sram(unsigned int mv);
+extern int arava_set_vcc_core(unsigned int mv);
+extern int arava_get_sramvcc(u32 *pmv);
+extern int arava_get_corevcc(u32 *pmv);
+
+extern int arava_lcdbklight_adj(unsigned int);
+
+#endif
+
Index: linux-2.6.10/include/asm-arm/arch-pxa/cpu-freq-voltage-mhn.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-pxa/cpu-freq-voltage-mhn.h
@@ -0,0 +1,182 @@
+/*
+ * Copyright (C) 2003-2004 Marvell International Ltd.
+ *
+ * This software program is licensed subject to the GNU General Public License
+ * (GPL).Version 2,June 1991, available at http://www.fsf.org/copyleft/gpl.html
+ *
+ */
+
+#ifndef CPU_FREQ_VOLTAGE_MHN_H
+#define CPU_FREQ_VOLTAGE_MHN_H
+
+#ifdef __KERNEL__
+enum {
+	FV_NOTIFIER_QUERY_SET = 1,
+	FV_NOTIFIER_PRE_SET = 2,
+	FV_NOTIFIER_POST_SET = 3,
+};
+#endif
+
+/*
+ * frequency and voltage change mode
+ */
+typedef unsigned int pm_fv_mode_t;
+
+/* Driver clock from System PLL during Xscale PLL frequency change */
+typedef pm_fv_mode_t FV_MODE;
+#define FV_MODE_SET_CFS_XSPCLK_OFFSET	0
+#define FV_MODE_SET_CFS_XSPCLK_MASK	0x3
+
+/* Drive 156M clock from System PLL when core freq change */
+#define	FV_MODE_SET_CFS_XSPCLK_156M	0
+/* Drive 208M clock from System PLL when core freq change */
+#define	FV_MODE_SET_CFS_XSPCLK_208M	1
+/* Drive 312M clock from System PLL when core freq change */
+#define	FV_MODE_SET_CFS_XSPCLK_312M	2
+/* No clock to core until core freq change */
+#define	FV_MODE_SET_CFS_XSPCLK_DIS	3
+
+/* Set SMCFS clock in ACCR */
+#define FV_ACCR_SMCFS_78M	0
+#define FV_ACCR_SMCFS_104M	2
+#define FV_ACCR_SMCFS_208M	5
+
+/* Set SFLFS clock in ACCR */
+#define FV_ACCR_SFLFS_104M	0
+#define FV_ACCR_SFLFS_156M	1
+#define FV_ACCR_SFLFS_208M	2
+#define FV_ACCR_SFLFS_312M	3
+
+/* Set HSS clock in ACCR */
+#define FV_ACCR_HSS_104M	0
+#define FV_ACCR_HSS_156M	1
+#define FV_ACCR_HSS_208M	2
+
+/* Set DMSFS in ACCR */
+#define FV_ACCR_DMCFS_26M	0
+#define FV_ACCR_DMCFS_260M	3
+
+/* Set df_clkdiv in MEMCLKCFG */
+#define FV_DF_CLKDIV_1 		1
+#define FV_DF_CLKDIV_2 		2
+#define FV_DF_CLKDIV_4 		3
+
+/* set empi_clkdiv in MEMCLKCFG  */
+#define FV_EMPI_CLKDIV_1 	1
+#define FV_EMPI_CLKDIV_2 	2
+#define FV_EMPI_CLKDIV_4 	3
+
+#define	DVFM_MAX_OP		20
+
+/* ACCR macros*/
+#define ACCR_XL_MASK    	0x0000001f
+#define ACCR_XN_MASK    	0x00000700
+#define ACCR_DMCFS_MASK      	0x00003000
+#define ACCR_HSS_MASK 		0x0000c000
+#define ACCR_XSPCLK_MASK   	0x00030000
+#define ACCR_SFLFS_MASK		0x000c0000
+#define ACCR_13MEND2_MASK       0x00200000
+#define ACCR_SMCFS_MASK         0x03800000
+#define ACCR_D0CS_MASK          0x04000000
+#define ACCR_13MEND1_MASK       0x08000000
+#define ACCR_SPDIS_MASK         0x40000000
+#define ACCR_XPDIS_MASK         0x80000000
+#define ACCR_SPCLK_MASK         0x10000000
+#define ACCR_XPCLK_MASK         0x20000000
+
+#define ACCR_G_XL(accr)			((accr) & 0x1F)
+#define ACCR_G_XN(accr)			(((accr) >> 8) & 0x7)
+#define ACCR_G_SMCFS(accr)		(((accr) >> 23)  & 0x7)
+#define ACCR_G_SFLFS(accr)		(((accr) >> 18)  & 0x3)
+#define ACCR_G_HSS(accr)		(((accr) >> 14)  & 0x3)
+#define ACCR_G_DMCFS(accr)		(((accr) >> 12)  & 0x3)
+#define ACCR_G_XSPCLK(accr)		(((accr) >> 16)  & 0x3)
+#define ACCR_G_D0CS(accr)          (((accr) >> 26)  & 0x1)
+#define ACCR_G_SPDIS(accr)          (((accr) >> 30)  & 0x1)
+#define ACCR_G_XPDIS(accr)          (((accr) >> 31)  & 0x1)
+#define ACCR_G_D0CS(accr)          (((accr) >> 26)  & 0x1)
+#define ACCR_S_XL(accr, xl)		(((accr) & ~0x1F) | xl)
+#define ACCR_S_XN(accr, xn)		((((accr) & ~(0x7 << 8)) | ((xn) << 8)))
+#define ACCR_S_SMCFS(accr, smcfs)	((((accr) & ~(0x7 << 23)) | ((smcfs) << 23)))
+#define ACCR_S_SFLFS(accr, sflfs)	((((accr) & ~(0x3 << 18)) | ((sflfs) << 18)))
+#define ACCR_S_HSS(accr, hss)		((((accr) & ~(0x3 << 14)) | ((hss) << 14)))
+#define ACCR_S_DMCFS(accr, dmcfs)	((((accr) & ~(0x3 << 12)) | ((dmcfs) << 12)))
+#define ACCR_S_XSPCLK(accr, xspclk)	((((accr) & ~(0x3 << 16)) | ((xspclk) << 16)))
+#define ACCR_S_D0CS(accr, d0cs)	((((accr) & ~(0x1 << 26)) | ((d0cs) << 26)))
+#define ACCR_S_SPDIS(accr, spdis)	((((accr) & ~(0x1 << 30)) | ((spdis) << 30)))
+#define ACCR_S_XPDIS(accr, xpdis)	((((accr) & ~(0x1 << 31)) | ((xpdis) << 31)))
+#define XCLKCFG_G_T(clkcfg)	((clkcfg) & 0x1)
+#define XCLKCFG_SET(f, t)	(((f) << 0x1) | (t))
+#define ACSR_ACCR_MASK				0xc78cf71f
+
+#define MEMCLKCFG_G_DFCLKDIV(memclkcfg)   (((memclkcfg) >> 16)  & 0x7)
+#define MEMCLKCFG_G_EMPICLKDIV(memclkcfg) (((memclkcfg) >> 0)  & 0x7)
+#define MEMCLKCFG_S_DFCLKDIV(memclkcfg, df_clk)  \
+						(((memclkcfg) & ~0x00070000) | ((df_clk) << 16 ))
+#define MEMCLKCFG_S_EMPICLKDIV(memclkcfg, empi_clk)  \
+						(((memclkcfg) & ~0x00000007) | ((empi_clk) << 0 ))
+
+/* flags to mark those frequencies and voltages to be changed  */
+#define FV_SET_CFS	0x0001	/* set core frequency */
+#define FV_SET_SMCFS	0x0002
+#define FV_SET_SFLFS	0x0004
+#define FV_SET_HSS	0x0008
+#define FV_SET_DMCFS	0x0010
+#define FV_SET_DFCLK	0x0020
+#define FV_SET_EMPICLK	0x0040
+#define FV_SET_D0CS	0x0080
+#define FV_SET_CV	0x8000	/* set VccSram and VccApp */
+
+/*
+ * operating point definition
+ */
+struct mhn_fv_info {
+	unsigned long xl;
+	unsigned long xn;
+	unsigned int vcc_core;
+	unsigned int vcc_sram;
+	unsigned long smcfs;
+	unsigned long sflfs;
+	unsigned long hss;
+	unsigned long dmcfs;
+	unsigned long df_clk;
+	unsigned long empi_clk;
+	unsigned long d0cs;
+	/* WARNING: above fields must be consistent with PM_FV_INFO!!! */
+
+	unsigned long lpj;	/* New value for loops_per_jiffy */
+};
+
+#ifdef __KERNEL__
+struct mhn_fv_notifier_info {
+	struct mhn_fv_info cur;
+	struct mhn_fv_info next;
+	unsigned int mode;
+	/* unsigned int flag; */
+};
+
+struct mhn_fv_notifier {
+	char *name;
+	void *client_data;
+	int priority;
+	struct list_head notifier_list;
+	/* struct list_head deny_list; */
+	int ret_code;
+	int (*notifier_call) (unsigned int, void *, void *);
+};
+
+extern int mhn_fv_register_notifier(struct mhn_fv_notifier *);
+extern int mhn_fv_unregister_notifier(struct mhn_fv_notifier *);
+
+extern void mhn_set_hss(unsigned int hss);
+extern int mhn_fv_set_op(unsigned int op, unsigned int mode);
+extern int mhn_fv_get_op(void);
+extern int mhn_fv_get_op_count(void);
+extern int mhn_fv_get_op_info(unsigned int op, struct mhn_fv_info *info);
+extern int mhn_fv_get_def_op(void);
+extern int mhn_fv_add_op(struct mhn_fv_info *info);
+extern void mhn_fv_restore(unsigned int saved_op);
+
+#endif
+
+#endif
Index: linux-2.6.10/include/asm-arm/arch-pxa/dma.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/dma.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/dma.h
@@ -35,7 +35,7 @@ typedef enum {
 	DMA_PRIO_LOW = 2
 } pxa_dma_prio;
 
-#if defined(CONFIG_PXA27x)
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 
 #define PXA_DMA_CHANNELS	32
 
Index: linux-2.6.10/include/asm-arm/arch-pxa/entry-macro.S
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/entry-macro.S
+++ linux-2.6.10/include/asm-arm/arch-pxa/entry-macro.S
@@ -12,7 +12,7 @@
 		.endm
 
 		.macro	get_irqnr_and_base, irqnr, irqstat, base, tmp
-#ifdef CONFIG_PXA27x
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 		mrc	p6, 0, \irqstat, c0, c0, 0		@ ICIP
 		mrc	p6, 0, \irqnr, c1, c0, 0		@ ICMR
 #else
@@ -27,5 +27,20 @@
 		and	\irqstat, \irqstat, \irqnr
 		clz	\irqnr, \irqstat
 		rsb	\irqnr, \irqnr, #(31 - PXA_IRQ_SKIP)
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
+		b	1002f
+#endif
 1001:
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
+		mrc	p6, 0, \irqstat, c6, c0, 0      @ ICIP2
+		mrc	p6, 0, \irqnr, c7, c0, 0        @ ICMR2
+		ands	\irqstat, \irqstat, \irqnr
+		beq	1002f
+		rsb	\irqnr, \irqstat, #0
+		and	\irqstat, \irqstat, \irqnr
+		clz	\irqnr, \irqstat
+		rsb	\irqnr, \irqnr, #31
+		add	\irqnr, \irqnr, #(32 - PXA_IRQ_SKIP)
+1002:
+#endif
 		.endm
Index: linux-2.6.10/include/asm-arm/arch-pxa/hardware.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/hardware.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/hardware.h
@@ -39,30 +39,68 @@
  * Note that not all PXA2xx chips implement all those addresses, and the
  * kernel only maps the minimum needed range of this mapping.
  */
+
+#ifndef CONFIG_PXA3xx
 #define io_p2v(x) (0xf2000000 + ((x) & 0x01ffffff) + (((x) & 0x1c000000) >> 1))
 #define io_v2p(x) (0x3c000000 + ((x) & 0x01ffffff) + (((x) & 0x0e000000) << 1))
 
-#ifndef __ASSEMBLY__
-
-#if 0
-# define __REG(x)	(*((volatile u32 *)io_p2v(x)))
 #else
+
+/* There are too many IO area needed to map, so I divide them into 3 areas
+ * 0x40000000 - 0x41ffffff <--> 0xf6000000 - 0xf7ffffff  Devs
+ */
+
+#define io_p2v(x)  ((((x) & 0xfc000000)>>4) + 0xf2000000 + ((x)&0x01ffffff))
+#define io_v2p(x)  (((((x) - 0xf2000000)&0xfc000000)<<4) + ((x)&0x01ffffff))
+
+/*
+ * 0x42000000 - 0x421fffff <--> 0xf8000000 - 0xf81fffff  MMC2 & USIM2
+ * 0x43000000 - 0x430fffff <--> 0xf8200000 - 0xf82fffff  Caddo
+ * 0x43100000 - 0x431fffff <--> 0xf8300000 - 0xf83fffff  NAND
+ * 0x44000000 - 0x440fffff <--> 0xf8400000 - 0xf84fffff  LCD
+ * 0x46000000 - 0x460fffff <--> 0xf8800000 - 0xf88fffff  Mini LCD
+ * 0x48100000 - 0x481fffff <--> 0xf8d00000 - 0xf8dfffff  Dynamic Mem Ctl
+ * 0x4a000000 - 0x4a0fffff <--> 0xf9000000 - 0xf90fffff  Static Mem Ctl
+ * 0x4c000000 - 0x4c0fffff <--> 0xf9400000 - 0xf94fffff  USB Host
+ */
+
+#define io_p2v_2(x)	(((((x) - 0x42000000) & 0xff000000) >> 3) + 0xf8000000\
+ 			+ ((x) & 0x001fffff))
+#define io_v2p_2(x)	(((((x) & 0xffe00000) - 0xf8000000) << 3) + 0x42000000\
+				+ (x & 0x001fffff))
 /*
- * This __REG() version gives the same results as the one above,  except
- * that we are fooling gcc somehow so it generates far better and smaller
- * assembly code for access to contigous registers.  It's a shame that gcc
- * doesn't guess this by itself.
+ * 0x50000000 - 0x500fffff <--> 0xfa000000 - 0xfa0fffff  Camera Interface
+ * 0x54000000 - 0x540fffff <--> 0xfa400000 - 0xfa4fffff  2D Graphics Ctrl
+ * 0x54100000 - 0x541fffff <--> 0xfa500000 - 0xfa5fffff  USB Device 2.0 Ctrl
+ * 0x58000000 - 0x580fffff <--> 0xfa800000 - 0xfa8fffff  Internal SRAM Ctrl
  */
+
+#define io_p2v_3(x)	((((x) & 0xfc000000) >> 4) + 0xf5000000 + \
+				((x) & 0x001fffff))
+#define io_v2p_3(x)	(((((x) - 0xf5000000) & 0x0fc00000) << 4) + \
+				((x) & 0x001fffff))
+#endif /* CONFIG_PXA3xx */
+
+#ifndef __ASSEMBLY__
 #include <asm/types.h>
-typedef struct { volatile u32 offset[4096]; } __regbase;
-# define __REGP(x)	((__regbase *)((x)&~4095))->offset[((x)&4095)>>2]
-# define __REG(x)	__REGP(io_p2v(x))
+# define __REG(x)	(*((volatile u32 *)io_p2v(x)))
+
+/* __REG_2 is for NAND, LCD etc.
+ * __REG_3 is for Camera Interface, 2D Graphics, U2D etc.*/
+
+#ifdef CONFIG_PXA3xx
+#define __REG_2(x)	(*((volatile u32 *)io_p2v_2(x)))
+#define __REG_3(x)	(*((volatile u32 *)io_p2v_3(x)))
+#define __REG2_2(x,y)	(*(volatile u32 *)((u32)&__REG_2(x) + (y)))
+#define __REG2_3(x,y)	(*(volatile u32 *)((u32)&__REG_3(x) + (y)))
+
+#define __PREG_2(x)	(io_v2p_2((u32)&(x)))
+#define __PREG_3(x)	(io_v2p_3((u32)&(x)))
 #endif
 
 /* With indexed regs we don't want to feed the index through io_p2v()
    especially if it is a variable, otherwise horrible code will result. */
 # define __REG2(x,y)     (*(volatile u32 *)((u32)&__REG(x) + (y)))
-
 # define __PREG(x)	(io_v2p((u32)&(x)))
 
 #else
@@ -70,10 +108,20 @@ typedef struct { volatile u32 offset[409
 # define __REG(x)	io_p2v(x)
 # define __PREG(x)	io_v2p(x)
 
-#endif
+# define __REG_2(x)	io_p2v_2(x)
+# define __PREG_2(x)	io_v2p_2(x)
+
+# define __REG_3(x)	io_p2v_3(x)
+# define __PREG_3(x)	io_v2p_3(x)
+
+#endif	/* #ifndef __ASSEMBLY__ */
 
 #ifndef __ASSEMBLY__
 
+#ifdef CONFIG_MACH_ZYLONITE
+#include <asm/arch/zylonite.h>
+#endif
+
 /*
  * Handy routine to set GPIO alternate functions
  */
@@ -86,7 +134,9 @@ extern void pxa_set_cken(int clock, int 
 
 /*
  * return current memory and LCD clock frequency in units of 10kHz
+ * return current CPU clock frequency in units of kHz
  */
+extern unsigned int get_clk_frequency_khz(int info);
 extern unsigned int get_memclk_frequency_10khz(void);
 extern unsigned int get_lcdclk_frequency_10khz(void);
 
Index: linux-2.6.10/include/asm-arm/arch-pxa/irqs.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/irqs.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/irqs.h
@@ -12,7 +12,7 @@
 
 #include <linux/config.h>
 
-#ifdef CONFIG_PXA27x
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 #define PXA_IRQ_SKIP	0
 #else
 #define PXA_IRQ_SKIP	7
@@ -25,7 +25,11 @@
 #define IRQ_USBH2	PXA_IRQ(2)	/* USB Host interrupt 1 (OHCI) */
 #define IRQ_USBH1	PXA_IRQ(3)	/* USB Host interrupt 2 (non-OHCI) */
 #define IRQ_KEYPAD	PXA_IRQ(4)	/* Key pad controller */
+
+#ifndef CONFIG_PXA3xx
 #define IRQ_MEMSTK	PXA_IRQ(5)	/* Memory Stick interrupt */
+#endif
+
 #define IRQ_PWRI2C	PXA_IRQ(6)	/* Power I2C interrupt */
 #define IRQ_HWUART	PXA_IRQ(7)	/* HWUART Transmit/Receive/Error (PXA26x) */
 #define IRQ_OST_4_11	PXA_IRQ(7)	/* OS timer 4-11 matches (PXA27x) */
@@ -42,7 +46,11 @@
 #define IRQ_SSP2	PXA_IRQ(16)	/* SSP2 interrupt (PXA27x) */
 #define	IRQ_LCD		PXA_IRQ(17)	/* LCD Controller Service Request */
 #define	IRQ_I2C		PXA_IRQ(18)	/* I2C Service Request */
+
+#ifndef CONFIG_PXA3xx
 #define	IRQ_ICP		PXA_IRQ(19)	/* ICP Transmit/Receive/Error */
+#endif
+
 #define	IRQ_STUART	PXA_IRQ(20)	/* STUART Transmit/Receive/Error */
 #define	IRQ_BTUART	PXA_IRQ(21)	/* BTUART Transmit/Receive/Error */
 #define	IRQ_FFUART	PXA_IRQ(22)	/* FFUART Transmit/Receive/Error*/
@@ -56,12 +64,34 @@
 #define	IRQ_RTC1Hz	PXA_IRQ(30)	/* RTC HZ Clock Tick */
 #define	IRQ_RTCAlrm	PXA_IRQ(31)	/* RTC Alarm */
 
-#ifdef CONFIG_PXA27x
+#ifdef CONFIG_PXA3xx
+#define IRQ_TPM		PXA_IRQ(32)
+#define IRQ_CAMERA	PXA_IRQ(33)
+#define IRQ_CIR		PXA_IRQ(34)
+#define IRQ_TSI		PXA_IRQ(36)
+#define IRQ_USIM2	PXA_IRQ(38)
+#define IRQ_GRPHICS	PXA_IRQ(39)
+#define IRQ_MMC2	PXA_IRQ(41)
+#define IRQ_ONEWIRE	PXA_IRQ(44)
+#define IRQ_NAND	PXA_IRQ(45)
+#define IRQ_USB2	PXA_IRQ(46)
+#define IRQ_SGPPMU	PXA_IRQ(47)
+#define IRQ_WAKEUP1	PXA_IRQ(49)
+#define IRQ_WAKEUP2	PXA_IRQ(50)
+#define IRQ_DMEMC	PXA_IRQ(51)
+#define IRQ_BCCU	PXA_IRQ(52)
+
+#define PXA_INTERNAL_IRQS 53
+
+#elif defined(CONFIG_PXA27x)
+
 #define IRQ_TPM		PXA_IRQ(32)	/* TPM interrupt */
 #define IRQ_CAMERA	PXA_IRQ(33)	/* Camera Interface */
 
 #define PXA_INTERNAL_IRQS 34
+
 #else
+
 #define PXA_INTERNAL_IRQS 32
 #endif
 
@@ -75,12 +105,20 @@
 
 #if defined(CONFIG_PXA25x)
 #define PXA_LAST_GPIO	80
-#elif defined(CONFIG_PXA27x)
+#elif defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 #define PXA_LAST_GPIO	127
 #endif
 
 #define ARCH_TIMER_IRQ	IRQ_OST0
 
+#if	defined(CONFIG_PXA3xx)
+#define	GPIO_EXT_TO_IRQ(x)	((x) - PXA_LAST_GPIO + IRQ_GPIO(PXA_LAST_GPIO))
+#define	IRQ_TO_GPIO_EXT(x)	((x) - IRQ_GPIO(PXA_LAST_GPIO) + PXA_LAST_GPIO)
+#define	IRQ_GPIO_EXT0	IRQ_GPIO(18)
+#define	IRQ_GPIO_EXT1	IRQ_GPIO(19)
+#endif
+
+
 /*
  * The next 16 interrupts are for board specific purposes.  Since
  * the kernel can only run on one machine at a time, we can re-use
@@ -88,7 +126,19 @@
  * within sensible limits.
  */
 #define IRQ_BOARD_START		(IRQ_GPIO(PXA_LAST_GPIO) + 1)
+
+#if defined(CONFIG_PXA3xx)
+
+#define IRQ_BOARD_END		(IRQ_BOARD_START + 32)
+
+#define	IRQ_GPIO_EXT0_START	(IRQ_BOARD_START)
+#define	IRQ_GPIO_EXT0_END	(IRQ_BOARD_START + 16)
+
+#define	IRQ_GPIO_EXT1_START	(IRQ_GPIO_EXT0_END + 1)
+#define	IRQ_GPIO_EXT1_END	(IRQ_GPIO_EXT1_START + 16)
+#else
 #define IRQ_BOARD_END		(IRQ_BOARD_START + 16)
+#endif
 
 #define IRQ_SA1111_START	(IRQ_BOARD_END)
 #define IRQ_GPAIN0		(IRQ_BOARD_END + 0)
@@ -151,7 +201,8 @@
 #ifdef CONFIG_SA1111
 #define NR_IRQS			(IRQ_S1_BVD1_STSCHG + 1)
 #elif defined(CONFIG_ARCH_LUBBOCK) || \
-      defined(CONFIG_MACH_MAINSTONE)
+      defined(CONFIG_MACH_MAINSTONE) || \
+      defined(CONFIG_MACH_ZYLONITE)
 #define NR_IRQS			(IRQ_BOARD_END)
 #else
 #define NR_IRQS			(IRQ_BOARD_START)
Index: linux-2.6.10/include/asm-arm/arch-pxa/memory.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/memory.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/memory.h
@@ -15,7 +15,11 @@
 /*
  * Physical DRAM offset.
  */
+#ifdef CONFIG_PXA3xx
+#define PHYS_OFFSET	(0x80000000UL)
+#else
 #define PHYS_OFFSET	(0xa0000000UL)
+#endif
 
 /*
  * Virtual view <-> DMA view memory address translations
Index: linux-2.6.10/include/asm-arm/arch-pxa/mfp.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-pxa/mfp.h
@@ -0,0 +1,2584 @@
+/*
+ * include/asm-arm/arch-pxa/mfp.h
+ *
+ * Copyright (C) 2006, Marvell International Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef _MHN_MFP_H
+#define _MHN_MFP_H
+
+#include <linux/config.h>
+
+typedef unsigned int mfp_pin_t;
+
+/*
+ * Although the structure below uses bit fields, it is never used
+ * to map to register content; instead, macros PIN2REG/REG2PIN are
+ * used. So __attribute__(packed) is not necessary here
+ */
+struct mhn_pin_config {
+	mfp_pin_t    mfp_pin;
+	unsigned int reserved:16;
+	unsigned int af_sel:3;
+	unsigned int edge_rise_en:1;
+	unsigned int edge_fall_en:1;
+	unsigned int edge_clear:1;
+	unsigned int sleep_oe_n:1;
+	unsigned int sleep_data:1;
+	unsigned int sleep_sel:1;
+	unsigned int drive:3;
+	unsigned int pulldown_en:1;
+	unsigned int pullup_en:1;
+	unsigned int pull_sel:1;
+};
+
+/*
+ Table that determines the low power modes outputs, with actual settings
+ used in parentheses for don't-care values.  Except for the float output,
+ the configured driven and pulled levels match.  So if there is a need
+ for non-LPM pulled output, the same configuration could probably be
+ used.
+
+ Output value    sleep_oe_n  sleep_data  pullup_en   pulldown_en pull_sel
+                  (bit 7)     (bit 8)     (bit 14d)   (bit 13d)
+
+ Drive 0             0          0           0           X (1)      0
+ Drive 1             0          1           X (1)       0	   0
+ Pull hi (1)         1          X(1)        1           0	   0
+ Pull lo (0)         1          X(0)        0           1	   0
+ Z (float)           1          X(0)        0           0	   0
+ */
+#define MFP_LPM_DRIVE_LOW	0x8
+#define MFP_LPM_DRIVE_HIGH    	0x6
+#define MFP_LPM_PULL_HIGH     	0x7
+#define MFP_LPM_PULL_LOW      	0x9
+#define MFP_LPM_FLOAT         	0x1
+#define MFP_LPM_PULL_NEITHER	0x0
+
+/*
+ * The pullup and pulldown state of the MFP pin is by default determined by
+ * selected alternate function. In case some buggy devices need to override
+ * this default behavior, mhn_mfp_set_pull() can be invoked with one of the
+ * following definition as the parameter.
+ *
+ * Definition       pull_sel  pullup_en  pulldown_en
+ * MFP_PULL_HIGH        1         1        0
+ * MFP_PULL_LOW         1         0        1
+ * MFP_PULL_BOTH        1         1        1
+ * MFP_PULL_NONE        1         0        0
+ * MFP_PULL_DEFAULT     0         X        X
+ *
+ * NOTE: the function mhn_mfp_set_pull() will modify the bits of PULLUP_EN
+ * and PULLDOWN_EN, which will cause potential conflicts with the low power
+ * mode setting. Device drivers should take care of such conflicts, restore
+ * the low power mode setting before entering low power mode if possible.
+ */
+#define MFP_PULL_BOTH		(0x7u)
+#define MFP_PULL_HIGH		(0x6u)
+#define MFP_PULL_LOW		(0x5u)
+#define MFP_PULL_NONE		(0x4u)
+#define MFP_PULL_DEFAULT	(0x0u)
+
+#define MFP_AF0			(0)
+#define MFP_AF1			(1)
+#define MFP_AF2			(2)
+#define MFP_AF3			(3)
+#define MFP_AF4			(4)
+#define MFP_AF5			(5)
+#define MFP_AF6			(6)
+#define MFP_AF7			(7)
+#define MFP_DS01X		(0)
+#define MFP_DS02X		(1)
+#define MFP_DS03X		(2)
+#define MFP_DS04X		(3)
+#define MFP_DS06X		(4)
+#define MFP_DS08X		(5)
+#define MFP_DS10X		(6)
+#define MFP_DS12X		(7)
+
+#define MFP_EDGE_BOTH		0x3
+#define MFP_EDGE_RISE		0x2
+#define MFP_EDGE_FALL		0x1
+#define MFP_EDGE_NONE		0x0
+
+#define MFP_AF_MASK		0x0007
+#define MFP_DRV_MASK		0x1c00
+#define MFP_RDH_MASK		0x0200
+#define MFP_LPM_MASK		0xe180
+#define MFP_PULL_MASK		0xe000
+#define MFP_EDGE_MASK		0x0070
+
+#define MHN_MFP_CFG(desc, pin, af, drv, rdh, lpm, edge) \
+{							\
+	.mfp_pin = pin,					\
+	.af_sel	 = af,					\
+	.reserved	= 0,				\
+	.drive		= drv,				\
+	.sleep_sel	= rdh,				\
+	.sleep_oe_n	= ((lpm) & 0x1),		\
+	.sleep_data	= (((lpm) & 0x2)  >>1),		\
+	.pullup_en	= (((lpm) & 0x4)  >>2),		\
+	.pulldown_en	= (((lpm) & 0x8)  >>3),		\
+	.pull_sel	= (((lpm) & 0x10) >>4),		\
+	.edge_clear	= (!(edge)),			\
+	.edge_fall_en	= ((edge) & 0x1),		\
+	.edge_rise_en	= (((edge) & 0x2) >>1),		\
+}
+
+#define MFP_OFFSET(pin)	(((pin) >> 16) & 0xffffU)
+#define MFP_REG(pin)	__REG(0x40E10000 + MFP_OFFSET(pin))
+
+#define MFPR_ALT_OFFSET		0
+#define MFPR_ERE_OFFSET		4
+#define MFPR_EFE_OFFSET		5
+#define MFPR_EC_OFFSET		6
+#define MFPR_SON_OFFSET		7
+#define MFPR_SD_OFFSET		8
+#define MFPR_SS_OFFSET		9
+#define MFPR_DRV_OFFSET		10
+#define MFPR_PD_OFFSET		13
+#define MFPR_PU_OFFSET		14
+#define MFPR_PS_OFFSET		15
+
+#define PIN2REG(pin_config)					\
+		(pin_config->af_sel << MFPR_ALT_OFFSET) | 	\
+                (pin_config->edge_rise_en << MFPR_ERE_OFFSET ) |\
+                (pin_config->edge_fall_en << MFPR_EFE_OFFSET ) |\
+                (pin_config->edge_clear << MFPR_EC_OFFSET ) |	\
+                (pin_config->sleep_oe_n << MFPR_SON_OFFSET ) |	\
+                (pin_config->sleep_data << MFPR_SD_OFFSET ) |	\
+                (pin_config->sleep_sel << MFPR_SS_OFFSET ) |	\
+                (pin_config->drive << MFPR_DRV_OFFSET ) |	\
+                (pin_config->pulldown_en << MFPR_PD_OFFSET ) |	\
+                (pin_config->pullup_en << MFPR_PU_OFFSET ) |	\
+                (pin_config->pull_sel << MFPR_PS_OFFSET );
+
+
+#if defined(CONFIG_PXA3xx)
+#define	MFP_PIN_GPIO0		((0x00B4 << 16) | (0))
+#define	MFP_PIN_GPIO1		((0x00B8 << 16) | (1))
+#define	MFP_PIN_GPIO2		((0x00BC << 16) | (2))
+#define	MFP_PIN_GPIO3		((0x027C << 16) | (3))
+#define	MFP_PIN_GPIO4		((0x0280 << 16) | (4))
+#define MFP_PIN_DF_SCLK_E_MFPR	((0x0250 << 16) | (0xff))
+#define	MFP_PIN_nBE0		((0x0204 << 16) | (0xff))
+#define	MFP_PIN_nBE1		((0x0208 << 16) | (0xff))
+#define	MFP_PIN_DF_ALE_nWE	((0x020C << 16) | (0xff))
+#define	MFP_PIN_DF_INT_RnB	((0x00C8 << 16) | (0xff))
+#define	MFP_PIN_DF_nCS0		((0x0248 << 16) | (0xff))
+#define	MFP_PIN_DF_nCS1		((0x0278 << 16) | (0xff))
+#define	MFP_PIN_DF_nWE		((0x00CC << 16) | (0xff))
+#define	MFP_PIN_DF_nRE		((0x0200 << 16) | (0xff))
+#define	MFP_PIN_nLUA		((0x0244 << 16) | (0xff))
+#define	MFP_PIN_nLLA		((0x0254 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR0	((0x0210 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR1	((0x0214 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR2	((0x0218 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR3	((0x021C << 16) | (0xff))
+#define MFP_PIN_CLE_nOE		((0x0240 << 16) | (0xff))
+#define	MFP_PIN_DF_IO0		((0x0220 << 16) | (0xff))
+#define	MFP_PIN_DF_IO8		((0x0224 << 16) | (0xff))
+#define	MFP_PIN_DF_IO1		((0x0228 << 16) | (0xff))
+#define	MFP_PIN_DF_IO9		((0x022C << 16) | (0xff))
+#define	MFP_PIN_DF_IO2		((0x0230 << 16) | (0xff))
+#define	MFP_PIN_DF_IO10		((0x0234 << 16) | (0xff))
+#define	MFP_PIN_DF_IO3		((0x0238 << 16) | (0xff))
+#define	MFP_PIN_DF_IO11		((0x023C << 16) | (0xff))
+#define	MFP_PIN_DF_IO4		((0x0258 << 16) | (0xff))
+#define	MFP_PIN_DF_IO12		((0x025C << 16) | (0xff))
+#define	MFP_PIN_DF_IO5		((0x0260 << 16) | (0xff))
+#define	MFP_PIN_DF_IO13		((0x0264 << 16) | (0xff))
+#define	MFP_PIN_DF_IO6		((0x0268 << 16) | (0xff))
+#define	MFP_PIN_DF_IO14		((0x026C << 16) | (0xff))
+#define	MFP_PIN_DF_IO7		((0x0270 << 16) | (0xff))
+#define	MFP_PIN_DF_IO15		((0x0274 << 16) | (0xff))
+#define	MFP_PIN_GPIO5		((0x0284 << 16) | (5))
+#define	MFP_PIN_GPIO6		((0x0288 << 16) | (6))
+#define	MFP_PIN_GPIO7		((0x028C << 16) | (7))
+#define	MFP_PIN_GPIO8		((0x0290 << 16) | (8))
+#define	MFP_PIN_GPIO9		((0x0294 << 16) | (9))
+#define	MFP_PIN_GPIO10		((0x0298 << 16) | (9))
+#define	MFP_PIN_GPIO11		((0x029C << 16) | (11))
+#define	MFP_PIN_GPIO12		((0x02A0 << 16) | (12))
+#define	MFP_PIN_GPIO13		((0x02A4 << 16) | (13))
+#define	MFP_PIN_GPIO14		((0x02A8 << 16) | (14))
+#define	MFP_PIN_GPIO15		((0x02AC << 16) | (15))
+#define	MFP_PIN_GPIO16		((0x02B0 << 16) | (16))
+#define	MFP_PIN_GPIO17		((0x02B4 << 16) | (17))
+#define	MFP_PIN_GPIO18		((0x02B8 << 16) | (18))
+#define	MFP_PIN_GPIO19		((0x02BC << 16) | (19))
+#define	MFP_PIN_GPIO20		((0x02C0 << 16) | (20))
+#define	MFP_PIN_GPIO21		((0x02C4 << 16) | (21))
+#define	MFP_PIN_GPIO22		((0x02C8 << 16) | (22))
+#define	MFP_PIN_GPIO23		((0x02CC << 16) | (23))
+#define	MFP_PIN_GPIO24		((0x02D0 << 16) | (24))
+#define	MFP_PIN_GPIO25		((0x02D4 << 16) | (25))
+#define	MFP_PIN_GPIO26		((0x02D8 << 16) | (26))
+#define	MFP_PIN_GPIO27		((0x0400 << 16) | (27))
+#define	MFP_PIN_GPIO28		((0x0404 << 16) | (28))
+#define	MFP_PIN_GPIO29		((0x0408 << 16) | (29))
+#define	MFP_PIN_GPIO30		((0x040C << 16) | (30))
+#define	MFP_PIN_GPIO31		((0x0410 << 16) | (31))
+#define	MFP_PIN_GPIO32		((0x0414 << 16) | (32))
+#define	MFP_PIN_GPIO33		((0x0418 << 16) | (33))
+#define	MFP_PIN_GPIO34		((0x041C << 16) | (34))
+#define	MFP_PIN_GPIO35		((0x0420 << 16) | (35))
+#define	MFP_PIN_GPIO36		((0x0424 << 16) | (36))
+#define	MFP_PIN_GPIO37		((0x0428 << 16) | (37))
+#define	MFP_PIN_GPIO38		((0x042C << 16) | (38))
+#define	MFP_PIN_GPIO39		((0x0430 << 16) | (39))
+#define	MFP_PIN_GPIO40		((0x0434 << 16) | (40))
+#define	MFP_PIN_GPIO41		((0x0438 << 16) | (41))
+#define	MFP_PIN_GPIO42		((0x043C << 16) | (42))
+#define	MFP_PIN_GPIO43		((0x0440 << 16) | (43))
+#define	MFP_PIN_GPIO44		((0x0444 << 16) | (44))
+#define	MFP_PIN_GPIO45		((0x0448 << 16) | (45))
+#define	MFP_PIN_GPIO46		((0x044C << 16) | (46))
+#define	MFP_PIN_GPIO47		((0x0450 << 16) | (47))
+#define	MFP_PIN_GPIO48		((0x0454 << 16) | (48))
+#define	MFP_PIN_GPIO49		((0x0458 << 16) | (49))
+#define	MFP_PIN_GPIO50		((0x045C << 16) | (50))
+#define	MFP_PIN_GPIO51		((0x0460 << 16) | (51))
+#define	MFP_PIN_GPIO52		((0x0464 << 16) | (52))
+#define	MFP_PIN_GPIO53		((0x0468 << 16) | (53))
+#define	MFP_PIN_GPIO54		((0x046C << 16) | (54))
+#define	MFP_PIN_GPIO55		((0x0470 << 16) | (55))
+#define	MFP_PIN_GPIO56		((0x0474 << 16) | (56))
+#define	MFP_PIN_GPIO57		((0x0478 << 16) | (57))
+#define	MFP_PIN_GPIO58		((0x047C << 16) | (58))
+#define	MFP_PIN_GPIO59		((0x0480 << 16) | (59))
+#define	MFP_PIN_GPIO60		((0x0484 << 16) | (60))
+#define	MFP_PIN_GPIO61		((0x0488 << 16) | (61))
+#define	MFP_PIN_GPIO62		((0x048C << 16) | (62))
+#define	MFP_PIN_GPIO63		((0x0490 << 16) | (63))
+#define	MFP_PIN_GPIO64		((0x0494 << 16) | (64))
+#define	MFP_PIN_GPIO65		((0x0498 << 16) | (65))
+#define	MFP_PIN_GPIO66		((0x049C << 16) | (66))
+#define	MFP_PIN_GPIO67		((0x04A0 << 16) | (67))
+#define	MFP_PIN_GPIO68		((0x04A4 << 16) | (68))
+#define	MFP_PIN_GPIO69		((0x04A8 << 16) | (69))
+#define	MFP_PIN_GPIO70		((0x04AC << 16) | (70))
+#define	MFP_PIN_GPIO71		((0x04B0 << 16) | (71))
+#define	MFP_PIN_GPIO72		((0x04B4 << 16) | (72))
+#define	MFP_PIN_GPIO73		((0x04B8 << 16) | (73))
+#define	MFP_PIN_GPIO74		((0x04BC << 16) | (74))
+#define	MFP_PIN_GPIO75		((0x04C0 << 16) | (75))
+#define	MFP_PIN_GPIO76		((0x04C4 << 16) | (76))
+#define	MFP_PIN_GPIO77		((0x04C8 << 16) | (77))
+#define	MFP_PIN_GPIO78		((0x04CC << 16) | (78))
+#define	MFP_PIN_GPIO79		((0x04D0 << 16) | (79))
+#define	MFP_PIN_GPIO80		((0x04D4 << 16) | (80))
+#define	MFP_PIN_GPIO81		((0x04D8 << 16) | (81))
+#define	MFP_PIN_GPIO82		((0x04DC << 16) | (82))
+#define	MFP_PIN_GPIO83		((0x04E0 << 16) | (83))
+#define	MFP_PIN_GPIO84		((0x04E4 << 16) | (84))
+#define	MFP_PIN_GPIO85		((0x04E8 << 16) | (85))
+#define	MFP_PIN_GPIO86		((0x04EC << 16) | (86))
+#define	MFP_PIN_GPIO87		((0x04F0 << 16) | (87))
+#define	MFP_PIN_GPIO88		((0x04F4 << 16) | (88))
+#define	MFP_PIN_GPIO89		((0x04F8 << 16) | (89))
+#define	MFP_PIN_GPIO90		((0x04FC << 16) | (90))
+#define	MFP_PIN_GPIO91		((0x0500 << 16) | (91))
+#define	MFP_PIN_GPIO92		((0x0504 << 16) | (92))
+#define	MFP_PIN_GPIO93		((0x0508 << 16) | (93))
+#define	MFP_PIN_GPIO94		((0x050C << 16) | (94))
+#define	MFP_PIN_GPIO95		((0x0510 << 16) | (95))
+#define	MFP_PIN_GPIO96		((0x0514 << 16) | (96))
+#define	MFP_PIN_GPIO97		((0x0518 << 16) | (97))
+#define	MFP_PIN_GPIO98		((0x051C << 16) | (98))
+#define	MFP_PIN_GPIO99		((0x0600 << 16) | (99))
+#define	MFP_PIN_GPIO100		((0x0604 << 16) | (100))
+#define	MFP_PIN_GPIO101		((0x0608 << 16) | (101))
+#define	MFP_PIN_GPIO102		((0x060C << 16) | (102))
+#define	MFP_PIN_GPIO103		((0x0610 << 16) | (103))
+#define	MFP_PIN_GPIO104		((0x0614 << 16) | (104))
+#define	MFP_PIN_GPIO105		((0x0618 << 16) | (105))
+#define	MFP_PIN_GPIO106		((0x061C << 16) | (106))
+#define	MFP_PIN_GPIO107		((0x0620 << 16) | (107))
+#define	MFP_PIN_GPIO108		((0x0624 << 16) | (108))
+#define	MFP_PIN_GPIO109		((0x0628 << 16) | (109))
+#define	MFP_PIN_GPIO110		((0x062C << 16) | (110))
+#define	MFP_PIN_GPIO111		((0x0630 << 16) | (111))
+#define	MFP_PIN_GPIO112		((0x0634 << 16) | (112))
+#define	MFP_PIN_GPIO113		((0x0638 << 16) | (113))
+#define	MFP_PIN_GPIO114		((0x063C << 16) | (114))
+#define	MFP_PIN_GPIO115		((0x0640 << 16) | (115))
+#define	MFP_PIN_GPIO116		((0x0644 << 16) | (116))
+#define	MFP_PIN_GPIO117		((0x0648 << 16) | (117))
+#define	MFP_PIN_GPIO118		((0x064C << 16) | (118))
+#define	MFP_PIN_GPIO119		((0x0650 << 16) | (119))
+#define	MFP_PIN_GPIO120		((0x0654 << 16) | (120))
+#define	MFP_PIN_GPIO121		((0x0658 << 16) | (121))
+#define	MFP_PIN_GPIO122		((0x065C << 16) | (122))
+#define	MFP_PIN_GPIO123		((0x0660 << 16) | (123))
+#define	MFP_PIN_GPIO124		((0x0664 << 16) | (124))
+#define	MFP_PIN_GPIO125		((0x0668 << 16) | (125))
+#define	MFP_PIN_GPIO126		((0x066C << 16) | (126))
+#define	MFP_PIN_GPIO127		((0x0670 << 16) | (127))
+#define	MFP_PIN_GPIO0_2		((0x0674 << 16) | (0))
+#define	MFP_PIN_GPIO1_2		((0x0678 << 16) | (1))
+#define	MFP_PIN_GPIO2_2		((0x02DC << 16) | (2))
+#define	MFP_PIN_GPIO3_2		((0x02E0 << 16) | (3))
+#define	MFP_PIN_GPIO4_2		((0x02E4 << 16) | (4))
+#define	MFP_PIN_GPIO5_2		((0x02E8 << 16) | (5))
+#define	MFP_PIN_GPIO6_2		((0x02EC << 16) | (6))
+
+#define MHN_MIN_MFP_OFFSET				(MFP_OFFSET(MFP_PIN_GPIO0))
+#define MHN_MAX_MFP_OFFSET				(MFP_OFFSET(MFP_PIN_GPIO1_2))
+
+/* Pin GPIO0 alternate function codes */
+#define MFP_PIN_GPIO0_AF_GPIO_0				MFP_AF0
+#define	MFP_PIN_GPIO0_AF_DF_RDY				MFP_AF1
+
+/* Pin GPIO1 alternate function codes */
+#define MFP_PIN_GPIO1_AF_GPIO_1				MFP_AF0
+#define	MFP_PIN_GPIO1_AF_nCS2				MFP_AF1
+
+/* Pin GPIO2 alternate function codes */
+#define MFP_PIN_GPIO2_AF_GPIO_2				MFP_AF0
+#define MFP_PIN_GPIO2_AF_nCS3				MFP_AF1
+#define	MFP_PIN_GPIO2_AF_nXCVREN			MFP_AF2
+
+/* Pin GPIO3 alternate function codes */
+#define MFP_PIN_GPIO3_AF_GPIO_3				MFP_AF0
+#define	MFP_PIN_GPIO3_AF_uIO_IN				MFP_AF1
+#define	MFP_PIN_GPIO3_AF_KP_DKIN_6			MFP_AF2
+#define	MFP_PIN_GPIO3_AF_MM1_DAT0			MFP_AF4
+
+/* Pin GPIO4 alternate function codes */
+#define MFP_PIN_GPIO4_AF_GPIO_4				MFP_AF0
+#define	MFP_PIN_GPIO4_AF_uSIM_CARD_STATE		MFP_AF1
+#define	MFP_PIN_GPIO4_AF_KP_DKIN_7			MFP_AF2
+#define	MFP_PIN_GPIO4_AF_MM1_DAT1			MFP_AF4
+
+/* Pin GPIO5 alternate function codes */
+#define MFP_PIN_GPIO5_AF_GPIO_5				MFP_AF0
+#define	MFP_PIN_GPIO5_AF_uSIM_uCLK			MFP_AF1
+#define	MFP_PIN_GPIO5_AF_KP_MKIN_0			MFP_AF2
+#define	MFP_PIN_GPIO5_AF_MM1_DAT2			MFP_AF4
+
+/* Pin GPIO6 alternate function codes */
+#define MFP_PIN_GPIO6_AF_GPIO_6				MFP_AF0
+#define	MFP_PIN_GPIO6_AF_uSIM_uRST			MFP_AF1
+#define	MFP_PIN_GPIO6_AF_KP_MKIN_1			MFP_AF2
+#define	MFP_PIN_GPIO6_AF_MM1_DAT3			MFP_AF4
+
+/* Pin GPIO7 alternate function codes */
+#define MFP_PIN_GPIO7_AF_GPIO_7				MFP_AF0
+#define	MFP_PIN_GPIO7_AF_KP_MKOUT_5			MFP_AF1
+#define	MFP_PIN_GPIO7_AF_UART3_RXD			MFP_AF2
+#define	MFP_PIN_GPIO7_AF_MM1_CLK			MFP_AF4
+#define	MFP_PIN_GPIO7_AF_UART3_TXD			MFP_AF6
+#define	MFP_PIN_GPIO7_AF_CLK_BYPASS_XSC			MFP_AF7
+
+/* Pin GPIO8 alternate function codes */
+#define MFP_PIN_GPIO8_AF_GPIO_8				MFP_AF0
+#define	MFP_PIN_GPIO8_AF_UART3_TXD			MFP_AF2
+#define	MFP_PIN_GPIO8_AF_MM1_CMD			MFP_AF4
+#define	MFP_PIN_GPIO8_AF_CIR_OUT			MFP_AF5
+#define	MFP_PIN_GPIO8_AF_UART3_RXD			MFP_AF6
+
+/* Pin GPIO9 alternate function codes */
+#define MFP_PIN_GPIO9_AF_GPIO_9				MFP_AF0
+#define	MFP_PIN_GPIO9_AF_SCIO				MFP_AF1
+#define	MFP_PIN_GPIO9_AF_KP_MKIN_6			MFP_AF3
+#define	MFP_PIN_GPIO9_AF_MM2_DAT0			MFP_AF4
+
+/* Pin GPIO10 alternate function codes */
+#define MFP_PIN_GPIO10_AF_GPIO_10			MFP_AF0
+#define	MFP_PIN_GPIO10_AF_SC_CARD_STATE			MFP_AF1
+#define	MFP_PIN_GPIO10_AF_KP_MKIN_7			MFP_AF3
+#define	MFP_PIN_GPIO10_AF_MM2_DAT1			MFP_AF4
+
+/* Pin GPIO11 alternate function codes */
+#define MFP_PIN_GPIO11_AF_GPIO_11			MFP_AF0
+#define	MFP_PIN_GPIO11_AF_SC_uCLK			MFP_AF1
+#define	MFP_PIN_GPIO11_AF_KP_MKOUT_5			MFP_AF3
+#define	MFP_PIN_GPIO11_AF_MM2_DAT2			MFP_AF4
+
+/* Pin GPIO12 alternate function codes */
+#define MFP_PIN_GPIO12_AF_GPIO_12			MFP_AF0
+#define	MFP_PIN_GPIO12_AF_SC_uRST			MFP_AF1
+#define	MFP_PIN_GPIO12_AF_KP_MKOUT_6			MFP_AF3
+#define	MFP_PIN_GPIO12_AF_MM2_DAT3			MFP_AF4
+
+/* Pin GPIO13 alternate function codes */
+#define MFP_PIN_GPIO13_AF_GPIO_13			MFP_AF0
+#define	MFP_PIN_GPIO13_AF_KP_MKOUT_7			MFP_AF3
+#define	MFP_PIN_GPIO13_AF_MM2_CLK			MFP_AF4
+
+/* Pin GPIO14 alternate function codes */
+#define MFP_PIN_GPIO14_AF_GPIO_14			MFP_AF0
+#define	MFP_PIN_GPIO14_AF_MM2_CMD			MFP_AF4
+#define	MFP_PIN_GPIO14_AF_MM1_CMD			MFP_AF5
+
+/* Pin GPIO15 alternate function codes */
+#define MFP_PIN_GPIO15_AF_GPIO_15			MFP_AF0
+#define	MFP_PIN_GPIO15_AF_SC_UVS_0			MFP_AF1
+#define	MFP_PIN_GPIO15_AF_LCD_nCS			MFP_AF2
+#define	MFP_PIN_GPIO15_AF_UART2_CTS			MFP_AF3
+#define	MFP_PIN_GPIO15_AF_UART2_RTS			MFP_AF4
+#define	MFP_PIN_GPIO15_AF_MM1_CMD			MFP_AF5
+#define	MFP_PIN_GPIO15_AF_SSP1_CLK			MFP_AF6
+
+/* Pin GPIO16 alternate function codes */
+#define MFP_PIN_GPIO16_AF_GPIO_16			MFP_AF0
+#define	MFP_PIN_GPIO16_AF_uSIM_UVS_0			MFP_AF1
+#define	MFP_PIN_GPIO16_AF_SSP1_FRM			MFP_AF2
+#define	MFP_PIN_GPIO16_AF_CIR_OUT			MFP_AF3
+#define	MFP_PIN_GPIO16_AF_UART2_RTS			MFP_AF4
+#define	MFP_PIN_GPIO16_AF_UART2_CTS			MFP_AF5
+#define MFP_PIN_GPIO16_AF_KP_DKIN_6			MFP_AF6
+
+/* Pin GPIO17 alternate function codes */
+#define MFP_PIN_GPIO17_AF_GPIO_17			MFP_AF0
+#define	MFP_PIN_GPIO17_AF_PWM0_OUT			MFP_AF1
+#define	MFP_PIN_GPIO17_AF_SSP2_FRM			MFP_AF2
+#define	MFP_PIN_GPIO17_AF_AC97_SDATA_IN_2		MFP_AF3
+#define	MFP_PIN_GPIO17_AF_EXT_SYNC_MVT_0		MFP_AF6
+
+/* Pin GPIO18 alternate function codes */
+#define MFP_PIN_GPIO18_AF_GPIO_18			MFP_AF0
+#define	MFP_PIN_GPIO18_AF_PWM1_OUT			MFP_AF1
+#define	MFP_PIN_GPIO18_AF_SSP1_RXD			MFP_AF2
+#define	MFP_PIN_GPIO18_AF_AC97_SDATA_IN_3		MFP_AF3
+#define	MFP_PIN_GPIO18_AF_UART2_TXD			MFP_AF4
+#define	MFP_PIN_GPIO18_AF_UART2_RXD			MFP_AF5
+#define	MFP_PIN_GPIO18_AF_EXT_SYNC_MVT_1		MFP_AF6
+#define	MFP_PIN_GPIO18_AF_SSP1_TXD			MFP_AF7
+
+/* Pin GPIO19 alternate function codes */
+#define MFP_PIN_GPIO19_AF_GPIO_19			MFP_AF0
+#define	MFP_PIN_GPIO19_AF_PWM2_OUT			MFP_AF1
+#define	MFP_PIN_GPIO19_AF_SSP2_TXD			MFP_AF2
+#define	MFP_PIN_GPIO19_AF_KP_MKOUT_4			MFP_AF3
+#define	MFP_PIN_GPIO19_AF_UART2_RXD			MFP_AF4
+#define	MFP_PIN_GPIO19_AF_UART2_TXD			MFP_AF5
+#define	MFP_PIN_GPIO19_AF_OST_CHOUT_MVT_0		MFP_AF6
+#define	MFP_PIN_GPIO19_AF_SSP2_RXD			MFP_AF7
+
+/* Pin GPIO20 alternate function codes */
+#define MFP_PIN_GPIO20_AF_GPIO_20			MFP_AF0
+#define	MFP_PIN_GPIO20_AF_PWM3_OUT			MFP_AF1
+#define	MFP_PIN_GPIO20_AF_SSP1_TXD			MFP_AF2
+#define	MFP_PIN_GPIO20_AF_KP_MKOUT_5			MFP_AF3
+#define	MFP_PIN_GPIO20_AF_RTC_MVT			MFP_AF4
+#define	MFP_PIN_GPIO20_AF_OW_DQ_IN			MFP_AF5
+#define	MFP_PIN_GPIO20_AF_OST_CHOUT_MVT_1		MFP_AF6
+#define	MFP_PIN_GPIO20_AF_SSP1_RXD			MFP_AF7
+
+/* Pin GPIO21 alternate function codes */
+#define MFP_PIN_GPIO21_AF_GPIO_21			MFP_AF0
+#define	MFP_PIN_GPIO21_AF_I2C_SCL			MFP_AF1
+#define	MFP_PIN_GPIO21_AF_AC97_SDATA_IN_2		MFP_AF2
+
+/* Pin GPIO22 alternate function codes */
+#define MFP_PIN_GPIO22_AF_GPIO_22			MFP_AF0
+#define	MFP_PIN_GPIO22_AF_I2C_SDA			MFP_AF1
+#define	MFP_PIN_GPIO22_AF_AC97_SDATA_IN_3		MFP_AF2
+
+/* Pin GPIO23 alternate function codes */
+#define MFP_PIN_GPIO23_AF_GPIO_23			MFP_AF0
+#define	MFP_PIN_GPIO23_AF_AC97_RESET			MFP_AF1
+#define	MFP_PIN_GPIO23_AF_SSP2_SCLK			MFP_AF2
+
+/* Pin GPIO24 alternate function codes */
+#define MFP_PIN_GPIO24_AF_GPIO_24			MFP_AF0
+#define	MFP_PIN_GPIO24_AF_AC97_SYSCLK			MFP_AF1
+#define	MFP_PIN_GPIO24_AF_UTM_RXVALID			MFP_AF3
+#define	MFP_PIN_GPIO24_AF_SSP2_RXD			MFP_AF4
+#define	MFP_PIN_GPIO24_AF_SSP2_TXD			MFP_AF5
+
+/* Pin GPIO25 alternate function codes */
+#define MFP_PIN_GPIO25_AF_GPIO_25			MFP_AF0
+#define	MFP_PIN_GPIO25_AF_AC97_SDATA_IN_0		MFP_AF1
+#define	MFP_PIN_GPIO25_AF_SSP2_SCLK			MFP_AF2
+#define	MFP_PIN_GPIO25_AF_UTM_RXACTIVE			MFP_AF3
+
+/* Pin GPIO26 alternate function codes */
+#define MFP_PIN_GPIO26_AF_GPIO_26			MFP_AF0
+#define	MFP_PIN_GPIO26_AF_AC97_SDATA_IN_1		MFP_AF1
+#define	MFP_PIN_GPIO26_AF_SSP2_FRM			MFP_AF2
+#define	MFP_PIN_GPIO26_AF_U2D_RXERROR			MFP_AF3
+
+/* Pin GPIO27 alternate function codes */
+#define MFP_PIN_GPIO27_AF_GPIO_27			MFP_AF0
+#define	MFP_PIN_GPIO27_AF_AC97_SDATA_OUT		MFP_AF1
+#define	MFP_PIN_GPIO27_AF_SSP2_TXD			MFP_AF2
+#define	MFP_PIN_GPIO27_AF_U2D_OPMODE_0			MFP_AF3
+#define	MFP_PIN_GPIO27_AF_U2D_OPMODE_PF_0		MFP_AF4
+#define	MFP_PIN_GPIO27_AF_SSP2_RXD			MFP_AF5
+
+/* Pin GPIO28 alternate function codes */
+#define MFP_PIN_GPIO28_AF_GPIO_28			MFP_AF0
+#define	MFP_PIN_GPIO28_AF_AC97_SYNC			MFP_AF1
+#define	MFP_PIN_GPIO28_AF_SSP2_RXD			MFP_AF2
+#define	MFP_PIN_GPIO28_AF_U2D_OPMODE_1			MFP_AF3
+#define	MFP_PIN_GPIO28_AF_U2D_OPMODE_PF_1		MFP_AF4
+#define	MFP_PIN_GPIO28_AF_SSP2_TXD			MFP_AF5
+
+/* Pin GPIO29 alternate function codes */
+#define MFP_PIN_GPIO29_AF_GPIO_29			MFP_AF0
+#define	MFP_PIN_GPIO29_AF_AC97_BITCLK			MFP_AF1
+#define	MFP_PIN_GPIO29_AF_SSP2_EXTCLK			MFP_AF2
+#define	MFP_PIN_GPIO29_AF_U2D_TXVALID			MFP_AF3
+
+/* Pin GPIO30 alternate function codes */
+#define MFP_PIN_GPIO30_AF_GPIO_30			MFP_AF0
+#define	MFP_PIN_GPIO30_AF_U2D_PHYDATA_0			MFP_AF1
+#define	MFP_PIN_GPIO30_AF_UART1_RXD			MFP_AF2
+#define	MFP_PIN_GPIO30_AF_UTM_PHYDATA_OUT_0		MFP_AF3
+#define	MFP_PIN_GPIO30_AF_UART1_TXD			MFP_AF4
+
+/* Pin GPIO31 alternate function codes */
+#define MFP_PIN_GPIO31_AF_GPIO_31			MFP_AF0
+#define	MFP_PIN_GPIO31_AF_U2D_PHYDATA_1			MFP_AF1
+#define	MFP_PIN_GPIO31_AF_UART1_TXD			MFP_AF2
+#define	MFP_PIN_GPIO31_AF_UTM_PHYDATA_OUT_1		MFP_AF3
+#define	MFP_PIN_GPIO31_AF_UART1_RXD			MFP_AF4
+
+/* Pin GPIO32 alternate function codes */
+#define MFP_PIN_GPIO32_AF_GPIO_32			MFP_AF0
+#define	MFP_PIN_GPIO32_AF_U2D_PHYDATA_2			MFP_AF1
+#define	MFP_PIN_GPIO32_AF_UART1_CTS			MFP_AF2
+#define	MFP_PIN_GPIO32_AF_UTM_PHYDATA_OUT_2		MFP_AF3
+#define	MFP_PIN_GPIO32_AF_UART1_RTS			MFP_AF4
+
+/* Pin GPIO33 alternate function codes */
+#define MFP_PIN_GPIO33_AF_GPIO_33			MFP_AF0
+#define	MFP_PIN_GPIO33_AF_U2D_PHYDATA_3			MFP_AF1
+#define	MFP_PIN_GPIO33_AF_UART1_DCD			MFP_AF2
+#define	MFP_PIN_GPIO33_AF_UTM_PHYDATA_OUT_3		MFP_AF3
+#define	MFP_PIN_GPIO33_AF_SSP1_SCLK			MFP_AF5
+#define	MFP_PIN_GPIO33_AF_SSP2_SCLK			MFP_AF6
+
+/* Pin GPIO34 alternate function codes */
+#define MFP_PIN_GPIO34_AF_GPIO_34			MFP_AF0
+#define	MFP_PIN_GPIO34_AF_U2D_PHYDATA_4			MFP_AF1
+#define	MFP_PIN_GPIO34_AF_UART1_DSR			MFP_AF2
+#define	MFP_PIN_GPIO34_AF_UTM_PHYDATA_OUT_4		MFP_AF3
+#define	MFP_PIN_GPIO34_AF_UART1_DTR			MFP_AF4
+#define	MFP_PIN_GPIO34_AF_SSP1_FRM			MFP_AF5
+#define	MFP_PIN_GPIO34_AF_SSP2_FRM			MFP_AF6
+
+/* Pin GPIO35 alternate function codes */
+#define MFP_PIN_GPIO35_AF_GPIO_35			MFP_AF0
+#define	MFP_PIN_GPIO35_AF_U2D_PHYDATA_5			MFP_AF1
+#define	MFP_PIN_GPIO35_AF_UART1_RI			MFP_AF2
+#define	MFP_PIN_GPIO35_AF_UTM_PHYDATA_OUT_5		MFP_AF3
+#define	MFP_PIN_GPIO35_AF_SSP1_RXD			MFP_AF4
+#define	MFP_PIN_GPIO35_AF_SSP1_TXD			MFP_AF5
+#define	MFP_PIN_GPIO35_AF_SSP2_RXD			MFP_AF6
+#define	MFP_PIN_GPIO35_AF_SSP2_TXD			MFP_AF7
+
+/* Pin GPIO36 alternate function codes */
+#define MFP_PIN_GPIO36_AF_GPIO_36			MFP_AF0
+#define	MFP_PIN_GPIO36_AF_U2D_PHYDATA_6			MFP_AF1
+#define	MFP_PIN_GPIO36_AF_UART1_DTR			MFP_AF2
+#define	MFP_PIN_GPIO36_AF_UTM_PHYDATA_OUT_6		MFP_AF3
+#define	MFP_PIN_GPIO36_AF_UART1_DSR			MFP_AF4
+#define	MFP_PIN_GPIO36_AF_SSP1_TXD			MFP_AF5
+#define	MFP_PIN_GPIO36_AF_SSP1_RXD			MFP_AF6
+#define	MFP_PIN_GPIO36_AF_SSP2_TXD			MFP_AF7
+
+/* Pin GPIO37 alternate function codes */
+#define MFP_PIN_GPIO37_AF_GPIO_37			MFP_AF0
+#define	MFP_PIN_GPIO37_AF_U2D_PHYDATA_7			MFP_AF1
+#define	MFP_PIN_GPIO37_AF_UART1_RTS			MFP_AF2
+#define	MFP_PIN_GPIO37_AF_UTM_PHYDATA_OUT_6		MFP_AF3
+#define	MFP_PIN_GPIO37_AF_UART1_CTS			MFP_AF4
+
+/* Pin GPIO38 alternate function codes */
+#define MFP_PIN_GPIO38_AF_GPIO_38			MFP_AF0
+#define	MFP_PIN_GPIO38_AF_UTM_CLK			MFP_AF1
+#define	MFP_PIN_GPIO38_AF_KP_MKOUT_5			MFP_AF5
+
+/* Pin GPIO39 alternate function codes */
+#define MFP_PIN_GPIO39_AF_GPIO_39			MFP_AF0
+#define	MFP_PIN_GPIO39_AF_CI_DD_0			MFP_AF1
+#define	MFP_PIN_GPIO39_AF_U2D_PHYDATA_0			MFP_AF2
+#define	MFP_PIN_GPIO39_AF_UTM_PHYDATA_OUT_0		MFP_AF3
+
+/* Pin GPIO40 alternate function codes */
+#define MFP_PIN_GPIO40_AF_GPIO_40			MFP_AF0
+#define	MFP_PIN_GPIO40_AF_CI_DD_1			MFP_AF1
+#define	MFP_PIN_GPIO40_AF_U2D_PHYDATA_1			MFP_AF2
+#define	MFP_PIN_GPIO40_AF_UTM_PHYDATA_OUT_1		MFP_AF3
+
+/* Pin GPIO41 alternate function codes */
+#define MFP_PIN_GPIO41_AF_GPIO_41			MFP_AF0
+#define	MFP_PIN_GPIO41_AF_CI_DD_2			MFP_AF1
+#define	MFP_PIN_GPIO41_AF_U2D_PHYDATA_2			MFP_AF2
+#define	MFP_PIN_GPIO41_AF_UTM_PHYDATA_OUT_2		MFP_AF3
+
+/* Pin GPIO42 alternate function codes */
+#define MFP_PIN_GPIO42_AF_GPIO_42			MFP_AF0
+#define MFP_PIN_GPIO42_AF_CI_DD_3			MFP_AF1
+#define MFP_PIN_GPIO42_AF_U2D_PHYDATA_3			MFP_AF2
+#define MFP_PIN_GPIO42_AF_UTM_PHYDATA_OUT_3		MFP_AF3
+
+/* Pin GPIO43 alternate function codes */
+#define MFP_PIN_GPIO43_AF_GPIO_43			MFP_AF0
+#define MFP_PIN_GPIO43_AF_CI_DD_4			MFP_AF1
+#define MFP_PIN_GPIO43_AF_U2D_PHYDATA_4			MFP_AF2
+#define MFP_PIN_GPIO43_AF_UTM_PHYDATA_OUT_4		MFP_AF3
+
+/* Pin GPIO44 alternate function codes */
+#define MFP_PIN_GPIO44_AF_GPIO_44			MFP_AF0
+#define MFP_PIN_GPIO44_AF_CI_DD_5			MFP_AF1
+#define MFP_PIN_GPIO44_AF_U2D_PHYDATA_5			MFP_AF2
+#define MFP_PIN_GPIO44_AF_UTM_PHYDATA_OUT_5		MFP_AF3
+
+/* Pin GPIO45 alternate function codes */
+#define MFP_PIN_GPIO45_AF_GPIO_45			MFP_AF0
+#define MFP_PIN_GPIO45_AF_CI_DD_6			MFP_AF1
+#define MFP_PIN_GPIO45_AF_U2D_PHYDATA_6			MFP_AF2
+#define MFP_PIN_GPIO45_AF_UTM_PHYDATA_OUT_6		MFP_AF3
+
+/* Pin GPIO46 alternate function codes */
+#define MFP_PIN_GPIO46_AF_CI_DD_7			MFP_AF0
+#define MFP_PIN_GPIO46_AF_GPIO_46			MFP_AF1
+#define MFP_PIN_GPIO46_AF_U2D_PHYDATA_7			MFP_AF2
+#define MFP_PIN_GPIO46_AF_UTM_PHYDATA_OUT_7		MFP_AF3
+
+/* Pin GPIO47 alternate function codes */
+#define MFP_PIN_GPIO47_AF_GPIO_47			MFP_AF0
+#define MFP_PIN_GPIO47_AF_CI_DD_8			MFP_AF1
+#define MFP_PIN_GPIO47_AF_UTM_RXACTIVE			MFP_AF2
+
+/* Pin GPIO48 alternate function codes */
+#define MFP_PIN_GPIO48_AF_GPIO_48			MFP_AF0
+#define MFP_PIN_GPIO48_AF_CI_DD_9			MFP_AF1
+#define MFP_PIN_GPIO48_AF_UTM_RXVALID			MFP_AF2
+
+/* Pin GPIO49 alternate function codes */
+#define MFP_PIN_GPIO49_AF_CI_MCLK			MFP_AF0
+#define MFP_PIN_GPIO49_AF_UTM_RXACTIVE			MFP_AF1
+#define MFP_PIN_GPIO49_AF_48M_CLK			MFP_AF2
+#define MFP_PIN_GPIO49_AF_GPIO_49			MFP_AF3
+
+/* Pin GPIO50 alternate function codes */
+#define MFP_PIN_GPIO50_AF_CI_PCLK			MFP_AF0
+#define MFP_PIN_GPIO50_AF_UTM_RXERROR			MFP_AF1
+#define MFP_PIN_GPIO50_AF_GPIO_50			MFP_AF2
+
+/* Pin GPIO51 alternate function codes */
+#define MFP_PIN_GPIO51_AF_CI_LV				MFP_AF0
+#define MFP_PIN_GPIO51_AF_UTM_OPMODE0			MFP_AF1
+#define MFP_PIN_GPIO51_AF_UTM_OPMODE_PF_0		MFP_AF2
+#define MFP_PIN_GPIO51_AF_GPIO_51			MFP_AF3
+
+/* Pin GPIO52 alternate function codes */
+#define MFP_PIN_GPIO52_AF_CI_FV				MFP_AF0
+#define MFP_PIN_GPIO52_AF_UTM_OPMODE1			MFP_AF1
+#define MFP_PIN_GPIO52_AF_UTM_OPMODE_PF_1		MFP_AF2
+#define MFP_PIN_GPIO52_AF_GPIO_52			MFP_AF3
+#define MFP_PIN_GPIO52_AF_TXVALID			MFP_AF4
+
+/* Pin GPIO53 alternate function codes */
+#define MFP_PIN_GPIO53_AF_GPIO_53			MFP_AF0
+#define MFP_PIN_GPIO53_AF_UTM_TXREADY			MFP_AF1
+#define MFP_PIN_GPIO53_AF_KP_MKOUT_6			MFP_AF5
+
+/* Pin GPIO54 alternate function codes */
+#define MFP_PIN_GPIO54_AF_GPIO_54			MFP_AF0
+#define MFP_PIN_GPIO54_AF_LCD_LDD_0			MFP_AF1
+#define MFP_PIN_GPIO54_AF_MSLCD_DATA_MVT_0		MFP_AF7
+
+/* Pin GPIO55 alternate function codes */
+#define MFP_PIN_GPIO55_AF_GPIO_55			MFP_AF0
+#define MFP_PIN_GPIO55_AF_LCD_LDD_1			MFP_AF1
+#define MFP_PIN_GPIO55_AF_MSLCD_DATA_MVT_1		MFP_AF7
+
+/* Pin GPIO56 alternate function codes */
+#define MFP_PIN_GPIO56_AF_GPIO_56			MFP_AF0
+#define MFP_PIN_GPIO56_AF_LCD_LDD_2			MFP_AF1
+#define MFP_PIN_GPIO56_AF_MSLCD_DATA_MVT_2		MFP_AF7
+
+/* Pin GPIO57 alternate function codes */
+#define MFP_PIN_GPIO57_AF_GPIO_57			MFP_AF0
+#define MFP_PIN_GPIO57_AF_LCD_LDD_3			MFP_AF1
+#define MFP_PIN_GPIO57_AF_MSLCD_DATA_MVT_3		MFP_AF7
+
+/* Pin GPIO58 alternate function codes */
+#define MFP_PIN_GPIO58_AF_GPIO_58			MFP_AF0
+#define MFP_PIN_GPIO58_AF_LCD_LDD_4			MFP_AF1
+#define MFP_PIN_GPIO58_AF_MSLCD_DATA_MVT_4		MFP_AF7
+
+/* Pin GPIO59 alternate function codes */
+#define MFP_PIN_GPIO59_AF_GPIO_59			MFP_AF0
+#define MFP_PIN_GPIO59_AF_LCD_LDD_5			MFP_AF1
+#define MFP_PIN_GPIO59_AF_MSLCD_DATA_MVT_5		MFP_AF7
+
+/* Pin GPIO60 alternate function codes */
+#define MFP_PIN_GPIO60_AF_GPIO_60			MFP_AF0
+#define MFP_PIN_GPIO60_AF_LCD_LDD_6			MFP_AF1
+#define MFP_PIN_GPIO60_AF_MSLCD_DATA_MVT_6		MFP_AF7
+
+/* Pin GPIO61 alternate function codes */
+#define MFP_PIN_GPIO61_AF_GPIO_61			MFP_AF0
+#define MFP_PIN_GPIO61_AF_LCD_LDD_7			MFP_AF1
+#define MFP_PIN_GPIO61_AF_MSLCD_DATA_MVT_7		MFP_AF7
+
+/* Pin GPIO62 alternate function codes */
+#define MFP_PIN_GPIO62_AF_GPIO_62			MFP_AF0
+#define MFP_PIN_GPIO62_AF_LCD_LDD_8			MFP_AF1
+#define MFP_PIN_GPIO62_AF_LCD_CS_N			MFP_AF2
+#define MFP_PIN_GPIO62_AF_MSLCD_DATA_MVT_8		MFP_AF7
+
+/* Pin GPIO63 alternate function codes */
+#define MFP_PIN_GPIO63_AF_GPIO_63			MFP_AF0
+#define MFP_PIN_GPIO63_AF_LCD_LDD_9			MFP_AF1
+#define MFP_PIN_GPIO63_AF_LCD_VSYNC			MFP_AF2
+#define MFP_PIN_GPIO63_AF_MSLCD_DATA_MVT_9		MFP_AF7
+
+/* Pin GPIO64 alternate function codes */
+#define MFP_PIN_GPIO64_AF_GPIO_64			MFP_AF0
+#define MFP_PIN_GPIO64_AF_LCD_LDD_10			MFP_AF1
+#define MFP_PIN_GPIO64_AF_SSP2_SCLK			MFP_AF2
+#define MFP_PIN_GPIO64_AF_U2D_XCVR			MFP_AF3
+#define MFP_PIN_GPIO64_AF_U2D_XCVR_PF			MFP_AF5
+#define MFP_PIN_GPIO64_AF_MSLCD_DATA_MVT_10		MFP_AF7
+
+/* Pin GPIO65 alternate function codes */
+#define MFP_PIN_GPIO65_AF_GPIO_65			MFP_AF0
+#define MFP_PIN_GPIO65_AF_LCD_LDD_11			MFP_AF1
+#define MFP_PIN_GPIO65_AF_SSP2_FRM			MFP_AF2
+#define MFP_PIN_GPIO65_AF_U2D_TERM			MFP_AF3
+#define MFP_PIN_GPIO65_AF_U2D_TERM_PF			MFP_AF5
+#define MFP_PIN_GPIO65_AF_MSLCD_DATA_MVT_11		MFP_AF7
+
+/* Pin GPIO66 alternate function codes */
+#define MFP_PIN_GPIO66_AF_GPIO_66			MFP_AF0
+#define MFP_PIN_GPIO66_AF_LCD_LDD_12			MFP_AF1
+#define MFP_PIN_GPIO66_AF_SSP2_RXD			MFP_AF2
+#define MFP_PIN_GPIO66_AF_U2D_SUSPEND			MFP_AF3
+#define MFP_PIN_GPIO66_AF_SSP2_TXD			MFP_AF4
+#define MFP_PIN_GPIO66_AF_MSLCD_DATA_MVT_12		MFP_AF7
+
+/* Pin GPIO67 alternate function codes */
+#define MFP_PIN_GPIO67_AF_GPIO_67			MFP_AF0
+#define MFP_PIN_GPIO67_AF_LCD_LDD_13			MFP_AF1
+#define MFP_PIN_GPIO67_AF_SSP2_TXD			MFP_AF2
+#define MFP_PIN_GPIO67_AF_UTM_LINESTATE_0		MFP_AF3
+#define MFP_PIN_GPIO67_AF_SSP2_RXD			MFP_AF4
+#define MFP_PIN_GPIO67_AF_MSLCD_DATA_MVT_13		MFP_AF7
+
+/* Pin GPIO68 alternate function codes */
+#define MFP_PIN_GPIO68_AF_GPIO_68			MFP_AF0
+#define MFP_PIN_GPIO68_AF_LCD_LDD_14			MFP_AF1
+#define MFP_PIN_GPIO68_AF_SSP3_SCLK			MFP_AF2
+#define MFP_PIN_GPIO68_AF_UTM_LINESTATE_1		MFP_AF3
+#define MFP_PIN_GPIO68_AF_MSLCD_DATA_MVT_14		MFP_AF7
+
+/* Pin GPIO69 alternate function codes */
+#define MFP_PIN_GPIO69_AF_GPIO_69			MFP_AF0
+#define MFP_PIN_GPIO69_AF_LCD_LDD_15			MFP_AF1
+#define MFP_PIN_GPIO69_AF_SSP3_FRM			MFP_AF2
+#define MFP_PIN_GPIO69_AF_U2D_TXVALID			MFP_AF3
+#define MFP_PIN_GPIO69_AF_MSLCD_DATA_MVT_15		MFP_AF7
+
+/* Pin GPIO70 alternate function codes */
+#define MFP_PIN_GPIO70_AF_GPIO_70			MFP_AF0
+#define MFP_PIN_GPIO70_AF_LCD_LDD_16			MFP_AF1
+#define MFP_PIN_GPIO70_AF_SSP3_TXD			MFP_AF2
+#define MFP_PIN_GPIO70_KP_MKIN_6			MFP_AF3
+#define MFP_PIN_GPIO70_SSP3_RXD				MFP_AF5
+
+/* Pin GPIO71 alternate function codes */
+#define MFP_PIN_GPIO71_AF_GPIO_71			MFP_AF0
+#define MFP_PIN_GPIO71_AF_LCD_LDD_17			MFP_AF1
+#define MFP_PIN_GPIO71_AF_SSP3_RXD			MFP_AF2
+#define MFP_PIN_GPIO71_AF_KP_MKIN_7			MFP_AF3
+#define MFP_PIN_GPIO71_AF_SSP3_TXD			MFP_AF5
+#define MFP_PIN_GPIO71_AF_EXT_MATCH_MVT			MFP_AF6
+
+/* Pin GPIO72 alternate function codes */
+#define MFP_PIN_GPIO72_AF_GPIO_72			MFP_AF0
+#define MFP_PIN_GPIO72_AF_LCD_L_FCLK			MFP_AF1
+#define MFP_PIN_GPIO72_AF_MSLCD_FCLK_MVT		MFP_AF7
+
+/* Pin GPIO73 alternate function codes */
+#define MFP_PIN_GPIO73_AF_GPIO_73			MFP_AF0
+#define MFP_PIN_GPIO73_AF_LCD_L_LCLK			MFP_AF1
+#define MFP_PIN_GPIO73_AF_MSLCD_LCLK_MVT		MFP_AF7
+
+/* Pin GPIO74 alternate function codes */
+#define MFP_PIN_GPIO74_AF_GPIO_74			MFP_AF0
+#define MFP_PIN_GPIO74_AF_LCD_L_PCLK			MFP_AF1
+#define MFP_PIN_GPIO74_AF_MSLCD_PCLK_MVT		MFP_AF7
+
+/* Pin GPIO75 alternate function codes */
+#define MFP_PIN_GPIO75_AF_GPIO_75			MFP_AF0
+#define MFP_PIN_GPIO75_AF_LCD_L_BIAS			MFP_AF1
+#define MFP_PIN_GPIO75_AF_MSLCD_L_BIAS_MVT		MFP_AF2
+
+/* Pin GPIO76 alternate function codes */
+#define MFP_PIN_GPIO76_AF_GPIO_76			MFP_AF0
+#define MFP_PIN_GPIO76_AF_U2D_RESET			MFP_AF1
+#define MFP_PIN_GPIO76_AF_LCD_VSYNC			MFP_AF2
+
+/* Pin GPIO77 alternate function codes */
+#define MFP_PIN_GPIO77_AF_GPIO_77			MFP_AF0
+#define MFP_PIN_GPIO77_AF_UART1_RXD			MFP_AF1
+#define MFP_PIN_GPIO77_AF_USB_P3_1			MFP_AF2
+#define MFP_PIN_GPIO77_AF_UART1_TXD			MFP_AF3
+#define MFP_PIN_GPIO77_AF_MM2_DAT0			MFP_AF4
+#define MFP_PIN_GPIO77_AF_MSL_IB_DAT0			MFP_AF5
+#define MFP_PIN_GPIO77_AF_MSL_OB_DAT0			MFP_AF6
+
+/* Pin GPIO78 alternate function codes */
+#define MFP_PIN_GPIO78_AF_GPIO_78			MFP_AF0
+#define MFP_PIN_GPIO78_AF_UART1_TXD			MFP_AF1
+#define MFP_PIN_GPIO78_AF_USB_P3_3			MFP_AF2
+#define MFP_PIN_GPIO78_AF_UART1_RXD			MFP_AF3
+#define MFP_PIN_GPIO78_AF_MM2_DATA_OUT_1		MFP_AF4
+#define MFP_PIN_GPIO78_AF_KP_MKOUT_7			MFP_AF5
+#define MFP_PIN_GPIO78_AF_MSL_OB_CLK			MFP_AF6
+
+/* Pin GPIO79 alternate function codes */
+#define MFP_PIN_GPIO79_AF_GPIO_79			MFP_AF0
+#define MFP_PIN_GPIO79_AF_UART1_CTS			MFP_AF1
+#define MFP_PIN_GPIO79_AF_USB_P3_3			MFP_AF2
+#define MFP_PIN_GPIO79_AF_UART1_RTS			MFP_AF3
+#define MFP_PIN_GPIO79_AF_MM2_DAT2			MFP_AF4
+#define MFP_PIN_GPIO79_AF_MSL_IB_STB			MFP_AF5
+#define MFP_PIN_GPIO79_AF_MSL_OB_STB			MFP_AF6
+
+/* Pin GPIO80 alternate function codes */
+#define MFP_PIN_GPIO80_AF_GPIO_80			MFP_AF0
+#define MFP_PIN_GPIO80_AF_UART1_DCD			MFP_AF1
+#define MFP_PIN_GPIO80_AF_USB_P3_4			MFP_AF2
+#define MFP_PIN_GPIO80_AF_MM2_DAT3			MFP_AF4
+#define MFP_PIN_GPIO80_AF_MSL_IB_WAIT			MFP_AF5
+#define MFP_PIN_GPIO80_AF_MSL_OB_WAIT			MFP_AF6
+
+/* Pin GPIO81 alternate function codes */
+#define MFP_PIN_GPIO81_AF_GPIO_81			MFP_AF0
+#define MFP_PIN_GPIO81_AF_UART1_DSR			MFP_AF1
+#define MFP_PIN_GPIO81_AF_USB_P3_5			MFP_AF2
+#define MFP_PIN_GPIO81_AF_UART1_DTR			MFP_AF3
+#define MFP_PIN_GPIO81_AF_MM2_CLK			MFP_AF4
+#define MFP_PIN_GPIO81_AF_MSL_OB_DAT0			MFP_AF5
+#define MFP_PIN_GPIO81_AF_MSL_IB_DAT0			MFP_AF6
+
+/* Pin GPIO82 alternate function codes */
+#define MFP_PIN_GPIO82_AF_GPIO_82			MFP_AF0
+#define MFP_PIN_GPIO82_AF_UART1_RI			MFP_AF1
+#define MFP_PIN_GPIO82_AF_USB_P3_6			MFP_AF2
+#define MFP_PIN_GPIO82_AF_MM2_CMD			MFP_AF4
+#define MFP_PIN_GPIO82_AF_MSL_OB_CLK			MFP_AF5
+#define MFP_PIN_GPIO82_AF_MSL_IB_CLK			MFP_AF6
+
+/* Pin GPIO83 alternate function codes */
+#define MFP_PIN_GPIO83_AF_GPIO_83			MFP_AF0
+#define MFP_PIN_GPIO83_AF_UART1_DTR			MFP_AF1
+#define MFP_PIN_GPIO83_AF_UART1_DSR			MFP_AF3
+#define MFP_PIN_GPIO83_AF_MSL_OB_STB			MFP_AF4
+#define MFP_PIN_GPIO83_AF_KP_DKIN_2			MFP_AF5
+#define MFP_PIN_GPIO83_AF_MSL_IB_STB			MFP_AF6
+
+/* Pin GPIO84 alternate function codes */
+#define MFP_PIN_GPIO84_AF_GPIO_84			MFP_AF0
+#define MFP_PIN_GPIO84_AF_UART1_RTS			MFP_AF1
+#define MFP_PIN_GPIO84_AF_UART_CTS			MFP_AF3
+#define MFP_PIN_GPIO84_AF_MSL_OB_WAIT			MFP_AF4
+#define MFP_PIN_GPIO84_AF_KP_DKIN_1			MFP_AF5
+#define MFP_PIN_GPIO84_AF_MSL_IB_WAIT			MFP_AF6
+
+/* Pin GPIO85 alternate function codes */
+#define MFP_PIN_GPIO85_AF_GPIO_85			MFP_AF0
+#define MFP_PIN_GPIO85_AF_SSP1_SCLK			MFP_AF1
+#define MFP_PIN_GPIO85_AF_KP_MKOUT_0			MFP_AF2
+#define MFP_PIN_GPIO85_AF_KP_DKIN_0			MFP_AF3
+#define MFP_PIN_GPIO85_AF_MSL_IB_DAT1			MFP_AF4
+#define MFP_PIN_GPIO85_AF_U2D_TXVALID			MFP_AF5
+#define MFP_PIN_GPIO85_AF_MSL_OB_DAT1			MFP_AF6
+
+/* Pin GPIO86 alternate function codes */
+#define MFP_PIN_GPIO86_AF_GPIO_86			MFP_AF0
+#define MFP_PIN_GPIO86_AF_SSP1_FRM			MFP_AF1
+#define MFP_PIN_GPIO86_AF_KP_MKOUT_1			MFP_AF2
+#define MFP_PIN_GPIO86_AF_KP_DKIN_1			MFP_AF3
+#define MFP_PIN_GPIO86_AF_MSL_IB_DAT2			MFP_AF4
+#define MFP_PIN_GPIO86_AF_MSL_OB_DAT2			MFP_AF6
+
+/* Pin GPIO87 alternate function codes */
+#define MFP_PIN_GPIO87_AF_GPIO_87			MFP_AF0
+#define MFP_PIN_GPIO87_AF_SSP1_TXD			MFP_AF1
+#define MFP_PIN_GPIO87_AF_KP_MKOUT2			MFP_AF2
+#define MFP_PIN_GPIO87_AF_KP_DKIN2			MFP_AF3
+#define MFP_PIN_GPIO87_AF_MSL_IB_DATA3			MFP_AF4
+#define MFP_PIN_GPIO87_AF_UTM_RXVALID			MFP_AF5
+#define MFP_PIN_GPIO87_AF_SSP1_RXD			MFP_AF6
+#define MFP_PIN_GPIO87_AF_MSL_OB_DAT3			MFP_AF7
+
+/* Pin GPIO88 alternate function codes */
+#define MFP_PIN_GPIO88_AF_GPIO_88			MFP_AF0
+#define MFP_PIN_GPIO88_AF_SSP1_RXD			MFP_AF1
+#define MFP_PIN_GPIO88_AF_KP_MKOUT_3			MFP_AF2
+#define MFP_PIN_GPIO88_AF_KP_DKIN_3			MFP_AF3
+#define MFP_PIN_GPIO88_AF_MSL_OB_DAT1			MFP_AF4
+#define MFP_PIN_GPIO88_AF_UTM_RXACTIVE			MFP_AF5
+#define MFP_PIN_GPIO88_AF_SSP1_TXD			MFP_AF6
+#define MFP_PIN_GPIO88_AF_MSL_IB_DAT1			MFP_AF7
+
+/* Pin GPIO89 alternate function codes */
+#define MFP_PIN_GPIO89_AF_GPIO_89			MFP_AF0
+#define MFP_PIN_GPIO89_AF_SSP1_EXTCLK			MFP_AF1
+#define MFP_PIN_GPIO89_AF_SC_UVS1			MFP_AF2
+#define MFP_PIN_GPIO89_AF_KP_DKIN_3			MFP_AF3
+#define MFP_PIN_GPIO89_AF_MSL_OB_DAT2			MFP_AF4
+#define MFP_PIN_GPIO89_AF_U2D_RXERROR			MFP_AF5
+#define MFP_PIN_GPIO89_AF_MSL_IB_DAT2			MFP_AF6
+
+/* Pin GPIO90 alternate function codes */
+#define MFP_PIN_GPIO90_AF_GPIO_90			MFP_AF0
+#define MFP_PIN_GPIO90_AF_SSP1_SYSCLK			MFP_AF1
+#define MFP_PIN_GPIO90_AF_SC_UVS2			MFP_AF2
+#define MFP_PIN_GPIO90_AF_MSL_IB_DAT3			MFP_AF3
+#define MFP_PIN_GPIO90_AF_MSL_OB_DAT3			MFP_AF4
+#define MFP_PIN_GPIO90_AF_U2D_OPMODE_0			MFP_AF5
+#define MFP_PIN_GPIO90_AF_U2D_OPMODE_PF_0		MFP_AF7
+
+/* Pin GPIO91 alternate function codes */
+#define MFP_PIN_GPIO91_AF_GPIO_91			MFP_AF0
+#define MFP_PIN_GPIO91_AF_SSP3_SCLK			MFP_AF1
+#define MFP_PIN_GPIO91_AF_UART3_CTS			MFP_AF2
+#define MFP_PIN_GPIO91_AF_UART3_RTS			MFP_AF4
+
+/* Pin GPIO92 alternate function codes */
+#define MFP_PIN_GPIO92_AF_GPIO_92			MFP_AF0
+#define MFP_PIN_GPIO92_AF_SSP3_FRM			MFP_AF1
+#define MFP_PIN_GPIO92_AF_UART3_RTS			MFP_AF2
+#define MFP_PIN_GPIO92_AF_UTM_LINESTATE_0		MFP_AF3
+#define MFP_PIN_GPIO92_AF_UART3_CTS			MFP_AF4
+
+/* Pin GPIO93 alternate function codes */
+#define MFP_PIN_GPIO93_AF_GPIO_93			MFP_AF0
+#define MFP_PIN_GPIO93_AF_SSP3_TXD			MFP_AF1
+#define MFP_PIN_GPIO93_AF_UART3_TXD			MFP_AF2
+#define MFP_PIN_GPIO93_AF_UTM_LINESTATE_1		MFP_AF3
+#define MFP_PIN_GPIO93_AF_UART3_RXD			MFP_AF4
+#define MFP_PIN_GPIO93_AF_SSP3_RXD			MFP_AF5
+
+/* Pin GPIO94 alternate function codes */
+#define MFP_PIN_GPIO94_AF_GPIO_94			MFP_AF0
+#define MFP_PIN_GPIO94_AF_SSP3_RXD			MFP_AF1
+#define MFP_PIN_GPIO94_AF_UART3_RXD			MFP_AF2
+#define MFP_PIN_GPIO94_AF_UART3_TXD			MFP_AF4
+#define MFP_PIN_GPIO94_AF_SSP3_TXD			MFP_AF5
+
+/* Pin GPIO95 alternate function codes */
+#define MFP_PIN_GPIO95_AF_GPIO_95			MFP_AF0
+#define MFP_PIN_GPIO95_AF_SSP4_SCLK			MFP_AF1
+#define MFP_PIN_GPIO95_AF_U2D_RESET			MFP_AF2
+
+/* Pin GPIO96 alternate function codes */
+#define MFP_PIN_GPIO96_AF_GPIO_96			MFP_AF0
+#define MFP_PIN_GPIO96_AF_SSP4_FRM			MFP_AF1
+#define MFP_PIN_GPIO96_AF_U2D_XCVR_SEL			MFP_AF2
+#define MFP_PIN_GPIO96_AF_U2D_XCVR_SEL_PF		MFP_AF3
+
+/* Pin GPIO97 alternate function codes */
+#define MFP_PIN_GPIO97_AF_GPIO_97			MFP_AF0
+#define MFP_PIN_GPIO97_AF_SSP4_TXD			MFP_AF1
+#define MFP_PIN_GPIO97_AF_U2D_TERM_SEL			MFP_AF2
+#define MFP_PIN_GPIO97_AF_U2D_TERM_SEL_PF		MFP_AF3
+#define MFP_PIN_GPIO97_AF_SSP4_RXD			MFP_AF5
+
+/* Pin GPIO98 alternate function codes */
+#define MFP_PIN_GPIO98_AF_GPIO_98			MFP_AF0
+#define MFP_PIN_GPIO98_AF_SSP4_RXD			MFP_AF1
+#define MFP_PIN_GPIO98_AF_U2D_SUSPEND			MFP_AF2
+#define MFP_PIN_GPIO98_AF_SSP4_TXD			MFP_AF5
+
+/* Pin GPIO99 alternate function codes */
+#define MFP_PIN_GPIO99_AF_GPIO_99			MFP_AF0
+#define MFP_PIN_GPIO99_AF_UART1_RXD			MFP_AF1
+#define MFP_PIN_GPIO99_AF_USB_P2_2			MFP_AF2
+#define MFP_PIN_GPIO99_AF_USB_P2_5			MFP_AF3
+#define MFP_PIN_GPIO99_AF_USB_P2_6			MFP_AF4
+#define MFP_PIN_GPIO99_AF_U2D_TERM_SEL			MFP_AF5
+#define MFP_PIN_GPIO99_AF_UART1_TXD			MFP_AF6
+
+/* Pin GPIO100 alternate function codes */
+#define MFP_PIN_GPIO100_AF_GPIO_100			MFP_AF0
+#define MFP_PIN_GPIO100_AF_UART1_TXD			MFP_AF1
+#define MFP_PIN_GPIO100_AF_USB_P2_6			MFP_AF2
+#define MFP_PIN_GPIO100_AF_U2D_RESET			MFP_AF3
+#define MFP_PIN_GPIO100_AF_USB_P2_2			MFP_AF4
+#define MFP_PIN_GPIO100_AF_USB_P2_5			MFP_AF5
+#define MFP_PIN_GPIO100_AF_UART1_RXD			MFP_AF6
+#define MFP_PIN_GPIO100_AF_KP_MKIN_6			MFP_AF7
+
+/* Pin GPIO101 alternate function codes */
+#define MFP_PIN_GPIO101_AF_GPIO_101			MFP_AF0
+#define MFP_PIN_GPIO101_AF_UART1_CTS			MFP_AF1
+#define MFP_PIN_GPIO101_AF_USB_P2_1			MFP_AF2
+#define MFP_PIN_GPIO101_AF_U2D_XCVR_SELECT		MFP_AF3
+#define MFP_PIN_GPIO101_AF_U2D_XCVR_SELECT_PF		MFP_AF5
+#define MFP_PIN_GPIO101_AF_UART1_RTS			MFP_AF6
+#define MFP_PIN_GPIO101_AF_KP_MKIN_7			MFP_AF7
+
+/* Pin GPIO102 alternate function codes */
+#define MFP_PIN_GPIO102_AF_GPIO_102			MFP_AF0
+#define MFP_PIN_GPIO102_AF_UART1_DCD			MFP_AF1
+#define MFP_PIN_GPIO102_AF_USB_P2_4			MFP_AF2
+#define MFP_PIN_GPIO102_AF_U2D_TERM_SELECT		MFP_AF3
+#define MFP_PIN_GPIO102_AF_UART1_TXD			MFP_AF4
+#define MFP_PIN_GPIO102_AF_U2D_TERM_SELECT_PF		MFP_AF5
+#define MFP_PIN_GPIO102_AF_UART1_RXD			MFP_AF6
+
+/* Pin GPIO103 alternate function codes */
+#define MFP_PIN_GPIO103_AF_GPIO_103			MFP_AF0
+#define MFP_PIN_GPIO103_AF_UART1_DSR			MFP_AF1
+#define MFP_PIN_GPIO103_AF_USB_P2_8			MFP_AF2
+#define MFP_PIN_GPIO103_AF_U2D_SUSPENDM_X		MFP_AF3
+#define MFP_PIN_GPIO103_AF_UART1_DTR			MFP_AF6
+
+/* Pin GPIO104 alternate function codes */
+#define MFP_PIN_GPIO104_AF_GPIO_104			MFP_AF0
+#define MFP_PIN_GPIO104_AF_UART_RI			MFP_AF1
+#define MFP_PIN_GPIO104_AF_USB_P2_3			MFP_AF2
+#define MFP_PIN_GPIO104_AF_UTM_LINESTATE_0		MFP_AF3
+#define MFP_PIN_GPIO104_AF_UART1_RXD			MFP_AF4
+#define MFP_PIN_GPIO104_AF_KP_MKOUT_6			MFP_AF5
+
+/* Pin GPIO105 alternate function codes */
+#define MFP_PIN_GPIO105_AF_GPIO_105			MFP_AF0
+#define MFP_PIN_GPIO105_AF_UART1_DTR			MFP_AF1
+#define MFP_PIN_GPIO105_AF_USB_P2_5			MFP_AF2
+#define MFP_PIN_GPIO105_AF_UTM_LINESTATE_1		MFP_AF3
+#define MFP_PIN_GPIO105_AF_KP_MKOUT_7			MFP_AF5
+#define MFP_PIN_GPIO105_AF_UART1_DSR			MFP_AF6
+
+/* Pin GPIO106 alternate function codes */
+#define MFP_PIN_GPIO106_AF_GPIO_106			MFP_AF0
+#define MFP_PIN_GPIO106_AF_UART1_RTS			MFP_AF1
+#define MFP_PIN_GPIO106_AF_USB_P2_7			MFP_AF2
+#define MFP_PIN_GPIO106_AF_UTM_OPMODE_1			MFP_AF3
+#define MFP_PIN_GPIO106_AF_UTM_OPMODE_PF_1		MFP_AF3
+#define MFP_PIN_GPIO106_AF_UART1_CTS			MFP_AF6
+
+/* Pin GPIO107 alternate function codes */
+#define MFP_PIN_GPIO107_AF_GPIO_107			MFP_AF0
+#define MFP_PIN_GPIO107_AF_UART3_CTS			MFP_AF1
+#define MFP_PIN_GPIO107_AF_KP_DKIN_0			MFP_AF2
+#define MFP_PIN_GPIO107_AF_UART3_RTS			MFP_AF3
+
+/* Pin GPIO108 alternate function codes */
+#define MFP_PIN_GPIO108_AF_GPIO_108			MFP_AF0
+#define MFP_PIN_GPIO108_AF_UART3_RTS			MFP_AF1
+#define MFP_PIN_GPIO108_AF_KP_DKIN_1			MFP_AF2
+#define MFP_PIN_GPIO108_AF_UART3_CTS			MFP_AF3
+
+/* Pin GPIO109 alternate function codes */
+#define MFP_PIN_GPIO109_AF_GPIO_109			MFP_AF0
+#define MFP_PIN_GPIO109_AF_UART3_TXD			MFP_AF1
+#define MFP_PIN_GPIO109_AF_KP_DKIN_2			MFP_AF2
+#define MFP_PIN_GPIO109_AF_UART3_RXD			MFP_AF3
+#define MFP_PIN_GPIO109_AF_UTM_LINESTATE_0		MFP_AF4
+
+/* Pin GPIO110 alternate function codes */
+#define MFP_PIN_GPIO110_AF_GPIO_110			MFP_AF0
+#define MFP_PIN_GPIO110_AF_UART3_RXD			MFP_AF1
+#define MFP_PIN_GPIO110_AF_KP_DKIN_3			MFP_AF2
+#define MFP_PIN_GPIO110_AF_UART3_TXD			MFP_AF3
+#define MFP_PIN_GPIO110_AF_U2D_OPMODE_1			MFP_AF4
+#define MFP_PIN_GPIO110_AF_U2D_OPMODE_PF_1		MFP_AF5
+
+/* Pin GPIO111 alternate function codes */
+#define MFP_PIN_GPIO111_AF_GPIO_111			MFP_AF0
+#define MFP_PIN_GPIO111_AF_UART2_RTS			MFP_AF1
+#define MFP_PIN_GPIO111_AF_KP_DKIN_4			MFP_AF2
+#define MFP_PIN_GPIO111_AF_UART2_CTS			MFP_AF3
+
+/* Pin GPIO112 alternate function codes */
+#define MFP_PIN_GPIO112_AF_GPIO_112			MFP_AF0
+#define MFP_PIN_GPIO112_AF_UART2_RXD			MFP_AF1
+#define MFP_PIN_GPIO112_AF_KP_DKIN_5			MFP_AF2
+#define MFP_PIN_GPIO112_AF_UART2_TXD			MFP_AF3
+#define MFP_PIN_GPIO112_AF_KP_MKIN_6			MFP_AF4
+
+/* Pin GPIO113 alternate function codes */
+#define MFP_PIN_GPIO113_AF_GPIO_113			MFP_AF0
+#define MFP_PIN_GPIO113_AF_UART2_TXD			MFP_AF1
+#define MFP_PIN_GPIO113_AF_KP_DKIN_6			MFP_AF2
+#define MFP_PIN_GPIO113_AF_UART2_RXD			MFP_AF3
+#define MFP_PIN_GPIO113_AF_KP_MKIN_7			MFP_AF4
+
+/* Pin GPIO114 alternate function codes */
+#define MFP_PIN_GPIO114_AF_GPIO_114			MFP_AF0
+#define MFP_PIN_GPIO114_AF_UART2_CTS			MFP_AF1
+#define MFP_PIN_GPIO114_AF_KP_DKIN_7			MFP_AF2
+#define MFP_PIN_GPIO114_AF_KP_UART2_RTS			MFP_AF3
+
+/* Pin GPIO115 alternate function codes */
+#define MFP_PIN_GPIO115_AF_GPIO_115			MFP_AF0
+#define MFP_PIN_GPIO115_AF_KP_MKIN_0			MFP_AF1
+#define MFP_PIN_GPIO115_AF_KP_DKIN_0			MFP_AF2
+
+/* Pin GPIO116 alternate function codes */
+#define MFP_PIN_GPIO116_AF_GPIO_116			MFP_AF0
+#define MFP_PIN_GPIO116_AF_KP_MKIN_1			MFP_AF1
+#define MFP_PIN_GPIO116_AF_KP_DKIN_1			MFP_AF2
+
+/* Pin GPIO117 alternate function codes */
+#define MFP_PIN_GPIO117_AF_GPIO_117			MFP_AF0
+#define MFP_PIN_GPIO117_AF_KP_MKIN_2			MFP_AF1
+#define MFP_PIN_GPIO117_AF_KP_DKIN_2			MFP_AF2
+
+/* Pin GPIO118 alternate function codes */
+#define MFP_PIN_GPIO118_AF_GPIO_118			MFP_AF0
+#define MFP_PIN_GPIO118_AF_KP_MKIN_3			MFP_AF1
+#define MFP_PIN_GPIO118_AF_KP_DKIN_3			MFP_AF2
+
+/* Pin GPIO119 alternate function codes */
+#define MFP_PIN_GPIO119_AF_GPIO_119			MFP_AF0
+#define MFP_PIN_GPIO119_AF_KP_MKIN_4			MFP_AF1
+#define MFP_PIN_GPIO119_AF_KP_DKIN_4			MFP_AF2
+
+/* Pin GPIO120 alternate function codes */
+#define MFP_PIN_GPIO120_AF_GPIO_120			MFP_AF0
+#define MFP_PIN_GPIO120_AF_KP_MKIN_5			MFP_AF1
+#define MFP_PIN_GPIO120_AF_KP_DKIN_5			MFP_AF2
+
+/* Pin GPIO121 alternate function codes */
+#define MFP_PIN_GPIO121_AF_GPIO_121			MFP_AF0
+#define MFP_PIN_GPIO121_AF_KP_MKOUT_0			MFP_AF1
+#define MFP_PIN_GPIO121_AF_KP_DKIN_6			MFP_AF2
+
+/* Pin GPIO122 alternate function codes */
+#define MFP_PIN_GPIO122_AF_GPIO_122			MFP_AF0
+#define MFP_PIN_GPIO122_AF_KP_MKOUT_1			MFP_AF1
+#define MFP_PIN_GPIO122_AF_KP_DKIN_5			MFP_AF2
+
+/* Pin GPIO123 alternate function codes */
+#define MFP_PIN_GPIO123_AF_GPIO_123			MFP_AF0
+#define MFP_PIN_GPIO123_AF_KP_MKOUT_2			MFP_AF1
+#define MFP_PIN_GPIO123_AF_KP_DKIN_4			MFP_AF2
+
+/* Pin GPIO124 alternate function codes */
+#define MFP_PIN_GPIO124_AF_GPIO_124			MFP_AF0
+#define MFP_PIN_GPIO124_AF_KP_MKOUT_3			MFP_AF1
+#define MFP_PIN_GPIO124_AF_KP_DKIN_3			MFP_AF2
+
+/* Pin GPIO125 alternate function codes */
+#define MFP_PIN_GPIO125_AF_GPIO_125			MFP_AF0
+#define MFP_PIN_GPIO125_AF_KP_MKOUT_4			MFP_AF1
+#define MFP_PIN_GPIO125_AF_KP_MKIN_2			MFP_AF2
+
+/* Pin GPIO126 alternate function codes */
+#define MFP_PIN_GPIO126_AF_GPIO_126			MFP_AF0
+#define MFP_PIN_GPIO126_AF_RTC_MVT			MFP_AF1
+#define MFP_PIN_GPIO126_AF_OW_DQ			MFP_AF2
+#define MFP_PIN_GPIO126_AF_EXT_CLK			MFP_AF3
+#define MFP_PIN_GPIO126_AF_KP_MKOUT_7			MFP_AF4
+
+/* Pin GPIO127 alternate function codes */
+#define MFP_PIN_GPIO127_AF_GPIO_127			MFP_AF0
+#define MFP_PIN_GPIO127_AF_LCD_nCS			MFP_AF1
+#define MFP_PIN_GPIO127_AF_KP_DKIN_0			MFP_AF5
+#define MFP_PIN_GPIO127_AF_CLK_BYPASS_GB		MFP_AF7
+
+/* Pin GPIO0_2 alternate function codes */
+#define MFP_PIN_GPIO0_2_AF_GPIO_0			MFP_AF0
+#define MFP_PIN_GPIO0_2_AF_UHC_USBHPEN_MVT		MFP_AF1
+#define MFP_PIN_GPIO0_2_AF_KP_DKIN_0			MFP_AF2
+/*#define MFP_PIN_GPIO0_2_AF_ONE_WIRE			MFP_AF2 */
+
+/* Pin GPIO1_2 alternate function codes */
+#define MFP_PIN_GPIO1_2_AF_GPIO_0			MFP_AF0
+#define MFP_PIN_GPIO1_2_AF_UHC_USBHPWR_MVT		MFP_AF1
+#define MFP_PIN_GPIO1_2_AF_KP_DKIN_1			MFP_AF2
+
+/* Pin GPIO2_2 alternate function codes */
+#define MFP_PIN_GPIO2_2_AF_GPIO_2			MFP_AF0
+#define MFP_PIN_GPIO2_2_AF_KP_MKIN_6			MFP_AF1
+#define MFP_PIN_GPIO2_2_AF_KP_DKIN_6			MFP_AF2
+
+/* Pin GPIO3_2 alternate function codes */
+#define MFP_PIN_GPIO3_2_AF_GPIO_3			MFP_AF0
+#define MFP_PIN_GPIO3_2_AF_KP_MKIN_7			MFP_AF1
+#define MFP_PIN_GPIO3_2_AF_KP_DKIN_7			MFP_AF2
+
+/* Pin GPIO4_2 alternate function codes */
+#define MFP_PIN_GPIO4_2_AF_GPIO_4			MFP_AF0
+#define MFP_PIN_GPIO4_2_AF_KP_MK0UT_5			MFP_AF1
+#define MFP_PIN_GPIO4_2_AF_KP_DKIN_1			MFP_AF2
+
+/* Pin GPIO5_2 alternate function codes */
+#define MFP_PIN_GPIO5_2_AF_GPIO_5			MFP_AF0
+#define MFP_PIN_GPIO5_2_AF_KP_MKOUT_6			MFP_AF1
+#define MFP_PIN_GPIO5_2_AF_MK_DKIN_0			MFP_AF2
+
+/* Pin GPIO6_2 alternate function codes */
+#define MFP_PIN_GPIO6_2_AF_GPIO_6			MFP_AF0
+#define MFP_PIN_GPIO6_2_AF_MK_MKOUT_7			MFP_AF1
+
+/* Pin DF_CLE alternate function codes */
+#define MFP_PIN_DF_CLE_AF_ND_CLE			MFP_AF0
+
+/* Pin DF_ALE_nWE1 alternate function codes */
+#define MFP_PIN_DF_ALE_nWE1_AF_CD_ADV1			MFP_AF0
+#define MFP_PIN_DF_ALE_nWE1_AF_ND_ALE			MFP_AF1
+
+/* Pin DF_SCLK_E alternate function codes */
+#define MFP_PIN_DF_SCLK_E_AF_DF_SCLK_E			MFP_AF0
+
+/* Pin DF_SCLK_S alternate function codes */
+#define MFP_PIN_DF_SCLK_S_AF_DF_SCLK_S			MFP_AF0
+
+/* Pin nBE0 alternate function codes */
+#define MFP_PIN_nBE0_AF_DF_nBE0				MFP_AF0
+
+/* Pin nBE1 alternate function codes */
+#define MFP_PIN_nBE1_AF_DF_nBE1				MFP_AF0
+
+/* Pin DF_INT_RnB alternate function codes */
+#define MFP_PIN_DF_INT_RnB_AF_INT_RnB			MFP_AF0
+
+/* Pin nLUA alternate function codes */
+#define MFP_PIN_DF_nLUA_AF_DF_nLUA			MFP_AF0
+#define MFP_PIN_DF_nLUA_AF_CD_ADV2			MFP_AF1
+
+/* Pin nLLA alternate function codes */
+#define MFP_PIN_DF_nLLA_AF_DF_nLLA			MFP_AF0
+#define MFP_PIN_DF_nLLA_AF_CD_ADV1			MFP_AF1
+
+/* Pin DF_nWE alternate function codes */
+#define MFP_PIN_DF_nWE_AF_CD_WE				MFP_AF0
+#define MFP_PIN_DF_nWE_AF_ND_WE				MFP_AF1
+
+/* Pin DF_nRE alternate function codes */
+#define MFP_PIN_DF_nRE_AF_CD_OE				MFP_AF0
+#define MFP_PIN_DF_nRE_AF_ND_RE				MFP_AF1
+
+/* Pin DF_ADDR0 alternate functino codes */
+#define MFP_PIN_DF_ADDR0_AF_DF_ADDR0			MFP_AF0
+
+/* Pin DF_ADDR1 alternate functino codes */
+#define MFP_PIN_DF_ADDR0_AF_DF_ADDR1			MFP_AF0
+
+/* Pin DF_ADDR2 alternate functino codes */
+#define MFP_PIN_DF_ADDR0_AF_DF_ADDR2			MFP_AF0
+
+/* Pin DF_ADDR3 alternate functino codes */
+#define MFP_PIN_DF_ADDR0_AF_DF_ADDR3			MFP_AF0
+
+/* Pin nCS0 alternate function codes */
+#define MFP_PIN_nCS0_AF_nCS0				MFP_AF0
+#define MFP_PIN_nCS0_AF_DF_XCVREN			MFP_AF1
+
+/* Pin nCS1 alternate function codes */
+#define MFP_PIN_nCS1_AF_nCS				MFP_AF0
+#define MFP_PIN_nCS1_AF_DF_UNLOCK			MFP_AF1
+
+/* Pin DF_nCS0 alternate function codes */
+#define MFP_PIN_DF_nCS0_AF_DF_nCS0			MFP_AF0
+#define MFP_PIN_DF_nCS0_AF_ND_nCS0			MFP_AF1
+
+/* Pin DF_nCS1 alternate function codes */
+#define MFP_PIN_DF_nCS1_AF_DF_nCS1			MFP_AF0
+#define MFP_PIN_DF_nCS1_AF_ND_nCS1			MFP_AF1
+
+
+/* Pin DF_IO15..0 alternate function codes */
+/*   - Note that, in use, all 16 pins must have the same AF */
+/*  Currently, only Alternate Function 1 is actually available */
+/*  for these pins */
+
+#define MFP_PIN_DF_IO_0_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_0_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_1_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_1_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_2_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_2_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_3_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_3_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_4_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_4_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_5_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_5_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_6_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_6_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_7_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_7_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_8_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_8_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_9_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_9_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_10_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_10_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_11_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_11_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_12_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_12_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_13_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_13_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_14_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_14_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_15_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_15_AF_ND				MFP_AF1
+
+#else
+#define	MFP_PIN_GPIO0		((0x00B4 << 16) | (0))
+#define	MFP_PIN_GPIO1		((0x00B8 << 16) | (1))
+#define	MFP_PIN_GPIO2		((0x00BC << 16) | (2))
+#define	MFP_PIN_GPIO3		((0x027C << 16) | (3))
+#define	MFP_PIN_GPIO4		((0x0280 << 16) | (4))
+#define MFP_PIN_DF_SCLK_E_MFPR	((0x0250 << 16) | (0xff))
+#define	MFP_PIN_nBE0		((0x0204 << 16) | (0xff))
+#define	MFP_PIN_nBE1		((0x0208 << 16) | (0xff))
+#define	MFP_PIN_DF_ALE_nWE	((0x020C << 16) | (0xff))
+#define	MFP_PIN_DF_INT_RnB	((0x00C8 << 16) | (0xff))
+#define	MFP_PIN_DF_nCS0		((0x0248 << 16) | (0xff))
+#define	MFP_PIN_DF_nCS1		((0x0278 << 16) | (0xff))
+#define	MFP_PIN_DF_nWE		((0x00CC << 16) | (0xff))
+#define	MFP_PIN_DF_nRE		((0x0200 << 16) | (0xff))
+#define	MFP_PIN_nLUA		((0x0244 << 16) | (0xff))
+#define	MFP_PIN_nLLA		((0x0254 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR0	((0x0210 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR1	((0x0214 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR2	((0x0218 << 16) | (0xff))
+#define	MFP_PIN_DF_ADDR3	((0x021C << 16) | (0xff))
+#define MFP_PIN_CLE_nOE		((0x0240 << 16) | (0xff))
+#define	MFP_PIN_DF_IO0		((0x0220 << 16) | (0xff))
+#define	MFP_PIN_DF_IO8		((0x0224 << 16) | (0xff))
+#define	MFP_PIN_DF_IO1		((0x0228 << 16) | (0xff))
+#define	MFP_PIN_DF_IO9		((0x022C << 16) | (0xff))
+#define	MFP_PIN_DF_IO2		((0x0230 << 16) | (0xff))
+#define	MFP_PIN_DF_IO10		((0x0234 << 16) | (0xff))
+#define	MFP_PIN_DF_IO3		((0x0238 << 16) | (0xff))
+#define	MFP_PIN_DF_IO11		((0x023C << 16) | (0xff))
+#define	MFP_PIN_DF_IO4		((0x0258 << 16) | (0xff))
+#define	MFP_PIN_DF_IO12		((0x025C << 16) | (0xff))
+#define	MFP_PIN_DF_IO5		((0x0260 << 16) | (0xff))
+#define	MFP_PIN_DF_IO13		((0x0264 << 16) | (0xff))
+#define	MFP_PIN_DF_IO6		((0x0268 << 16) | (0xff))
+#define	MFP_PIN_DF_IO14		((0x026C << 16) | (0xff))
+#define	MFP_PIN_DF_IO7		((0x0270 << 16) | (0xff))
+#define	MFP_PIN_DF_IO15		((0x0274 << 16) | (0xff))
+#define	MFP_PIN_GPIO5		((0x0284 << 16) | (5))
+#define	MFP_PIN_GPIO6		((0x0288 << 16) | (6))
+#define	MFP_PIN_GPIO7		((0x028C << 16) | (7))
+#define	MFP_PIN_GPIO8		((0x0290 << 16) | (8))
+#define	MFP_PIN_GPIO9		((0x0294 << 16) | (9))
+#define	MFP_PIN_GPIO10		((0x0298 << 16) | (9))
+#define	MFP_PIN_GPIO11		((0x029C << 16) | (11))
+#define	MFP_PIN_GPIO12		((0x02A0 << 16) | (12))
+#define	MFP_PIN_GPIO13		((0x02A4 << 16) | (13))
+#define	MFP_PIN_GPIO14		((0x02A8 << 16) | (14))
+#define	MFP_PIN_GPIO15		((0x02AC << 16) | (15))
+#define	MFP_PIN_GPIO16		((0x02B0 << 16) | (16))
+#define	MFP_PIN_GPIO17		((0x02B4 << 16) | (17))
+#define	MFP_PIN_GPIO18		((0x02B8 << 16) | (18))
+#define	MFP_PIN_GPIO19		((0x02BC << 16) | (19))
+#define	MFP_PIN_GPIO20		((0x02C0 << 16) | (20))
+#define	MFP_PIN_GPIO21		((0x02C4 << 16) | (21))
+#define	MFP_PIN_GPIO22		((0x02C8 << 16) | (22))
+#define	MFP_PIN_GPIO23		((0x02CC << 16) | (23))
+#define	MFP_PIN_GPIO24		((0x02D0 << 16) | (24))
+#define	MFP_PIN_GPIO25		((0x02D4 << 16) | (25))
+#define	MFP_PIN_GPIO26		((0x02D8 << 16) | (26))
+#define	MFP_PIN_GPIO27		((0x0400 << 16) | (27))
+#define	MFP_PIN_GPIO28		((0x0404 << 16) | (28))
+#define	MFP_PIN_GPIO29		((0x0408 << 16) | (29))
+#define MFP_PIN_ULPI_STP        ((0x040C << 16) | (0xff))
+#define MFP_PIN_ULPI_NXT        ((0x0410 << 16) | (0xff))
+#define MFP_PIN_ULPI_DIR        ((0x0414 << 16) | (0xff))
+#define	MFP_PIN_GPIO30		((0x0418 << 16) | (30))
+#define	MFP_PIN_GPIO31		((0x041C << 16) | (31))
+#define	MFP_PIN_GPIO32		((0x0420 << 16) | (32))
+#define	MFP_PIN_GPIO33		((0x0424 << 16) | (33))
+#define	MFP_PIN_GPIO34		((0x0428 << 16) | (34))
+#define	MFP_PIN_GPIO35		((0x042C << 16) | (35))
+#define	MFP_PIN_GPIO36		((0x0430 << 16) | (36))
+#define	MFP_PIN_GPIO37		((0x0434 << 16) | (37))
+#define	MFP_PIN_GPIO38		((0x0438 << 16) | (38))
+#define	MFP_PIN_GPIO39		((0x043C << 16) | (39))
+#define	MFP_PIN_GPIO40		((0x0440 << 16) | (40))
+#define	MFP_PIN_GPIO41		((0x0444 << 16) | (41))
+#define	MFP_PIN_GPIO42		((0x0448 << 16) | (42))
+#define	MFP_PIN_GPIO43		((0x044C << 16) | (43))
+#define	MFP_PIN_GPIO44		((0x0450 << 16) | (44))
+#define	MFP_PIN_GPIO45		((0x0454 << 16) | (45))
+#define	MFP_PIN_GPIO46		((0x0458 << 16) | (46))
+#define	MFP_PIN_GPIO47		((0x045C << 16) | (47))
+#define	MFP_PIN_GPIO48		((0x0460 << 16) | (48))
+#define	MFP_PIN_GPIO49		((0x0464 << 16) | (49))
+#define	MFP_PIN_GPIO50		((0x0468 << 16) | (50))
+#define	MFP_PIN_GPIO51		((0x046C << 16) | (51))
+#define	MFP_PIN_GPIO52		((0x0470 << 16) | (52))
+#define	MFP_PIN_GPIO53		((0x0474 << 16) | (53))
+#define	MFP_PIN_GPIO54		((0x0478 << 16) | (54))
+#define	MFP_PIN_GPIO55		((0x047C << 16) | (55))
+#define	MFP_PIN_GPIO56		((0x0480 << 16) | (56))
+#define	MFP_PIN_GPIO57		((0x0484 << 16) | (57))
+#define	MFP_PIN_GPIO58		((0x0488 << 16) | (58))
+#define	MFP_PIN_GPIO59		((0x048C << 16) | (59))
+#define	MFP_PIN_GPIO60		((0x0490 << 16) | (60))
+#define	MFP_PIN_GPIO61		((0x0494 << 16) | (61))
+#define	MFP_PIN_GPIO62		((0x0498 << 16) | (62))
+#define	MFP_PIN_GPIO63		((0x049C << 16) | (63))
+#define	MFP_PIN_GPIO64		((0x04A0 << 16) | (64))
+#define	MFP_PIN_GPIO65		((0x04A4 << 16) | (65))
+#define	MFP_PIN_GPIO66		((0x04A8 << 16) | (66))
+#define	MFP_PIN_GPIO67		((0x04AC << 16) | (67))
+#define	MFP_PIN_GPIO68		((0x04B0 << 16) | (68))
+#define	MFP_PIN_GPIO69		((0x04B4 << 16) | (69))
+#define	MFP_PIN_GPIO70		((0x04B8 << 16) | (70))
+#define	MFP_PIN_GPIO71		((0x04BC << 16) | (71))
+#define	MFP_PIN_GPIO72		((0x04C0 << 16) | (72))
+#define	MFP_PIN_GPIO73		((0x04C4 << 16) | (73))
+#define	MFP_PIN_GPIO74		((0x04C8 << 16) | (74))
+#define	MFP_PIN_GPIO75		((0x04CC << 16) | (75))
+#define	MFP_PIN_GPIO76		((0x04D0 << 16) | (76))
+#define	MFP_PIN_GPIO77		((0x04D4 << 16) | (77))
+#define	MFP_PIN_GPIO78		((0x04D8 << 16) | (78))
+#define	MFP_PIN_GPIO79		((0x04DC << 16) | (79))
+#define	MFP_PIN_GPIO80		((0x04E0 << 16) | (80))
+#define	MFP_PIN_GPIO81		((0x04E4 << 16) | (81))
+#define	MFP_PIN_GPIO82		((0x04E8 << 16) | (82))
+#define	MFP_PIN_GPIO83		((0x04EC << 16) | (83))
+#define	MFP_PIN_GPIO84		((0x04F0 << 16) | (84))
+#define	MFP_PIN_GPIO85		((0x04F4 << 16) | (85))
+#define	MFP_PIN_GPIO86		((0x04F8 << 16) | (86))
+#define	MFP_PIN_GPIO87		((0x04FC << 16) | (87))
+#define	MFP_PIN_GPIO88		((0x0500 << 16) | (88))
+#define	MFP_PIN_GPIO89		((0x0504 << 16) | (89))
+#define	MFP_PIN_GPIO90		((0x0508 << 16) | (90))
+#define	MFP_PIN_GPIO91		((0x050C << 16) | (91))
+#define	MFP_PIN_GPIO92		((0x0510 << 16) | (92))
+#define	MFP_PIN_GPIO93		((0x0514 << 16) | (93))
+#define	MFP_PIN_GPIO94		((0x0518 << 16) | (94))
+#define	MFP_PIN_GPIO95		((0x051C << 16) | (95))
+#define	MFP_PIN_GPIO96		((0x0520 << 16) | (96))
+#define	MFP_PIN_GPIO97		((0x0524 << 16) | (97))
+#define	MFP_PIN_GPIO98		((0x0528 << 16) | (98))
+#define	MFP_PIN_GPIO99		((0x0600 << 16) | (99))
+#define	MFP_PIN_GPIO100		((0x0604 << 16) | (100))
+#define	MFP_PIN_GPIO101		((0x0608 << 16) | (101))
+#define	MFP_PIN_GPIO102		((0x060C << 16) | (102))
+#define	MFP_PIN_GPIO103		((0x0610 << 16) | (103))
+#define	MFP_PIN_GPIO104		((0x0614 << 16) | (104))
+#define	MFP_PIN_GPIO105		((0x0618 << 16) | (105))
+#define	MFP_PIN_GPIO106		((0x061C << 16) | (106))
+#define	MFP_PIN_GPIO107		((0x0620 << 16) | (107))
+#define	MFP_PIN_GPIO108		((0x0624 << 16) | (108))
+#define	MFP_PIN_GPIO109		((0x0628 << 16) | (109))
+#define	MFP_PIN_GPIO110		((0x062C << 16) | (110))
+#define	MFP_PIN_GPIO111		((0x0630 << 16) | (111))
+#define	MFP_PIN_GPIO112		((0x0634 << 16) | (112))
+#define	MFP_PIN_GPIO113		((0x0638 << 16) | (113))
+#define	MFP_PIN_GPIO114		((0x063C << 16) | (114))
+#define	MFP_PIN_GPIO115		((0x0640 << 16) | (115))
+#define	MFP_PIN_GPIO116		((0x0644 << 16) | (116))
+#define	MFP_PIN_GPIO117		((0x0648 << 16) | (117))
+#define	MFP_PIN_GPIO118		((0x064C << 16) | (118))
+#define	MFP_PIN_GPIO119		((0x0650 << 16) | (119))
+#define	MFP_PIN_GPIO120		((0x0654 << 16) | (120))
+#define	MFP_PIN_GPIO121		((0x0658 << 16) | (121))
+#define	MFP_PIN_GPIO122		((0x065C << 16) | (122))
+#define	MFP_PIN_GPIO123		((0x0660 << 16) | (123))
+#define	MFP_PIN_GPIO124		((0x0664 << 16) | (124))
+#define	MFP_PIN_GPIO125		((0x0668 << 16) | (125))
+#define	MFP_PIN_GPIO126		((0x066C << 16) | (126))
+#define	MFP_PIN_GPIO127		((0x0670 << 16) | (127))
+#define	MFP_PIN_GPIO0_2		((0x0674 << 16) | (0))
+#define	MFP_PIN_GPIO1_2		((0x0678 << 16) | (1))
+#define	MFP_PIN_GPIO2_2		((0x02DC << 16) | (2))
+#define	MFP_PIN_GPIO3_2		((0x02E0 << 16) | (3))
+#define	MFP_PIN_GPIO4_2		((0x02E4 << 16) | (4))
+#define	MFP_PIN_GPIO5_2		((0x02E8 << 16) | (5))
+#define	MFP_PIN_GPIO6_2		((0x02EC << 16) | (6))
+#define MFP_PIN_GPIO7_2		((0x052C << 16) | (7))
+#define MFP_PIN_GPIO8_2		((0x0530 << 16) | (8))
+#define MFP_PIN_GPIO9_2		((0x0534 << 16) | (9))
+#define MFP_PIN_GPIO10_2	((0x0538 << 16) | (10))
+#define MFP_PIN_GPIO11_2	((0x053C << 16) | (11))
+#define MFP_PIN_GPIO12_2	((0x0540 << 16) | (12))
+
+#define MHN_MIN_MFP_OFFSET				(MFP_OFFSET(MFP_PIN_GPIO0))
+#define MHN_MAX_MFP_OFFSET				(MFP_OFFSET(MFP_PIN_GPIO1_2))
+
+/* Pin GPIO0 alternate function codes */
+#define MFP_PIN_GPIO0_AF_GPIO_0				MFP_AF0
+#define	MFP_PIN_GPIO0_AF_DF_RDY				MFP_AF1
+
+/* Pin GPIO1 alternate function codes */
+#define MFP_PIN_GPIO1_AF_GPIO_1				MFP_AF0
+#define	MFP_PIN_GPIO1_AF_nCS2				MFP_AF1
+
+/* Pin GPIO2 alternate function codes */
+#define MFP_PIN_GPIO2_AF_GPIO_2				MFP_AF0
+#define MFP_PIN_GPIO2_AF_nCS3				MFP_AF1
+#define	MFP_PIN_GPIO2_AF_nXCVREN			MFP_AF2
+
+/* Pin GPIO3 alternate function codes */
+#define MFP_PIN_GPIO3_AF_GPIO_3				MFP_AF0
+#define	MFP_PIN_GPIO3_AF_uIO_IN				MFP_AF1
+#define	MFP_PIN_GPIO3_AF_KP_DKIN_6			MFP_AF2
+#define	MFP_PIN_GPIO3_AF_MM1_DAT0			MFP_AF4
+
+/* Pin GPIO4 alternate function codes */
+#define MFP_PIN_GPIO4_AF_GPIO_4				MFP_AF0
+#define	MFP_PIN_GPIO4_AF_uSIM_CARD_STATE		MFP_AF1
+#define	MFP_PIN_GPIO4_AF_KP_DKIN_7			MFP_AF2
+#define	MFP_PIN_GPIO4_AF_MM1_DAT1			MFP_AF4
+
+/* Pin GPIO5 alternate function codes */
+#define MFP_PIN_GPIO5_AF_GPIO_5				MFP_AF0
+#define	MFP_PIN_GPIO5_AF_uSIM_uCLK			MFP_AF1
+#define	MFP_PIN_GPIO5_AF_KP_MKIN_0			MFP_AF2
+#define	MFP_PIN_GPIO5_AF_MM1_DAT2			MFP_AF4
+
+/* Pin GPIO6 alternate function codes */
+#define MFP_PIN_GPIO6_AF_GPIO_6				MFP_AF0
+#define	MFP_PIN_GPIO6_AF_uSIM_uRST			MFP_AF1
+#define	MFP_PIN_GPIO6_AF_KP_MKIN_1			MFP_AF2
+#define	MFP_PIN_GPIO6_AF_MM1_DAT3			MFP_AF4
+
+/* Pin GPIO7 alternate function codes */
+#define MFP_PIN_GPIO7_AF_GPIO_7				MFP_AF0
+#define	MFP_PIN_GPIO7_AF_KP_MKOUT_5			MFP_AF1
+#define	MFP_PIN_GPIO7_AF_UART3_RXD			MFP_AF2
+#define	MFP_PIN_GPIO7_AF_MM1_CLK			MFP_AF4
+#define	MFP_PIN_GPIO7_AF_UART3_TXD			MFP_AF6
+#define	MFP_PIN_GPIO7_AF_CLK_BYPASS_XSC			MFP_AF7
+
+/* Pin GPIO8 alternate function codes */
+#define MFP_PIN_GPIO8_AF_GPIO_8				MFP_AF0
+#define	MFP_PIN_GPIO8_AF_UART3_TXD			MFP_AF2
+#define	MFP_PIN_GPIO8_AF_MM1_CMD			MFP_AF4
+#define	MFP_PIN_GPIO8_AF_CIR_OUT			MFP_AF5
+#define	MFP_PIN_GPIO8_AF_UART3_RXD			MFP_AF6
+
+/* Pin GPIO9 alternate function codes */
+#define MFP_PIN_GPIO9_AF_GPIO_9				MFP_AF0
+#define	MFP_PIN_GPIO9_AF_SCIO				MFP_AF1
+#define	MFP_PIN_GPIO9_AF_KP_MKIN_6			MFP_AF3
+#define	MFP_PIN_GPIO9_AF_MM2_DAT0			MFP_AF4
+
+/* Pin GPIO10 alternate function codes */
+#define MFP_PIN_GPIO10_AF_GPIO_10			MFP_AF0
+#define	MFP_PIN_GPIO10_AF_SC_CARD_STATE			MFP_AF1
+#define	MFP_PIN_GPIO10_AF_KP_MKIN_7			MFP_AF3
+#define	MFP_PIN_GPIO10_AF_MM2_DAT1			MFP_AF4
+
+/* Pin GPIO11 alternate function codes */
+#define MFP_PIN_GPIO11_AF_GPIO_11			MFP_AF0
+#define	MFP_PIN_GPIO11_AF_SC_uCLK			MFP_AF1
+#define	MFP_PIN_GPIO11_AF_KP_MKOUT_5			MFP_AF3
+#define	MFP_PIN_GPIO11_AF_MM2_DAT2			MFP_AF4
+
+/* Pin GPIO12 alternate function codes */
+#define MFP_PIN_GPIO12_AF_GPIO_12			MFP_AF0
+#define	MFP_PIN_GPIO12_AF_SC_uRST			MFP_AF1
+#define	MFP_PIN_GPIO12_AF_KP_MKOUT_6			MFP_AF3
+#define	MFP_PIN_GPIO12_AF_MM2_DAT3			MFP_AF4
+
+/* Pin GPIO13 alternate function codes */
+#define MFP_PIN_GPIO13_AF_GPIO_13			MFP_AF0
+#define	MFP_PIN_GPIO13_AF_KP_MKOUT_7			MFP_AF3
+#define	MFP_PIN_GPIO13_AF_MM2_CLK			MFP_AF4
+
+/* Pin GPIO14 alternate function codes */
+#define MFP_PIN_GPIO14_AF_GPIO_14			MFP_AF0
+#define	MFP_PIN_GPIO14_AF_MM2_CMD			MFP_AF4
+#define	MFP_PIN_GPIO14_AF_MM1_CMD			MFP_AF5
+
+/* Pin GPIO15 alternate function codes */
+#define MFP_PIN_GPIO15_AF_GPIO_15			MFP_AF0
+#define	MFP_PIN_GPIO15_AF_SC_UVS_0			MFP_AF1
+#define	MFP_PIN_GPIO15_AF_LCD_nCS			MFP_AF2
+#define	MFP_PIN_GPIO15_AF_UART2_CTS			MFP_AF3
+#define	MFP_PIN_GPIO15_AF_UART2_RTS			MFP_AF4
+#define	MFP_PIN_GPIO15_AF_MM1_CMD			MFP_AF5
+#define	MFP_PIN_GPIO15_AF_SSP1_CLK			MFP_AF6
+
+/* Pin GPIO16 alternate function codes */
+#define MFP_PIN_GPIO16_AF_GPIO_16			MFP_AF0
+#define	MFP_PIN_GPIO16_AF_uSIM_UVS_0			MFP_AF1
+#define	MFP_PIN_GPIO16_AF_SSP1_FRM			MFP_AF2
+#define	MFP_PIN_GPIO16_AF_CIR_OUT			MFP_AF3
+#define	MFP_PIN_GPIO16_AF_UART2_RTS			MFP_AF4
+#define	MFP_PIN_GPIO16_AF_UART2_CTS			MFP_AF5
+#define MFP_PIN_GPIO16_AF_KP_DKIN_6			MFP_AF6
+
+/* Pin GPIO17 alternate function codes */
+#define MFP_PIN_GPIO17_AF_GPIO_17			MFP_AF0
+#define	MFP_PIN_GPIO17_AF_PWM0_OUT			MFP_AF1
+#define	MFP_PIN_GPIO17_AF_SSP2_FRM			MFP_AF2
+#define	MFP_PIN_GPIO17_AF_AC97_SDATA_IN_2		MFP_AF3
+#define	MFP_PIN_GPIO17_AF_EXT_SYNC_MVT_0		MFP_AF6
+
+/* Pin GPIO18 alternate function codes */
+#define MFP_PIN_GPIO18_AF_GPIO_18			MFP_AF0
+#define	MFP_PIN_GPIO18_AF_PWM1_OUT			MFP_AF1
+#define	MFP_PIN_GPIO18_AF_SSP1_RXD			MFP_AF2
+#define	MFP_PIN_GPIO18_AF_AC97_SDATA_IN_3		MFP_AF3
+#define	MFP_PIN_GPIO18_AF_UART2_TXD			MFP_AF4
+#define	MFP_PIN_GPIO18_AF_UART2_RXD			MFP_AF5
+#define	MFP_PIN_GPIO18_AF_EXT_SYNC_MVT_1		MFP_AF6
+#define	MFP_PIN_GPIO18_AF_SSP1_TXD			MFP_AF7
+
+/* Pin GPIO19 alternate function codes */
+#define MFP_PIN_GPIO19_AF_GPIO_19			MFP_AF0
+#define	MFP_PIN_GPIO19_AF_PWM2_OUT			MFP_AF1
+#define	MFP_PIN_GPIO19_AF_SSP2_TXD			MFP_AF2
+#define	MFP_PIN_GPIO19_AF_KP_MKOUT_4			MFP_AF3
+#define	MFP_PIN_GPIO19_AF_UART2_RXD			MFP_AF4
+#define	MFP_PIN_GPIO19_AF_UART2_TXD			MFP_AF5
+#define	MFP_PIN_GPIO19_AF_OST_CHOUT_MVT_0		MFP_AF6
+#define	MFP_PIN_GPIO19_AF_SSP2_RXD			MFP_AF7
+
+/* Pin GPIO20 alternate function codes */
+#define MFP_PIN_GPIO20_AF_GPIO_20			MFP_AF0
+#define	MFP_PIN_GPIO20_AF_PWM3_OUT			MFP_AF1
+#define	MFP_PIN_GPIO20_AF_SSP1_TXD			MFP_AF2
+#define	MFP_PIN_GPIO20_AF_KP_MKOUT_5			MFP_AF3
+#define	MFP_PIN_GPIO20_AF_RTC_MVT			MFP_AF4
+#define	MFP_PIN_GPIO20_AF_OW_DQ_IN			MFP_AF5
+#define	MFP_PIN_GPIO20_AF_OST_CHOUT_MVT_1		MFP_AF6
+#define	MFP_PIN_GPIO20_AF_SSP1_RXD			MFP_AF7
+
+/* Pin GPIO21 alternate function codes */
+#define MFP_PIN_GPIO21_AF_GPIO_21			MFP_AF0
+#define	MFP_PIN_GPIO21_AF_I2C_SCL			MFP_AF1
+#define	MFP_PIN_GPIO21_AF_AC97_SDATA_IN_2		MFP_AF2
+
+/* Pin GPIO22 alternate function codes */
+#define MFP_PIN_GPIO22_AF_GPIO_22			MFP_AF0
+#define	MFP_PIN_GPIO22_AF_I2C_SDA			MFP_AF1
+#define	MFP_PIN_GPIO22_AF_AC97_SDATA_IN_3		MFP_AF2
+
+/* Pin GPIO23 alternate function codes */
+#define MFP_PIN_GPIO23_AF_GPIO_23			MFP_AF0
+#define	MFP_PIN_GPIO23_AF_AC97_RESET			MFP_AF1
+#define	MFP_PIN_GPIO23_AF_SSP2_SCLK			MFP_AF2
+
+/* Pin GPIO24 alternate function codes */
+#define MFP_PIN_GPIO24_AF_GPIO_24			MFP_AF0
+#define	MFP_PIN_GPIO24_AF_AC97_SYSCLK			MFP_AF1
+#define	MFP_PIN_GPIO24_AF_MM1_CMD			MFP_AF3
+#define	MFP_PIN_GPIO24_AF_SSP2_RXD			MFP_AF4
+#define	MFP_PIN_GPIO24_AF_SSP2_TXD			MFP_AF5
+
+/* Pin GPIO25 alternate function codes */
+#define MFP_PIN_GPIO25_AF_GPIO_25			MFP_AF0
+#define	MFP_PIN_GPIO25_AF_AC97_SDATA_IN_0		MFP_AF1
+#define	MFP_PIN_GPIO25_AF_SSP2_SCLK			MFP_AF2
+
+/* Pin GPIO26 alternate function codes */
+#define MFP_PIN_GPIO26_AF_GPIO_26			MFP_AF0
+#define	MFP_PIN_GPIO26_AF_AC97_SDATA_IN_1		MFP_AF1
+#define	MFP_PIN_GPIO26_AF_SSP2_FRM			MFP_AF2
+
+/* Pin GPIO27 alternate function codes */
+#define MFP_PIN_GPIO27_AF_GPIO_27			MFP_AF0
+#define	MFP_PIN_GPIO27_AF_AC97_SDATA_OUT		MFP_AF1
+#define	MFP_PIN_GPIO27_AF_SSP2_TXD			MFP_AF2
+#define	MFP_PIN_GPIO27_AF_U2D_OPMODE_0			MFP_AF3
+#define	MFP_PIN_GPIO27_AF_SSP2_RXD			MFP_AF5
+
+/* Pin GPIO28 alternate function codes */
+#define MFP_PIN_GPIO28_AF_GPIO_28			MFP_AF0
+#define	MFP_PIN_GPIO28_AF_AC97_SYNC			MFP_AF1
+#define	MFP_PIN_GPIO28_AF_SSP2_RXD			MFP_AF2
+#define	MFP_PIN_GPIO28_AF_U2D_OPMODE_1			MFP_AF3
+#define	MFP_PIN_GPIO28_AF_SSP2_TXD			MFP_AF5
+
+/* Pin GPIO29 alternate function codes */
+#define MFP_PIN_GPIO29_AF_GPIO_29			MFP_AF0
+#define	MFP_PIN_GPIO29_AF_AC97_BITCLK			MFP_AF1
+#define	MFP_PIN_GPIO29_AF_SSP2_EXTCLK			MFP_AF2
+#define	MFP_PIN_GPIO29_AF_MM1_DAT0			MFP_AF3
+
+/* Pin MFP_ULPI_STP alternate function codes */
+#define MFP_ULPI_STP_AF_STP				MFP_AF0
+
+/* Pin MFP_ULPI_NXT alternate function codes */
+#define MFP_ULPI_NXT_AF_NXT				MFP_AF0
+
+/* Pin MFP_ULPI_DIR alternate function codes */
+#define MFP_ULPI_DIR_AF_DIR				MFP_AF0
+
+/* Pin GPIO30 alternate function codes */
+#define MFP_PIN_GPIO30_AF_GPIO_30			MFP_AF0
+#define	MFP_PIN_GPIO30_AF_USB_P2_2			MFP_AF1
+#define	MFP_PIN_GPIO30_AF_UART1_RXD			MFP_AF2
+#define	MFP_PIN_GPIO30_AF_ULPI_DATA_OUT_0		MFP_AF3
+#define	MFP_PIN_GPIO30_AF_UART1_TXD			MFP_AF4
+
+/* Pin GPIO31 alternate function codes */
+#define MFP_PIN_GPIO31_AF_GPIO_31			MFP_AF0
+#define	MFP_PIN_GPIO31_AF_USB_P2_6			MFP_AF1
+#define	MFP_PIN_GPIO31_AF_UART1_TXD			MFP_AF2
+#define	MFP_PIN_GPIO31_AF_ULPI_DATA_OUT_1		MFP_AF3
+#define	MFP_PIN_GPIO31_AF_UART1_RXD			MFP_AF4
+
+/* Pin GPIO32 alternate function codes */
+#define MFP_PIN_GPIO32_AF_GPIO_32			MFP_AF0
+#define	MFP_PIN_GPIO32_AF_USB_P2_4			MFP_AF1
+#define	MFP_PIN_GPIO32_AF_UART1_CTS			MFP_AF2
+#define	MFP_PIN_GPIO32_AF_ULPI_DATA_OUT_2		MFP_AF3
+#define	MFP_PIN_GPIO32_AF_UART1_RTS			MFP_AF4
+
+/* Pin GPIO33 alternate function codes */
+#define MFP_PIN_GPIO33_AF_GPIO_33			MFP_AF0
+#define	MFP_PIN_GPIO33_AF_ULPI_OTG_INTR			MFP_AF1
+#define	MFP_PIN_GPIO33_AF_UART1_DCD			MFP_AF2
+#define	MFP_PIN_GPIO33_AF_ULPI_DATA_OUT_3		MFP_AF3
+#define	MFP_PIN_GPIO33_AF_SSP1_SCLK			MFP_AF5
+#define	MFP_PIN_GPIO33_AF_SSP2_SCLK			MFP_AF6
+
+/* Pin GPIO34 alternate function codes */
+#define MFP_PIN_GPIO34_AF_GPIO_34			MFP_AF0
+#define	MFP_PIN_GPIO34_AF_USB_P2_5			MFP_AF1
+#define	MFP_PIN_GPIO34_AF_UART1_DSR			MFP_AF2
+#define	MFP_PIN_GPIO34_AF_ULPI_DATA_OUT_4		MFP_AF3
+#define	MFP_PIN_GPIO34_AF_UART1_DTR			MFP_AF4
+#define	MFP_PIN_GPIO34_AF_SSP1_FRM			MFP_AF5
+#define	MFP_PIN_GPIO34_AF_SSP2_FRM			MFP_AF6
+
+/* Pin GPIO35 alternate function codes */
+#define MFP_PIN_GPIO35_AF_GPIO_35			MFP_AF0
+#define	MFP_PIN_GPIO35_AF_USB_P2_3			MFP_AF1
+#define	MFP_PIN_GPIO35_AF_UART1_RI			MFP_AF2
+#define	MFP_PIN_GPIO35_AF_ULPI_DATA_OUT_5		MFP_AF3
+#define	MFP_PIN_GPIO35_AF_SSP1_RXD			MFP_AF4
+#define	MFP_PIN_GPIO35_AF_SSP1_TXD			MFP_AF5
+#define	MFP_PIN_GPIO35_AF_SSP2_RXD			MFP_AF6
+#define	MFP_PIN_GPIO35_AF_SSP2_TXD			MFP_AF7
+
+/* Pin GPIO36 alternate function codes */
+#define MFP_PIN_GPIO36_AF_GPIO_36			MFP_AF0
+#define	MFP_PIN_GPIO36_AF_USB_P2_1			MFP_AF1
+#define	MFP_PIN_GPIO36_AF_UART1_DTR			MFP_AF2
+#define	MFP_PIN_GPIO36_AF_ULPI_DATA_OUT_6		MFP_AF3
+#define	MFP_PIN_GPIO36_AF_UART1_DSR			MFP_AF4
+#define	MFP_PIN_GPIO36_AF_SSP1_TXD			MFP_AF5
+#define	MFP_PIN_GPIO36_AF_SSP1_RXD			MFP_AF6
+#define	MFP_PIN_GPIO36_AF_SSP2_TXD			MFP_AF7
+
+/* Pin GPIO37 alternate function codes */
+#define MFP_PIN_GPIO37_AF_GPIO_37			MFP_AF0
+#define	MFP_PIN_GPIO37_AF_UART1_RTS			MFP_AF2
+#define	MFP_PIN_GPIO37_AF_ULPI_DATA_OUT_7		MFP_AF3
+#define	MFP_PIN_GPIO37_AF_UART1_CTS			MFP_AF4
+
+/* Pin GPIO38 alternate function codes */
+#define MFP_PIN_GPIO38_AF_GPIO_38			MFP_AF0
+#define	MFP_PIN_GPIO38_AF_ULPI_CLK			MFP_AF1
+#define	MFP_PIN_GPIO38_AF_KP_MKOUT_5			MFP_AF5
+
+/* Pin GPIO39 alternate function codes */
+#define MFP_PIN_GPIO39_AF_GPIO_39			MFP_AF0
+#define	MFP_PIN_GPIO39_AF_CI_DD_0			MFP_AF1
+
+/* Pin GPIO40 alternate function codes */
+#define MFP_PIN_GPIO40_AF_GPIO_40			MFP_AF0
+#define	MFP_PIN_GPIO40_AF_CI_DD_1			MFP_AF1
+
+/* Pin GPIO41 alternate function codes */
+#define MFP_PIN_GPIO41_AF_GPIO_41			MFP_AF0
+#define	MFP_PIN_GPIO41_AF_CI_DD_2			MFP_AF1
+
+/* Pin GPIO42 alternate function codes */
+#define MFP_PIN_GPIO42_AF_GPIO_42			MFP_AF0
+#define MFP_PIN_GPIO42_AF_CI_DD_3			MFP_AF1
+
+/* Pin GPIO43 alternate function codes */
+#define MFP_PIN_GPIO43_AF_GPIO_43			MFP_AF0
+#define MFP_PIN_GPIO43_AF_CI_DD_4			MFP_AF1
+
+/* Pin GPIO44 alternate function codes */
+#define MFP_PIN_GPIO44_AF_GPIO_44			MFP_AF0
+#define MFP_PIN_GPIO44_AF_CI_DD_5			MFP_AF1
+
+/* Pin GPIO45 alternate function codes */
+#define MFP_PIN_GPIO45_AF_GPIO_45			MFP_AF0
+#define MFP_PIN_GPIO45_AF_CI_DD_6			MFP_AF1
+
+/* Pin GPIO46 alternate function codes */
+#define MFP_PIN_GPIO46_AF_CI_DD_7			MFP_AF0
+#define MFP_PIN_GPIO46_AF_GPIO_46			MFP_AF1
+
+/* Pin GPIO47 alternate function codes */
+#define MFP_PIN_GPIO47_AF_GPIO_47			MFP_AF0
+#define MFP_PIN_GPIO47_AF_CI_DD_8			MFP_AF1
+
+/* Pin GPIO48 alternate function codes */
+#define MFP_PIN_GPIO48_AF_GPIO_48			MFP_AF0
+#define MFP_PIN_GPIO48_AF_CI_DD_9			MFP_AF1
+
+/* Pin GPIO49 alternate function codes */
+#define MFP_PIN_GPIO49_AF_CI_MCLK			MFP_AF0
+#define MFP_PIN_GPIO49_AF_48M_CLK			MFP_AF2
+#define MFP_PIN_GPIO49_AF_GPIO_49			MFP_AF3
+
+/* Pin GPIO50 alternate function codes */
+#define MFP_PIN_GPIO50_AF_CI_PCLK			MFP_AF0
+#define MFP_PIN_GPIO50_AF_GPIO_50			MFP_AF2
+
+/* Pin GPIO51 alternate function codes */
+#define MFP_PIN_GPIO51_AF_CI_LV				MFP_AF0
+#define MFP_PIN_GPIO51_AF_UTM_OPMODE0			MFP_AF1
+#define MFP_PIN_GPIO51_AF_GPIO_51			MFP_AF3
+
+/* Pin GPIO52 alternate function codes */
+#define MFP_PIN_GPIO52_AF_CI_FV				MFP_AF0
+#define MFP_PIN_GPIO52_AF_UTM_OPMODE1			MFP_AF1
+#define MFP_PIN_GPIO52_AF_GPIO_52			MFP_AF3
+#define MFP_PIN_GPIO52_AF_TXVALID			MFP_AF4
+
+/* Pin GPIO53 alternate function codes */
+#define MFP_PIN_GPIO53_AF_GPIO_53			MFP_AF0
+#define MFP_PIN_GPIO53_AF_KP_MKOUT_6			MFP_AF5
+
+/* Pin GPIO54 alternate function codes */
+#define MFP_PIN_GPIO54_AF_GPIO_54			MFP_AF0
+#define MFP_PIN_GPIO54_AF_LCD_LDD_0			MFP_AF1
+#define MFP_PIN_GPIO54_AF_MSLCD_DATA_MVT_0		MFP_AF7
+
+/* Pin GPIO55 alternate function codes */
+#define MFP_PIN_GPIO55_AF_GPIO_55			MFP_AF0
+#define MFP_PIN_GPIO55_AF_LCD_LDD_1			MFP_AF1
+#define MFP_PIN_GPIO55_AF_MSLCD_DATA_MVT_1		MFP_AF7
+
+/* Pin GPIO56 alternate function codes */
+#define MFP_PIN_GPIO56_AF_GPIO_56			MFP_AF0
+#define MFP_PIN_GPIO56_AF_LCD_LDD_2			MFP_AF1
+#define MFP_PIN_GPIO56_AF_MSLCD_DATA_MVT_2		MFP_AF7
+
+/* Pin GPIO57 alternate function codes */
+#define MFP_PIN_GPIO57_AF_GPIO_57			MFP_AF0
+#define MFP_PIN_GPIO57_AF_LCD_LDD_3			MFP_AF1
+#define MFP_PIN_GPIO57_AF_MSLCD_DATA_MVT_3		MFP_AF7
+
+/* Pin GPIO58 alternate function codes */
+#define MFP_PIN_GPIO58_AF_GPIO_58			MFP_AF0
+#define MFP_PIN_GPIO58_AF_LCD_LDD_4			MFP_AF1
+#define MFP_PIN_GPIO58_AF_MSLCD_DATA_MVT_4		MFP_AF7
+
+/* Pin GPIO59 alternate function codes */
+#define MFP_PIN_GPIO59_AF_GPIO_59			MFP_AF0
+#define MFP_PIN_GPIO59_AF_LCD_LDD_5			MFP_AF1
+#define MFP_PIN_GPIO59_AF_MSLCD_DATA_MVT_5		MFP_AF7
+
+/* Pin GPIO60 alternate function codes */
+#define MFP_PIN_GPIO60_AF_GPIO_60			MFP_AF0
+#define MFP_PIN_GPIO60_AF_LCD_LDD_6			MFP_AF1
+#define MFP_PIN_GPIO60_AF_MSLCD_DATA_MVT_6		MFP_AF7
+
+/* Pin GPIO61 alternate function codes */
+#define MFP_PIN_GPIO61_AF_GPIO_61			MFP_AF0
+#define MFP_PIN_GPIO61_AF_LCD_LDD_7			MFP_AF1
+#define MFP_PIN_GPIO61_AF_MSLCD_DATA_MVT_7		MFP_AF7
+
+/* Pin GPIO62 alternate function codes */
+#define MFP_PIN_GPIO62_AF_GPIO_62			MFP_AF0
+#define MFP_PIN_GPIO62_AF_LCD_LDD_8			MFP_AF1
+#define MFP_PIN_GPIO62_AF_LCD_CS_N			MFP_AF2
+#define MFP_PIN_GPIO62_AF_MSLCD_DATA_MVT_8		MFP_AF7
+
+/* Pin GPIO63 alternate function codes */
+#define MFP_PIN_GPIO63_AF_GPIO_63			MFP_AF0
+#define MFP_PIN_GPIO63_AF_LCD_LDD_9			MFP_AF1
+#define MFP_PIN_GPIO63_AF_LCD_VSYNC			MFP_AF2
+#define MFP_PIN_GPIO63_AF_MSLCD_DATA_MVT_9		MFP_AF7
+
+/* Pin GPIO64 alternate function codes */
+#define MFP_PIN_GPIO64_AF_GPIO_64			MFP_AF0
+#define MFP_PIN_GPIO64_AF_LCD_LDD_10			MFP_AF1
+#define MFP_PIN_GPIO64_AF_SSP2_SCLK			MFP_AF2
+#define MFP_PIN_GPIO64_AF_U2D_XCVR			MFP_AF3
+#define MFP_PIN_GPIO64_AF_MSLCD_DATA_MVT_10		MFP_AF7
+
+/* Pin GPIO65 alternate function codes */
+#define MFP_PIN_GPIO65_AF_GPIO_65			MFP_AF0
+#define MFP_PIN_GPIO65_AF_LCD_LDD_11			MFP_AF1
+#define MFP_PIN_GPIO65_AF_SSP2_FRM			MFP_AF2
+#define MFP_PIN_GPIO65_AF_U2D_TERM			MFP_AF3
+#define MFP_PIN_GPIO65_AF_MSLCD_DATA_MVT_11		MFP_AF7
+
+/* Pin GPIO66 alternate function codes */
+#define MFP_PIN_GPIO66_AF_GPIO_66			MFP_AF0
+#define MFP_PIN_GPIO66_AF_LCD_LDD_12			MFP_AF1
+#define MFP_PIN_GPIO66_AF_SSP2_RXD			MFP_AF2
+#define MFP_PIN_GPIO66_AF_SSP2_TXD			MFP_AF4
+#define MFP_PIN_GPIO66_AF_MSLCD_DATA_MVT_12		MFP_AF7
+
+/* Pin GPIO67 alternate function codes */
+#define MFP_PIN_GPIO67_AF_GPIO_67			MFP_AF0
+#define MFP_PIN_GPIO67_AF_LCD_LDD_13			MFP_AF1
+#define MFP_PIN_GPIO67_AF_SSP2_TXD			MFP_AF2
+#define MFP_PIN_GPIO67_AF_SSP2_RXD			MFP_AF4
+#define MFP_PIN_GPIO67_AF_MSLCD_DATA_MVT_13		MFP_AF7
+
+/* Pin GPIO68 alternate function codes */
+#define MFP_PIN_GPIO68_AF_GPIO_68			MFP_AF0
+#define MFP_PIN_GPIO68_AF_LCD_LDD_14			MFP_AF1
+#define MFP_PIN_GPIO68_AF_SSP3_SCLK			MFP_AF2
+#define MFP_PIN_GPIO68_AF_MSLCD_DATA_MVT_14		MFP_AF7
+
+/* Pin GPIO69 alternate function codes */
+#define MFP_PIN_GPIO69_AF_GPIO_69			MFP_AF0
+#define MFP_PIN_GPIO69_AF_LCD_LDD_15			MFP_AF1
+#define MFP_PIN_GPIO69_AF_SSP3_FRM			MFP_AF2
+#define MFP_PIN_GPIO69_AF_MSLCD_DATA_MVT_15		MFP_AF7
+
+/* Pin GPIO70 alternate function codes */
+#define MFP_PIN_GPIO70_AF_GPIO_70			MFP_AF0
+#define MFP_PIN_GPIO70_AF_LCD_LDD_16			MFP_AF1
+#define MFP_PIN_GPIO70_AF_SSP3_TXD			MFP_AF2
+#define MFP_PIN_GPIO70_KP_MKIN_6			MFP_AF3
+#define MFP_PIN_GPIO70_SSP3_RXD				MFP_AF5
+
+/* Pin GPIO71 alternate function codes */
+#define MFP_PIN_GPIO71_AF_GPIO_71			MFP_AF0
+#define MFP_PIN_GPIO71_AF_LCD_LDD_17			MFP_AF1
+#define MFP_PIN_GPIO71_AF_SSP3_RXD			MFP_AF2
+#define MFP_PIN_GPIO71_AF_KP_MKIN_7			MFP_AF3
+#define MFP_PIN_GPIO71_AF_SSP3_TXD			MFP_AF5
+#define MFP_PIN_GPIO71_AF_EXT_MATCH_MVT			MFP_AF6
+
+/* Pin GPIO72 alternate function codes */
+#define MFP_PIN_GPIO72_AF_GPIO_72			MFP_AF0
+#define MFP_PIN_GPIO72_AF_LCD_L_FCLK			MFP_AF1
+#define MFP_PIN_GPIO72_AF_MSLCD_FCLK_MVT		MFP_AF7
+
+/* Pin GPIO73 alternate function codes */
+#define MFP_PIN_GPIO73_AF_GPIO_73			MFP_AF0
+#define MFP_PIN_GPIO73_AF_LCD_L_LCLK			MFP_AF1
+#define MFP_PIN_GPIO73_AF_MSLCD_LCLK_MVT		MFP_AF7
+
+/* Pin GPIO74 alternate function codes */
+#define MFP_PIN_GPIO74_AF_GPIO_74			MFP_AF0
+#define MFP_PIN_GPIO74_AF_LCD_L_PCLK			MFP_AF1
+#define MFP_PIN_GPIO74_AF_MSLCD_PCLK_MVT		MFP_AF7
+
+/* Pin GPIO75 alternate function codes */
+#define MFP_PIN_GPIO75_AF_GPIO_75			MFP_AF0
+#define MFP_PIN_GPIO75_AF_LCD_L_BIAS			MFP_AF1
+#define MFP_PIN_GPIO75_AF_MSLCD_L_BIAS_MVT		MFP_AF2
+
+/* Pin GPIO76 alternate function codes */
+#define MFP_PIN_GPIO76_AF_GPIO_76			MFP_AF0
+#define MFP_PIN_GPIO76_AF_LCD_VSYNC			MFP_AF2
+
+/* Pin GPIO77 alternate function codes */
+#define MFP_PIN_GPIO77_AF_GPIO_77			MFP_AF0
+#define MFP_PIN_GPIO77_AF_UART1_RXD			MFP_AF1
+#define MFP_PIN_GPIO77_AF_USB_P3_1			MFP_AF2
+#define MFP_PIN_GPIO77_AF_UART1_TXD			MFP_AF3
+#define MFP_PIN_GPIO77_AF_MM2_DAT0			MFP_AF4
+#define MFP_PIN_GPIO77_AF_MSL_IB_DAT0			MFP_AF5
+#define MFP_PIN_GPIO77_AF_MSL_OB_DAT0			MFP_AF6
+
+/* Pin GPIO78 alternate function codes */
+#define MFP_PIN_GPIO78_AF_GPIO_78			MFP_AF0
+#define MFP_PIN_GPIO78_AF_UART1_TXD			MFP_AF1
+#define MFP_PIN_GPIO78_AF_USB_P3_3			MFP_AF2
+#define MFP_PIN_GPIO78_AF_UART1_RXD			MFP_AF3
+#define MFP_PIN_GPIO78_AF_MM2_DATA_OUT_1		MFP_AF4
+#define MFP_PIN_GPIO78_AF_KP_MKOUT_7			MFP_AF5
+#define MFP_PIN_GPIO78_AF_MSL_OB_CLK			MFP_AF6
+
+/* Pin GPIO79 alternate function codes */
+#define MFP_PIN_GPIO79_AF_GPIO_79			MFP_AF0
+#define MFP_PIN_GPIO79_AF_UART1_CTS			MFP_AF1
+#define MFP_PIN_GPIO79_AF_USB_P3_3			MFP_AF2
+#define MFP_PIN_GPIO79_AF_UART1_RTS			MFP_AF3
+#define MFP_PIN_GPIO79_AF_MM2_DAT2			MFP_AF4
+#define MFP_PIN_GPIO79_AF_MSL_IB_STB			MFP_AF5
+#define MFP_PIN_GPIO79_AF_MSL_OB_STB			MFP_AF6
+
+/* Pin GPIO80 alternate function codes */
+#define MFP_PIN_GPIO80_AF_GPIO_80			MFP_AF0
+#define MFP_PIN_GPIO80_AF_UART1_DCD			MFP_AF1
+#define MFP_PIN_GPIO80_AF_USB_P3_4			MFP_AF2
+#define MFP_PIN_GPIO80_AF_MM2_DAT3			MFP_AF4
+#define MFP_PIN_GPIO80_AF_MSL_IB_WAIT			MFP_AF5
+#define MFP_PIN_GPIO80_AF_MSL_OB_WAIT			MFP_AF6
+
+/* Pin GPIO81 alternate function codes */
+#define MFP_PIN_GPIO81_AF_GPIO_81			MFP_AF0
+#define MFP_PIN_GPIO81_AF_UART1_DSR			MFP_AF1
+#define MFP_PIN_GPIO81_AF_USB_P3_5			MFP_AF2
+#define MFP_PIN_GPIO81_AF_UART1_DTR			MFP_AF3
+#define MFP_PIN_GPIO81_AF_MM2_CLK			MFP_AF4
+#define MFP_PIN_GPIO81_AF_MSL_OB_DAT0			MFP_AF5
+#define MFP_PIN_GPIO81_AF_MSL_IB_DAT0			MFP_AF6
+
+/* Pin GPIO82 alternate function codes */
+#define MFP_PIN_GPIO82_AF_GPIO_82			MFP_AF0
+#define MFP_PIN_GPIO82_AF_UART1_RI			MFP_AF1
+#define MFP_PIN_GPIO82_AF_USB_P3_6			MFP_AF2
+#define MFP_PIN_GPIO82_AF_MM2_CMD			MFP_AF4
+#define MFP_PIN_GPIO82_AF_MSL_OB_CLK			MFP_AF5
+#define MFP_PIN_GPIO82_AF_MSL_IB_CLK			MFP_AF6
+
+/* Pin GPIO83 alternate function codes */
+#define MFP_PIN_GPIO83_AF_GPIO_83			MFP_AF0
+#define MFP_PIN_GPIO83_AF_UART1_DTR			MFP_AF1
+#define MFP_PIN_GPIO83_AF_UART1_DSR			MFP_AF3
+#define MFP_PIN_GPIO83_AF_MSL_OB_STB			MFP_AF4
+#define MFP_PIN_GPIO83_AF_KP_DKIN_2			MFP_AF5
+#define MFP_PIN_GPIO83_AF_MSL_IB_STB			MFP_AF6
+
+/* Pin GPIO84 alternate function codes */
+#define MFP_PIN_GPIO84_AF_GPIO_84			MFP_AF0
+#define MFP_PIN_GPIO84_AF_UART1_RTS			MFP_AF1
+#define MFP_PIN_GPIO84_AF_UART_CTS			MFP_AF3
+#define MFP_PIN_GPIO84_AF_MSL_OB_WAIT			MFP_AF4
+#define MFP_PIN_GPIO84_AF_KP_DKIN_1			MFP_AF5
+#define MFP_PIN_GPIO84_AF_MSL_IB_WAIT			MFP_AF6
+
+/* Pin GPIO85 alternate function codes */
+#define MFP_PIN_GPIO85_AF_GPIO_85			MFP_AF0
+#define MFP_PIN_GPIO85_AF_SSP1_SCLK			MFP_AF1
+#define MFP_PIN_GPIO85_AF_KP_MKOUT_0			MFP_AF2
+#define MFP_PIN_GPIO85_AF_KP_DKIN_0			MFP_AF3
+#define MFP_PIN_GPIO85_AF_MSL_IB_DAT1			MFP_AF4
+#define MFP_PIN_GPIO85_AF_MSL_OB_DAT1			MFP_AF6
+
+/* Pin GPIO86 alternate function codes */
+#define MFP_PIN_GPIO86_AF_GPIO_86			MFP_AF0
+#define MFP_PIN_GPIO86_AF_SSP1_FRM			MFP_AF1
+#define MFP_PIN_GPIO86_AF_KP_MKOUT_1			MFP_AF2
+#define MFP_PIN_GPIO86_AF_KP_DKIN_1			MFP_AF3
+#define MFP_PIN_GPIO86_AF_MSL_IB_DAT2			MFP_AF4
+#define MFP_PIN_GPIO86_AF_MSL_OB_DAT2			MFP_AF6
+
+/* Pin GPIO87 alternate function codes */
+#define MFP_PIN_GPIO87_AF_GPIO_87			MFP_AF0
+#define MFP_PIN_GPIO87_AF_SSP1_TXD			MFP_AF1
+#define MFP_PIN_GPIO87_AF_KP_MKOUT2			MFP_AF2
+#define MFP_PIN_GPIO87_AF_KP_DKIN2			MFP_AF3
+#define MFP_PIN_GPIO87_AF_MSL_IB_DATA3			MFP_AF4
+#define MFP_PIN_GPIO87_AF_SSP1_RXD			MFP_AF6
+#define MFP_PIN_GPIO87_AF_MSL_OB_DAT3			MFP_AF7
+
+/* Pin GPIO88 alternate function codes */
+#define MFP_PIN_GPIO88_AF_GPIO_88			MFP_AF0
+#define MFP_PIN_GPIO88_AF_SSP1_RXD			MFP_AF1
+#define MFP_PIN_GPIO88_AF_KP_MKOUT_3			MFP_AF2
+#define MFP_PIN_GPIO88_AF_KP_DKIN_3			MFP_AF3
+#define MFP_PIN_GPIO88_AF_MSL_OB_DAT1			MFP_AF4
+#define MFP_PIN_GPIO88_AF_SSP1_TXD			MFP_AF6
+#define MFP_PIN_GPIO88_AF_MSL_IB_DAT1			MFP_AF7
+
+/* Pin GPIO89 alternate function codes */
+#define MFP_PIN_GPIO89_AF_GPIO_89			MFP_AF0
+#define MFP_PIN_GPIO89_AF_SSP1_EXTCLK			MFP_AF1
+#define MFP_PIN_GPIO89_AF_SC_UVS1			MFP_AF2
+#define MFP_PIN_GPIO89_AF_KP_DKIN_3			MFP_AF3
+#define MFP_PIN_GPIO89_AF_MSL_OB_DAT2			MFP_AF4
+#define MFP_PIN_GPIO89_AF_MSL_IB_DAT2			MFP_AF6
+
+/* Pin GPIO90 alternate function codes */
+#define MFP_PIN_GPIO90_AF_GPIO_90			MFP_AF0
+#define MFP_PIN_GPIO90_AF_SSP1_SYSCLK			MFP_AF1
+#define MFP_PIN_GPIO90_AF_SC_UVS2			MFP_AF2
+#define MFP_PIN_GPIO90_AF_MSL_IB_DAT3			MFP_AF3
+#define MFP_PIN_GPIO90_AF_MSL_OB_DAT3			MFP_AF4
+#define MFP_PIN_GPIO90_AF_U2D_OPMODE_0			MFP_AF5
+
+/* Pin GPIO91 alternate function codes */
+#define MFP_PIN_GPIO91_AF_GPIO_91			MFP_AF0
+#define MFP_PIN_GPIO91_AF_SSP3_SCLK			MFP_AF1
+#define MFP_PIN_GPIO91_AF_UART3_CTS			MFP_AF2
+#define MFP_PIN_GPIO91_AF_UART3_RTS			MFP_AF4
+
+/* Pin GPIO92 alternate function codes */
+#define MFP_PIN_GPIO92_AF_GPIO_92			MFP_AF0
+#define MFP_PIN_GPIO92_AF_SSP3_FRM			MFP_AF1
+#define MFP_PIN_GPIO92_AF_UART3_RTS			MFP_AF2
+#define MFP_PIN_GPIO92_AF_UART3_CTS			MFP_AF4
+
+/* Pin GPIO93 alternate function codes */
+#define MFP_PIN_GPIO93_AF_GPIO_93			MFP_AF0
+#define MFP_PIN_GPIO93_AF_SSP3_TXD			MFP_AF1
+#define MFP_PIN_GPIO93_AF_UART3_TXD			MFP_AF2
+#define MFP_PIN_GPIO93_AF_UART3_RXD			MFP_AF4
+#define MFP_PIN_GPIO93_AF_SSP3_RXD			MFP_AF5
+
+/* Pin GPIO94 alternate function codes */
+#define MFP_PIN_GPIO94_AF_GPIO_94			MFP_AF0
+#define MFP_PIN_GPIO94_AF_SSP3_RXD			MFP_AF1
+#define MFP_PIN_GPIO94_AF_UART3_RXD			MFP_AF2
+#define MFP_PIN_GPIO94_AF_UART3_TXD			MFP_AF4
+#define MFP_PIN_GPIO94_AF_SSP3_TXD			MFP_AF5
+
+/* Pin GPIO95 alternate function codes */
+#define MFP_PIN_GPIO95_AF_GPIO_95			MFP_AF0
+#define MFP_PIN_GPIO95_AF_SSP4_SCLK			MFP_AF1
+
+/* Pin GPIO96 alternate function codes */
+#define MFP_PIN_GPIO96_AF_GPIO_96			MFP_AF0
+#define MFP_PIN_GPIO96_AF_SSP4_FRM			MFP_AF1
+#define MFP_PIN_GPIO96_AF_U2D_XCVR_SEL			MFP_AF2
+
+/* Pin GPIO97 alternate function codes */
+#define MFP_PIN_GPIO97_AF_GPIO_97			MFP_AF0
+#define MFP_PIN_GPIO97_AF_SSP4_TXD			MFP_AF1
+#define MFP_PIN_GPIO97_AF_U2D_TERM_SEL			MFP_AF2
+#define MFP_PIN_GPIO97_AF_SSP4_RXD			MFP_AF5
+
+/* Pin GPIO98 alternate function codes */
+#define MFP_PIN_GPIO98_AF_GPIO_98			MFP_AF0
+#define MFP_PIN_GPIO98_AF_SSP4_RXD			MFP_AF1
+#define MFP_PIN_GPIO98_AF_SSP4_TXD			MFP_AF5
+
+/* Pin GPIO99 alternate function codes */
+#define MFP_PIN_GPIO99_AF_GPIO_99			MFP_AF0
+#define MFP_PIN_GPIO99_AF_UART1_RXD			MFP_AF1
+#define MFP_PIN_GPIO99_AF_UART1_TXD			MFP_AF6
+
+/* Pin GPIO100 alternate function codes */
+#define MFP_PIN_GPIO100_AF_GPIO_100			MFP_AF0
+#define MFP_PIN_GPIO100_AF_UART1_TXD			MFP_AF1
+#define MFP_PIN_GPIO100_AF_UART1_RXD			MFP_AF6
+#define MFP_PIN_GPIO100_AF_KP_MKIN_6			MFP_AF7
+
+/* Pin GPIO101 alternate function codes */
+#define MFP_PIN_GPIO101_AF_GPIO_101			MFP_AF0
+#define MFP_PIN_GPIO101_AF_UART1_CTS			MFP_AF1
+#define MFP_PIN_GPIO101_AF_U2D_XCVR_SELECT		MFP_AF3
+#define MFP_PIN_GPIO101_AF_UART1_RTS			MFP_AF6
+#define MFP_PIN_GPIO101_AF_KP_MKIN_7			MFP_AF7
+
+/* Pin GPIO102 alternate function codes */
+#define MFP_PIN_GPIO102_AF_GPIO_102			MFP_AF0
+#define MFP_PIN_GPIO102_AF_UART1_DCD			MFP_AF1
+#define MFP_PIN_GPIO102_AF_U2D_TERM_SELECT		MFP_AF3
+#define MFP_PIN_GPIO102_AF_UART1_TXD			MFP_AF4
+#define MFP_PIN_GPIO102_AF_UART1_RXD			MFP_AF6
+
+/* Pin GPIO103 alternate function codes */
+#define MFP_PIN_GPIO103_AF_GPIO_103			MFP_AF0
+#define MFP_PIN_GPIO103_AF_UART1_DSR			MFP_AF1
+#define MFP_PIN_GPIO103_AF_MM3_CLK			MFP_AF2
+#define MFP_PIN_GPIO103_AF_UART1_DTR			MFP_AF6
+
+/* Pin GPIO104 alternate function codes */
+#define MFP_PIN_GPIO104_AF_GPIO_104			MFP_AF0
+#define MFP_PIN_GPIO104_AF_UART1_RI			MFP_AF1
+#define MFP_PIN_GPIO104_AF_UART1_RXD			MFP_AF4
+/*#define MFP_PIN_GPIO104_AF_KP_MKOUT_6			MFP_AF5 */
+
+/* Pin GPIO105 alternate function codes */
+#define MFP_PIN_GPIO105_AF_GPIO_105			MFP_AF0
+#define MFP_PIN_GPIO105_AF_UART1_DTR			MFP_AF1
+#define MFP_PIN_GPIO105_AF_MM3_CMD			MFP_AF2
+#define MFP_PIN_GPIO105_AF_KP_MKOUT_7			MFP_AF5
+#define MFP_PIN_GPIO105_AF_UART1_DSR			MFP_AF6
+
+/* Pin GPIO106 alternate function codes */
+#define MFP_PIN_GPIO106_AF_GPIO_106			MFP_AF0
+#define MFP_PIN_GPIO106_AF_UART1_RTS			MFP_AF1
+#define MFP_PIN_GPIO106_AF_UTM_OPMODE_1			MFP_AF3
+#define MFP_PIN_GPIO106_AF_UART1_CTS			MFP_AF6
+
+/* Pin GPIO107 alternate function codes */
+#define MFP_PIN_GPIO107_AF_GPIO_107			MFP_AF0
+#define MFP_PIN_GPIO107_AF_UART3_CTS			MFP_AF1
+#define MFP_PIN_GPIO107_AF_KP_DKIN_0			MFP_AF2
+#define MFP_PIN_GPIO107_AF_UART3_RTS			MFP_AF3
+
+/* Pin GPIO108 alternate function codes */
+#define MFP_PIN_GPIO108_AF_GPIO_108			MFP_AF0
+#define MFP_PIN_GPIO108_AF_UART3_RTS			MFP_AF1
+#define MFP_PIN_GPIO108_AF_KP_DKIN_1			MFP_AF2
+#define MFP_PIN_GPIO108_AF_UART3_CTS			MFP_AF3
+
+/* Pin GPIO109 alternate function codes */
+#define MFP_PIN_GPIO109_AF_GPIO_109			MFP_AF0
+#define MFP_PIN_GPIO109_AF_UART3_TXD			MFP_AF1
+#define MFP_PIN_GPIO109_AF_KP_DKIN_2			MFP_AF2
+#define MFP_PIN_GPIO109_AF_UART3_RXD			MFP_AF3
+
+/* Pin GPIO110 alternate function codes */
+#define MFP_PIN_GPIO110_AF_GPIO_110			MFP_AF0
+#define MFP_PIN_GPIO110_AF_UART3_RXD			MFP_AF1
+#define MFP_PIN_GPIO110_AF_KP_DKIN_3			MFP_AF2
+#define MFP_PIN_GPIO110_AF_UART3_TXD			MFP_AF3
+#define MFP_PIN_GPIO110_AF_U2D_OPMODE_1			MFP_AF4
+
+/* Pin GPIO111 alternate function codes */
+#define MFP_PIN_GPIO111_AF_GPIO_111			MFP_AF0
+#define MFP_PIN_GPIO111_AF_UART2_RTS			MFP_AF1
+#define MFP_PIN_GPIO111_AF_KP_DKIN_4			MFP_AF2
+#define MFP_PIN_GPIO111_AF_UART2_CTS			MFP_AF3
+
+/* Pin GPIO112 alternate function codes */
+#define MFP_PIN_GPIO112_AF_GPIO_112			MFP_AF0
+#define MFP_PIN_GPIO112_AF_UART2_RXD			MFP_AF1
+#define MFP_PIN_GPIO112_AF_KP_DKIN_5			MFP_AF2
+#define MFP_PIN_GPIO112_AF_UART2_TXD			MFP_AF3
+#define MFP_PIN_GPIO112_AF_KP_MKIN_6			MFP_AF4
+
+/* Pin GPIO113 alternate function codes */
+#define MFP_PIN_GPIO113_AF_GPIO_113			MFP_AF0
+#define MFP_PIN_GPIO113_AF_UART2_TXD			MFP_AF1
+#define MFP_PIN_GPIO113_AF_KP_DKIN_6			MFP_AF2
+#define MFP_PIN_GPIO113_AF_UART2_RXD			MFP_AF3
+#define MFP_PIN_GPIO113_AF_KP_MKIN_7			MFP_AF4
+
+/* Pin GPIO114 alternate function codes */
+#define MFP_PIN_GPIO114_AF_GPIO_114			MFP_AF0
+#define MFP_PIN_GPIO114_AF_UART2_CTS			MFP_AF1
+#define MFP_PIN_GPIO114_AF_KP_DKIN_7			MFP_AF2
+#define MFP_PIN_GPIO114_AF_KP_UART2_RTS			MFP_AF3
+
+/* Pin GPIO115 alternate function codes */
+#define MFP_PIN_GPIO115_AF_GPIO_115			MFP_AF0
+#define MFP_PIN_GPIO115_AF_KP_MKIN_0			MFP_AF1
+#define MFP_PIN_GPIO115_AF_KP_DKIN_0			MFP_AF2
+
+/* Pin GPIO116 alternate function codes */
+#define MFP_PIN_GPIO116_AF_GPIO_116			MFP_AF0
+#define MFP_PIN_GPIO116_AF_KP_MKIN_1			MFP_AF1
+#define MFP_PIN_GPIO116_AF_KP_DKIN_1			MFP_AF2
+
+/* Pin GPIO117 alternate function codes */
+#define MFP_PIN_GPIO117_AF_GPIO_117			MFP_AF0
+#define MFP_PIN_GPIO117_AF_KP_MKIN_2			MFP_AF1
+#define MFP_PIN_GPIO117_AF_KP_DKIN_2			MFP_AF2
+
+/* Pin GPIO118 alternate function codes */
+#define MFP_PIN_GPIO118_AF_GPIO_118			MFP_AF0
+#define MFP_PIN_GPIO118_AF_KP_MKIN_3			MFP_AF1
+#define MFP_PIN_GPIO118_AF_KP_DKIN_3			MFP_AF2
+
+/* Pin GPIO119 alternate function codes */
+#define MFP_PIN_GPIO119_AF_GPIO_119			MFP_AF0
+#define MFP_PIN_GPIO119_AF_KP_MKIN_4			MFP_AF1
+#define MFP_PIN_GPIO119_AF_KP_DKIN_4			MFP_AF2
+
+/* Pin GPIO120 alternate function codes */
+#define MFP_PIN_GPIO120_AF_GPIO_120			MFP_AF0
+#define MFP_PIN_GPIO120_AF_KP_MKIN_5			MFP_AF1
+#define MFP_PIN_GPIO120_AF_KP_DKIN_5			MFP_AF2
+
+/* Pin GPIO121 alternate function codes */
+#define MFP_PIN_GPIO121_AF_GPIO_121			MFP_AF0
+#define MFP_PIN_GPIO121_AF_KP_MKOUT_0			MFP_AF1
+#define MFP_PIN_GPIO121_AF_KP_DKIN_6			MFP_AF2
+
+/* Pin GPIO122 alternate function codes */
+#define MFP_PIN_GPIO122_AF_GPIO_122			MFP_AF0
+#define MFP_PIN_GPIO122_AF_KP_MKOUT_1			MFP_AF1
+#define MFP_PIN_GPIO122_AF_KP_DKIN_5			MFP_AF2
+
+/* Pin GPIO123 alternate function codes */
+#define MFP_PIN_GPIO123_AF_GPIO_123			MFP_AF0
+#define MFP_PIN_GPIO123_AF_KP_MKOUT_2			MFP_AF1
+#define MFP_PIN_GPIO123_AF_KP_DKIN_4			MFP_AF2
+
+/* Pin GPIO124 alternate function codes */
+#define MFP_PIN_GPIO124_AF_GPIO_124			MFP_AF0
+#define MFP_PIN_GPIO124_AF_KP_MKOUT_3			MFP_AF1
+#define MFP_PIN_GPIO124_AF_KP_DKIN_3			MFP_AF2
+
+/* Pin GPIO125 alternate function codes */
+#define MFP_PIN_GPIO125_AF_GPIO_125			MFP_AF0
+#define MFP_PIN_GPIO125_AF_KP_MKOUT_4			MFP_AF1
+#define MFP_PIN_GPIO125_AF_KP_MKIN_2			MFP_AF2
+
+/* Pin GPIO126 alternate function codes */
+#define MFP_PIN_GPIO126_AF_GPIO_126			MFP_AF0
+#define MFP_PIN_GPIO126_AF_RTC_MVT			MFP_AF1
+#define MFP_PIN_GPIO126_AF_OW_DQ			MFP_AF2
+#define MFP_PIN_GPIO126_AF_EXT_CLK			MFP_AF3
+#define MFP_PIN_GPIO126_AF_KP_MKOUT_7			MFP_AF4
+
+/* Pin GPIO127 alternate function codes */
+#define MFP_PIN_GPIO127_AF_GPIO_127			MFP_AF0
+#define MFP_PIN_GPIO127_AF_LCD_nCS			MFP_AF1
+#define MFP_PIN_GPIO127_AF_KP_DKIN_0			MFP_AF5
+#define MFP_PIN_GPIO127_AF_CLK_BYPASS_GB		MFP_AF7
+
+/* Pin GPIO0_2 alternate function codes */
+#define MFP_PIN_GPIO0_2_AF_GPIO_0			MFP_AF0
+#define MFP_PIN_GPIO0_2_AF_UHC_USBHPEN_MVT		MFP_AF1
+#define MFP_PIN_GPIO0_2_AF_KP_DKIN_0			MFP_AF2
+/*#define MFP_PIN_GPIO0_2_AF_ONE_WIRE			MFP_AF2 */
+
+/* Pin GPIO1_2 alternate function codes */
+#define MFP_PIN_GPIO1_2_AF_GPIO_0			MFP_AF0
+#define MFP_PIN_GPIO1_2_AF_UHC_USBHPWR_MVT		MFP_AF1
+#define MFP_PIN_GPIO1_2_AF_KP_DKIN_1			MFP_AF2
+
+/* Pin GPIO2_2 alternate function codes */
+#define MFP_PIN_GPIO2_2_AF_GPIO_2			MFP_AF0
+#define MFP_PIN_GPIO2_2_AF_KP_MKIN_6			MFP_AF1
+#define MFP_PIN_GPIO2_2_AF_KP_DKIN_6			MFP_AF2
+
+/* Pin GPIO3_2 alternate function codes */
+#define MFP_PIN_GPIO3_2_AF_GPIO_3			MFP_AF0
+#define MFP_PIN_GPIO3_2_AF_KP_MKIN_7			MFP_AF1
+#define MFP_PIN_GPIO3_2_AF_KP_DKIN_7			MFP_AF2
+
+/* Pin GPIO4_2 alternate function codes */
+#define MFP_PIN_GPIO4_2_AF_GPIO_4			MFP_AF0
+#define MFP_PIN_GPIO4_2_AF_KP_MK0UT_5			MFP_AF1
+#define MFP_PIN_GPIO4_2_AF_KP_DKIN_1			MFP_AF2
+
+/* Pin GPIO5_2 alternate function codes */
+#define MFP_PIN_GPIO5_2_AF_GPIO_5			MFP_AF0
+#define MFP_PIN_GPIO5_2_AF_KP_MKOUT_6			MFP_AF1
+#define MFP_PIN_GPIO5_2_AF_MK_DKIN_0			MFP_AF2
+
+/* Pin GPIO6_2 alternate function codes */
+#define MFP_PIN_GPIO6_2_AF_GPIO_6			MFP_AF0
+#define MFP_PIN_GPIO6_2_AF_MK_MKOUT_7			MFP_AF1
+
+/* Pin GPIO7_2 alternate function codes */
+#define MFP_PIN_GPIO7_2_AF_GPIO_7			MFP_AF0
+#define MFP_PIN_GPIO7_2_AF_MM3_DAT0			MFP_AF1
+
+/* Pin GPIO8_2 alternate function codes */
+#define MFP_PIN_GPIO8_2_AF_GPIO_8			MFP_AF0
+#define MFP_PIN_GPIO8_2_AF_MM3_DAT1			MFP_AF1
+
+/* Pin GPIO9_2 alternate function codes */
+#define MFP_PIN_GPIO9_2_AF_GPIO_9			MFP_AF0
+#define MFP_PIN_GPIO9_2_AF_MM3_DAT2			MFP_AF1
+
+/* Pin GPIO10_2 alternate function codes */
+#define MFP_PIN_GPIO10_2_AF_GPIO_10			MFP_AF0
+#define MFP_PIN_GPIO10_2_AF_MM3_DAT3			MFP_AF1
+
+/* Pin GPIO11_2 alternate function codes */
+#define MFP_PIN_GPIO11_2_AF_GPIO_11			MFP_AF0
+#define MFP_PIN_GPIO11_2_AF_MM3_CLK			MFP_AF1
+
+/* Pin GPIO12_2 alternate function codes */
+#define MFP_PIN_GPIO12_2_AF_GPIO_12			MFP_AF0
+#define MFP_PIN_GPIO12_2_AF_MM3_CMD			MFP_AF1
+
+/* Pin DF_CLE alternate function codes */
+#define MFP_PIN_DF_CLE_AF_ND_CLE			MFP_AF0
+
+/* Pin DF_ALE_nWE1 alternate function codes */
+#define MFP_PIN_DF_ALE_nWE1_AF_CD_ADV1			MFP_AF0
+#define MFP_PIN_DF_ALE_nWE1_AF_ND_ALE			MFP_AF1
+
+/* Pin DF_SCLK_E alternate function codes */
+#define MFP_PIN_DF_SCLK_E_AF_DF_SCLK_E			MFP_AF0
+
+/* Pin DF_SCLK_S alternate function codes */
+#define MFP_PIN_DF_SCLK_S_AF_DF_SCLK_S			MFP_AF0
+
+/* Pin nBE0 alternate function codes */
+#define MFP_PIN_nBE0_AF_DF_nBE0				MFP_AF0
+
+/* Pin nBE1 alternate function codes */
+#define MFP_PIN_nBE1_AF_DF_nBE1				MFP_AF0
+
+/* Pin DF_INT_RnB alternate function codes */
+#define MFP_PIN_DF_INT_RnB_AF_INT_RnB			MFP_AF0
+
+/* Pin nLUA alternate function codes */
+#define MFP_PIN_DF_nLUA_AF_DF_nLUA			MFP_AF0
+#define MFP_PIN_DF_nLUA_AF_CD_ADV2			MFP_AF1
+
+/* Pin nLLA alternate function codes */
+#define MFP_PIN_DF_nLLA_AF_DF_nLLA			MFP_AF0
+#define MFP_PIN_DF_nLLA_AF_CD_ADV1			MFP_AF1
+
+/* Pin DF_nWE alternate function codes */
+#define MFP_PIN_DF_nWE_AF_CD_WE				MFP_AF0
+#define MFP_PIN_DF_nWE_AF_ND_WE				MFP_AF1
+
+/* Pin DF_nRE alternate function codes */
+#define MFP_PIN_DF_nRE_AF_CD_OE				MFP_AF0
+#define MFP_PIN_DF_nRE_AF_ND_RE				MFP_AF1
+
+/* Pin DF_ADDR0 alternate functino codes */
+#define MFP_PIN_DF_ADDR0_AF_DF_ADDR0			MFP_AF0
+
+/* Pin DF_ADDR1 alternate functino codes */
+#define MFP_PIN_DF_ADDR1_AF_DF_ADDR1			MFP_AF0
+
+/* Pin DF_ADDR2 alternate functino codes */
+#define MFP_PIN_DF_ADDR2_AF_DF_ADDR2			MFP_AF0
+
+/* Pin DF_ADDR3 alternate functino codes */
+#define MFP_PIN_DF_ADDR3_AF_DF_ADDR3			MFP_AF0
+
+/* Pin nCS0 alternate function codes */
+#define MFP_PIN_nCS0_AF_nCS0				MFP_AF0
+#define MFP_PIN_nCS0_AF_DF_XCVREN			MFP_AF1
+
+/* Pin nCS1 alternate function codes */
+#define MFP_PIN_nCS1_AF_nCS				MFP_AF0
+#define MFP_PIN_nCS1_AF_DF_UNLOCK			MFP_AF1
+
+/* Pin DF_nCS0 alternate function codes */
+#define MFP_PIN_DF_nCS0_AF_DF_nCS0			MFP_AF0
+#define MFP_PIN_DF_nCS0_AF_ND_nCS0			MFP_AF1
+
+/* Pin DF_nCS1 alternate function codes */
+#define MFP_PIN_DF_nCS1_AF_DF_nCS1			MFP_AF0
+#define MFP_PIN_DF_nCS1_AF_ND_nCS1			MFP_AF1
+
+
+/* Pin DF_IO15..0 alternate function codes */
+/*   - Note that, in use, all 16 pins must have the same AF */
+/*  Currently, only Alternate Function 1 is actually available */
+/*  for these pins */
+
+#define MFP_PIN_DF_IO_0_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_0_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_1_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_1_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_2_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_2_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_3_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_3_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_4_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_4_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_5_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_5_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_6_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_6_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_7_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_7_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_8_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_8_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_9_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_9_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_10_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_10_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_11_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_11_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_12_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_12_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_13_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_13_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_14_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_14_AF_ND				MFP_AF1
+
+#define MFP_PIN_DF_IO_15_AF_DF				MFP_AF0
+#define MFP_PIN_DF_IO_15_AF_ND				MFP_AF1
+
+#endif
+
+#define IS_GPIO_EXP_PIN(pin)         (MFP_OFFSET((pin)) == 0x0000)
+#define MFP_PIN_GPIO128         ((0x0000 << 16) | (128))
+#define MFP_PIN_GPIO129         ((0x0000 << 16) | (129))
+#define MFP_PIN_GPIO130         ((0x0000 << 16) | (130))
+#define MFP_PIN_GPIO131         ((0x0000 << 16) | (131))
+#define MFP_PIN_GPIO132         ((0x0000 << 16) | (132))
+#define MFP_PIN_GPIO133         ((0x0000 << 16) | (133))
+#define MFP_PIN_GPIO134         ((0x0000 << 16) | (134))
+#define MFP_PIN_GPIO135         ((0x0000 << 16) | (135))
+#define MFP_PIN_GPIO136         ((0x0000 << 16) | (136))
+#define MFP_PIN_GPIO137         ((0x0000 << 16) | (137))
+#define MFP_PIN_GPIO138         ((0x0000 << 16) | (138))
+#define MFP_PIN_GPIO139         ((0x0000 << 16) | (139))
+#define MFP_PIN_GPIO140         ((0x0000 << 16) | (140))
+#define MFP_PIN_GPIO141         ((0x0000 << 16) | (141))
+#define MFP_PIN_GPIO142         ((0x0000 << 16) | (142))
+#define MFP_PIN_GPIO143         ((0x0000 << 16) | (143))
+#define MFP_PIN_GPIO144         ((0x0000 << 16) | (144))
+#define MFP_PIN_GPIO145         ((0x0000 << 16) | (145))
+#define MFP_PIN_GPIO146         ((0x0000 << 16) | (146))
+#define MFP_PIN_GPIO147         ((0x0000 << 16) | (147))
+#define MFP_PIN_GPIO148         ((0x0000 << 16) | (148))
+#define MFP_PIN_GPIO149         ((0x0000 << 16) | (149))
+#define MFP_PIN_GPIO150         ((0x0000 << 16) | (150))
+#define MFP_PIN_GPIO151         ((0x0000 << 16) | (151))
+#define MFP_PIN_GPIO152         ((0x0000 << 16) | (152))
+#define MFP_PIN_GPIO153         ((0x0000 << 16) | (153))
+#define MFP_PIN_GPIO154         ((0x0000 << 16) | (154))
+#define MFP_PIN_GPIO155         ((0x0000 << 16) | (155))
+#define MFP_PIN_GPIO156         ((0x0000 << 16) | (156))
+#define MFP_PIN_GPIO157         ((0x0000 << 16) | (157))
+#define MFP_PIN_GPIO158         ((0x0000 << 16) | (158))
+#define MFP_PIN_GPIO159         ((0x0000 << 16) | (159))
+
+#define MFP_PIN_GPIO128_GPIO_128			MFP_AF0
+#define MFP_PIN_GPIO129_GPIO_129			MFP_AF0
+#define MFP_PIN_GPIO130_GPIO_130			MFP_AF0
+#define MFP_PIN_GPIO131_GPIO_131			MFP_AF0
+#define MFP_PIN_GPIO132_GPIO_132			MFP_AF0
+#define MFP_PIN_GPIO133_GPIO_133			MFP_AF0
+#define MFP_PIN_GPIO134_GPIO_134			MFP_AF0
+#define MFP_PIN_GPIO135_GPIO_135			MFP_AF0
+#define MFP_PIN_GPIO136_GPIO_136			MFP_AF0
+#define MFP_PIN_GPIO137_GPIO_137			MFP_AF0
+#define MFP_PIN_GPIO138_GPIO_138			MFP_AF0
+#define MFP_PIN_GPIO139_GPIO_139			MFP_AF0
+#define MFP_PIN_GPIO140_GPIO_140			MFP_AF0
+#define MFP_PIN_GPIO141_GPIO_141			MFP_AF0
+#define MFP_PIN_GPIO142_GPIO_142			MFP_AF0
+#define MFP_PIN_GPIO143_GPIO_143			MFP_AF0
+#define MFP_PIN_GPIO144_GPIO_144			MFP_AF0
+#define MFP_PIN_GPIO145_GPIO_145			MFP_AF0
+#define MFP_PIN_GPIO146_GPIO_146			MFP_AF0
+#define MFP_PIN_GPIO147_GPIO_147			MFP_AF0
+#define MFP_PIN_GPIO148_GPIO_148			MFP_AF0
+#define MFP_PIN_GPIO149_GPIO_149			MFP_AF0
+#define MFP_PIN_GPIO150_GPIO_150			MFP_AF0
+#define MFP_PIN_GPIO151_GPIO_151			MFP_AF0
+#define MFP_PIN_GPIO152_GPIO_152			MFP_AF0
+#define MFP_PIN_GPIO153_GPIO_153			MFP_AF0
+#define MFP_PIN_GPIO154_GPIO_154			MFP_AF0
+#define MFP_PIN_GPIO155_GPIO_155			MFP_AF0
+#define MFP_PIN_GPIO156_GPIO_156			MFP_AF0
+#define MFP_PIN_GPIO157_GPIO_157			MFP_AF0
+#define MFP_PIN_GPIO158_GPIO_158			MFP_AF0
+#define MFP_PIN_GPIO159_GPIO_159			MFP_AF0
+
+extern int mhn_mfp_set_config (struct mhn_pin_config *pin_config);
+extern int mhn_mfp_set_configs(struct mhn_pin_config *pin_configs, int n);
+
+extern int mhn_mfp_set_afds(mfp_pin_t pin, int af, int ds);
+extern int mhn_mfp_set_lpm (mfp_pin_t pin, int lpm);
+extern int mhn_mfp_set_rdh (mfp_pin_t pin, int rdh);
+extern int mhn_mfp_set_edge(mfp_pin_t pin, int edge);
+extern int mhn_mfp_set_pull(mfp_pin_t pin, int pull);
+
+extern void mhn_mfp_save(void);
+extern void mhn_mfp_restore(void);
+
+#endif /* _MHN_MFP_H */
Index: linux-2.6.10/include/asm-arm/arch-pxa/mhn_gpio.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-pxa/mhn_gpio.h
@@ -0,0 +1,64 @@
+/*
+ * include/asm-arm/arch-pxa/mhn_gpio.h
+ *
+ * Copyright (C) 2006, Marvell International.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef _MHN_GPIO_H
+#define _MHN_GPIO_H
+
+#include <linux/types.h>
+
+#define GPIO_ID_START		0
+#define GPIO_ID_END		127
+
+#ifdef CONFIG_PXA3xx_GPIOEX
+
+#define GPIO_EXP_START		(GPIO_ID_END + 1)
+#define GPIO_EXP0_START		(GPIO_ID_END + 1)
+#define GPIO_EXP0_HALF		(GPIO_EXP0_START + 8)
+#define GPIO_EXP0_END		(GPIO_EXP0_START + 15)
+#define GPIO_EXP1_START		(GPIO_EXP0_END + 1)
+#define GPIO_EXP1_HALF		(GPIO_EXP1_START + 8)
+#define GPIO_EXP1_END		(GPIO_EXP1_START + 15)
+#define GPIO_EXP_END		(GPIO_EXP1_END)
+
+#define GPIO_ID_MAX		(GPIO_EXP_END)
+
+extern int gpio_exp_set_direction(int gpio_exp_id, int direction);
+extern int gpio_exp_get_direction(int gpio_exp_id);
+extern int gpio_exp_set_level(int gpio_exp_id, int level);
+extern int gpio_exp_get_level(int gpio_exp_id);
+
+#else
+
+#define GPIO_ID_MAX		GPIO_ID_END
+
+#endif
+
+#define GPIO_DIR_IN		0
+#define GPIO_DIR_OUT		1
+#define GPIO_LEVEL_LOW		0
+#define GPIO_LEVEL_HIGH		1
+
+#define MFP2GPIO(mfp)		((mfp) & 0xffff)
+
+extern int mhn_gpio_set_direction(int gpio_id, int dir);
+extern int mhn_gpio_get_direction(int gpio_id);
+extern int mhn_gpio_set_level(int gpio_id, int level);
+extern int mhn_gpio_get_level(int gpio_id);
+extern int mhn_gpio_set_rising_edge_detect(int gpio_id, int enable);
+extern int mhn_gpio_get_rising_edge_detect(int gpio_id);
+extern int mhn_gpio_set_falling_edge_detect(int gpio_id, int enable);
+extern int mhn_gpio_get_falling_edge_detect(int gpio_id);
+extern int mhn_gpio_get_edge_detect_status(int gpio_id);
+extern int mhn_gpio_clear_edge_detect_status(int gpio_id);
+
+extern void mhn_gpio_save(void);
+extern void mhn_gpio_restore(void);
+
+#endif /* _MHN_GPIO_H */
Index: linux-2.6.10/include/asm-arm/arch-pxa/preempt.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/preempt.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/preempt.h
@@ -24,7 +24,7 @@ static inline unsigned long clock_diff(u
 #define INTERRUPTS_ENABLED(x)   (!((x) & PSR_I_BIT))	/* Assuming x is PSR, 
 							 * check for I bit
 							 */
-#if defined(CONFIG_PXA27x)
+#if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 /* On the Bulverde, OSCR0 increments at the rising edge of 3.25 MHz clock */
 #define clock_to_usecs(x)       (((x) * 4) / 13)
 #define TICKS_PER_USEC          (3)
Index: linux-2.6.10/include/asm-arm/arch-pxa/pxa-regs.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/pxa-regs.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/pxa-regs.h
@@ -19,12 +19,21 @@
  * PXA Chip selects
  */
 
+#ifdef CONFIG_PXA3xx
+#define PXA_CS0_PHYS	0x00000000	/* for both small and large same start  */
+#define PXA_CS1_PHYS	0x04000000	/* Small partition start address (64MB) */
+#define PXA_CS1_LPHYS	0x30000000	/* Large partition start address (256MB) */
+#define PXA_CS2_PHYS	0x10000000	/* (64MB)                               */
+#define PXA_CS3_PHYS	0x14000000	/* (64MB)                               */
+#define PXA_PCMCIA_PHYS	0x20000000	/* (256MB)                              */
+#else
 #define PXA_CS0_PHYS	0x00000000
 #define PXA_CS1_PHYS	0x04000000
 #define PXA_CS2_PHYS	0x08000000
 #define PXA_CS3_PHYS	0x0C000000
 #define PXA_CS4_PHYS	0x10000000
 #define PXA_CS5_PHYS	0x14000000
+#endif
 
 
 /*
@@ -42,10 +51,12 @@
 #define PCMCIA0AttrSp	PCMCIAAttrSp	/* PCMCIA 0 Attribute Space [byte] */
 #define PCMCIA0MemSp	PCMCIAMemSp	/* PCMCIA 0 Memory Space [byte]    */
 
+#ifndef CONFIG_PXA3xx	/* PXA3xx supports only one slot */
 #define PCMCIA1Sp	PCMCIASp	/* PCMCIA 1 Space [byte]           */
 #define PCMCIA1IOSp	PCMCIAIOSp	/* PCMCIA 1 I/O Space [byte]       */
 #define PCMCIA1AttrSp	PCMCIAAttrSp	/* PCMCIA 1 Attribute Space [byte] */
 #define PCMCIA1MemSp	PCMCIAMemSp	/* PCMCIA 1 Memory Space [byte]    */
+#endif
 
 #define _PCMCIA(Nb)	        	/* PCMCIA [0..1]                   */ \
                 	(0x20000000 + (Nb)*PCMCIASp)
@@ -60,12 +71,12 @@
 #define _PCMCIA0Attr	_PCMCIAAttr (0)	/* PCMCIA 0 Attribute              */
 #define _PCMCIA0Mem	_PCMCIAMem (0)	/* PCMCIA 0 Memory                 */
 
+#ifndef CONFIG_PXA3xx	/* PXA3xx supports only one slot */
 #define _PCMCIA1	_PCMCIA (1)	/* PCMCIA 1                        */
 #define _PCMCIA1IO	_PCMCIAIO (1)	/* PCMCIA 1 I/O                    */
 #define _PCMCIA1Attr	_PCMCIAAttr (1)	/* PCMCIA 1 Attribute              */
 #define _PCMCIA1Mem	_PCMCIAMem (1)	/* PCMCIA 1 Memory                 */
-
-
+#endif
 
 /*
  * DMA Controller
@@ -93,7 +104,7 @@
 #define DCSR_RUN	(1 << 31)	/* Run Bit (read / write) */
 #define DCSR_NODESC	(1 << 30)	/* No-Descriptor Fetch (read / write) */
 #define DCSR_STOPIRQEN	(1 << 29)	/* Stop Interrupt Enable (read / write) */
-#ifdef CONFIG_PXA27x
+#if defined (CONFIG_PXA27x) || defined (CONFIG_PXA3xx)
 #define DCSR_EORIRQEN	(1 << 28)       /* End of Receive Interrupt Enable (R/W) */
 #define DCSR_EORJMPEN	(1 << 27)       /* Jump to next descriptor on EOR */
 #define DCSR_EORSTOPEN	(1 << 26)       /* STOP on an EOR */
@@ -101,6 +112,7 @@
 #define DCSR_CLRCMPST	(1 << 24)       /* Clear Descriptor Compare Status */
 #define DCSR_CMPST	(1 << 10)       /* The Descriptor Compare Status */
 #define DCSR_ENRINTR	(1 << 9)        /* The end of Receive */
+#define DCSR_RASINTR	(1 << 4)	/* Request After Channel Stopped */
 #endif
 #define DCSR_REQPEND	(1 << 8)	/* Request Pending (read-only) */
 #define DCSR_STOPSTATE	(1 << 3)	/* Stop State (read-only) */
@@ -151,11 +163,53 @@
 #define DRCMR36		__REG(0x40000190)  /* Request to Channel Map Register for USB endpoint 12 Request */
 #define DRCMR37		__REG(0x40000194)  /* Request to Channel Map Register for USB endpoint 13 Request */
 #define DRCMR38		__REG(0x40000198)  /* Request to Channel Map Register for USB endpoint 14 Request */
-#define DRCMR39		__REG(0x4000019C)  /* Reserved */
-
+#define DRCMR39		__REG(0x4000019C)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR40		__REG(0x400001A0)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR41		__REG(0x400001A4)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR42		__REG(0x400001A8)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR43		__REG(0x400001AC)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR44		__REG(0x400001B0)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR45		__REG(0x400001B4)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR46		__REG(0x400001B8)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR47		__REG(0x400001BC)  /* Request to Channel Map Register for USB endpoint 15 Request */
+#define DRCMR48		__REG(0x400001C0)  /* Request to Channel Map Register for MSL Receive Request 1 */
+#define DRCMR49		__REG(0x400001C4)  /* Request to Channel Map Register for MSL Transmit Request 1 */
+#define DRCMR50		__REG(0x400001C8)  /* Request to Channel Map Register for MSL Receive Request 2 */
+#define DRCMR51		__REG(0x400001CC)  /* Request to Channel Map Register for MSL Transmit Request 2 */
+#define DRCMR52		__REG(0x400001D0)  /* Request to Channel Map Register for MSL Receive Request 3 */
+#define DRCMR53		__REG(0x400001D4)  /* Request to Channel Map Register for MSL Transmit Request 3 */
+#define DRCMR54		__REG(0x400001D8)  /* Request to Channel Map Register for MSL Receive Request 4 */
+#define DRCMR55		__REG(0x400001DC)  /* Request to Channel Map Register for MSL Transmit Request 4 */
+#define DRCMR56		__REG(0x400001E0)  /* Request to Channel Map Register for MSL Receive Request 5 */
+#define DRCMR57		__REG(0x400001E4)  /* Request to Channel Map Register for MSL Transmit Request 5 */
+#define DRCMR58		__REG(0x400001E8)  /* Request to Channel Map Register for MSL Receive Request 6 */
+#define DRCMR59		__REG(0x400001EC)  /* Request to Channel Map Register for MSL Transmit Request 6 */
+#define DRCMR60		__REG(0x400001F0)  /* Request to Channel Map Register for MSL Receive Request 7 */
+#define DRCMR61		__REG(0x400001F4)  /* Request to Channel Map Register for MSL Transmit Request 7 */
+#define DRCMR62		__REG(0x400001F8)  /* Request to Channel Map Register for USIM 1 Receive Request */
+#define DRCMR63		__REG(0x400001FC)  /* Request to Channel Map Register for USIM 1 Transimit Request */
+#define DRCMR64		__REG(0x40001100)  /* Reserved */
+#define DRCMR65		__REG(0x40001104)  /* Reserved */
+#define DRCMR66		__REG(0x40001108)  /* Request to channel Map Register for SSP3 Receive Request */
+#define DRCMR67		__REG(0x4000110C)  /* Request to channel Map Register for SSP3 Transmit Request */
+#define DRCMRRXSS3DR	DRCMR66
+#define DRCMRTXSS3DR	DRCMR67
 #define DRCMR68		__REG(0x40001110)  /* Request to Channel Map Register for Camera FIFO 0 Request */
 #define DRCMR69		__REG(0x40001114)  /* Request to Channel Map Register for Camera FIFO 1 Request */
 #define DRCMR70		__REG(0x40001118)  /* Request to Channel Map Register for Camera FIFO 2 Request */
+#define DRCMR71		__REG(0x4000111C)  /* Request to Channel Map Register for TPM Receive Request */
+#define DRCMR72		__REG(0x40001120)  /* Request to Channel Map Register for TPM Transmit Request 1 */
+#define DRCMR73		__REG(0x40001124)  /* Request to Channel Map Register for TPM Transmit Request 2 */
+#define DRCMR74		__REG(0x40001128)  /* Request to Channel Map Register for DREQ<2> */
+#define DRCMR91		__REG(0x4000116C)  /* Request to Channel Map Register for USIM 2 Receive Request */
+#define DRCMR92		__REG(0x40001170)  /* Request to Channel Map Register for USIM 2 Transmit Request */
+#define DRCMR93		__REG(0x40001174)  /* Request to Channel Map Register for MMC Controller 1 Request */
+#define DRCMR94		__REG(0x40001178)  /* Request to Channel Map Register for MMC Controller 2 Request */
+#define DRCMR95		__REG(0x4000117C)  /* Request to Channel Map Register for AC97 Surround Transmit Request */
+#define DRCMR96		__REG(0x40001180)  /* Request to Channel Map Register for AC97 centre/LFE Transmit Request */
+#define DRCMR97		__REG(0x40001184)  /* Request to Channel Map Register for NAND interface data transmit & receive Request */
+#define DRCMR98		__REG(0x40001188)  /* Reserved */
+#define DRCMR99		__REG(0x4000118C)  /* Request to Channel Map Register for NAND interface command transmit Request */
 
 #define DRCMRRXSADR	DRCMR2
 #define DRCMRTXSADR	DRCMR3
@@ -326,6 +380,9 @@
 #define STDLL		__REG(0x40700000)  /* Divisor Latch Low Register (DLAB = 1) (read/write) */
 #define STDLH		__REG(0x40700004)  /* Divisor Latch High Register (DLAB = 1) (read/write) */
 
+#if defined (CONFIG_PXA3xx)
+#define IER_HSE		(1 << 8)	/* High Speed UART Enable */
+#endif
 #define IER_DMAE	(1 << 7)	/* DMA Requests Enable */
 #define IER_UUE		(1 << 6)	/* UART Unit Enable */
 #define IER_NRZE	(1 << 5)	/* NRZ coding Enable */
@@ -394,6 +451,14 @@
 #define STISR_RCVEIR    (1 << 1)        /* Receiver SIR Enable */
 #define STISR_XMITIR    (1 << 0)        /* Transmitter SIR Enable */
 
+#ifdef CONFIG_PXA3xx
+
+/*
+* PMU
+*/
+
+#define PML_ESEL_0	__REG_2(0x4600ff00)
+#endif
 
 /*
  * I2C registers
@@ -426,6 +491,7 @@
 #define ICR_ALDIE	(1 << 12)	   /* enable arbitration interrupt */
 #define ICR_SADIE	(1 << 13)	   /* slave address detected int enable */
 #define ICR_UR		(1 << 14)	   /* unit reset */
+#define ICR_FM          (1 << 15)       /* 1: Fast mode - 400 KBit/sec. operation. */
 
 #define ISR_RWM		(1 << 0)	   /* read/write mode */
 #define ISR_ACKNAK	(1 << 1)	   /* ack/nak status */
@@ -439,6 +505,30 @@
 #define ISR_SAD		(1 << 9)	   /* slave address detected */
 #define ISR_BED		(1 << 10)	   /* bus error no ACK/NAK */
 
+#ifdef CONFIG_PXA3xx
+
+/*
+ * 1-Wire Interface registers
+ */
+
+#define W1CMDR		__REG(0x41B00000)	/* 1-wire command register */
+#define W1TRR		__REG(0x41B00004)	/* 1-wire transmit/receive buffer */
+#define W1INTR		__REG(0x41B00008)	/* 1-wire interrupt register */
+#define W1IER		__REG(0x41B0000c)	/* 1-wire interrupt enable register */
+#define W1CDR		__REG(0x41B00010)	/* 1-wire clock divisor register */
+
+#define W1CMDR_RESET	(1)
+#define W1CMDR_SRA	(1<<1)
+#define W1CMDR_DQO	(1<<2)
+#define W1CMDR_DQI	(1<<3)
+
+#define W1INTR_RBF	(1<<4)
+#define W1INTR_TEMT	(1<<3)
+#define W1INTR_TBE	(1<<2)
+#define W1INTR_PDR	(1<<1)
+#define W1INTR_PD	(1)
+
+#endif /* CONFIG_PXA3xx */
 
 /*
  * Serial Audio Controller
@@ -740,7 +830,7 @@
 #define USIR1_IR14	(1 << 6)	/* Interrup request ep 14 */
 #define USIR1_IR15	(1 << 7)	/* Interrup request ep 15 */
 
-#elif defined(CONFIG_PXA27x)
+#elif defined(CONFIG_PXA27x)||(CONFIG_PXA3xx)
 
 #define UDCCR           __REG(0x40600000) /* UDC Control Register */
 #define UDCCR_OEN	(1 << 31)	/* On-the-Go Enable */
@@ -818,9 +908,34 @@
 					   Interrupt Enable */
 #define UDCOTGICR_IEIDF	(1 << 0)	/* OTG ID Change Falling Edge
 					   Interrupt Enable */
+/* fields and bits for UDCOTGISR */
+#define UDCOTGISR_IRIDF               ( 1u << 0 )
+#define UDCOTGISR_IRIDR               ( 1u << 1 )
+#define OTG_SETFEATURE                        ( 1u << 24)
+
+#define UDCOTGISR     __REG(0x4060001C) /* UDC OTG Interrupt Status Register*/
+#define UP2OCR                __REG(0x40600020) /* Port 2 control register */
+#define UP3OCR                __REG(0x40600024) /* Port 3 control register */
+
+#define UP2OCR_HXOE   (1u << 17)
+#define UP2OCR_HXS    (1u << 16)
+#define UP2OCR_IDON   (1u << 10)
+#define UP2OCR_EXSUS  (1u << 9)
+#define UP2OCR_EXSP   (1u << 8)
+#define UP2OCR_DMPUBE (1u << 7)
+#define UP2OCR_DPPUBE (1u << 6)
+#define UP2OCR_DMPUE  (1u << 5)
+#define UP2OCR_DPPUE  (1u << 4)
+#define UP2OCR_DMPDE  (1u << 3)
+#define UP2OCR_DPPDE  (1u << 2)
+#define UP2OCR_CPVPE  (1u << 1)
+#define UP2OCR_CPVEN  (1u << 0)
+
+
 
 #define UDCCSN(x)	__REG2(0x40600100, (x) << 2)
 #define UDCCSR0         __REG(0x40600100) /* UDC Control/Status register - Endpoint 0 */
+#define UDCCSR0_ODFCLR (1 << 10)        /* OPC Disable Fifo Clear */
 #define UDCCSR0_ACM	(1 << 9)	/* ACK Control Mode */
 #define UDCCSR0_AREN	(1 << 8)	/* ACK Response Enable */
 #define UDCCSR0_SA	(1 << 7)	/* Setup Active */
@@ -978,6 +1093,205 @@
 #define UDC_BCR_MASK    (0x3ff)
 #endif
 
+#ifdef CONFIG_PXA3xx
+/* USB 2.0 device controller */
+#define U2DCR           __REG_3(0x54100000)	/* U2D Control Register */
+#define U2DCR_NDC              (1 << 31)       /* NAK During Config */
+#define U2DCR_HSTC_MASK	(0x7 << 28)	/* High Speed Timeout Calibration */
+#define U2DCR_HSTC_S	(28)	/* shift */
+#define U2DCR_SPEOREN          (1 << 27)       /* Short Packet EOR INTR generation Enable */
+#define U2DCR_FSTC_MASK	(0x7 << 24)	/* Full Speed Timeout Calibration */
+#define U2DCR_FSTC_S	(24)	/* shift */
+#define U2DCR_UCLKOVR	(1 << 22)	/* UTM Clock Override */
+#define U2DCR_ABP		(1 << 21)	/* Application Bus Power */
+#define U2DCR_ADD		(1 << 20)	/* Application Device Disconnect */
+#define U2DCR_CC		(1 << 19)	/* Configuration Change */
+#define U2DCR_HS		(1 << 18)	/* High Speed USB Detection */
+#define U2DCR_SMAC		(1 << 17)	/* Switch Endpoint Memofy to Actuve Configuration */
+#define U2DCR_DWRE		(1 << 16)	/* Device Remote Wake-up Feature */
+#define U2DCR_ACN		(0xf << 12)	/* Active U2D Configuration Number */
+#define U2DCR_ACN_S		12	/* shift */
+#define U2DCR_AIN		(0xf << 8)	/* Active U2D Interface Number */
+#define U2DCR_AIN_S		8	/* shift */
+#define U2DCR_AAISN		(0xf << 4)	/* Active U2D Alternate Interface Setting Number */
+#define U2DCR_AAISN_S	4	/* shift */
+#define U2DCR_EMCE		(1 << 3)	/* Endpoint Memory Configuration Error */
+#define U2DCR_UDR		(1 << 2)	/* U2D Resume */
+#define U2DCR_UDA		(1 << 1)	/* U2D Active */
+#define U2DCR_UDE		(1 << 0)	/* U2D Enable */
+#define U2DCR_MASK_BITS (U2DCR_CC | U2DCR_SMAC | U2DCR_EMCE | U2DCR_UDR)
+
+#define U2DICR          __REG_3(0x54100004)	/* U2D Interrupt Control Register */
+#define U2DISR          __REG_3(0x5410000C)	/* U2D Interrupt Status Register */
+#define U2DINT_CC		(1 << 31)	/* Interrupt - Configuration Change */
+#define U2DINT_SOF		(1 << 30)	/* Interrupt - SOF */
+#define U2DINT_USOF		(1 << 29)	/* Interrupt - micro SOF */
+#define U2DINT_RU		(1 << 28)	/* Interrupt - Resume */
+#define U2DINT_SU		(1 << 27)	/* Interrupt - Suspend */
+#define U2DINT_RS		(1 << 26)	/* Interrupt - Reset */
+#define U2DINT_DPE		(1 << 25)	/* Interrupt - Data Packet Error */
+#define U2DINT_FIFOERR		(0x4)	/* Interrupt - endpoint FIFO error */
+#define U2DINT_PACKETCMP  	(0x2)	/* Interrupt - endpoint packet complete */
+#define U2DINT_SPACKETCMP	(0x1)	/* Interrupt - endpoint short packet complete */
+
+#define U2DFNR          __REG_3(0x54100014)	/* U2D Frame Number Register */
+
+#define U2DINT(n,intr)                 (((intr) & 0x07) << (((n) & 0x07) * 3))
+#define U2DICR2                __REG_3(0x54100008) /* U2D Interrupt Control Register 2 */
+#define U2DISR2                __REG_3(0x54100010) /* U2D Interrupt Status Register 2 */
+
+#define U2DOTGCR               __REG_3(0x54100020) /* U2D OTG Control Register */
+#define U2DOTGCR_OTGEN         (1 << 31)       /* On-The-Go Enable */
+#define U2DOTGCR_AALTHNP       (1 << 30)       /* A-device Alternate Host Negotiation Protocal Port Support */
+#define U2DOTGCR_AHNP          (1 << 29)       /* A-device Host Negotiation Protocal Support */
+#define U2DOTGCR_BHNP          (1 << 28)       /* B-device Host Negotiation Protocal Enable */
+#define U2DOTGCR_CKAF          (1 << 5)        /* Carkit Mode Alternate Function Select */
+#define U2DOTGCR_UTMID         (1 << 4)        /* UTMI Interface Disable */
+#define U2DOTGCR_ULAF          (1 << 3)        /* ULPI Mode Alternate Function Select */
+#define U2DOTGCR_SMAF          (1 << 2)        /* Serial Mode Alternate Function Select */
+#define U2DOTGCR_RTSM          (1 << 1)        /* Return to Synchronous Mode (ULPI Mode) */
+#define U2DOTGCR_ULE           (1 << 0)        /* ULPI Wrapper Enable */
+
+#define U2DOTGICR              __REG_3(0x54100024) /* U2D OTG Interrupt Control Register */
+#define U2DOTGISR              __REG_3(0x54100028) /* U2D OTG Interrupt Status Register */
+
+#define U2DOTGINT_SF           (1 << 17)       /* OTG Set Feature Command Received */
+#define U2DOTGINT_SI           (1 << 16)       /* OTG Interrupt */
+#define U2DOTGINT_RLS1         (1 << 14)       /* RXCMD Linestate[1] Change Interrupt Rise */
+#define U2DOTGINT_RLS0         (1 << 13)       /* RXCMD Linestate[0] Change Interrupt Rise */
+#define U2DOTGINT_RID          (1 << 12)       /* RXCMD OTG ID Change Interrupt Rise */
+#define U2DOTGINT_RSE          (1 << 11)       /* RXCMD OTG Session End Interrupt Rise */
+#define U2DOTGINT_RSV          (1 << 10)       /* RXCMD OTG Session Valid Interrupt Rise */
+#define U2DOTGINT_RVV          (1 << 9)        /* RXCMD OTG Vbus Valid Interrupt Rise */
+#define U2DOTGINT_RCK          (1 << 8)        /* RXCMD Carkit Interrupt Rise */
+#define U2DOTGINT_FLS1         (1 << 6)        /* RXCMD Linestate[1] Change Interrupt Fall */
+#define U2DOTGINT_FLS0         (1 << 5)        /* RXCMD Linestate[0] Change Interrupt Fall */
+#define U2DOTGINT_FID          (1 << 4)        /* RXCMD OTG ID Change Interrupt Fall */
+#define U2DOTGINT_FSE          (1 << 3)        /* RXCMD OTG Session End Interrupt Fall */
+#define U2DOTGINT_FSV          (1 << 2)        /* RXCMD OTG Session Valid Interrupt Fall */
+#define U2DOTGINT_FVV          (1 << 1)        /* RXCMD OTG Vbus Valid Interrupt Fall */
+#define U2DOTGINT_FCK          (1 << 0)        /* RXCMD Carkit Interrupt Fall */
+
+#define U2DOTGUSR              __REG_3(0x5410002C) /* U2D OTG ULPI Status Register */
+#define U2DOTGUSR_LPA          (1 << 31)       /* ULPI Low Power Mode Active */
+#define U2DOTGUSR_S6A          (1 << 30)       /* ULPI Serial Mode (6-pin) Active */
+#define U2DOTGUSR_S3A          (1 << 29)       /* ULPI Serial Mode (3-pin) Active */
+#define U2DOTGUSR_CKA          (1 << 28)       /* ULPI Car Kit Mode Active */
+#define U2DOTGUSR_LS1          (1 << 6)        /* RXCMD Linestate 1 Status */
+#define U2DOTGUSR_LS0          (1 << 5)        /* RXCMD Linestate 0 Status */
+#define U2DOTGUSR_ID           (1 << 4)        /* OTG IDGnd Status */
+#define U2DOTGUSR_SE           (1 << 3)        /* OTG Session End Status */
+#define U2DOTGUSR_SV           (1 << 2)        /* OTG Session Valid Status */
+#define U2DOTGUSR_VV           (1 << 1)        /* OTG Vbus Valid Status */
+#define U2DOTGUSR_CK           (1 << 0)        /* Carkit Interrupt Status */
+
+#define U2DOTGUCR              __REG_3(0x54100030) /* U2D OTG ULPI Control Register */
+#define U2DOTGUCR_RUN          (1 << 25)       /* RUN */
+#define U2DOTGUCR_RNW          (1 << 24)       /* Read or Write operation */
+#define U2DOTGUCR_ADDR         (0x3f << 16)/* Address of the ULPI PHY register to be accessed */
+#define U2DOTGUCR_ADDR_S       16                      /* shift */
+#define U2DOTGUCR_WDATA                (0xff << 8)     /* The data for a WRITE command */
+#define U2DOTGUCR_WDATA_S      8                       /* shift */
+#define U2DOTGUCR_RDATA                (0xff << 0)     /* The data for a READ command */
+#define U2DOTGUCR_RDATA_S      0                       /* shift */
+
+#define U2DP3CR                        __REG_3(0x54100034) /* U2D Port 3 Control Register */
+#define U2DP3CR_P2SS           (0x3 << 8)      /* Host Port 2 Serial Mode Select */
+#define U2DP3CR_P2SS_S         8                       /* shift */
+#define U2DP3CR_P3SS           (0x7 << 4)      /* Host Port 3 Serial Mode Select */
+#define U2DP3CR_P3SS_S         4                       /* shift */
+#define U2DP3CR_VPVMBEN                (1 << 1)        /* Host Port 3 Vp/Vm Block Enable */
+#define U2DP3CR_CFG            (1 << 0)        /* Host Port 3 Configuration */
+
+#define U2DCSR0         __REG_3(0x54100100)	/* U2D Control/Status Register - Endpoint 0 */
+#define U2DCSR0_IPA		(1 << 8)	/* IN Packet Adjusted */
+#define U2DCSR0_SA		(1 << 7)	/* SETUP Active */
+#define U2DCSR0_RNE		(1 << 6)	/* Receive FIFO Not Empty */
+#define U2DCSR0_FST		(1 << 5)	/* Force Stall */
+#define U2DCSR0_SST		(1 << 4)	/* Send Stall */
+#define U2DCSR0_DME		(1 << 3)	/* DMA Enable */
+#define U2DCSR0_FTF		(1 << 2)	/* Flush Transmit FIFO */
+#define U2DCSR0_IPR		(1 << 1)	/* IN Packet Ready */
+#define U2DCSR0_OPC		(1 << 0)	/* OUT Packet Complete */
+
+#define U2DCSR(x)       __REG_3(0x54100100 + ((x)<<2))	/* U2D Control/Status Register - Endpoint x */
+#define U2DCSR_BF		(1 << 10)	/* Buffer Full, for OUT eps */
+#define U2DCSR_BE		(1 << 10)	/* Buffer Empty, for IN eps */
+#define U2DCSR_DPE		(1 << 9)	/* Data Packet Error, for ISO eps only */
+#define U2DCSR_FEF		(1 << 8)	/* Flush Endpoint FIFO */
+#define U2DCSR_SP		(1 << 7)	/* Short Packet Control/Status, for OUT eps only, readonly */
+#define U2DCSR_BNE		(1 << 6)	/* Buffer Not Empty, for OUT eps */
+#define U2DCSR_BNF		(1 << 6)	/* Buffer Not Full, for IN eps */
+#define U2DCSR_FST		(1 << 5)	/* Force STALL, write 1 set */
+#define U2DCSR_SST		(1 << 4)	/* Sent STALL, write 1 clear */
+#define U2DCSR_DME		(1 << 3)	/* DMA Enable */
+#define U2DCSR_TRN		(1 << 2)	/* Tx/Rx NAK, write 1 clear */
+#define U2DCSR_PC		(1 << 1)	/* Packet Complete, write 1 clear */
+#define U2DCSR_FS		(1 << 0)	/* FIFO needs Service */
+
+#define U2DBCR0         __REG_3(0x54100200)	/* U2D Byte Count Register - Endpoint 0 */
+#define U2DBCR(x)       __REG_3(0x54100200 + ((x)<<2))	/* U2D Byte Count Register - Endpoint x */
+
+#define U2DDR0         	__REG_3(0x54100300)	/* U2D Data Register - Endpoint 0 */
+
+#define U2DEPCR(x)     	__REG_3(0x54100400 + ((x)<<2))	/* U2D Configuration Register - Endpoint x */
+#define U2DEPCR_EE		(1 << 0)	/* Endpoint Enable */
+#define U2DEPCR_BS_MASK	(0x3FE)	/* Buffer Size, BS*8=FIFO size, max 8184B = 8KB */
+
+#define U2DSCA         	__REG_3(0x54100500)	/* U2D Setup Command Address */
+#define U2DSCA_VALUE	0x0120
+
+#define U2DEN0         	__REG_3(0x54100504)	/* U2D Endpoint Information Register - Endpoint 0 */
+#define U2DEN(x)       	__REG_3(0x54100504 + ((x)<<2))	/* U2D Endpoint Information Register - Endpoint x */
+
+/* U2DMA registers */
+#define U2DMACSR0		__REG_3(0x54101000)	/* U2DMA Control/Status Register - Channel 0 */
+#define U2DMACSR(x)    	__REG_3(0x54101000 + ((x)<<2))	/* U2DMA Control/Status Register - Channel x */
+#define U2DMACSR_RUN		(1 << 31)	/* Run Bit (read / write) */
+#define U2DMACSR_STOPIRQEN	(1 << 29)	/* Stop Interrupt Enable (read / write) */
+#define U2DMACSR_EORIRQEN	(1 << 28)	/* End of Receive Interrupt Enable (R/W) */
+#define U2DMACSR_EORJMPEN	(1 << 27)	/* Jump to next descriptor on EOR */
+#define U2DMACSR_EORSTOPEN	(1 << 26)	/* STOP on an EOR */
+#define U2DMACSR_RASIRQEN	(1 << 23)	/* Request After Cnannel Stopped Interrupt Enable */
+#define U2DMACSR_MASKRUN	(1 << 22)	/* Mask Run */
+#define U2DMACSR_SCEMC		(3 << 18)	/* System Bus Split Completion Error Message Class */
+#define U2DMACSR_SCEMI		(0x1f << 13)	/* System Bus Split Completion Error Message Index */
+#define U2DMACSR_BUSERRTYPE	(7 << 10)	/* PX Bus Error Type */
+#define U2DMACSR_EORINTR	(1 << 9)	/* End Of Receive */
+#define U2DMACSR_REQPEND	(1 << 8)	/* Request Pending */
+#define U2DMACSR_RASINTR	(1 << 4)	/* Request After Channel Stopped (read / write 1 clear) */
+#define U2DMACSR_STOPINTR	(1 << 3)	/* Stop Interrupt (read only) */
+#define U2DMACSR_ENDINTR	(1 << 2)	/* End Interrupt (read / write 1 clear) */
+#define U2DMACSR_STARTINTR	(1 << 1)	/* Start Interrupt (read / write 1 clear) */
+#define U2DMACSR_BUSERRINTR	(1 << 0)	/* Bus Error Interrupt (read / write 1 clear) */
+
+#define U2DMACR       	__REG_3(0x54101080)	/* U2DMA Control Register */
+#define U2DMAINT       	__REG_3(0x541010F0)	/* U2DMA Interrupt Register */
+
+#define U2DMABR0       	__REG_3(0x54101100)	/* U2DMA Branch Register - Channel 0 */
+#define U2DMABR(x)      __REG_3(0x54101100 + (x)<<2)	/* U2DMA Branch Register - Channel x */
+
+#define U2DMADADR0      __REG_3(0x54101200)	/* U2DMA Descriptor Address Register - Channel 0 */
+#define U2DMADADR(x)    __REG_3(0x54101200 + (x)*0x10)	/* U2DMA Descriptor Address Register - Channel x */
+
+#define U2DMADADR_STOP        (1U<<0)
+
+#define U2DMASADR0      __REG_3(0x54101204)	/* U2DMA Source Address Register - Channel 0 */
+#define U2DMASADR(x)    __REG_3(0x54101204 + (x)*0x10)	/* U2DMA Source Address Register - Channel x */
+#define U2DMATADR0      __REG_3(0x54101208)	/* U2DMA Target Address Register - Channel 0 */
+#define U2DMATADR(x)    __REG_3(0x54101208 + (x)*0x10)	/* U2DMA Target Address Register - Channel x */
+
+#define U2DMACMDR0      __REG_3(0x5410120C)	/* U2DMA Command Address Register - Channel 0 */
+#define U2DMACMDR(x)    __REG_3(0x5410120C + (x)*0x10)	/* U2DMA Command Address Register - Channel x */
+
+#define U2DMACMDR_XFRDIS		(1 << 31)	/* Transfer Direction */
+#define U2DMACMDR_STARTIRQEN	(1 << 22)	/* Start Interrupt Enable */
+#define U2DMACMDR_ENDIRQEN		(1 << 21)	/* End Interrupt Enable */
+#define U2DMACMDR_PACKCOMP		(1 << 13)	/* Packet Complete */
+#define U2DMACMDR_LEN			(0x07ff)	/* length mask (max = 2K - 1) */
+
+#endif
+
 /*
  * Fast Infrared Communication Port
  */
@@ -1033,16 +1347,35 @@
 #define RTAR		__REG(0x40900004)  /* RTC Alarm Register */
 #define RTSR		__REG(0x40900008)  /* RTC Status Register */
 #define RTTR		__REG(0x4090000C)  /* RTC Timer Trim Register */
+#define RDCR		__REG(0x40900010) /* RTC Day Counter Register */
+#define RYCR		__REG(0x40900014) /* RTC Year Counter Register */
+#define RDAR1		__REG(0x40900018) /* Wristwatch Day Alarm Register 1 */
+#define RYAR1		__REG(0x4090001C) /* Wristwatch Year Alarm Register 1 */
+#define RDAR2		__REG(0x40900020) /* Wristwatch Day Alarm Register 2 */
+#define RYAR2		__REG(0x40900024) /* Wristwatch Year Alarm Register 2 */
+#define SWCR		__REG(0x40900028) /* Stopwatch Counter Register */
+#define SWAR1		__REG(0x4090002C) /* Stopwatch Alarm Register 1 */
+#define SWAR2		__REG(0x40900030) /* Stopwatch Alarm Register 2 */
+#define RTCPICR		__REG(0x40900034) /* Periodic Interrupt Counter Register */
 #define PIAR		__REG(0x40900038)  /* Periodic Interrupt Alarm Register */
 
 #define RTSR_PICE	(1 << 15)	/* Periodic interrupt count enable */
 #define RTSR_PIALE	(1 << 14)	/* Periodic interrupt Alarm enable */
+#define RTSR_PIAL	(1 << 13)	/* Periodic Interrupt Alarm Status */
+#define RTSR_SWCE	(1 << 12)	/* Stopwatch count enable for SWCR */
+#define RTSR_SWALE2	(1 << 11)	/* Stopwatch alarm 2 enable */
+#define RTSR_SWAL2	(1 << 10)	/* Stopwatch alarm 2 status */
+#define RTSR_SWALE1	(1 << 9)	/* Stopwatch alarm 1 enable */
+#define RTSR_SWAL1	(1 << 8)	/* Stopwatch alarm 1 statue */
+#define RTSR_RDALE2	(1 << 7)	/* Wristwatch alarm 2 enable */
+#define RTSR_RDAL2	(1 << 6)	/* Wristwatch alarm 2 status */
+#define RTSR_RDALE1	(1 << 5)	/* Wristwatch alarm 1 enable */
+#define RTSR_RDAL1	(1 << 4)	/* Wristwatch alarm 1 status */
 #define RTSR_HZE	(1 << 3)	/* HZ interrupt enable */
 #define RTSR_ALE	(1 << 2)	/* RTC alarm interrupt enable */
 #define RTSR_HZ		(1 << 1)	/* HZ rising-edge detected */
 #define RTSR_AL		(1 << 0)	/* RTC alarm detected */
 
-
 /*
  * OS Timer & Match Registers
  */
@@ -1103,7 +1436,8 @@
 #define ICFP		__REG(0x40D0000C)  /* Interrupt Controller FIQ Pending Register */
 #define ICPR		__REG(0x40D00010)  /* Interrupt Controller Pending Register */
 #define ICCR		__REG(0x40D00014)  /* Interrupt Controller Control Register */
-
+#define	IPR0		__REG(0x40D0001C)
+#define	IPR32		__REG(0X40D000B0)
 
 /*
  * General Purpose I/O
@@ -1137,6 +1471,7 @@
 #define GEDR1		__REG(0x40E0004C)  /* GPIO Edge Detect Status Register GPIO<63:32> */
 #define GEDR2		__REG(0x40E00050)  /* GPIO Edge Detect Status Register GPIO<80:64> */
 
+#ifndef CONFIG_PXA3xx
 #define GAFR0_L		__REG(0x40E00054)  /* GPIO Alternate Function Select Register GPIO<15:0> */
 #define GAFR0_U		__REG(0x40E00058)  /* GPIO Alternate Function Select Register GPIO<31:16> */
 #define GAFR1_L		__REG(0x40E0005C)  /* GPIO Alternate Function Select Register GPIO<47:32> */
@@ -1145,6 +1480,7 @@
 #define GAFR2_U		__REG(0x40E00068)  /* GPIO Alternate Function Select Register GPIO<95-80> */
 #define GAFR3_L		__REG(0x40E0006C)  /* GPIO Alternate Function Select Register GPIO<111:96> */
 #define GAFR3_U		__REG(0x40E00070)  /* GPIO Alternate Function Select Register GPIO<127:112> */
+#endif
 
 #define GPLR3		__REG(0x40E00100)  /* GPIO Pin-Level Register GPIO<127:96> */
 #define GPDR3		__REG(0x40E0010C)  /* GPIO Pin Direction Register GPIO<127:96> */
@@ -1158,7 +1494,7 @@
 
 #define GPIO_bit(x)	(1 << ((x) & 0x1f))
 
-#ifdef CONFIG_PXA27x
+#if defined (CONFIG_PXA27x) || defined (CONFIG_PXA3xx)
 
 /* Interrupt Controller */
 
@@ -1186,6 +1522,46 @@
 #define GEDR(x)		(*((((x) & 0x7f) < 96) ? &_GEDR(x) : &GEDR3))
 #define GAFR(x)		(*((((x) & 0x7f) < 96) ? &_GAFR(x) : \
 			 ((((x) & 0x7f) < 112) ? &GAFR3_L : &GAFR3_U)))
+#ifdef  CONFIG_PXA3xx
+#define GSDR0		__REG(0x40E00400)	/* Bit-wise Set of GPDR[31:0] */
+#define GSDR1		__REG(0x40E00404)	/* Bit-wise Set of GPDR[63:32] */
+#define GSDR2		__REG(0x40E00408)	/* Bit-wise Set of GPDR[95:64] */
+#define GSDR3		__REG(0x40E0040C)	/* Bit-wise Set of GPDR[127:96] */
+
+#define GCDR0		__REG(0x40E00420)	/* Bit-wise Clear of GPDR[31:0] */
+#define GCDR1		__REG(0x40E00424)	/* Bit-wise Clear of GPDR[63:32] */
+#define GCDR2		__REG(0x40E00428)	/* Bit-wise Clear of GPDR[95:64] */
+#define GCDR3		__REG(0x40E0042C)	/* Bit-wise Clear of GPDR[127:96] */
+
+#define GSDR(x)		__REG2(0x40E00400, ((x) & 0x60) >> 3)
+#define GCDR(x)		__REG2(0x40300420, ((x) & 0x60) >> 3)
+
+#define GSRER(x)	__REG2(0x40E00440, ((x) & 0x60) >> 3)
+#define GCRER(x)	__REG2(0x40E00460, ((x) & 0x60) >> 3)
+#define GSFER(x)	__REG2(0x40E00480, ((x) & 0x60) >> 3)
+#define GCFER(x)	__REG2(0x40E004A0, ((x) & 0x60) >> 3)
+
+#define GSRER0		__REG(0x40E00440)
+#define GSRER1		__REG(0x40E00444)
+#define GSRER2		__REG(0x40E00448)
+#define GSRER3		__REG(0x40E0044C)
+
+#define	GCRER0		__REG(0x40E00460)
+#define	GCRER1		__REG(0x40E00464)
+#define	GCRER2		__REG(0x40E00468)
+#define	GCRER3		__REG(0x40E0046C)
+
+#define	GSFER0		__REG(0x40E00480)
+#define	GSFER1		__REG(0x40E00484)
+#define	GSFER2		__REG(0x40E00488)
+#define	GSFER3		__REG(0x40E0048C)
+
+#define GCFER0		__REG(0x40E004A0)
+#define GCFER1		__REG(0x40E004A4)
+#define GCFER2		__REG(0x40E004A8)
+#define GCFER3		__REG(0x40E004AC)
+#endif
+
 #else
 
 #define GPLR(x)		__REG2(0x40E00000, ((x) & 0x60) >> 3)
@@ -1201,6 +1577,7 @@
 
 
 /* GPIO alternate function assignments */
+#ifndef CONFIG_PXA3xx	/* PXA3xx has its different definition */
 
 #define GPIO1_RST		1	/* reset */
 #define GPIO6_MMCCLK		6	/* MMC Clock */
@@ -1308,6 +1685,8 @@
 #define GPIO112_MMCCMD		112	/* MMC CMD (PXA27x) */
 #define GPIO113_AC97_RESET_N	113	/* AC97 NRESET on (PXA27x) */
 
+#endif
+
 /* GPIO alternate function mode & direction */
 
 #define GPIO_IN			0x000
@@ -1324,6 +1703,7 @@
 #define GPIO_DFLT_LOW		0x400
 #define GPIO_DFLT_HIGH		0x800
 
+#ifndef CONFIG_PXA3xx
 #define GPIO1_RTS_MD		( 1 | GPIO_ALT_FN_1_IN)
 #define GPIO6_MMCCLK_MD		( 6 | GPIO_ALT_FN_1_OUT)
 #define GPIO7_48MHz_MD		( 7 | GPIO_ALT_FN_1_OUT)
@@ -1441,11 +1821,95 @@
 #define GPIO113_AC97_RESET_N_MD	(113 | GPIO_ALT_FN_2_OUT)
 #define GPIO117_I2CSCL_MD	(117 | GPIO_ALT_FN_1_OUT)
 #define GPIO118_I2CSDA_MD	(118 | GPIO_ALT_FN_1_IN)
+#endif
 
 /*
  * Power Manager
  */
 
+#ifdef CONFIG_PXA3xx
+
+#define ASCR		__REG(0x40F40000)	/* Application Subsystem Power Status/Control Register */
+#define ARSR		__REG(0x40F40004)	/* Application Subsystem Reset Status Register */
+#define AD3ER		__REG(0x40F40008)	/* Application Subsystem D3 state Wakeup Enable Register */
+#define AD3SR		__REG(0x40F4000C)	/* Application Subsystem D3 state Wakeup Status Register */
+#define AD2D0ER		__REG(0x40F40010)	/* Application Subsystem D2 to D0 state Wakeup Enable Register */
+#define AD2D0SR		__REG(0x40F40014)	/* Application Subsystem D2 to D0 state Wakeup Status Register */
+#define AD2D1ER		__REG(0x40F40018)	/* Application Subsystem D2 to D1 state Wakeup Enable Register */
+#define AD2D1SR		__REG(0x40F4001C)	/* Application Subsystem D2 to D1 state Wakeup Status Register */
+#define AD1D0ER		__REG(0x40F40020)	/* Application Subsystem D1 to D0 state Wakeup Enable Register */
+#define AD1D0SR		__REG(0x40F40024)	/* Application Subsystem D1 to D0 state Wakeup Status Register */
+#define ASDCNT		__REG(0x40F40028)	/* Application Subsystem SRAM Drowsy Count Register */
+#define AD3R		__REG(0x40F40030)	/* Application Subsystem D3 State Configuration Register */
+#define AD2R		__REG(0x40F40034)	/* Application Subsystem D2 State Configuration Register */
+#define AD1R		__REG(0x40F40038)	/* Application Subsystem D1 State Configuration Register */
+
+#define AD3SR_RTC	(1 << 31)	/* Wakeup due to RTC */
+#define AD3SR_OST	(1 << 30)	/* Wakeup due to OS Timer */
+#define AD3SR_TSI	(1 << 29)	/* Wakeup due to Touch Screen Interface */
+#define AD3SR_KP	(1 << 21)	/* Wakeup due to Keypad IO */
+
+#define AD2SR_RTC	(1 << 31)	/* Wakeup due to RTC */
+#define AD2SR_OST	(1 << 30)	/* Wakeup due to OS Timer */
+#define AD2SR_TSI	(1 << 29)	/* Wakeup due to Touch Screen Interface */
+#define AD2SR_KP	(1 << 21)	/* Wakeup due to Keypad IO */
+
+#define PMCR		__REG(0x40F50000)	/* Power Manager Control Register */
+#define PSR		__REG(0x40F50004)	/* Power Manager S2 Status Register */
+#define PSPR		__REG(0x40F50008)	/* Power Manager Scratch Pad Register */
+#define PCFR		__REG(0x40F5000C)	/* Power Manager General Configuration Register */
+#define PWER		__REG(0x40F50010)	/* Power Manager Wake-up Enable Register */
+#define PWSR		__REG(0x40F50014)	/* Power Manager Wake-up Status Register */
+#define PECR		__REG(0x40F50018)	/* Power Manager EXT_WAKEUP[1:0] Control Register */
+#define DCDCSR		__REG(0x40F50080)	/* DC-DC Controller Status Register */
+#define PVCR		__REG(0x40F50100)	/* Power Manager Voltage Change Control Register */
+#define    PCMD(x) __REG(0x40F50110 + x*4)
+#define    PCMD0   __REG(0x40F50110 + 0 * 4)
+#define    PCMD1   __REG(0x40F50110 + 1 * 4)
+#define    PCMD2   __REG(0x40F50110 + 2 * 4)
+#define    PCMD3   __REG(0x40F50110 + 3 * 4)
+#define    PCMD4   __REG(0x40F50110 + 4 * 4)
+#define    PCMD5   __REG(0x40F50110 + 5 * 4)
+#define    PCMD6   __REG(0x40F50110 + 6 * 4)
+#define    PCMD7   __REG(0x40F50110 + 7 * 4)
+#define    PCMD8   __REG(0x40F50110 + 8 * 4)
+#define    PCMD9   __REG(0x40F50110 + 9 * 4)
+#define    PCMD10  __REG(0x40F50110 + 10 * 4)
+#define    PCMD11  __REG(0x40F50110 + 11 * 4)
+#define    PCMD12  __REG(0x40F50110 + 12 * 4)
+#define    PCMD13  __REG(0x40F50110 + 13 * 4)
+#define    PCMD14  __REG(0x40F50110 + 14 * 4)
+#define    PCMD15  __REG(0x40F50110 + 15 * 4)
+#define    PCMD16  __REG(0x40F50110 + 16 * 4)
+#define    PCMD17  __REG(0x40F50110 + 17 * 4)
+#define    PCMD18  __REG(0x40F50110 + 18 * 4)
+#define    PCMD19  __REG(0x40F50110 + 19 * 4)
+#define    PCMD20  __REG(0x40F50110 + 20 * 4)
+#define    PCMD21  __REG(0x40F50110 + 21 * 4)
+#define    PCMD22  __REG(0x40F50110 + 22 * 4)
+#define    PCMD23  __REG(0x40F50110 + 23 * 4)
+#define    PCMD24  __REG(0x40F50110 + 24 * 4)
+#define    PCMD25  __REG(0x40F50110 + 25 * 4)
+#define    PCMD26  __REG(0x40F50110 + 26 * 4)
+#define    PCMD27  __REG(0x40F50110 + 27 * 4)
+#define    PCMD28  __REG(0x40F50110 + 28 * 4)
+#define    PCMD29  __REG(0x40F50110 + 29 * 4)
+#define    PCMD30  __REG(0x40F50110 + 30 * 4)
+#define    PCMD31  __REG(0x40F50110 + 31 * 4)
+
+#define    PCMD_MBC    (1<<12)
+#define    PCMD_DCE    (1<<11)
+#define    PCMD_LC     (1<<10)
+#define    PCMD_SQC    (3<<8)	/* only 00 and 01 are valid */
+
+#define PVCR_FVC                   (0x1 << 28)
+#define PVCR_VCSA                  (0x1<<14)
+#define PVCR_CommandDelay          (0xf80)
+#define PVCR_ReadPointer           (0x01f00000)
+#define PVCR_SlaveAddress          (0x7f)
+
+#else
+
 #define PMCR		__REG(0x40F00000)  /* Power Manager Control Register */
 #define PSSR		__REG(0x40F00004)  /* Power Manager Sleep Status Register */
 #define PSPR		__REG(0x40F00008)  /* Power Manager Scratch Pad Register */
@@ -1552,7 +2016,7 @@
 #define PWER_GPIO14	PWER_GPIO (14)	/* GPIO [14] wake-up enable        */
 #define PWER_GPIO15	PWER_GPIO (15)	/* GPIO [15] wake-up enable        */
 #define PWER_RTC	0x80000000	/* RTC alarm wake-up enable        */
-
+#endif
 
 /*
  * SSP Serial Port Registers
@@ -1569,8 +2033,21 @@
 #define SSCR0_National	(0x2 << 4)	/* National Microwire */
 #define SSCR0_ECS	(1 << 6)	/* External clock select */
 #define SSCR0_SSE	(1 << 7)	/* Synchronous Serial Port Enable */
+#ifndef CONFIG_PXA3xx
 #define SSCR0_SCR	(0x0000ff00)	/* Serial Clock Rate (mask) */
 #define SSCR0_SerClkDiv(x) ((((x) - 2)/2) << 8) /* Divisor [2..512] */
+#else
+#define SSCR0_SCR	(0x000fff00)	/* Serial Clock Rate (mask) */
+#define SSCR0_SerClkDiv(x) (((x) - 1) << 8)	/* Divisor [1..4096] */
+#define SSCR0_EDSS	(1 << 20)	/* Extended data size select */
+#define SSCR0_NCS	(1 << 21)	/* Network clock select */
+#define SSCR0_RIM	(1 << 22)	/* Receive FIFO overrrun interrupt mask */
+#define SSCR0_TUM	(1 << 23)	/* Transmit FIFO underrun interrupt mask */
+#define SSCR0_FRDC	(0x07000000)	/* Frame rate divider control (mask) */
+#define SSCR0_SlotsPerFrm(c) ((x) - 1)	/* Time slots per frame [1..8] */
+#define SSCR0_ADC	(1 << 30)	/* Audio clock select */
+#define SSCR0_MOD	(1 << 31)	/* Mode (normal or network) */
+#endif
 
 #define SSCR1_RIE	(1 << 0)	/* Receive FIFO Interrupt Enable */
 #define SSCR1_TIE	(1 << 1)	/* Transmit FIFO Interrupt Enable */
@@ -1645,7 +2122,7 @@
 #define SSDR		SSDR_P1	  /* (Write / Read) SSP Data Write Register/SSP Data Read Register */
 
 /* PXA27x ports */
-#if defined (CONFIG_PXA27x)
+#if defined (CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
 #define SSTO_P1		__REG(0x41000028)  /* SSP Port 1 Time Out Register */
 #define SSPSP_P1	__REG(0x4100002C)  /* SSP Port 1 Programmable Serial Protocol */
 #define SSCR0_P2	__REG(0x41700000)  /* SSP Port 2 Control Register 0 */
@@ -1717,6 +2194,61 @@
  * Core Clock
  */
 
+#if defined(CONFIG_PXA3xx)
+#define ACCR		__REG(0x41340000)	/* Application Subsystem Clock Configuration Register */
+#define ACSR		__REG(0x41340004)	/* Application Subsystem Clock Status Register */
+#define AICSR		__REG(0x41340008)	/* Application Subsystem Interrupt Control/Status Register */
+#define CKENA		__REG(0x4134000C)	/* A Clock Enable Register */
+#define CKENB		__REG(0x41340010)	/* B Clock Enable Register */
+#define AC97_DIV	__REG(0x41340014)	/* AC97 clock divisor value register */
+#define OSCC		__REG(0x41350000)	/* Oscillator Configuration Register */
+
+/* Clock Enable Register (CLKEN) Enum */
+#define	CKEN_LCD	1	/* < LCD Clock Enable */
+#define	CKEN_USBH	2	/* < USB host clock enable */
+#define	CKEN_CAMERA	3	/* < Camera interface clock enable */
+#define	CKEN_NAND	4	/* < NAND Flash Controller Clock Enable */
+#define	CKEN_USB2	6	/* < USB 2.0 client clock enable. */
+#define	CKEN_DMC	8	/* < Dynamic Memory Controller clock enable */
+#define	CKEN_SMC	9	/* < Static Memory Controller clock enable */
+#define	CKEN_ISC	10	/* < Internal SRAM Controller clock enable */
+#define	CKEN_BOOT	11	/* < Boot rom clock enable */
+#define	CKEN_MMC0	12	/* < MMC0 Clock enable */
+#define	CKEN_MMC1	13	/* < MMC1 clock enable */
+#define	CKEN_KEYPAD	14	/* < Keypand Controller Clock Enable */
+#define	CKEN_CIR	15	/* < Consumer IR Clock Enable */
+#define	CKEN_USIM0	17	/* < USIM[0] Clock Enable */
+#define	CKEN_USIM1	18	/* < USIM[1] Clock Enable */
+#define	CKEN_TPM	19	/* < TPM clock enable */
+#define	CKEN_UDC	20	/* < UDC clock enable */
+#define	CKEN_BTUART	21	/* < BTUART clock enable */
+#define CKEN7_BTUART CKEN_BTUART
+#define	CKEN_FFUART	22	/* < FFUART clock enable */
+#define CKEN6_FFUART CKEN_FFUART
+#define	CKEN_STUART	23	/* < STUART clock enable */
+#define CKEN5_STUART CKEN_STUART
+#define	CKEN_AC97	24	/* < AC97 clock enable */
+#define	CKEN_TOUCH	25	/* < Touch screen Interface Clock Enable */
+#define	CKEN_SSP1	26	/* < SSP1 clock enable */
+#define	CKEN_SSP2	27	/* < SSP2 clock enable */
+#define	CKEN_SSP3	28	/* < SSP3 clock enable */
+#define	CKEN_SSP4	29	/* < SSP4 clock enable */
+#define	CKEN_MSL0	30	/* < MSL0 clock enable */
+
+#define	CKEN_PWM0	32	/* < PWM[0] clock enable */
+#define	CKEN_PWM1	33	/* < PWM[1] clock enable */
+#define	CKEN_I2C	36	/* < I2C clock enable */
+#define	CKEN_INTC	38	/* < Interrupt controller clock enable */
+#define	CKEN_GPIO	39	/* < GPIO clock enable */
+#define	CKEN_1WIRE	40	/* < 1-wire clock enable */
+#define CKEN_HSIO2	41	/* < HSIO2 clock enable */
+#define	CKEN_GRAPHICS	42	/* < Graphics controller clock enable */
+#define CKEN_MVED	43	/* < MVED clock enable */
+#define	CKEN_MINI_IM	48	/* < Mini-IM */
+#define	CKEN_MINI_LCD	49	/* < Mini LCD */
+
+#else
+
 #define CCCR		__REG(0x41300000)  /* Core Clock Configuration Register */
 #define CKEN		__REG(0x41300004)  /* Clock Enable Register */
 #define OSCC		__REG(0x41300008)  /* Oscillator Configuration Register */
@@ -1757,7 +2289,7 @@
 
 #define OSCC_OON	(1 << 1)	/* 32.768kHz OON (write-once only bit) */
 #define OSCC_OOK	(1 << 0)	/* 32.768kHz OOK (read-only bit) */
-
+#endif
 
 /*
  * LCD
@@ -1765,6 +2297,7 @@
 
 #define  LCCR0_OUC (1<<25)
 
+#ifndef	CONFIG_PXA3xx
 #define LCCR0		__REG(0x44000000)  /* LCD Controller Control Register 0 */
 #define LCCR1		__REG(0x44000004)  /* LCD Controller Control Register 1 */
 #define LCCR2		__REG(0x44000008)  /* LCD Controller Control Register 2 */
@@ -1810,6 +2343,56 @@
 #define FIDR1		__REG(0x44000218)  /* DMA Channel 1 Frame ID Register */
 #define LDCMD1		__REG(0x4400021C)  /* DMA Channel 1 Command Register */
 
+#define FDADR6         __REG(0x44000260)  /* DMA Channel 6 Frame Descriptor Address Register */
+#define CMDCR          __REG(0x44000100)  /*Command Control Register*/
+#define PRSR           __REG(0x44000104)  /*Command Control Register*/
+
+#else
+
+#define LCCR0		__REG_2(0x44000000)	/* LCD Controller Control Register 0 */
+#define LCCR1		__REG_2(0x44000004)	/* LCD Controller Control Register 1 */
+#define LCCR2		__REG_2(0x44000008)	/* LCD Controller Control Register 2 */
+#define LCCR3		__REG_2(0x4400000C)	/* LCD Controller Control Register 3 */
+#define LCCR4		__REG_2(0x44000010)	/* LCD Controller Control Register 4 */
+#define LCCR5		__REG_2(0x44000014)	/* LCD Controller Control Register 5 */
+#define LCCR6		__REG_2(0x44000018)	/* LCD Controller Control Register 6 */
+#define DFBR0		__REG_2(0x44000020)	/* DMA Channel 0 Frame Branch Register */
+#define DFBR1		__REG_2(0x44000024)	/* DMA Channel 1 Frame Branch Register */
+#define LCSR		__REG_2(0x44000038)	/* LCD Controller Status Register */
+#define LCSR1		__REG_2(0x44000034)	/* LCD Controller Status Register */
+#define LIIDR		__REG_2(0x4400003C)	/* LCD Controller Interrupt ID Register */
+#define TMEDRGBR	__REG_2(0x44000040)	/* TMED RGB Seed Register */
+#define TMEDCR		__REG_2(0x44000044)	/* TMED Control Register */
+
+#define LCCR3_1BPP (0 << 24)
+#define LCCR3_2BPP (1 << 24)
+#define LCCR3_4BPP (2 << 24)
+#define LCCR3_8BPP (3 << 24)
+#define LCCR3_16BPP (4 << 24)
+#define LCCR3_18BPP (6 << 24)	/* packed pixel format */
+#define LCCR3_19BPP (8 << 24)	/* packed pixel format */
+#define LCCR3_24BPP (9 << 24)
+#define LCCR3_25BPP (10<< 24)
+
+#define FDADR0		__REG_2(0x44000200)	/* DMA Channel 0 Frame Descriptor Address Register */
+#define FSADR0		__REG_2(0x44000204)	/* DMA Channel 0 Frame Source Address Register */
+#define FIDR0		__REG_2(0x44000208)	/* DMA Channel 0 Frame ID Register */
+#define LDCMD0		__REG_2(0x4400020C)	/* DMA Channel 0 Command Register */
+#define FDADR1		__REG_2(0x44000210)	/* DMA Channel 1 Frame Descriptor Address Register */
+#define FSADR1		__REG_2(0x44000214)	/* DMA Channel 1 Frame Source Address Register */
+#define FIDR1		__REG_2(0x44000218)	/* DMA Channel 1 Frame ID Register */
+#define LDCMD1		__REG_2(0x4400021C)	/* DMA Channel 1 Command Register */
+
+#define FDADR6         __REG_2(0x44000260)  /* DMA Channel 6 Frame Descriptor Address Register */
+#define CMDCR          __REG_2(0x44000100)  /*Command Control Register*/
+#define PRSR           __REG_2(0x44000104)  /*Command Control Register*/
+
+#define MLCCR0		__REG_2(0x46000000)	/* Mini-LCD Controller Control Register 0 */
+#define MLCCR1		__REG_2(0x46000004)	/* Mini-LCD Controller Control Register 1 */
+#define MLCCR2		__REG_2(0x46000008)	/* Mini-LCD Controller Control Register 2 */
+#define MLSADD		__REG_2(0x4600000C)	/* Mini-LCD SRAM Address Register */
+#define MLFRMCNT	__REG_2(0x46000010)	/* Mini-LCD Frame Count Register */
+#endif				/* CONFIG_PXA3xx */
 
 #ifdef CONFIG_PXA27x
 #define FDADR2          __REG(0x44000220)  /* DMA Channel 2 Frame Descriptor Address Register */
@@ -1839,6 +2422,42 @@
 #define FBR6            __REG(0x44000114)  /* DMA Channel 6 Frame Branch Register */
 #endif /* CONFIG_PXA27x */
 
+#ifdef CONFIG_PXA3xx
+/* PXA3xx LCD registers */
+#define LCCR4		__REG_2(0x44000010)	/* LCD Controller Control Register 4 */
+#define LCCR5		__REG_2(0x44000014)	/* LCD Controller Control Register 5 */
+#define FBR0		__REG_2(0x44000020)	/* DMA Channel 0 Frame Branch Register */
+#define FBR1		__REG_2(0x44000024)	/* DMA Channel 1 Frame Branch Register */
+#define FBR2		__REG_2(0x44000028)	/* DMA Channel 2 Frame Branch Register */
+#define FBR3		__REG_2(0x4400002C)	/* DMA Channel 3 Frame Branch Register */
+#define FBR4		__REG_2(0x44000030)	/* DMA Channel 4 Frame Branch Register */
+#define FDADR2		__REG_2(0x44000220)	/* DMA Channel 2 Frame Descriptor Address Register */
+#define FSADR2		__REG_2(0x44000224)	/* DMA Channel 2 Frame Source Address Register */
+#define FIDR2		__REG_2(0x44000228)	/* DMA Channel 2 Frame ID Register */
+#define LDCMD2		__REG_2(0x4400022C)	/* DMA Channel 2 Command Register */
+#define FDADR3		__REG_2(0x44000230)	/* DMA Channel 3 Frame Descriptor Address Register */
+#define FSADR3		__REG_2(0x44000234)	/* DMA Channel 3 Frame Source Address Register */
+#define FIDR3		__REG_2(0x44000238)	/* DMA Channel 3 Frame ID Register */
+#define LDCMD3		__REG_2(0x4400023C)	/* DMA Channel 3 Command Register */
+#define FDADR4		__REG_2(0x44000240)	/* DMA Channel 4 Frame Descriptor Address Register */
+#define FSADR4		__REG_2(0x44000244)	/* DMA Channel 4 Frame Source Address Register */
+#define FIDR4		__REG_2(0x44000248)	/* DMA Channel 4 Frame ID Register */
+#define LDCMD4		__REG_2(0x4400024C)	/* DMA Channel 4 Command Register */
+#define FDADR5		__REG_2(0x44000250)	/* DMA Channel 5 Frame Descriptor Address Register */
+#define FSADR5		__REG_2(0x44000254)	/* DMA Channel 5 Frame Source Address Register */
+#define FIDR5		__REG_2(0x44000258)	/* DMA Channel 5 Frame ID Register */
+#define LDCMD5		__REG_2(0x4400025C)	/* DMA Channel 5 Command Register */
+
+#define OVL1C1		__REG_2(0x44000050)	/* Overlay 1 Control Register 1 */
+#define OVL1C2		__REG_2(0x44000060)	/* Overlay 1 Control Register 2 */
+#define OVL2C1		__REG_2(0x44000070)	/* Overlay 2 Control Register 1 */
+#define OVL2C2		__REG_2(0x44000080)	/* Overlay 2 Control Register 2 */
+#define CCR		__REG_2(0x44000090)	/* Cursor Control Register */
+
+#define FBR5		__REG_2(0x44000110)	/* DMA Channel 5 Frame Branch Register */
+#define FBR6		__REG_2(0x44000114)	/* DMA Channel 6 Frame Branch Register */
+#endif				/* CONFIG_PXA3xx */
+
 #define LCCR0_ENB	(1 << 0)	/* LCD Controller enable */
 #define LCCR0_CMS	(1 << 1)	/* Color/Monochrome Display Select */
 #define LCCR0_Color     (LCCR0_CMS*0)   /*  Color display                  */
@@ -1960,7 +2579,7 @@
 #define LCCR3_VrtSnchL  (LCCR3_VSP*1)   /*  Vertical Synchronization pulse */
                                         /*  active Low                     */
 
-#ifdef CONFIG_PXA27x
+#if defined (CONFIG_PXA27x) || defined (CONFIG_PXA3xx)
 #define LCCR5_SOFM1     (1<<0)          /* Start Of Frame Mask for Overlay 1 (channel 1) */
 #define LCCR5_SOFM2     (1<<1)          /* Start Of Frame Mask for Overlay 2 (channel 2) */
 #define LCCR5_SOFM3     (1<<2)          /* Start Of Frame Mask for Overlay 2 (channel 3) */
@@ -1993,7 +2612,7 @@
 #define OVL2C1_O2EN     (1<<31)         /* Enable bit for Overlay 2 */
 #define CCR_CEN         (1<<31)         /* Enable bit for Cursor */
 
-#endif /* CONFIG_PXA27x */
+#endif /* CONFIG_PXA27x || CONFIG_PXA3xx */
 
 #define LCSR_LDD	(1 << 0)	/* LCD Disable Done */
 #define LCSR_SOF	(1 << 1)	/* Start of frame */
@@ -2043,9 +2662,126 @@
 #define LCSR1_IU6       (1 << 29)
 
 /*
+* Touch screen interface
+*/
+#ifdef CONFIG_PXA3xx
+#define ADCD __REG(0x41c00000)	/*Analog-to-Digital Converter Data register */
+#define ADCS __REG(0x41c00004)	/*Analog-to-Digital Converter Setup register */
+#define ADCE __REG(0x41c00008)	/*Analog-to-Digital Converter Enable register */
+#endif
+
+/*
  * Memory controller
  */
 
+#ifdef CONFIG_PXA3xx
+
+/* Static Memory Controller Registers */
+#define MSC0		__REG_2(0x4A000008)	/* Static Memory Control Register 0 */
+#define MSC1		__REG_2(0x4A00000C)	/* Static Memory Control Register 1 */
+
+#define SXCNFG		__REG_2(0x4A00001C)	/* Synchronous Static Memory Control Register */
+
+#define MEMCLKCFG	__REG_2(0x4A000068)	/* SCLK speed configuration */
+#define CSADRCFG0	__REG_2(0x4A000080)	/* Address Configuration for chip select 0 */
+#define CSADRCFG1	__REG_2(0x4A000084)	/* Address Configuration for chip select 1 */
+#define CSADRCFG2	__REG_2(0x4A000088)	/* Address Configuration for chip select 2 */
+#define CSADRCFG3	__REG_2(0x4A00008C)	/* Address Configuration for chip select 3 */
+
+
+
+/* Dynamic Memory Controller Registers */
+#define MDCNFG		__REG_2(0x48100000)	/* SDRAM Configuration Register 0 */
+#define MDREFR		__REG_2(0x48100004)	/* SDRAM Refresh Control Register */
+
+#define MDMRS		__REG_2(0x48100040)	/* MRS value to be written to SDRAM */
+
+
+#define	DDR_HCAL	__REG_2(0x48100060)	/* Hardware Delay Line Calibration/Configuration for external DDR memory. */
+#define DDR_WCAL	__REG_2(0x48100068)	/* DDR write Strobe Calibaration Register */
+#define	DMCIER		__REG_2(0x48100070)	/* Dynamic MC Interrupt Enable Register. */
+#define	DMCISR		__REG_2(0x48100078)	/* Dynamic MC Interrupt Status Register. */
+#define	DDR_DLS		__REG_2(0x48100080)	/* DDR Delay Line Value Status register for external DDR memory. */
+#define	EMPI		__REG_2(0x48100090)	/* EMPI Control Register */
+#define RCOMP           __REG_2(0x48100100)
+#define PAD_MA          __REG_2(0x48100110)
+
+
+#define PAD_MDLSB       __REG_2(0x48100118)
+#define PAD_SDMEM        __REG_2(0x4810011c)
+#define PAD_SDCLK       __REG_2(0x48100120)
+#define PAD_SDCS        __REG_2(0x48100124)
+#define PAD_SMEM        __REG_2(0x48100128)
+#define PAD_SCLK        __REG_2(0x4810012C)
+
+/* Data Flash Controller Registers */
+
+#define NDCR		__REG_2(0x43100000)	/* Data Flash Control register */
+#define NDTR0CS0	__REG_2(0x43100004)	/* Data Controller Timing Parameter 0 Register for ND_nCS0 */
+
+#define NDTR1CS0	__REG_2(0x4310000C)	/* Data Controller Timing Parameter 1 Register for ND_nCS0 */
+
+#define NDSR		__REG_2(0x43100014)	/* Data Controller Status Register */
+#define NDPCR		__REG_2(0x43100018)	/* Data Controller Page Count Register */
+#define NDBDR0		__REG_2(0x4310001C)	/* Data Controller Bad Block Register 0 */
+#define NDBDR1		__REG_2(0x43100020)	/* Data Controller Bad Block Register 1 */
+
+#define NDDB		__REG_2(0x43100040)	/* Data Controller Data Buffer */
+#define NDCB0		__REG_2(0x43100048)	/* Data Controller Command Buffer0 */
+#define NDCB1		__REG_2(0x4310004C)	/* Data Controller Command Buffer1 */
+#define NDCB2		__REG_2(0x43100050)	/* Data Controller Command Buffer2 */
+
+#define NDCR_SPARE_EN		(0x1<<31)
+#define NDCR_ECC_EN		(0x1<<30)
+#define NDCR_DMA_EN		(0x1<<29)
+#define NDCR_ND_RUN		(0x1<<28)
+#define NDCR_DWIDTH_C		(0x1<<27)
+#define NDCR_DWIDTH_M		(0x1<<26)
+#define NDCR_PAGE_SZ		(0x1<<24)
+#define NDCR_NCSX		(0x1<<23)
+#define NDCR_ND_MODE		(0x3<<21)
+#define NDCR_NAND_MODE   	0x0
+#define NDCR_CLR_PG_CNT		(0x1<<20)
+#define NDCR_CLR_ECC	(	0x1<<19)
+#define NDCR_RD_ID_CNT_MASK	(0x7<<16)
+#define	NDCR_RD_ID_CNT(x)	(((x) << 16) & NDCR_RD_ID_CNT_MASK)
+
+#define NDCR_RA_START	(0x1<<15)
+#define NDCR_PG_PER_BLK	(0x1<<14)
+#define NDCR_ND_ARB_EN	(0x1<<12)
+
+#define NDSR_RDY	(0x1<<11)
+#define NDSR_CS0_PAGED	(0x1<<10)
+#define NDSR_CS1_PAGED	(0x1<<9)
+#define NDSR_CS0_CMDD	(0x1<<8)
+#define NDSR_CS1_CMDD	(0x1<<7)
+#define NDSR_CS0_BBD	(0x1<<6)
+#define NDSR_CS1_BBD	(0x1<<5)
+#define NDSR_DBERR	(0x1<<4)
+#define NDSR_SBERR	(0x1<<3)
+#define NDSR_WRDREQ	(0x1<<2)
+#define NDSR_RDDREQ	(0x1<<1)
+#define NDSR_WRCMDREQ	(0x1)
+
+#define NDCB0_AUTO_RS		(0x1<<25)
+#define NDCB0_CSEL		(0x1<<24)
+#define NDCB0_CMD_TYPE_MASK	(0x7<<21)
+#define	NDCB0_CMD_TYPE(x)	(((x) << 21) & NDCB0_CMD_TYPE_MASK)
+#define NDCB0_NC		(0x1<<20)
+#define NDCB0_DBC		(0x1<<19)
+#define NDCB0_ADDR_CYC_MASK	(0x7<<16)
+#define	NDCB0_ADDR_CYC(x)	(((x) << 16) & NDCB0_ADDR_CYC_MASK)
+#define NDCB0_CMD2_MASK		(0xff<<8)
+#define NDCB0_CMD1_MASK		(0xff)
+#define NDCB0_ADDR_CYC_SHIFT	(16)
+
+#define MCMEM(s) MCMEM0
+#define MCATT(s) MCATT0
+#define MCIO(s) MCIO0
+#define MECR_CIT	(1 << 1)	/* Card Is There: 0 -> no card, 1 -> card inserted */
+
+#else				/* CONFIG_PXA3xx */
+
 #define MDCNFG		__REG(0x48000000)  /* SDRAM Configuration Register 0 */
 #define MDREFR		__REG(0x48000004)  /* SDRAM Refresh Control Register */
 #define MSC0		__REG(0x48000008)  /* Static Memory Control Register 0 */
@@ -2091,7 +2827,7 @@
 #define MDREFR_K0DB2	(1 << 14)	/* SDCLK0 Divide by 2 Control/Status */
 #define MDREFR_K0RUN	(1 << 13)	/* SDCLK0 Run Control/Status */
 #define MDREFR_E0PIN	(1 << 12)	/* SDCKE0 Level Control/Status */
-
+#endif
 
 #ifdef CONFIG_PXA27x
 
@@ -2363,4 +3099,281 @@
 
 #endif
 
+/* MFPR */
+#ifdef CONFIG_PXA3xx
+
+#define	SRAM_SIZE	0xC0000	/* 4x64K */
+#define	SRAM_MEM_PHYS	0x5C000000
+
+/* GPIO alternate function assignments */
+#define APPS_PAD_BASE	0x40E10000
+
+/* Internal System Bus Arbiter */
+#define ARB_CNTRL1	__REG_2(0x4600FE00)	/* PX1 Bus Arbiter Control Register */
+#define ARB_CNTRL2	__REG_2(0x4600FE80)	/* PX2 Bus Arbiter Control Register */
+
+/*
+ * Keypad
+ */
+#define KPC             __REG(0x41500000)	/* Keypad Interface Control register */
+#define KPDK            __REG(0x41500008)	/* Keypad Interface Direct Key register */
+#define KPREC           __REG(0x41500010)	/* Keypad Interface Rotary Encoder register */
+#define KPMK            __REG(0x41500018)	/* Keypad Interface Matrix Key register */
+#define KPAS            __REG(0x41500020)	/* Keypad Interface Automatic Scan register */
+#define KPASMKP0        __REG(0x41500028)	/* Keypad Interface Automatic Scan Multiple Key Presser register 0 */
+#define KPASMKP1        __REG(0x41500030)	/* Keypad Interface Automatic Scan Multiple Key Presser register 1 */
+#define KPASMKP2        __REG(0x41500038)	/* Keypad Interface Automatic Scan Multiple Key Presser register 2 */
+#define KPASMKP3        __REG(0x41500040)	/* Keypad Interface Automatic Scan Multiple Key Presser register 3 */
+#define KPKDI           __REG(0x41500048)	/* Keypad Interface Key Debounce Interval register */
+
+#define KPC_AS          (0x1 << 30)	/* Automatic Scan bit */
+#define KPC_ASACT       (0x1 << 29)	/* Automatic Scan on Activity */
+#define KPC_MI          (0x1 << 22)	/* Matrix interrupt bit */
+#define KPC_IMKP        (0x1 << 21)	/* Ignore Multiple Key Press */
+#define KPC_MS7         (0x1 << 20)	/* Matrix scan line 7 */
+#define KPC_MS6         (0x1 << 19)	/* Matrix scan line 6 */
+#define KPC_MS5         (0x1 << 18)	/* Matrix scan line 5 */
+#define KPC_MS4         (0x1 << 17)	/* Matrix scan line 4 */
+#define KPC_MS3         (0x1 << 16)	/* Matrix scan line 3 */
+#define KPC_MS2         (0x1 << 15)	/* Matrix scan line 2 */
+#define KPC_MS1         (0x1 << 14)	/* Matrix scan line 1 */
+#define KPC_MS0         (0x1 << 13)	/* Matrix scan line 0 */
+#define KPC_MS_ALL      (KPC_MS0 | KPC_MS1 | KPC_MS2 | KPC_MS3 | KPC_MS4 | KPC_MS5 | KPC_MS6 | KPC_MS7)
+#define KPC_ME          (0x1 << 12)	/* Matrix Keypad Enable */
+#define KPC_MIE         (0x1 << 11)	/* Matrix Interrupt Enable */
+#define KPC_DK_DEB_SEL	(0x1 <<  9)	/* Direct Keypad Debounce Select */
+#define KPC_DI          (0x1 <<  5)	/* Direct key interrupt bit */
+#define KPC_RE_ZERO_DEB (0x1 <<  4)	/* Rotary Encoder Zero Debounce */
+#define KPC_REE1        (0x1 <<  3)	/* Rotary Encoder1 Enable */
+#define KPC_REE0        (0x1 <<  2)	/* Rotary Encoder0 Enable */
+#define KPC_DE          (0x1 <<  1)	/* Direct Keypad Enable */
+#define KPC_DIE         (0x1 <<  0)	/* Direct Keypad interrupt Enable */
+
+#define KPDK_DKP        (0x1 << 31)
+#define KPDK_DK7        (0x1 <<  7)
+#define KPDK_DK6        (0x1 <<  6)
+#define KPDK_DK5        (0x1 <<  5)
+#define KPDK_DK4        (0x1 <<  4)
+#define KPDK_DK3        (0x1 <<  3)
+#define KPDK_DK2        (0x1 <<  2)
+#define KPDK_DK1        (0x1 <<  1)
+#define KPDK_DK0        (0x1 <<  0)
+
+#define KPREC_OF1       (0x1 << 31)
+#define kPREC_UF1       (0x1 << 30)
+#define KPREC_OF0       (0x1 << 15)
+#define KPREC_UF0       (0x1 << 14)
+
+#define KPMK_MKP        (0x1 << 31)
+#define KPAS_SO         (0x1 << 31)
+#define KPASMKPx_SO     (0x1 << 31)
+
+/*
+ * UHC: USB Host Controller (OHCI-like) register definitions
+ */
+#define UHC_BASE_PHYS	(0x4C000000)
+#define UHCREV		__REG_2(0x4C000000)	/* UHC HCI Spec Revision */
+#define UHCHCON		__REG_2(0x4C000004)	/* UHC Host Control Register */
+#define UHCCOMS		__REG_2(0x4C000008)	/* UHC Command Status Register */
+#define UHCINTS		__REG_2(0x4C00000C)	/* UHC Interrupt Status Register */
+#define UHCINTE		__REG_2(0x4C000010)	/* UHC Interrupt Enable */
+#define UHCINTD		__REG_2(0x4C000014)	/* UHC Interrupt Disable */
+#define UHCHCCA		__REG_2(0x4C000018)	/* UHC Host Controller Comm. Area */
+#define UHCPCED		__REG_2(0x4C00001C)	/* UHC Period Current Endpt Descr */
+#define UHCCHED		__REG_2(0x4C000020)	/* UHC Control Head Endpt Descr */
+#define UHCCCED		__REG_2(0x4C000024)	/* UHC Control Current Endpt Descr */
+#define UHCBHED		__REG_2(0x4C000028)	/* UHC Bulk Head Endpt Descr */
+#define UHCBCED		__REG_2(0x4C00002C)	/* UHC Bulk Current Endpt Descr */
+#define UHCDHEAD	__REG_2(0x4C000030)	/* UHC Done Head */
+#define UHCFMI		__REG_2(0x4C000034)	/* UHC Frame Interval */
+#define UHCFMR		__REG_2(0x4C000038)	/* UHC Frame Remaining */
+#define UHCFMN		__REG_2(0x4C00003C)	/* UHC Frame Number */
+#define UHCPERS		__REG_2(0x4C000040)	/* UHC Periodic Start */
+#define UHCLS		__REG_2(0x4C000044)	/* UHC Low Speed Threshold */
+#define UHCRHDA		__REG_2(0x4C000048)	/* UHC Root Hub Descriptor A */
+#define UHCRHDB		__REG_2(0x4C00004C)	/* UHC Root Hub Descriptor B */
+#define UHCRHS		__REG_2(0x4C000050)	/* UHC Root Hub Status */
+#define UHCRHPS1	__REG_2(0x4C000054)	/* UHC Root Hub Port 1 Status */
+#define UHCRHPS2	__REG_2(0x4C000058)	/* UHC Root Hub Port 2 Status */
+#define UHCRHPS3	__REG_2(0x4C00005C)	/* UHC Root Hub Port 3 Status */
+#define UHCRHPS(x)      __REG2_2(0x4C000050, (x)<<2)
+
+#define UHCSTAT		__REG_2(0x4C000060)	/* UHC Status Register */
+#define UHCSTAT_UPS3	(1 << 16)	/* USB Power Sense Port3 */
+#define UHCSTAT_SBMAI	(1 << 15)	/* System Bus Master Abort Interrupt */
+#define UHCSTAT_SBTAI	(1 << 14)	/* System Bus Target Abort Interrupt */
+#define UHCSTAT_UPRI	(1 << 13)	/* USB Port Resume Interrupt */
+#define UHCSTAT_UPS2	(1 << 12)	/* USB Power Sense Port 2 */
+#define UHCSTAT_UPS1	(1 << 11)	/* USB Power Sense Port 1 */
+#define UHCSTAT_HTA	(1 << 10)	/* HCI Target Abort */
+#define UHCSTAT_HBA	(1 << 8)	/* HCI Buffer Active */
+#define UHCSTAT_RWUE	(1 << 7)	/* HCI Remote Wake Up Event */
+
+#define UHCHR           __REG_2(0x4C000064)	/* UHC Reset Register */
+#define UHCHR_SSEP3	(1 << 11)	/* Sleep Standby Enable for Port3 */
+#define UHCHR_SSEP2	(1 << 10)	/* Sleep Standby Enable for Port2 */
+#define UHCHR_SSEP1	(1 << 9)	/* Sleep Standby Enable for Port1 */
+#define UHCHR_PCPL	(1 << 7)	/* Power control polarity low */
+#define UHCHR_PSPL	(1 << 6)	/* Power sense polarity low */
+#define UHCHR_SSE	(1 << 5)	/* Sleep Standby Enable */
+#define UHCHR_UIT	(1 << 4)	/* USB Interrupt Test */
+#define UHCHR_SSDC	(1 << 3)	/* Simulation Scale Down Clock */
+#define UHCHR_CGR	(1 << 2)	/* Clock Generation Reset */
+#define UHCHR_FHR	(1 << 1)	/* Force Host Controller Reset */
+#define UHCHR_FSBIR	(1 << 0)	/* Force System Bus Iface Reset */
+
+#define UHCHIE          __REG_2(0x4C000068)	/* UHC Interrupt Enable Register */
+#define UHCHIE_UPS3IE	(1 << 14)	/* Power Sense Port3 IntEn */
+#define UHCHIE_UPRIE	(1 << 13)	/* Port Resume IntEn */
+#define UHCHIE_UPS2IE	(1 << 12)	/* Power Sense Port2 IntEn */
+#define UHCHIE_UPS1IE	(1 << 11)	/* Power Sense Port1 IntEn */
+#define UHCHIE_TAIE	(1 << 10)	/* HCI Interface Transfer Abort
+					   Interrupt Enable */
+#define UHCHIE_HBAIE	(1 << 8)	/* HCI Buffer Active IntEn */
+#define UHCHIE_RWIE	(1 << 7)	/* Remote Wake-up IntEn */
+
+#define UHCHIT          __REG_2(0x4C00006C)	/* UHC Interrupt Test register */
+
+/* Camera Interface / Quick Capture Interface */
+#define CICR0		__REG_3(0x50000000)	/* Control register 0 */
+#define CICR1		__REG_3(0x50000004)	/* Control register 1 */
+#define CICR2		__REG_3(0x50000008)	/* Control register 2 */
+#define CICR3		__REG_3(0x5000000C)	/* Control register 3 */
+#define CICR4		__REG_3(0x50000010)	/* Control register 4 */
+#define CISR		__REG_3(0x50000014)	/* Status register */
+#define CITOR		__REG_3(0x5000001C)	/* Time-Out register */
+#define CIBR0		__REG_3(0x50000028)	/* Channel 0 Receive Buffer */
+#define CIBR1		__REG_3(0x50000030)	/* Channel 1 Receive Buffer */
+#define CIBR2		__REG_3(0x50000038)	/* Channel 2 Receive Buffer */
+#define CIBR3		__REG_3(0x50000040)	/* Channel 3 Receive Buffer */
+#define	CIRCD		__REG_3(0x50000044)
+
+#define CIPSS		__REG_3(0x50000064)	/* Pixel Substitution Status register */
+#define CIPBUF		__REG_3(0x50000068)	/* Pixel Substitution Buffer */
+#define CIHST		__REG_3(0x5000006C)	/* Histogram Configuration */
+#define CISUM		__REG_3(0x50000070)	/* Histogram Summation register */
+#define CICCR		__REG_3(0x50000074)	/* Compander Configuration */
+#define CISSC		__REG_3(0x5000007C)	/* Spatial Scaling Configuration */
+
+#define CICMR		__REG_3(0x50000090)	/* Color Management register */
+#define CICMC0		__REG_3(0x50000094)	/* Color Management Coefficients 0 */
+#define CICMC1		__REG_3(0x50000098)	/* Color Management Coefficients 1 */
+#define CICMC2		__REG_3(0x5000009C)	/* Color Management Coefficients 2 */
+
+#define CIFR0		__REG_3(0x500000B0)	/* FIFO Control register 0 */
+#define CIFR1		__REG_3(0x500000B4)	/* FIFO Control register 1 */
+#define CIFSR		__REG_3(0x500000C0)	/* FIFO Status register */
+
+#define CIDADR0		__REG_3(0x50000240)	/* DMA Descriptor Address Channel 0 register */
+#define CIDADR1		__REG_3(0x50000250)	/* DMA Descriptor Address Channel 1 register */
+#define CIDADR2		__REG_3(0x50000260)	/* DMA Descriptor Address Channel 2 register */
+#define CIDADR3		__REG_3(0x50000270)	/* DMA Descriptor Address Channel 3 register */
+#define CITADR0		__REG_3(0x50000244)	/* DMA Target Address Channel 0 register */
+#define CITADR1		__REG_3(0x50000254)	/* DMA Target Address Channel 1 register */
+#define CITADR2		__REG_3(0x50000264)	/* DMA Target Address Channel 2 register */
+#define CITADR3		__REG_3(0x50000274)	/* DMA Target Address Channel 3 register */
+#define CISADR0		__REG_3(0x50000248)	/* DMA Source Address Channel 0 register */
+#define CISADR1		__REG_3(0x50000258)	/* DMA Source Address Channel 1 register */
+#define CISADR2		__REG_3(0x50000268)	/* DMA Source Address Channel 2 register */
+#define CISADR3		__REG_3(0x50000278)	/* DMA Source Address Channel 3 register */
+#define CICMD0		__REG_3(0x5000024C)	/* DMA Command Channel 0 register */
+#define CICMD1		__REG_3(0x5000025C)	/* DMA Command Channel 1 register */
+#define CICMD2		__REG_3(0x5000026C)	/* DMA Command Channel 2 register */
+#define CICMD3		__REG_3(0x5000027C)	/* DMA Command Channel 3 register */
+#define CIDBR0		__REG_3(0x50000220)	/* DMA Branch Channel 0 register */
+#define CIDBR1		__REG_3(0x50000224)	/* DMA Branch Channel 1 register */
+#define CIDBR2		__REG_3(0x50000228)	/* DMA Branch Channel 2 register */
+#define CIDBR3		__REG_3(0x5000022C)	/* DMA Branch Channel 3 register */
+#define CIDCSR0		__REG_3(0x50000200)	/* DMA Ctrl/Status Channel 0 register */
+#define CIDCSR1		__REG_3(0x50000204)	/* DMA Ctrl/Status Channel 1 register */
+#define CIDCSR2		__REG_3(0x50000208)	/* DMA Ctrl/Status Channel 2 register */
+#define CIDCSR3		__REG_3(0x5000020C)	/* DMA Ctrl/Status Channel 3 register */
+
+#define CICR0_DMAEN	(1 << 31)	/* DMA request enable */
+#define CICR0_PAR_EN	(1 << 30)	/* Parity enable */
+#define CICR0_SL_CAP_EN	(1 << 29)	/* Capture enable for slave mode */
+#define CICR0_ENB	(1 << 28)	/* Camera interface enable */
+#define CICR0_DIS	(1 << 27)	/* Camera interface disable */
+#define CICR0_SIM	(0x7 << 24)	/* Sensor interface mode mask */
+#define	CICR0_EOFXM	( 1 << 12 )
+#define	CICR0_BSM	( 1 << 11 )
+#define	CICR0_FUM	( 1 << 10 )
+#define CICR0_TOM	(1 << 9)	/* Time-out mask */
+#define CICR0_RDAVM	(1 << 8)	/* Receive-data-available mask */
+#define CICR0_FEM	(1 << 7)	/* FIFO-empty mask */
+#define CICR0_EOLM	(1 << 6)	/* End-of-line mask */
+#define CICR0_PERRM	(1 << 5)	/* Parity-error mask */
+#define CICR0_QDM	(1 << 4)	/* Quick-disable mask */
+#define CICR0_CDM	(1 << 3)	/* Disable-done mask */
+#define CICR0_SOFM	(1 << 2)	/* Start-of-frame mask */
+#define CICR0_EOFM	(1 << 1)	/* End-of-frame mask */
+#define CICR0_FOM	(1 << 0)	/* FIFO-overrun mask */
+
+#define CICR1_TBIT	(1 << 31)	/* Transparency bit */
+#define CICR1_RGBT_CONV	(0x3 << 30)	/* RGBT conversion mask */
+#define CICR1_PPL	(0x3f << 15)	/* Pixels per line mask */
+#define CICR1_RGB_CONV	(0x7 << 12)	/* RGB conversion mask */
+#define CICR1_RGB_F	(1 << 11)	/* RGB format */
+#define CICR1_YCBCR_F	(1 << 10)	/* YCbCr format */
+#define CICR1_RGB_BPP	(0x7 << 7)	/* RGB bis per pixel mask */
+#define CICR1_RAW_BPP	(0x3 << 5)	/* Raw bis per pixel mask */
+#define CICR1_COLOR_SP	(0x3 << 3)	/* Color space mask */
+#define CICR1_DW	(0x7 << 0)	/* Data width mask */
+
+#define CICR2_BLW	(0xff << 24)	/* Beginning-of-line pixel clock
+					   wait count mask */
+#define CICR2_ELW	(0xff << 16)	/* End-of-line pixel clock
+					   wait count mask */
+#define CICR2_HSW	(0x3f << 10)	/* Horizontal sync pulse width mask */
+#define CICR2_BFPW	(0x3f << 3)	/* Beginning-of-frame pixel clock
+					   wait count mask */
+#define CICR2_FSW	(0x7 << 0)	/* Frame stabilization
+					   wait count mask */
+
+#define CICR3_BFW	(0xff << 24)	/* Beginning-of-frame line clock
+					   wait count mask */
+#define CICR3_EFW	(0xff << 16)	/* End-of-frame line clock
+					   wait count mask */
+#define CICR3_VSW	(0x3f << 10)	/* Vertical sync pulse width mask */
+#define CICR3_BFPW	(0x3f << 3)	/* Beginning-of-frame pixel clock
+					   wait count mask */
+#define CICR3_LPF	(0x3ff << 0)	/* Lines per frame mask */
+
+#define CICR4_MCLK_DLY	(0x3 << 24)	/* MCLK Data Capture Delay mask */
+#define CICR4_PCLK_EN	(1 << 23)	/* Pixel clock enable */
+#define CICR4_PCP	(1 << 22)	/* Pixel clock polarity */
+#define CICR4_HSP	(1 << 21)	/* Horizontal sync polarity */
+#define CICR4_VSP	(1 << 20)	/* Vertical sync polarity */
+#define CICR4_MCLK_EN	(1 << 19)	/* MCLK enable */
+#define CICR4_FR_RATE	(0x7 << 8)	/* Frame rate mask */
+#define CICR4_DIV	(0xff << 0)	/* Clock divisor mask */
+
+#define CISR_FTO	(1 << 15)	/* FIFO time-out */
+#define CISR_RDAV_2	(1 << 14)	/* Channel 2 receive data available */
+#define CISR_RDAV_1	(1 << 13)	/* Channel 1 receive data available */
+#define CISR_RDAV_0	(1 << 12)	/* Channel 0 receive data available */
+#define CISR_FEMPTY_2	(1 << 11)	/* Channel 2 FIFO empty */
+#define CISR_FEMPTY_1	(1 << 10)	/* Channel 1 FIFO empty */
+#define CISR_FEMPTY_0	(1 << 9)	/* Channel 0 FIFO empty */
+#define CISR_EOL	(1 << 8)	/* End of line */
+#define CISR_PAR_ERR	(1 << 7)	/* Parity error */
+#define CISR_CQD	(1 << 6)	/* Camera interface quick disable */
+#define CISR_SOF	(1 << 5)	/* Start of frame */
+#define CISR_CDD	(1 << 4)	/* Camera interface disable done */
+#define CISR_EOF	(1 << 3)	/* End of frame */
+#define CISR_IFO_2	(1 << 2)	/* FIFO overrun for Channel 2 */
+#define CISR_IFO_1	(1 << 1)	/* FIFO overrun for Channel 1 */
+#define CISR_IFO_0	(1 << 0)	/* FIFO overrun for Channel 0 */
+
+#define CIFR_FLVL2	(0x7f << 23)	/* FIFO 2 level mask */
+#define CIFR_FLVL1	(0x7f << 16)	/* FIFO 1 level mask */
+#define CIFR_FLVL0	(0xff << 8)	/* FIFO 0 level mask */
+#define CIFR_THL_0	(0x3 << 4)	/* Threshold Level for Channel 0 FIFO */
+#define CIFR_RESET_F	(1 << 3)	/* Reset input FIFOs */
+#define CIFR_FEN2	(1 << 2)	/* FIFO enable for channel 2 */
+#define CIFR_FEN1	(1 << 1)	/* FIFO enable for channel 1 */
+#define CIFR_FEN0	(1 << 0)	/* FIFO enable for channel 0 */
+
+#endif				/* CONFIG_PXA3xx */
+
 #endif
Index: linux-2.6.10/include/asm-arm/arch-pxa/timex.h
===================================================================
--- linux-2.6.10.orig/include/asm-arm/arch-pxa/timex.h
+++ linux-2.6.10/include/asm-arm/arch-pxa/timex.h
@@ -22,6 +22,8 @@
 #else
 #define CLOCK_TICK_RATE 3250000
 #endif
+#elif defined(CONFIG_PXA3xx)
+#define CLOCK_TICK_RATE 3250000
 #endif
 
 #include "pxa-regs.h"
Index: linux-2.6.10/include/asm-arm/arch-pxa/u2d.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-pxa/u2d.h
@@ -0,0 +1,20 @@
+/*
+ * linux/include/asm-arm/arch-pxa/u2d.h
+ *
+ * This supports machine-specific differences in how the PXA27x
+ * USB 2.0 Device Controller (U2D) is wired.
+ *
+ * It is set in linux/arch/arm/mach-pxa/<machine>.c and used in
+ * the probe routine of linux/drivers/usb/gadget/mhn_u2d.c
+ *
+ * (C) Copyright 2006 Marvell International Ltd.
+ * All Rights Reserved
+ */
+struct pxa27x_u2d_mach_info {
+	int (*u2d_is_connected) (void);	/* do we see host? */
+	void (*u2d_command) (int cmd);
+#define	PXA2XX_U2D_CMD_CONNECT		0	/* let host see us */
+#define	PXA2XX_U2D_CMD_DISCONNECT	1	/* so host won't see us */
+};
+
+extern void pxa_set_u2d_info(struct pxa27x_u2d_mach_info *info);
Index: linux-2.6.10/include/asm-arm/arch-pxa/zylonite.h
===================================================================
--- /dev/null
+++ linux-2.6.10/include/asm-arm/arch-pxa/zylonite.h
@@ -0,0 +1,792 @@
+/*
+ *  linux/include/asm-arm/arch-pxa/zylonite.h
+ *
+ * Copyright(C) 2006 Marvell Internaltional Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef ASM_MACH_ZYLONITE_H
+#define ASM_MACH_ZYLONITE_H
+#include <linux/config.h>
+#include <asm/arch/mfp.h>
+
+/*
+ Note: For the first instance of the Zylonite, exact usage of many pins is
+       not fully defined, or the headers to which they lead are not expected
+       to be populated.  For those pins' symbols, the string "RSVD" is
+       placed after "_MFP_".  They should not be used by any module but only
+       set to an appropriate permanently initialized value by a single
+       system initialization function.
+
+ Note: For each "RSVD" pin on the target platform, an unassigned Alternate
+       Function code (based on internal silicon documents) has been selected
+       so that there are no side effects and minimal power effects from
+       configuring the pin with that AF code.  It is, effectively, a null
+       AF.  This permits simpler power-sensitive test board SW than would be required if
+       GPIO were to be selected as the AF device for unattached pins.
+
+  Pick an unused AF on this pin for its NULL AF
+
+ Beginning of Platform MFP Values and Alternate Function for Each Pin
+
+
+
+ Concept note:
+      If the XLLP modules and OS drivers are considered to be "Software ICs"
+      then the following set of constants can be considered as the
+      "Software PCB layer" in that it establishes the connection between the
+      processor pins and the target peripherals.
+*/
+
+/* No specified use for GPIO 0.  It goes to a generic header */
+
+#define MFP_RDY					(MFP_PIN_GPIO0)
+#define MFP_RDY_AF				(MFP_PIN_GPIO0_AF_DF_RDY)
+
+#define MFP_FLASH_NOR_CS_N_GPIO			(MFP_PIN_GPIO1)
+#define MFP_FLASH_NOR_CS_N_GPIO_AF		(MFP_PIN_GPIO1_AF_nCS2)
+
+#define MFP_DEBUG_ETH_CS_N_GPIO			(MFP_PIN_GPIO2)
+#define	MFP_DEBUG_ETH_CS_N_GPIO_AF		(MFP_PIN_GPIO2_AF_nCS3)
+
+#define MFP_MMC_DAT0				(MFP_PIN_GPIO3)
+#define MFP_MMC_DAT0_AF				(MFP_PIN_GPIO3_AF_MM1_DAT0)
+
+#define MFP_MMC_DAT1				(MFP_PIN_GPIO4)
+#define MFP_MMC_DAT1_AF				(MFP_PIN_GPIO4_AF_MM1_DAT1)
+
+#define MFP_MMC_DAT2				(MFP_PIN_GPIO5)
+#define MFP_MMC_DAT2_AF				(MFP_PIN_GPIO5_AF_MM1_DAT2)
+
+#define MFP_MMC_DAT3				(MFP_PIN_GPIO6)
+#define MFP_MMC_DAT3_AF				(MFP_PIN_GPIO6_AF_MM1_DAT3)
+
+#define MFP_MMC_CLK				(MFP_PIN_GPIO7)
+#define MFP_MMC_CLK_AF				(MFP_PIN_GPIO7_AF_MM1_CLK)
+
+#define MFP_MMC_CMD_0				(MFP_PIN_GPIO8)
+#define MFP_MMC_CMD_0_AF			(MFP_PIN_GPIO8_AF_MM1_CMD)
+
+#define MFP_MMC2_DAT0				(MFP_PIN_GPIO9)
+#define MFP_MMC2_DAT0_AF			(MFP_PIN_GPIO9_AF_MM2_DAT0)
+
+#define MFP_MMC2_DAT1				(MFP_PIN_GPIO10)
+#define MFP_MMC2_DAT1_AF			(MFP_PIN_GPIO10_AF_MM2_DAT1)
+
+#define MFP_MMC2_DAT2_CS0			(MFP_PIN_GPIO11)
+#define MFP_MMC2_DAT2_CS0_AF			(MFP_PIN_GPIO11_AF_MM2_DAT2)
+
+#define MFP_MMC2_DAT3_CS1			(MFP_PIN_GPIO12)
+#define MFP_MMC2_DAT3_CS1_AF			(MFP_PIN_GPIO12_AF_MM2_DAT3)
+
+
+#define MFP_MMC2_CLK				(MFP_PIN_GPIO13)
+#define MFP_MMC2_CLK_AF				(MFP_PIN_GPIO13_AF_MM2_CLK)
+
+#define MFP_MMC2_CMD				(MFP_PIN_GPIO14)
+#define MFP_MMC2_CMD_AF				(MFP_PIN_GPIO14_AF_MM2_CMD)
+
+#define MFP_MMC_CMD_1				(MFP_PIN_GPIO15)
+#define MFP_MMC_CMD_1_AF			(MFP_PIN_GPIO15_AF_MM1_CMD)
+
+#define MFP_CIR_ON_PWM				(MFP_PIN_GPIO16)
+#define MFP_CIR_ON_PWM_AF			(MFP_PIN_GPIO16_AF_CIR_OUT)
+
+#define MFP_RSVD_PWM_0				(MFP_PIN_GPIO17)
+#define MFP_RSVD_PWM_0_AF			(MFP_PIN_GPIO17_AF_PWM0_OUT)
+
+#define MFP_RSVD_AC97_SDATA_IN_0		(MFP_PIN_GPIO17)
+#define MFP_RSVD_AC97_SDATA_IN_0_AF		(MFP_PIN_GPIO17_AF_AC97_SDATA_IN_2)
+
+#define MFP_GPIO_EXP_0_N			(MFP_PIN_GPIO18)
+#define MFP_GPIO_EXP_0_N_AF			(MFP_PIN_GPIO18_AF_GPIO_18)
+
+#define MFP_GPIO_EXP_1_N			(MFP_PIN_GPIO19)
+#define MFP_GPIO_EXP_1_N_AF			(MFP_PIN_GPIO19_AF_GPIO_19)
+
+#define MFP_BACKLIGHT_PWM			(MFP_PIN_GPIO20)
+#define MFP_BACKLIGHT_PWM_AF			(MFP_PIN_GPIO20_AF_GPIO_20)
+
+#define MFP_SCL					(MFP_PIN_GPIO21)
+#define MFP_SCL_AF				(MFP_PIN_GPIO21_AF_I2C_SCL)
+
+#define MFP_SDA					(MFP_PIN_GPIO22)
+#define MFP_SDA_AF				(MFP_PIN_GPIO22_AF_I2C_SDA)
+
+#define MFP_AC97_nACRESET			(MFP_PIN_GPIO23)
+#define MFP_AC97_nACRESET_AF			(MFP_PIN_GPIO23_AF_AC97_RESET)
+
+#define MFP_AC97_SYSCLK				(MFP_PIN_GPIO24)
+#define MFP_AC97_SYSCLK_AF			(MFP_PIN_GPIO24_AF_AC97_SYSCLK)
+
+#define MFP_AC97_SDATA_IN_0			(MFP_PIN_GPIO25)
+#define MFP_AC97_SDATA_IN_0_AF			(MFP_PIN_GPIO25_AF_AC97_SDATA_IN_0)
+
+#define MFP_SSP_2_CLK				(MFP_PIN_GPIO25)
+#define MFP_SSP_2_CLK_AF			(MFP_PIN_GPIO25_AF_SSP2_SCLK)
+
+#define MFP_AC97_INT_N_GPIO			(MFP_PIN_GPIO26)
+#define MFP_AC97_INT_N_GPIO_AF			(MFP_PIN_GPIO26_AF_GPIO_26)
+
+#define MFP_SSP_2_FRM				(MFP_PIN_GPIO26)
+#define MFP_SSP_2_FRM_AF			(MFP_PIN_GPIO26_AF_SSP2_FRM)
+
+#define MFP_AC97_SDATA_OUT			(MFP_PIN_GPIO27)
+#define MFP_AC97_SDATA_OUT_AF			(MFP_PIN_GPIO27_AF_AC97_SDATA_OUT)
+
+#define MFP_SSP_2_TXD				(MFP_PIN_GPIO27)
+#define MFP_SSP_2_TXD_AF			(MFP_PIN_GPIO27_AF_SSP2_TXD)
+
+#define MFP_AC97_SYNC				(MFP_PIN_GPIO28)
+#define MFP_AC97_SYNC_AF			(MFP_PIN_GPIO28_AF_AC97_SYNC)
+
+#define MFP_SSP_2_RXD				(MFP_PIN_GPIO28)
+#define MFP_SSP_2_RXD_AF			(MFP_PIN_GPIO28_AF_SSP2_RXD)
+
+#define MFP_AC97_AC97_BITCLK			(MFP_PIN_GPIO29)
+#define MFP_AC97_AC97_BITCLK_AF			(MFP_PIN_GPIO29_AF_AC97_BITCLK)
+
+#define MFP_FFRXD				(MFP_PIN_GPIO30)
+#define MFP_FFRXD_AF				(MFP_PIN_GPIO30_AF_UART1_RXD)
+
+#define MFP_FFTXD				(MFP_PIN_GPIO31)
+#define MFP_FFTXD_AF				(MFP_PIN_GPIO31_AF_UART1_TXD)
+
+#define MFP_FFCTS				(MFP_PIN_GPIO32)
+#define MFP_FFCTS_AF				(MFP_PIN_GPIO32_AF_UART1_CTS)
+
+#define MFP_FFDCD				(MFP_PIN_GPIO33)
+#define MFP_FFDCD_AF				(MFP_PIN_GPIO33_AF_UART1_DCD)
+
+#define MFP_FFDSR				(MFP_PIN_GPIO34)
+#define MFP_FFDSR_AF				(MFP_PIN_GPIO34_AF_UART1_DSR)
+
+#define MFP_FFRI				(MFP_PIN_GPIO35)
+#define MFP_FFRI_AF				(MFP_PIN_GPIO35_AF_UART1_RI)
+
+#define MFP_FFDTR				(MFP_PIN_GPIO36)
+#define MFP_FFDTR_AF				(MFP_PIN_GPIO36_AF_UART1_DTR)
+
+#define MFP_FFRTS				(MFP_PIN_GPIO37)
+#define MFP_FFRTS_AF				(MFP_PIN_GPIO37_AF_UART1_RTS)
+
+#define MFP_U2D_UTM_CLK				(MFP_PIN_GPIO38)
+#define MFP_U2D_UTM_CLK_AF			(MFP_PIN_GPIO38_AF_UTM_CLK)
+
+#define MFP_CIF_DD_0				(MFP_PIN_GPIO39)
+#define MFP_CIF_DD_0_AF				(MFP_PIN_GPIO39_AF_CI_DD_0)
+
+#define MFP_U2D_DATA0				(MFP_PIN_GPIO39)
+#define MFP_U2D_DATA0_AF			(MFP_PIN_GPIO39_AF_U2D_PHYDATA_0)
+
+#define MFP_CIF_DD_1				(MFP_PIN_GPIO40)
+#define MFP_CIF_DD_1_AF				(MFP_PIN_GPIO40_AF_CI_DD_1)
+
+#define MFP_U2D_DATA1				(MFP_PIN_GPIO40)
+#define MFP_U2D_DATA1_AF			(MFP_PIN_GPIO40_AF_U2D_PHYDATA_1)
+
+#define MFP_CIF_DD_2				(MFP_PIN_GPIO41)
+#define MFP_CIF_DD_2_AF				(MFP_PIN_GPIO41_AF_CI_DD_2)
+
+#define MFP_U2D_DATA2				(MFP_PIN_GPIO41)
+#define MFP_U2D_DATA2_AF			(MFP_PIN_GPIO41_AF_U2D_PHYDATA_2)
+
+#define MFP_CIF_DD_3				(MFP_PIN_GPIO42)
+#define MFP_CIF_DD_3_AF				(MFP_PIN_GPIO42_AF_CI_DD_3)
+
+#define MFP_U2D_DATA3				(MFP_PIN_GPIO42)
+#define MFP_U2D_DATA3_AF			(MFP_PIN_GPIO42_AF_U2D_PHYDATA_3)
+
+#define MFP_CIF_DD_4				(MFP_PIN_GPIO43)
+#define MFP_CIF_DD_4_AF				(MFP_PIN_GPIO43_AF_CI_DD_4)
+
+#define MFP_U2D_DATA4				(MFP_PIN_GPIO43)
+#define MFP_U2D_DATA4_AF			(MFP_PIN_GPIO43_AF_U2D_PHYDATA_4)
+
+#define MFP_CIF_DD_5				(MFP_PIN_GPIO44)
+#define MFP_CIF_DD_5_AF				(MFP_PIN_GPIO44_AF_CI_DD_5)
+
+#define MFP_U2D_DATA5				(MFP_PIN_GPIO44)
+#define MFP_U2D_DATA5_AF			(MFP_PIN_GPIO44_AF_U2D_PHYDATA_5)
+
+#define MFP_CIF_DD_6				(MFP_PIN_GPIO45)
+#define MFP_CIF_DD_6_AF				(MFP_PIN_GPIO45_AF_CI_DD_6)
+
+#define MFP_U2D_DATA6				(MFP_PIN_GPIO45)
+#define MFP_U2D_DATA6_AF			(MFP_PIN_GPIO45_AF_U2D_PHYDATA_6)
+
+#define MFP_CIF_DD_7				(MFP_PIN_GPIO46)
+#define MFP_CIF_DD_7_AF				(MFP_PIN_GPIO46_AF_CI_DD_7)
+
+#define MFP_U2D_DATA7				(MFP_PIN_GPIO46)
+#define MFP_U2D_DATA7_AF			(MFP_PIN_GPIO46_AF_U2D_PHYDATA_7)
+
+#define MFP_CIF_DD_8				(MFP_PIN_GPIO47)
+#define MFP_CIF_DD_8_AF				(MFP_PIN_GPIO47_AF_CI_DD_8)
+
+#define MFP_U2D_RXACTIVE			(MFP_PIN_GPIO47)
+#define MFP_U2D_RXACTIVE_AF			(MFP_PIN_GPIO47_AF_UTM_RXACTIVE)
+
+#define MFP_CIF_DD_9				(MFP_PIN_GPIO48)
+#define MFP_CIF_DD_9_AF				(MFP_PIN_GPIO48_AF_CI_DD_9)
+
+#define MFP_U2D_RXVALID				(MFP_PIN_GPIO48)
+#define MFP_U2D_RXVALID_AF			(MFP_PIN_GPIO48_AF_UTM_RXVALID)
+
+#define MFP_CIF_MCLK				(MFP_PIN_GPIO49)
+#define MFP_CIF_MCLK_AF				(MFP_PIN_GPIO49_AF_CI_MCLK)
+
+#define MFP_CIF_PCLK				(MFP_PIN_GPIO50)
+#define MFP_CIF_PCLK_AF				(MFP_PIN_GPIO50_AF_CI_PCLK)
+
+#define MFP_U2D_RXERROR				(MFP_PIN_GPIO50)
+#define MFP_U2D_RXERROR_AF			(MFP_PIN_GPIO50_AF_UTM_RXERROR)
+
+#define MFP_CIF_HSYNC				(MFP_PIN_GPIO51)
+#define MFP_CIF_HSYNC_AF			(MFP_PIN_GPIO51_AF_CI_LV)
+
+#define MFP_U2D_OPMODE0				(MFP_PIN_GPIO51)
+#define MFP_U2D_OPMODE0_AF			(MFP_PIN_GPIO51_AF_UTM_OPMODE_PF_0)
+
+#define MFP_CIF_VSYNC				(MFP_PIN_GPIO52)
+#define MFP_CIF_VSYNC_AF			(MFP_PIN_GPIO52_AF_CI_FV)
+
+#define MFP_U2D_TXVALID				(MFP_PIN_GPIO52)
+#define MFP_U2D_TXVALID_AF			(MFP_PIN_GPIO52_AF_TXVALID)
+
+#define MFP_U2D_TXREADY				(MFP_PIN_GPIO53)
+#define MFP_U2D_TXREADY_AF			(MFP_PIN_GPIO53_AF_UTM_TXREADY)
+
+#define MFP_L_DD_0				(MFP_PIN_GPIO54)
+#define MFP_L_DD_0_AF				(MFP_PIN_GPIO54_AF_LCD_LDD_0)
+
+#define MFP_L_LP_DD_0				(MFP_PIN_GPIO54)
+#define MFP_L_LP_DD_0_AF			(MFP_PIN_GPIO54_AF_LCD_LDD_0)
+
+#define MFP_L_DD_1				(MFP_PIN_GPIO55)
+#define MFP_L_DD_1_AF				(MFP_PIN_GPIO55_AF_LCD_LDD_1)
+
+#define MFP_L_LP_DD_1				(MFP_PIN_GPIO55)
+#define MFP_L_LP_DD_1_AF			(MFP_PIN_GPIO55_AF_LCD_LDD_1)
+
+#define MFP_L_DD_2				(MFP_PIN_GPIO56)
+#define MFP_L_DD_2_AF				(MFP_PIN_GPIO56_AF_LCD_LDD_2)
+
+#define MFP_L_LP_DD_2				(MFP_PIN_GPIO56)
+#define MFP_L_LP_DD_2_AF			(MFP_PIN_GPIO56_AF_LCD_LDD_2)
+
+#define MFP_L_DD_3				(MFP_PIN_GPIO57)
+#define MFP_L_DD_3_AF				(MFP_PIN_GPIO57_AF_LCD_LDD_3)
+
+#define MFP_L_LP_DD_3				(MFP_PIN_GPIO57)
+#define MFP_L_LP_DD_3_AF			(MFP_PIN_GPIO57_AF_LCD_LDD_3)
+
+#define MFP_L_DD_4				(MFP_PIN_GPIO58)
+#define MFP_L_DD_4_AF				(MFP_PIN_GPIO58_AF_LCD_LDD_4)
+
+#define MFP_L_LP_DD_4				(MFP_PIN_GPIO58)
+#define MFP_L_LP_DD_4_AF			(MFP_PIN_GPIO58_AF_LCD_LDD_4)
+
+#define MFP_L_DD_5				(MFP_PIN_GPIO59)
+#define MFP_L_DD_5_AF				(MFP_PIN_GPIO59_AF_LCD_LDD_5)
+
+#define MFP_L_LP_DD_5				(MFP_PIN_GPIO59)
+#define MFP_L_LP_DD_5_AF			(MFP_PIN_GPIO59_AF_LCD_LDD_5)
+
+#define MFP_L_DD_6				(MFP_PIN_GPIO60)
+#define MFP_L_DD_6_AF				(MFP_PIN_GPIO60_AF_LCD_LDD_6)
+
+#define MFP_L_LP_DD_6				(MFP_PIN_GPIO60)
+#define MFP_L_LP_DD_6_AF			(MFP_PIN_GPIO60_AF_LCD_LDD_6)
+
+#define MFP_L_DD_7				(MFP_PIN_GPIO61)
+#define MFP_L_DD_7_AF				(MFP_PIN_GPIO61_AF_LCD_LDD_7)
+
+#define MFP_L_LP_DD_7				(MFP_PIN_GPIO61)
+#define MFP_L_LP_DD_7_AF			(MFP_PIN_GPIO61_AF_LCD_LDD_7)
+
+#define MFP_L_DD_8				(MFP_PIN_GPIO62)
+#define MFP_L_DD_8_AF				(MFP_PIN_GPIO62_AF_LCD_LDD_8)
+
+#define MFP_L_LP_DD_8				(MFP_PIN_GPIO62)
+#define MFP_L_LP_DD_8_AF			(MFP_PIN_GPIO62_AF_LCD_LDD_8)
+
+#define MFP_L_DD_9				(MFP_PIN_GPIO63)
+#define MFP_L_DD_9_AF				(MFP_PIN_GPIO63_AF_LCD_LDD_9)
+
+#define MFP_L_LP_DD_9				(MFP_PIN_GPIO63)
+#define MFP_L_LP_DD_9_AF			(MFP_PIN_GPIO63_AF_LCD_LDD_9)
+
+#define MFP_L_DD_10				(MFP_PIN_GPIO64)
+#define MFP_L_DD_10_AF				(MFP_PIN_GPIO64_AF_LCD_LDD_10)
+
+#define MFP_L_LP_DD_10				(MFP_PIN_GPIO64)
+#define MFP_L_LP_DD_10_AF			(MFP_PIN_GPIO64_AF_LCD_LDD_10)
+
+#define MFP_L_DD_11				(MFP_PIN_GPIO65)
+#define MFP_L_DD_11_AF				(MFP_PIN_GPIO65_AF_LCD_LDD_11)
+
+#define MFP_L_LP_DD_11				(MFP_PIN_GPIO65)
+#define MFP_L_LP_DD_11_AF			(MFP_PIN_GPIO65_AF_LCD_LDD_11)
+
+#define MFP_L_DD_12				(MFP_PIN_GPIO66)
+#define MFP_L_DD_12_AF				(MFP_PIN_GPIO66_AF_LCD_LDD_12)
+
+#define MFP_L_LP_DD_12				(MFP_PIN_GPIO66)
+#define MFP_L_LP_DD_12_AF			(MFP_PIN_GPIO66_AF_LCD_LDD_12)
+
+#define MFP_L_DD_13				(MFP_PIN_GPIO67)
+#define MFP_L_DD_13_AF				(MFP_PIN_GPIO67_AF_LCD_LDD_13)
+
+#define MFP_L_LP_DD_13				(MFP_PIN_GPIO67)
+#define MFP_L_LP_DD_13_AF			(MFP_PIN_GPIO67_AF_LCD_LDD_13)
+
+#define MFP_L_DD_14				(MFP_PIN_GPIO68)
+#define MFP_L_DD_14_AF				(MFP_PIN_GPIO68_AF_LCD_LDD_14)
+
+#define MFP_L_LP_DD_14				(MFP_PIN_GPIO68)
+#define MFP_L_LP_DD_14_AF			(MFP_PIN_GPIO68_AF_LCD_LDD_14)
+
+#define MFP_L_DD_15				(MFP_PIN_GPIO69)
+#define MFP_L_DD_15_AF				(MFP_PIN_GPIO69_AF_LCD_LDD_15)
+
+#define MFP_L_LP_DD_15				(MFP_PIN_GPIO69)
+#define MFP_L_LP_DD_15_AF			(MFP_PIN_GPIO69_AF_LCD_LDD_15)
+
+#define MFP_L_DD_16				(MFP_PIN_GPIO70)
+#define MFP_L_DD_16_AF				(MFP_PIN_GPIO70_AF_LCD_LDD_16)
+
+#define MFP_L_LP_DD_16				(MFP_PIN_GPIO70)
+#define MFP_L_LP_DD_16_AF			(MFP_PIN_GPIO70_AF_LCD_LDD_16)
+
+#define MFP_L_DD_17				(MFP_PIN_GPIO71)
+#define MFP_L_DD_17_AF				(MFP_PIN_GPIO71_AF_LCD_LDD_17)
+
+#define MFP_L_LP_DD_17				(MFP_PIN_GPIO71)
+#define MFP_L_LP_DD_17_AF			(MFP_PIN_GPIO71_AF_LCD_LDD_17)
+
+#define MFP_L_FCLK				(MFP_PIN_GPIO72)
+#define MFP_L_FCLK_AF				(MFP_PIN_GPIO72_AF_LCD_L_FCLK)
+
+#define MFP_L_LP_FCLK				(MFP_PIN_GPIO72)
+#define MFP_L_LP_FCLK_AF			(MFP_PIN_GPIO72_AF_LCD_L_FCLK)
+
+#define MFP_L_LCLK				(MFP_PIN_GPIO73)
+#define MFP_L_LCLK_AF				(MFP_PIN_GPIO73_AF_LCD_L_LCLK)
+
+#define MFP_L_LP_LCLK				(MFP_PIN_GPIO73)
+#define MFP_L_LP_LCLK_AF			(MFP_PIN_GPIO73_AF_LCD_L_LCLK)
+
+#define MFP_L_PCLK				(MFP_PIN_GPIO74)
+#define MFP_L_PCLK_AF				(MFP_PIN_GPIO74_AF_LCD_L_PCLK)
+
+#define MFP_L_LP_PCLK				(MFP_PIN_GPIO74)
+#define MFP_L_LP_PCLK_AF			(MFP_PIN_GPIO74_AF_LCD_L_PCLK)
+
+#define MFP_L_BIAS				(MFP_PIN_GPIO75)
+#define MFP_L_BIAS_AF				(MFP_PIN_GPIO75_AF_LCD_L_BIAS)
+
+#define MFP_L_LP_BIAS				(MFP_PIN_GPIO75)
+#define MFP_L_LP_BIAS_AF			(MFP_PIN_GPIO75_AF_LCD_L_BIAS)
+
+#define MFP_L_VSYNC				(MFP_PIN_GPIO76)
+#define MFP_L_VSYNC_AF				(MFP_PIN_GPIO76_AF_LCD_VSYNC)
+
+#define MFP_L_LP_VSYNC				(MFP_PIN_GPIO76)
+#define MFP_L_LP_VSYNC_AF			(MFP_PIN_GPIO76_AF_LCD_VSYNC)
+
+#define MFP_RSVD_MSL1_OB_DAT_0			(MFP_PIN_GPIO77)
+#define MFP_RSVD_MSL1_OB_DAT_0_AF		(MFP_PIN_GPIO77_AF_MSL_OB_DAT0)
+
+#define MFP_RSVD_MSL1_OB_CLK			(MFP_PIN_GPIO78)
+#define MFP_RSVD_MSL1_OB_CLK_AF			(MFP_PIN_GPIO78_AF_MSL_OB_CLK)
+
+#define MFP_RSVD_MSL1_OB_STB			(MFP_PIN_GPIO79)
+#define MFP_RSVD_MSL1_OB_STB_AF			(MFP_PIN_GPIO79_AF_MSL_OB_STB)
+
+#define MFP_RSVD_MSL1_OB_WAIT			(MFP_PIN_GPIO80)
+#define MFP_RSVD_MSL1_OB_WAIT_AF		(MFP_PIN_GPIO80_AF_MSL_OB_WAIT)
+
+#define MFP_RSVD_MSL1_IB_DAT_0			(MFP_PIN_GPIO81)
+#define MFP_RSVD_MSL1_IB_DAT_0_AF		(MFP_PIN_GPIO81_AF_MSL_IB_DAT0)
+
+#define MFP_RSVD_MSL1_IB_CLK			(MFP_PIN_GPIO82)
+#define MFP_RSVD_MSL1_IB_CLK_AF			(MFP_PIN_GPIO82_AF_MSL_IB_CLK)
+
+#define MFP_RSVD_MSL1_IB_STB			(MFP_PIN_GPIO83)
+#define MFP_RSVD_MSL1_IB_STB_AF			(MFP_PIN_GPIO83_AF_MSL_IB_STB)
+
+#define MFP_RSVD_MSL1_IB_WAIT			(MFP_PIN_GPIO84)
+#define MFP_RSVD_MSL1_IB_WAIT_AF		(MFP_PIN_GPIO84_AF_MSL_IB_WAIT)
+
+#define MFP_RSVD_MSL1_IB_DAT_1			(MFP_PIN_GPIO85)
+#define MFP_RSVD_MSL1_IB_DAT_1_AF		(MFP_PIN_GPIO85_AF_MSL_IB_DAT1)
+
+#define MFP_RSVD_MSL1_IB_DAT_2			(MFP_PIN_GPIO86)
+#define MFP_RSVD_MSL1_IB_DAT_2_AF		(MFP_PIN_GPIO86_AF_MSL_IB_DAT2)
+
+#define MFP_RSVD_MSL1_IB_DAT_3			(MFP_PIN_GPIO87)
+#define MFP_RSVD_MSL1_IB_DAT_3_AF		(MFP_PIN_GPIO87_AF_MSL_IB_DATA3)
+
+#define MFP_RSVD_MSL1_OB_DAT_1			(MFP_PIN_GPIO88)
+#define MFP_RSVD_MSL1_OB_DAT_1_AF		(MFP_PIN_GPIO88_AF_MSL_OB_DAT1)
+
+#define MFP_RSVD_MSL1_OB_DAT_2			(MFP_PIN_GPIO89)
+#define MFP_RSVD_MSL1_OB_DAT_2_AF		(MFP_PIN_GPIO89_AF_MSL_OB_DAT2)
+
+#define MFP_RSVD_MSL1_OB_DAT_3			(MFP_PIN_GPIO90)
+#define MFP_RSVD_MSL1_OB_DAT_3_AF		(MFP_PIN_GPIO90_AF_MSL_OB_DAT3)
+
+#define MFP_SSP_AUDIO_SCLK			(MFP_PIN_GPIO91)
+#define MFP_SSP_AUDIO_SCLK_AF			(MFP_PIN_GPIO91_AF_SSP3_SCLK)
+
+#define MFP_SSP_AUDIO_FRM			(MFP_PIN_GPIO92)
+#define MFP_SSP_AUDIO_FRM_AF			(MFP_PIN_GPIO92_AF_SSP3_FRM)
+
+#define MFP_SSP_AUDIO_TXD			(MFP_PIN_GPIO93)
+#define MFP_SSP_AUDIO_TXD_AF			(MFP_PIN_GPIO93_AF_SSP3_TXD)
+
+#define MFP_SSP_AUDIO_RXD			(MFP_PIN_GPIO94)
+#define MFP_SSP_AUDIO_RXD_AF			(MFP_PIN_GPIO94_AF_SSP3_RXD)
+
+#define MFP_RSVD_SSP_4_CLK			(MFP_PIN_GPIO95)
+#define MFP_RSVD_SSP_4_CLK_AF			(MFP_PIN_GPIO95_AF_SSP4_SCLK)
+
+#define MFP_RSVD_SSP_4_FRM			(MFP_PIN_GPIO96)
+#define MFP_RSVD_SSP_4_FRM_AF			(MFP_PIN_GPIO96_AF_SSP4_FRM)
+
+#define MFP_RSVD_SSP_4_TXD			(MFP_PIN_GPIO97)
+#define MFP_RSVD_SSP_4_TXD_AF			(MFP_PIN_GPIO97_AF_SSP4_TXD)
+
+#define MFP_RSVD_SSP_4_RXD			(MFP_PIN_GPIO98)
+#define MFP_RSVD_SSP_4_RXD_AF			(MFP_PIN_GPIO98_AF_SSP4_RXD)
+
+#define MFP_DEBUG_ETH_INT_GPIO			(MFP_PIN_GPIO99)
+#define MFP_DEBUG_ETH_INT_GPIO_AF		(MFP_PIN_GPIO99_AF_GPIO_99)
+
+#define	MFP_U2D_RESET				(MFP_PIN_GPIO100)
+#define	MFP_U2D_RESET_AF			(MFP_PIN_GPIO100_AF_U2D_RESET)
+
+#define MFP_U2D_XCVR_SELECT			(MFP_PIN_GPIO101)
+#define MFP_U2D_XCVR_SELECT_AF			(MFP_PIN_GPIO101_AF_U2D_XCVR_SELECT)
+
+#define MFP_U2D_TERM_SELECT			(MFP_PIN_GPIO102)
+#define MFP_U2D_TERM_SELECT_AF			(MFP_PIN_GPIO102_AF_U2D_TERM_SELECT)
+
+#define MFP_U2D_SUSPENDM_X			(MFP_PIN_GPIO103)
+#define MFP_U2D_SUSPENDM_X_AF			(MFP_PIN_GPIO103_AF_U2D_SUSPENDM_X)
+
+#define MFP_U2D_LINESTATE0			(MFP_PIN_GPIO104)
+#define MFP_U2D_LINESTATE0_AF			(MFP_PIN_GPIO104_AF_UTM_LINESTATE_0)
+
+#define MFP_U2D_LINESTATE1			(MFP_PIN_GPIO105)
+#define MFP_U2D_LINESTATE1_AF			(MFP_PIN_GPIO105_AF_UTM_LINESTATE_1)
+
+#define MFP_OTG_ID				(MFP_PIN_GPIO106)
+#define MFP_OTG_ID_AF				(MFP_PIN_GPIO106_AF_USB_P2_7)
+
+#define MFP_U2D_OPMODE1				(MFP_PIN_GPIO106)
+#define MFP_U2D_OPMODE1_AF			(MFP_PIN_GPIO106_AF_UTM_OPMODE_PF_1)
+
+#define MFP_KP_DKIN_0				(MFP_PIN_GPIO107)
+#define MFP_KP_DKIN_0_AF			(MFP_PIN_GPIO107_AF_KP_DKIN_0)
+
+#define MFP_KP_DKIN_1				(MFP_PIN_GPIO108)
+#define MFP_KP_DKIN_1_AF			(MFP_PIN_GPIO108_AF_KP_DKIN_1)
+
+#define MFP_STD_TXD				(MFP_PIN_GPIO109)
+#define MFP_STD_TXD_AF				(MFP_PIN_GPIO109_AF_UART3_TXD)
+
+#define MFP_STD_RXD				(MFP_PIN_GPIO110)
+#define MFP_STD_RXD_AF				(MFP_PIN_GPIO110_AF_UART3_RXD)
+
+#define MFP_RSVD_BT_RTS				(MFP_PIN_GPIO111)
+#define MFP_RSVD_BT_RTS_AF			(MFP_PIN_GPIO111_AF_UART2_RTS)
+
+#define MFP_RSVD_BT_RXD				(MFP_PIN_GPIO112)
+#define MFP_RSVD_BT_RXD_AF			(MFP_PIN_GPIO112_AF_UART2_RXD)
+
+#define MFP_RSVD_BT_TXD				(MFP_PIN_GPIO113)
+#define MFP_RSVD_BT_TXD_AF			(MFP_PIN_GPIO113_AF_UART2_TXD)
+
+#define MFP_RSVD_BT_CTS				(MFP_PIN_GPIO114)
+#define MFP_RSVD_BT_CTS_AF			(MFP_PIN_GPIO114_AF_UART2_CTS)
+
+#define MFP_KP_MKIN_0				(MFP_PIN_GPIO115)
+#define MFP_KP_MKIN_0_AF			(MFP_PIN_GPIO115_AF_KP_MKIN_0)
+
+#define MFP_KP_MKIN_1				(MFP_PIN_GPIO116)
+#define MFP_KP_MKIN_1_AF			(MFP_PIN_GPIO116_AF_KP_MKIN_1)
+
+#define MFP_KP_MKIN_2				(MFP_PIN_GPIO117)
+#define MFP_KP_MKIN_2_AF			(MFP_PIN_GPIO117_AF_KP_MKIN_2)
+
+#define MFP_KP_MKIN_3				(MFP_PIN_GPIO118)
+#define MFP_KP_MKIN_3_AF			(MFP_PIN_GPIO118_AF_KP_MKIN_3)
+
+#define MFP_KP_MKIN_4				(MFP_PIN_GPIO119)
+#define MFP_KP_MKIN_4_AF			(MFP_PIN_GPIO119_AF_KP_MKIN_4)
+
+#define MFP_KP_MKIN_5				(MFP_PIN_GPIO120)
+#define MFP_KP_MKIN_5_AF			(MFP_PIN_GPIO120_AF_KP_MKIN_5)
+
+#define MFP_KP_MKOUT_0				(MFP_PIN_GPIO121)
+#define MFP_KP_MKOUT_0_AF			(MFP_PIN_GPIO121_AF_KP_MKOUT_0)
+
+#define MFP_KP_MKOUT_1				(MFP_PIN_GPIO122)
+#define MFP_KP_MKOUT_1_AF			(MFP_PIN_GPIO122_AF_KP_MKOUT_1)
+
+#define MFP_KP_MKOUT_2				(MFP_PIN_GPIO123)
+#define MFP_KP_MKOUT_2_AF			(MFP_PIN_GPIO123_AF_KP_MKOUT_2)
+
+#define MFP_KP_MKOUT_3				(MFP_PIN_GPIO124)
+#define MFP_KP_MKOUT_3_AF			(MFP_PIN_GPIO124_AF_KP_MKOUT_3)
+
+#define MFP_KP_MKOUT_4				(MFP_PIN_GPIO125)
+#define MFP_KP_MKOUT_4_AF			(MFP_PIN_GPIO125_AF_KP_MKOUT_4)
+
+#define MFP_CAMERA_STROBE_EN_GPIO		(MFP_PIN_GPIO126)
+#define MFP_CAMERA_STROBE_EN_GPIO_AF		(MFP_PIN_GPIO126_AF_GPIO_126)
+
+#define MFP_L_CS				(MFP_PIN_GPIO127)
+#define MFP_L_CS_AF				(MFP_PIN_GPIO127_AF_LCD_nCS)
+
+#define MFP_USBHPEN				(MFP_PIN_GPIO0_2)
+#define MFP_USBHPEN_AF				(MFP_PIN_GPIO0_2_AF_UHC_USBHPEN_MVT)
+
+#define MFP_USBHPWR				(MFP_PIN_GPIO1_2)
+#define MFP_USBHPWR_AF				(MFP_PIN_GPIO1_2_AF_UHC_USBHPWR_MVT)
+
+#define MFP_KP_MKIN_6				(MFP_PIN_GPIO2_2)
+#define MFP_KP_MKIN_6_AF			(MFP_PIN_GPIO2_2_AF_KP_MKIN_6)
+
+#define MFP_KP_MKIN_7				(MFP_PIN_GPIO3_2)
+#define MFP_KP_MKIN_7_AF			(MFP_PIN_GPIO3_2_AF_KP_MKIN_7)
+
+#define MFP_KP_MKOUT_5				(MFP_PIN_GPIO4_2)
+#define MFP_KP_MKOUT_5_AF			(MFP_PIN_GPIO4_2_AF_KP_MK0UT_5)
+
+#define MFP_KP_MKOUT_6				(MFP_PIN_GPIO5_2)
+#define MFP_KP_MKOUT_6_AF			(MFP_PIN_GPIO5_2_AF_KP_MKOUT_6)
+
+#define MFP_KP_MKOUT_7				(MFP_PIN_GPIO6_2)
+#define MFP_KP_MKOUT_7_AF			(MFP_PIN_GPIO6_2_AF_MK_MKOUT_7)
+
+#define MFP_MMC_CD_0_GPIO			(MFP_PIN_GPIO128)
+#define MFP_MMC_CD_0_GPIO_AF			(MFP_PIN_GPIO128_GPIO_128)
+
+#define MFP_MMC_CD_1_GPIO			(MFP_PIN_GPIO129)
+#define MFP_MMC_CD_1_GPIO_AF			(MFP_PIN_GPIO129_GPIO_129)
+
+#define MFP_MMC_WP_0_N_GPIO			(MFP_PIN_GPIO130)
+#define MFP_MMC_WP_0_N_GPIO_AF			(MFP_PIN_GPIO130_GPIO_130)
+
+#define MFP_MMC_WP_1_N_GPIO			(MFP_PIN_GPIO131)
+#define MFP_MMC_WP_1_N_GPIO_AF			(MFP_PIN_GPIO131_GPIO_131)
+
+#define MFP_PHONE_FLIPPED_GPIO			(MFP_PIN_GPIO132)
+#define MFP_PHONE_FLIPPED_GPIO_AF		(MFP_PIN_GPIO132_GPIO_132)
+
+#define MFP_PHONE_CLOSED_GPIO			(MFP_PIN_GPIO133)
+#define MFP_PHONE_CLOSED_GPIO_AF		(MFP_PIN_GPIO133_GPIO_133)
+
+#define MFP_USB2_DETECT				(MFP_PIN_GPIO134)
+#define MFP_USB2_DETECT_AF			(MFP_PIN_GPIO134_GPIO_134)
+
+#define MFP_CFCD_GPIO				(MFP_PIN_GPIO135)
+#define MFP_CFCD_GPIO_AF			(MFP_PIN_GPIO135_GPIO_135)
+
+#define MFP_CAMERA_LIGHT_EN_GPIO		(MFP_PIN_GPIO136)
+#define MFP_CAMERA_LIGHT_EN_GPIO_AF		(MFP_PIN_GPIO136_GPIO_136)
+
+#define MFP_IR_SHDN_N_GPIO			(MFP_PIN_GPIO137)
+#define MFP_IR_SHDN_N_GPIO_AF			(MFP_PIN_GPIO137_GPIO_137)
+
+#define MFP_CIF_HI_PWDN_GPI0			(MFP_PIN_GPIO138)
+#define MFP_CIF_HI_PWDN_GPI0_AF			(MFP_PIN_GPIO138_GPIO_138)
+
+#define MFP_CIF_LO_PWDN_GPI0			(MFP_PIN_GPIO139)
+#define MFP_CIF_LO_PWDN_GPI0_AF			(MFP_PIN_GPIO139_GPIO_139)
+
+#define	MFP_UTMI_TEST_EN			(MFP_PIN_GPIO140)
+#define	MFP_UTMI_TEST_EN_AF			(MFP_PIN_GPIO140_GPIO_140)
+
+#define	MFP_UTMI_SWITCH				(MFP_PIN_GPIO141)
+#define	MFP_UTMI_SWITCH_AF			(MFP_PIN_GPIO141_GPIO_141)
+
+#define	MFP_OTG_EN				(MFP_PIN_GPIO142)
+#define	MFP_OTG_EN_AF				(MFP_PIN_GPIO142_GPIO_142)
+
+#define	MFP_USB_OTG_SR				(MFP_PIN_GPIO143)
+#define	MFP_USB_OTG_SR_AF			(MFP_PIN_GPIO143_GPIO_143)
+
+#define MFP_ND_CLE				(MFP_PIN_CLE_nOE)
+#define MFP_ND_CLE_AF				(MFP_PIN_DF_CLE_AF_ND_CLE)
+
+#define MFP_DF_ALE				(MFP_PIN_DF_ALE_nWE)
+#define MFP_DF_ALE_AF				(MFP_PIN_DF_ALE_nWE1_AF_ND_ALE)
+
+#define MFP_DF_NCS1				(MFP_PIN_DF_nCS1)
+#define MFP_DF_NCS1_AF				(MFP_PIN_DF_nCS1_AF_DF_nCS1)
+
+#define MFP_DF_SCLK_E				(MFP_PIN_DF_SCLK_E)
+#define MFP_DF_SCLK_E_AF			(MFP_PIN_DF_SCLK_E_AF_DF_SCLK_E)
+
+#define MFP_DF_SCLK_S				(MFP_PIN_DF_SCLK_S)
+#define MFP_DF_SCLK_S_AF			(MFP_PIN_DF_SCLK_S_AF_DF_SCLK_S)
+
+#define MFP_DEBUG_ETH_nBE0			(MFP_PIN_nBE0)
+#define MFP_DEBUG_ETH_nBE0_AF			(MFP_PIN_nBE0_AF_DF_nBE0)
+
+#define MFP_DEBUG_ETH_nBE1			(MFP_PIN_nBE1)
+#define MFP_DEBUG_ETH_nBE1_AF			(MFP_PIN_nBE1_AF_DF_nBE1)
+
+#define MFP_DF_INT_RnB				(MFP_PIN_DF_INT_RnB)
+#define MFP_DF_INT_RnB_AF			(MFP_PIN_DF_INT_RnB_AF_INT_RnB)
+
+#define MFP_nLLA				(MFP_PIN_nLLA)
+#define MFP_nLLA_AF				(MFP_PIN_DF_nLLA_AF_DF_nLLA)
+
+#define MFP_nLUA				(MFP_PIN_nLUA)
+#define MFP_nLUA_AF				(MFP_PIN_DF_nLUA_AF_DF_nLUA)
+
+#define MFP_DF_nWE				(MFP_PIN_DF_nWE)
+#define MFP_DF_nWE_AF				(MFP_PIN_DF_nWE_AF_ND_WE)
+
+#define MFP_DF_nOE				(MFP_PIN_DF_nRE_nOE)
+#define MFP_DF_nOE_AF				(MFP_PIN_DF_nRE_AF_CD_OE)
+
+#define MFP_DF_nRE				(MFP_PIN_DF_nRE)
+#define MFP_DF_nRE_AF				(MFP_PIN_DF_nRE_AF_ND_RE)
+
+#define MFP_RSVD_DF_ADDR0			(MFP_PIN_DF_ADDR0)
+#define MFP_RSVD_DF_ADDR0_AF			(MFP_PIN_DF_ADDR0_AF_DF_ADDR0)
+
+#define MFP_RSVD_DF_ADDR1			(MFP_PIN_DF_ADDR1)
+#define MFP_RSVD_DF_ADDR1_AF			(MFP_PIN_DF_ADDR1_AF_DF_ADDR1)
+
+#define MFP_RSVD_DF_ADDR2			(MFP_PIN_DF_ADDR2)
+#define MFP_RSVD_DF_ADDR2_AF			(MFP_PIN_DF_ADDR2_AF_DF_ADDR2)
+
+#define MFP_RSVD_DF_ADDR3			(MFP_PIN_DF_ADDR3)
+#define MFP_RSVD_DF_ADDR3_AF			(MFP_PIN_DF_ADDR3_AF_DF_ADDR3)
+
+#define MFP_DF_IO_0				(MFP_PIN_DF_IO0)
+#define MFP_DF_IO_0_AF				(MFP_PIN_DF_IO_0_AF_ND)
+
+#define MFP_DF_IO_1				(MFP_PIN_DF_IO1)
+#define MFP_DF_IO_1_AF				(MFP_PIN_DF_IO_1_AF_ND)
+
+#define MFP_DF_IO_2				(MFP_PIN_DF_IO2)
+#define MFP_DF_IO_2_AF				(MFP_PIN_DF_IO_2_AF_ND)
+
+#define MFP_DF_IO_3				(MFP_PIN_DF_IO3)
+#define MFP_DF_IO_3_AF				(MFP_PIN_DF_IO_3_AF_ND)
+
+#define MFP_DF_IO_4				(MFP_PIN_DF_IO4)
+#define MFP_DF_IO_4_AF				(MFP_PIN_DF_IO_4_AF_ND)
+
+#define MFP_DF_IO_5				(MFP_PIN_DF_IO5)
+#define MFP_DF_IO_5_AF				(MFP_PIN_DF_IO_5_AF_ND)
+
+#define MFP_DF_IO_6				(MFP_PIN_DF_IO6)
+#define MFP_DF_IO_6_AF				(MFP_PIN_DF_IO_6_AF_ND)
+
+#define MFP_DF_IO_7				(MFP_PIN_DF_IO7)
+#define MFP_DF_IO_7_AF				(MFP_PIN_DF_IO_7_AF_ND)
+
+#define MFP_DF_IO_8				(MFP_PIN_DF_IO8)
+#define MFP_DF_IO_8_AF				(MFP_PIN_DF_IO_8_AF_ND)
+
+#define MFP_DF_IO_9				(MFP_PIN_DF_IO9)
+#define MFP_DF_IO_9_AF				(MFP_PIN_DF_IO_9_AF_ND)
+
+#define MFP_DF_IO_10				(MFP_PIN_DF_IO10)
+#define MFP_DF_IO_10_AF				(MFP_PIN_DF_IO_10_AF_ND)
+
+#define MFP_DF_IO_11				(MFP_PIN_DF_IO11)
+#define MFP_DF_IO_11_AF				(MFP_PIN_DF_IO_11_AF_ND)
+
+#define MFP_DF_IO_12				(MFP_PIN_DF_IO12)
+#define MFP_DF_IO_12_AF				(MFP_PIN_DF_IO_12_AF_ND)
+
+#define MFP_DF_IO_13				(MFP_PIN_DF_IO13)
+#define MFP_DF_IO_13_AF				(MFP_PIN_DF_IO_13_AF_ND)
+
+#define MFP_DF_IO_14				(MFP_PIN_DF_IO14)
+#define MFP_DF_IO_14_AF				(MFP_PIN_DF_IO_14_AF_ND)
+
+#define MFP_DF_IO_15				(MFP_PIN_DF_IO15)
+#define MFP_DF_IO_15_AF				(MFP_PIN_DF_IO_15_AF_ND)
+
+#define MFP_DF_nADV1				(MFP_PIN_DF_ALE_nWE)
+#define MFP_DF_nADV1_AF				(MFP_PIN_DF_ALE_nWE1_AF_ND_ALE)
+
+#define MFP_DF_NCS0				(MFP_PIN_DF_nCS0)
+#define MFP_DF_NCS0_AF				(MFP_PIN_DF_nCS0_AF_ND_nCS0)
+
+#define MFP_RSVD_DF_NCS1			(MFP_PIN_DF_nCS1)
+#define MFP_RSVD_DF_NCS1_AF			(MFP_PIN_DF_nCS1_AF_ND_nCS1)
+
+#define MFP_SIR_TXD				(MFP_STD_TXD)
+#define MFP_SIR_TXD_AF				(MFP_STD_TXD_AF)
+
+#define MFP_SIR_RXD				(MFP_STD_RXD)
+#define MFP_SIR_RXD_AF				(MFP_STD_RXD_AF)
+
+/*
+ End of Platform MFP Values for Each Pin
+
+
+ Beginning of Platform Drive Strength Values
+
+
+
+ Note: The actual best values for the Zylonite platform are not known.
+       These values are based on silicon team estimates for certain
+       voltages in ideal circumstances and the known voltage domains
+       on the Zylonite.
+*/
+
+#define MFP_DEFAULT_DS			(MFP_DS03X)
+#define MFP_USB2_DS			(MFP_DS08X)
+#define MFP_CIF_DS			(MFP_DS04X)
+#define MFP_LCD_DS			(MFP_DS04X)
+#define MFP_SSP_DS			(MFP_DS04X)
+#define MFP_MSL_DEFAULT_DS		(MFP_DS04X) //3.0V: 3 pins
+#define MFP_MSL_SPECIAL_DS		(MFP_DS08X) //1.8V: 1 pin
+#define MFP_ND_DATA_DS			(MFP_DS08X)
+#define MFP_ND_NON_DATA_DS		(MFP_DS10X)
+#define MFP_AC97_DS			(MFP_DS04X)
+
+#define ZYLONITE_ETH_PHYS	0x14000000
+/* CF SOCKET CARD STATE */
+#define CF_UNKNOW		0
+#define CF_IO_MEM_MOD		1
+#define CF_TRUE_IDE_MOD	2
+#define CF_SOCKET_SW1_REG	(*(volatile long *)(0xf5200004))
+#define CF_SOCKET_STATE()	( (CF_SOCKET_SW1_REG & 0x10) ? CF_IO_MEM_MOD : CF_TRUE_IDE_MOD)
+#endif
+
+void enable_eth_pins(void);
+void enable_i2c_pins(void);
+void enable_dfc_pins(void);
+void enable_lcd_pins(void);
+void enable_cif_pins(void);
+void enable_keyp_pins(void);
+void enable_ac97_pins(void);
+void enable_mmc1_pins(void);
+void enable_mmc2_pins(void);
+void enable_ffuart_pins(void);
+void enable_btuart_pins(void);
+void enable_stuart_pins(void);
+void enable_u2d_pins(void);
+
+void enable_1w_pins(void);
+void enable_otg_pins(void);
+void enable_ssp3_pins(void);
+void enable_true_ide_pins(void);
+void enable_usbh_pins(void);
Index: linux-2.6.10/mvl_patches/pro-1408.c
===================================================================
--- /dev/null
+++ linux-2.6.10/mvl_patches/pro-1408.c
@@ -0,0 +1,16 @@
+/*
+ * Author: MontaVista Software, Inc. <source@mvista.com>
+ *
+ * 2007 (c) MontaVista Software, Inc. This file is licensed under
+ * the terms of the GNU General Public License version 2. This program
+ * is licensed "as is" without any warranty of any kind, whether express
+ * or implied.
+ */
+#include <linux/init.h>
+#include <linux/mvl_patch.h>
+
+static __init int regpatch(void)
+{
+        return mvl_register_patch(1408);
+}
+module_init(regpatch);
EOF

    rv=0
    cat /tmp/mvl_patch_$$
    if [ "$?" != "0" ]; then
	# Patch had a hard error, return 2
	rv=2
    elif grep '^Hunk' ${TMPFILE}; then
	rv=1
    fi

    rm -f ${TMPFILE}
    return $rv
}

function options() {
    echo "Options are:"
    echo "  --force-unsupported - Force the patch to be applied even if the"
    echo "      patch is out of order or the current kernel is unsupported."
    echo "      Use of this option is strongly discouraged."
    echo "  --force-apply-fuzz - If the patch has fuzz, go ahead and apply"
    echo "      it anyway.  This can occur if the patch is applied to an"
    echo "      unsupported kernel or applied out of order or if you have"
    echo "      made your own modifications to the kernel.  Use with"
    echo "      caution."
    echo "  --remove - Remove the patch"
}


function checkpatchnum() {
    local level;

    if [ ! -e ${1} ]; then
	echo "${1} does not exist, make sure you are in the kernel" 1>&2
	echo "base directory" 1>&2
	exit 1;
    fi

    # Extract the current patch number from the lsp info file.
    level=`grep '#define LSP_.*PATCH_LEVEL' ${1} | sed 's/^.*\"\\(.*\\)\".*\$/\\1/'`
    if [ "a$level" = "a" ]; then
	echo "No patch level defined in ${1}, are you sure this is" 1>&2
	echo "a valid MVL kernel LSP?" 1>&2
	exit 1;
    fi

    expr $level + 0 >/dev/null 2>&1
    isnum=$?

    # Check if the kernel is supported
    if [ "$level" = "unsupported" ]; then
	echo "**Current kernel is unsupported by MontaVista due to patches"
	echo "  begin applied out of order."
	if [ $force_unsupported == 't' ]; then
	    echo "  Application is forced, applying patch anyway"
	    unsupported=t
	    fix_patch_level=f
	else
	    echo "  Patch application aborted.  Use --force-unsupported to"
	    echo "  force the patch to be applied, but the kernel will not"
	    echo "  be supported by MontaVista."
	    exit 1;
	fi

    # Check the patch number from the lspinfo file to make sure it is
    # a valid number
    elif [ $isnum = 2 ]; then
	echo "**Patch level from ${1} was not a valid number, " 1>&2
	echo "  are you sure this is a valid MVL kernel LSP?" 1>&2
	exit 1;

    # Check that this is the right patch number to be applied.
    elif [ `expr $level $3` ${4} ${2} ]; then
	echo "**Application of this patch is out of order and will cause the"
	echo "  kernel to be unsupported by MontaVista."
	if [ $force_unsupported == 't' ]; then
	    echo "  application is forced, applying patch anyway"
	    unsupported=t
	else
	    echo "  Patch application aborted.  Please get all the patches in"
	    echo "  proper order from MontaVista Zone and apply them in order"
	    echo "  If you really want to apply this patch, use"
	    echo "  --force-unsupported to force the patch to be applied, but"
	    echo "  the kernel will not be supported by MontaVista."
	    exit 1;
	fi
    fi
}

#
# Update the patch level in the file.  Note that we use patch to do
# this.  Certain weak version control systems don't take kindly to
# arbitrary changes directly to files, but do have a special version
# of "patch" that understands this.
#
function setpatchnum() {
    sed "s/^#define LSP_\(.*\)PATCH_LEVEL[ \t*]\"[0-9]*\".*$/#define LSP_\1PATCH_LEVEL \"${2}\"/" <${1} >/tmp/$$.tmp1
    diff -u ${1} /tmp/$$.tmp1 >/tmp/$$.tmp2
    rm /tmp/$$.tmp1
    sed "s/^+++ \/tmp\/$$.tmp1/+++ include\/linux\/lsppatchlevel.h/" </tmp/$$.tmp2 >/tmp/$$.tmp1
    rm /tmp/$$.tmp2
    patch -p0 </tmp/$$.tmp1
    rm /tmp/$$.tmp1
}

force_unsupported=f
force_apply_fuzz=""
unsupported=f
fix_patch_level=t
reverse=f
common_patchnum_diff='+ 1'
common_patchnum=$PATCHNUM
patch_extraopts=''

# Extract command line parameters.
while [ $# -gt 0 ]; do
    if [ "a$1" == 'a--force-unsupported' ]; then
	force_unsupported=t
    elif [ "a$1" == 'a--force-apply-fuzz' ]; then
	force_apply_fuzz=y
    elif [ "a$1" == 'a--remove' ]; then
	reverse=t
	common_patchnum_diff=''
	common_patchnum=`expr $PATCHNUM - 1`
	patch_extraopts='--reverse'
    else
	echo "'$1' is an invalid command line parameter."
	options
	exit 1
    fi
    shift
done

echo "Checking patch level"
checkpatchnum ${LSPINFO} ${PATCHNUM} "${common_patchnum_diff}" "-ne"

if ! dopatch -p1 --dry-run --force $patch_extraopts; then
    if [ $? = 2 ]; then
	echo -n "**Patch had errors, application aborted" 1>&2
	exit 1;
    fi

    # Patch has warnings
    clean_apply=${force_apply_fuzz}
    while [ "a$clean_apply" != 'ay' -a "a$clean_apply" != 'an' ]; do
	echo -n "**Patch did not apply cleanly.  Do you still want to apply? (y/n) > "
	read clean_apply
	clean_apply=`echo "$clean_apply" | tr '[:upper:]' '[:lower:]'`
    done
    if [ $clean_apply = 'n' ]; then
	exit 1;
    fi
fi

dopatch -p1 --force $patch_extraopts

if [ $fix_patch_level = 't' ]; then 
    if [ $unsupported = 't' ]; then
	common_patchnum="unsupported"
    fi

    setpatchnum ${LSPINFO} ${common_patchnum}
fi

# Move the patch file into the mvl_patches directory if we are not reversing
if [ $reverse != 't' ]; then 
    if echo $0 | grep '/' >/dev/null; then
	# Filename is a path, either absolute or from the current directory.
	srcfile=$0
    else
	# Filename is from the path
	for i in `echo $PATH | tr ':;' '  '`; do
	    if [ -e ${i}/$0 ]; then
		srcfile=${i}/$0
	    fi
	done
    fi

    fname=`basename ${srcfile}`
    diff -uN mvl_patches/${fname} ${srcfile} | (cd mvl_patches; patch)
fi

